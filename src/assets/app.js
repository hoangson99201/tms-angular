(() => {
  var e,
    t,
    s,
    i,
    o = {
      11478: (e, t, s) => {
        "use strict";
        s.d(t, { d: () => o });
        var i = s(15612);
        class o {
          static getThirdpartyMarkByIssueTargetType(e, t = "") {
            if ("avatar" == t || "small" == t)
              switch (e) {
                case i.g.IssueTargetsGitHub:
                  return "images/thirdparty/avatars/github.svg";
                case i.g.IssueTargetsGitLab:
                  return "images/thirdparty/avatars/gitlab.svg";
                case i.g.IssueTargetsJira:
                  return "images/thirdparty/avatars/jira.svg";
                default:
                  return "images/thirdparty/avatars/default.svg";
              }
            else
              switch (e) {
                case i.g.IssueTargetsGitHub:
                  return "images/thirdparty/marks/github.svg";
                case i.g.IssueTargetsGitLab:
                  return "images/thirdparty/marks/gitlab.svg";
                case i.g.IssueTargetsJira:
                  return "images/thirdparty/marks/jira.svg";
                default:
                  return "images/thirdparty/marks/default.svg";
              }
          }
        }
      },
      58649: (e, t, s) => {
        "use strict";
        var i = s(19755),
          o = s.n(i),
          n = s(96486),
          r = s.n(n),
          a = s(5270),
          l = s(43689),
          d = s(96622);
        (window.jQuery = o()),
          (window.$ = o()),
          (window._ = r()),
          s(67827),
          a.Z.start(),
          (window.appInstance = a.Z),
          (window.Marketing = class {
            static replaceTextLineWithPlaceholder(e, t = "") {
              $(e).each((e, s) => {
                let i = $(s),
                  o = i.width();
                i.addClass("marketing-text-placeholder-line"),
                  i.addClass(`marketing-text-placeholder-line--${t}`),
                  i.append(
                    `<div class="marketing-text-placeholder-line__placeholder\n                marketing-text-placeholder-line__placeholder--${t}"\n                style="width: ${o}px;"><div>`
                  );
              });
            }
            static replaceBlockContentWithPlaceholder(e, t, s = "") {
              $(e).each((e, i) => {
                let o = $(i);
                o.empty(),
                  o.addClass("marketing-text-placeholder-block"),
                  o.addClass(`marketing-text-placeholder-block--${s}`);
                for (let e = 0; e < t; e++) {
                  let s = $(
                    '<div class="marketing-text-placeholder-block__line"></div>'
                  );
                  o.append(s),
                    e == t - 1
                      ? s.css({ width: l.Z.random(70, 80) + "%" })
                      : s.css({ width: l.Z.random(80, 90) + "%" });
                }
              });
            }
            static replaceTextParagraphsWithPlaceholder(e, t = "") {
              $(e).each((e, s) => {
                let i = $(s);
                i.addClass("marketing-text-placeholder-paragraphs"),
                  i.addClass(`marketing-text-placeholder-paragraphs-${t}`);
                let o = $("p", i);
                o.each((e, s) => {
                  let i = $(s);
                  "wide" == t
                    ? e == o.length - 1
                      ? i.css({ width: l.Z.random(85, 90) + "%" })
                      : i.css({ width: l.Z.random(92, 100) + "%" })
                    : e == o.length - 1
                    ? i.css({ width: l.Z.random(70, 80) + "%" })
                    : i.css({ width: l.Z.random(80, 90) + "%" });
                });
              });
            }
            static replaceRichTextWithPlaceholder(e, t = "") {
              $(e).each((e, s) => {
                let i = $(s);
                i.addClass("marketing-text-placeholder-rich-text"),
                  i.addClass(`marketing-text-placeholder-rich-text-${t}`);
                let o = $("p, h1, h2, h3, h4", i);
                o.each((e, s) => {
                  let i = $(s);
                  "wide" == t
                    ? e == o.length - 1
                      ? i.css({ width: l.Z.random(85, 90) + "%" })
                      : i.css({ width: l.Z.random(92, 100) + "%" })
                    : e == o.length - 1
                    ? i.css({ width: l.Z.random(70, 80) + "%" })
                    : i.css({ width: l.Z.random(80, 90) + "%" });
                });
              });
            }
            static getSelectorPosition(e) {
              let t = $(e),
                s = t.offset(),
                i = t.outerWidth(),
                o = t.outerHeight(),
                n = $(window).scrollTop(),
                r = $(window).scrollLeft();
              return {
                width: i,
                height: o,
                top: s.top,
                left: s.left,
                windowTop: s.top - n,
                windowLeft: s.left - r,
              };
            }
          }),
          (window.Dusk = class {
            static getDropdownItems(e) {
              return d.UI.getDropdownItems($(e));
            }
          });
      },
      5270: (e, t, s) => {
        "use strict";
        s.d(t, { Z: () => A });
        var i = s(47914),
          o = s(43689);
        class n {
          constructor() {
            (this.localStorageAvailable = this.tryLocalStorage()),
              this.localStorageAvailable &&
                (this.storage = window.localStorage);
          }
          tryLocalStorage() {
            try {
              var e = window.localStorage,
                t = i.X.StorageNamespace + "__storage_test__";
              return e.setItem(t, t), e.removeItem(t), !0;
            } catch (e) {}
            return !1;
          }
          setItem(e, t) {
            this.localStorageAvailable &&
              this.storage.setItem(i.X.StorageNamespace + e, t);
          }
          setBoolItem(e, t) {
            this.setItem(e, t ? "1" : "0");
          }
          getItem(e, t = !1) {
            if (this.localStorageAvailable) {
              let s = this.storage.getItem(i.X.StorageNamespace + e);
              return null === s ? t : s;
            }
            return t;
          }
          getBoolItem(e, t = !1) {
            let s = this.getItem(e, t);
            return "1" === s || "true" === s || !0 === s;
          }
          removeItem(e) {
            this.localStorageAvailable &&
              this.storage.removeItem(i.X.StorageNamespace + e);
          }
          clear() {
            if (this.localStorageAvailable) return this.storage.clear();
          }
        }
        class r {
          getCookieObject(e) {
            let t = this.getCookie(e) || null;
            try {
              return JSON.parse(t);
            } catch {
              return null;
            }
          }
          setCookieObject(e, t) {
            this.setCookie(e, JSON.stringify(t));
          }
          getCookie(e) {
            let t = ("; " + document.cookie).split(
              "; " + i.X.CookieNamespace + e + "="
            );
            if (2 == t.length) return t.pop().split(";").shift();
          }
          setCookie(e, t) {
            document.cookie = `${
              i.X.CookieNamespace + e
            }=${t};path=/;max-age=157680000;samesite=lax`;
          }
        }
        var a = s(11802),
          l = s(2043),
          d = s.n(l);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c {
          constructor() {
            h(this, "defaults", {
              data: null,
              hideOnESC: !1,
              onHide: null,
              onKeyDown: null,
              dialog: !1,
              rootNode: null,
              leakKeys: !1,
            }),
              h(this, "classes", {
                bodyHiddenOverflow: "body--hidden-overflow",
              }),
              h(this, "selectors", {
                tabIndexDisabled: '[tabindex="-1"]',
                tabbableElements:
                  'a[href], object, [tabindex]:not([tabindex="-1"]), .ck-editor__editable',
                tabbableInputs: "input, select, textarea, button",
                visible: ":visible",
                enabled: ":enabled",
                focused: ":focus",
              }),
              h(this, "doKeyDown", (e) => {
                if (
                  ((e.isInitial = !(e.which in this.activeKeys)),
                  (this.activeKeys[e.which] = !0),
                  A.getBlocking())
                )
                  return;
                let t = this.getActiveLayer();
                if (t) {
                  if (t.hideOnESC && t.onHide && e.which == a.N.ESC)
                    t.onHide(t);
                  else if (t.leakKeys) {
                    let e = this.getActiveParentLayer();
                    e && (t = e);
                  }
                  if (t.onKeyDown && t.onKeyDown(t, e)) return;
                }
                if (this.activeDialog && e.which == a.N.Tab) {
                  let t = $(this.selectors.focused),
                    s = $(
                      this.selectors.tabbableInputs,
                      this.activeDialog.rootNode
                    )
                      .filter(this.selectors.enabled)
                      .not(this.selectors.tabIndexDisabled),
                    i = $(
                      this.selectors.tabbableElements,
                      this.activeDialog.rootNode
                    )
                      .not(this.selectors.tabIndexDisabled)
                      .add(s);
                  (i = i.filter(this.selectors.visible)),
                    e.shiftKey
                      ? (!t.is(i.first()) && i.is(t)) ||
                        (e.preventDefault(), i.last().focus())
                      : (!t.is(i.last()) && i.is(t)) ||
                        (e.preventDefault(), i.first().focus());
                }
              }),
              h(this, "doKeyUp", (e) => {
                e.which in this.activeKeys && delete this.activeKeys[e.which];
              }),
              this.initialize();
          }
          initialize() {
            (this.layers = []),
              (this.dialogs = 0),
              (this.activeDialog = null),
              (this.activeKeys = {});
          }
          registerEvents() {
            d().info("layers: Registering key event");
            let e = $(document);
            e.on("keydown", this.doKeyDown), e.on("keyup", this.doKeyUp);
          }
          unregisterEvents() {
            d().info("layers: Unregistering layer key event");
            let e = $(document);
            e.off("keydown", this.doKeyDown), e.off("keyup", this.doKeyUp);
          }
          getActiveLayer() {
            return _.last(this.layers);
          }
          getActiveParentLayer() {
            if (this.layers.length >= 2) return this.layers.slice(-2, -1)[0];
          }
          getActiveDialog() {
            return this.activeDialog;
          }
          hasActiveDialog() {
            return !!this.activeDialog;
          }
          clear() {
            this.initialize();
          }
          add(e = {}) {
            d().info("layers: Adding layer", e);
            var t = {};
            return (
              _.defaults(t, e, this.defaults),
              this.layers.push(t),
              t.dialog &&
                (this.dialogs++,
                1 == this.dialogs &&
                  $(document.body).addClass(this.classes.bodyHiddenOverflow),
                (this.activeDialog = t),
                $(this.activeDialog.rootNode).focus()),
              1 == this.layers.length && this.registerEvents(),
              t
            );
          }
          remove(e) {
            d().info("layers: Removing layer", e),
              _.pull(this.layers, e),
              e.dialog &&
                (1 == this.dialogs &&
                  $(document.body).removeClass(this.classes.bodyHiddenOverflow),
                this.dialogs--,
                (this.activeDialog = null),
                _.forEachRight(this.layers, (e) => {
                  if (e.dialog)
                    return (
                      (this.activeDialog = e),
                      $(this.activeDialog.rootNode).focus(),
                      !1
                    );
                })),
              0 == this.layers.length && this.unregisterEvents();
          }
        }
        class u {
          constructor() {
            var e;
            (e = "startIndex") in this
              ? Object.defineProperty(this, e, {
                  value: 100,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (this[e] = 100),
              this.initialize();
          }
          initialize() {
            this.zindexes = [];
          }
          register() {
            let e,
              t = _.last(this.zindexes);
            return (e = t ? t + 1 : this.startIndex), this.zindexes.push(e), e;
          }
          unregister(e) {
            _.pull(this.zindexes, e);
          }
          clear() {
            this.initialize();
          }
        }
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p {
          constructor() {
            g(this, "defaults", { onPaste: null }),
              g(this, "selectors", {
                canReceiveImagesElements: '[contenteditable="true"]',
              }),
              g(this, "imageMimeTypes", [
                "image/jpeg",
                "image/png",
                "image/gif",
                "image/bmp",
                "image/webp",
                "image/tiff",
              ]),
              g(this, "doPaste", (e) => {
                if (A.getBlocking()) return;
                let t = this.getActiveReceiver();
                if (t && t.onPaste && e.originalEvent.clipboardData) {
                  let s = e.originalEvent.clipboardData.items,
                    i = [...s].filter((e) => "file" === e.kind),
                    o = [];
                  s.length === i.length && (o = i.map((e) => e.getAsFile()));
                  let n = o.filter((e) =>
                      _.includes(this.imageMimeTypes, e.type)
                    ),
                    r = o.filter(
                      (e) => !_.includes(this.imageMimeTypes, e.type)
                    ),
                    a =
                      $(e.target).closest(
                        this.selectors.canReceiveImagesElements
                      ).length > 0;
                  t.onPaste(e, {
                    items: s,
                    files: o,
                    images: n,
                    nonImages: r,
                    targetCanReceiveImages: a,
                  });
                }
              }),
              this.initialize();
          }
          initialize() {
            this.receivers = [];
          }
          getActiveReceiver() {
            return _.last(this.receivers);
          }
          clear() {
            this.initialize();
          }
          addReceiver(e = {}) {
            let t = {};
            return (
              _.defaults(t, e, this.defaults),
              this.receivers.push(t),
              1 == this.receivers.length && this.registerEvents(),
              t
            );
          }
          removeReceiver(e) {
            _.pull(this.receivers, e),
              0 == this.receivers.length && this.unregisterEvents();
          }
          registerEvents() {
            $(document).on("paste", this.doPaste);
          }
          unregisterEvents() {
            $(document).off("paste", this.doPaste);
          }
        }
        class m {
          constructor() {
            this.views = [];
          }
          add(e) {
            for (let t in e) this.views[t] = e[t];
          }
          get(e) {
            return this.views[e] || null;
          }
        }
        var f = s(58771);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b {
          constructor() {
            C(this, "hidePopupTimer", null),
              C(this, "pageLoadDelayTimer", null),
              C(this, "pageRecentlyLoaded", !0),
              C(this, "popupRecentlyShown", !1);
          }
          doPopupHide() {
            clearTimeout(this.hidePopupTimer),
              (this.hidePopupTimer = setTimeout(() => {
                this.doHideTimer();
              }, i.X.TooltipRecent));
          }
          doPopupShow() {
            clearTimeout(this.hidePopupTimer),
              (this.hidePopupTimer = null),
              (this.popupRecentlyShown = !0);
          }
          doHideTimer() {
            (this.hidePopupTimer = null), (this.popupRecentlyShown = !1);
          }
          doPageLoad() {
            clearTimeout(this.pageLoadDelayTimer),
              (this.pageLoadDelayTimer = null),
              (this.pageRecentlyLoaded = !0),
              (this.pageLoadDelayTimer = setTimeout(() => {
                this.doPageDelayTimer();
              }, i.X.TooltipPageDelay));
          }
          doPageDelayTimer() {
            (this.pageLoadDelayTimer = null), (this.pageRecentlyLoaded = !1);
          }
          getPopupRecentlyShown() {
            return this.popupRecentlyShown;
          }
          getPageRecentlyLoaded() {
            return this.pageRecentlyLoaded;
          }
        }
        class I {
          constructor() {
            var e, t;
            (t = (e) => {
              ("mousemove" == e.type &&
                0 === e.movementX &&
                0 === e.movementY) ||
                ((this.lastInteraction = new Date()),
                this.unbindEvents(),
                setTimeout(() => {
                  this.bindEvents();
                }, 1e3));
            }),
              (e = "doInteraction") in this
                ? Object.defineProperty(this, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[e] = t),
              (this.$window = $(window.window)),
              (this.$document = $(window.document));
          }
          start() {
            this.bindEvents(),
              (this.lastPageLoad = new Date()),
              (this.lastInteraction = null);
          }
          bindEvents() {
            window.addEventListener("scroll", this.doInteraction, {
              passive: !0,
            }),
              window.document.addEventListener(
                "mousemove",
                this.doInteraction,
                { passive: !0 }
              ),
              window.document.addEventListener(
                "mousedown",
                this.doInteraction,
                { passive: !0 }
              ),
              window.document.addEventListener("keyup", this.doInteraction, {
                passive: !0,
              }),
              window.document.addEventListener(
                "touchstart",
                this.doInteraction,
                { passive: !0 }
              );
          }
          unbindEvents() {
            window.removeEventListener("scroll", this.doInteraction, {
              passive: !0,
            }),
              window.document.removeEventListener(
                "mousemove",
                this.doInteraction,
                { passive: !0 }
              ),
              window.document.removeEventListener(
                "mousedown",
                this.doInteraction,
                { passive: !0 }
              ),
              window.document.removeEventListener("keyup", this.doInteraction, {
                passive: !0,
              }),
              window.document.removeEventListener(
                "touchstart",
                this.doInteraction,
                { passive: !0 }
              );
          }
          doPageLoad() {
            this.lastPageLoad = new Date();
          }
          getLastInteraction() {
            return this.lastInteraction;
          }
          getSecondsSinceLastInteraction() {
            return this.lastInteraction
              ? Math.trunc(
                  (new Date().getTime() - this.lastInteraction.getTime()) / 1e3
                )
              : null;
          }
          getLastPageLoad() {
            return this.lastPageLoad;
          }
          getSecondsSinceLastPageLoad() {
            return this.lastPageLoad
              ? Math.trunc(
                  (new Date().getTime() - this.lastPageLoad.getTime()) / 1e3
                )
              : null;
          }
          getIsIdle(e) {
            let t = this.getSecondsSinceLastInteraction();
            return null === t || t >= e;
          }
          getPageVisible() {
            return (
              void 0 !== window.document.visibilityState &&
              "visible" == window.document.visibilityState
            );
          }
        }
        var w = s(24862),
          v = s(99074),
          S = s(71258),
          x = s(39666),
          k = s(9272),
          T = s(13819),
          y = s(12918),
          E = s.n(y),
          N = (s(21715), s(9669)),
          U = s.n(N);
        function F(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const A = new (class {
          constructor() {
            F(this, "selectors", { blockUI: ".blockUI.blockOverlay" }),
              F(this, "defaultContext", {
                appUrl: null,
                env: "production",
                runtime: "production",
                version: "v1-0",
                logLevel: "silent",
                errorReporting: !1,
                errorReportingVerbose: !1,
                sentryDsn: null,
                instanceId: null,
                userId: null,
                projectId: null,
              }),
              F(this, "envs", { build: "build", production: "production" }),
              F(this, "doPrintMediaChange", (e) => {
                this.events.trigger("printchange");
              }),
              F(this, "preventDefaults", (e) => {
                e.preventDefault(), e.stopPropagation();
              }),
              F(this, "doClearKeys", (e) => {
                this.clearKeysTimer = null;
                let t =
                  this.keys.isShiftPressed ||
                  this.keys.isAltPressed ||
                  this.keys.isControlPressed ||
                  this.keys.isCommandPressed;
                (this.keys.isShiftPressed = !1),
                  (this.keys.isAltPressed = !1),
                  (this.keys.isControlPressed = !1),
                  (this.keys.isCommandPressed = !1),
                  t &&
                    this.events.trigger("modifierkeychange", {
                      keys: this.keys,
                    });
              }),
              F(this, "doKeyDown", (e) => {
                d().trace("app: Key down", e.which),
                  clearTimeout(this.clearKeysTimer),
                  (this.clearKeysTimer = null);
                let t = !1;
                switch (e.which) {
                  case a.N.Shift:
                    (this.keys.isShiftPressed = !0), (t = !0);
                    break;
                  case a.N.Alt:
                    (this.keys.isAltPressed = !0), (t = !0);
                    break;
                  case a.N.Control:
                    (this.keys.isControlPressed = !0), (t = !0);
                    break;
                  case a.N.Command:
                  case a.N.CommandWebkit:
                    (this.keys.isCommandPressed = !0), (t = !0);
                }
                t &&
                  this.events.trigger("modifierkeychange", { keys: this.keys }),
                  (this.clearKeysTimer = setTimeout(
                    this.doClearKeys,
                    i.X.ClearAppKeysDelay
                  ));
              }),
              F(this, "doKeyUp", (e) => {
                d().trace("app: Key up", e.which);
                let t = !1;
                switch (e.which) {
                  case a.N.Shift:
                    (this.keys.isShiftPressed = !1), (t = !0);
                    break;
                  case a.N.Alt:
                    (this.keys.isAltPressed = !1), (t = !0);
                    break;
                  case a.N.Control:
                    (this.keys.isControlPressed = !1), (t = !0);
                    break;
                  case a.N.Command:
                  case a.N.CommandWebkit:
                    (this.keys.isCommandPressed = !1), (t = !0);
                }
                t &&
                  this.events.trigger("modifierkeychange", { keys: this.keys });
              }),
              F(this, "handleStimulusError", (e, t, s) => {
                x.Tb(e), this.processError(!1, t + ": " + e.message, e, s);
              }),
              F(this, "doError", (e, t, s, i, o) => {
                this.processError(!1, e, o, t, s, i);
              }),
              F(this, "doUnhandledRejection", (e) => {
                if (e.reason instanceof Error)
                  this.processError(
                    !1,
                    "Unhandled rejection: " + e.reason.message,
                    e.reason
                  );
                else {
                  let t = e.reason
                    ? "Unhandled rejection: " + e.reason.toString()
                    : "Unhandled rejection";
                  this.processError(!1, t);
                }
              }),
              F(this, "doPageHide", () => {
                this.events.trigger("navigate");
              });
          }
          start() {
            (window.appErrors = []),
              (this.requestCounter = 1),
              (window.onerror = this.doError),
              (window.onunhandledrejection = this.doUnhandledRejection),
              window.addEventListener("pagehide", this.doPageHide),
              this.updateContext(),
              d().info("app: Starting instance"),
              d().info("app: Page context", this.context),
              this.initjQueryPatches(),
              this.context.errorReporting &&
                (k.S1({
                  dsn: this.context.sentryDsn,
                  environment: this.context.runtime,
                  release: "app-core@" + this.context.version,
                  maxBreadcrumbs: this.context.errorReportingVerbose ? 100 : 0,
                  autoSessionTracking: !1,
                }),
                this.configureSentry()),
              (this.storage = new n()),
              (this.cookies = new r()),
              (this.layers = new c()),
              (this.zindex = new u()),
              (this.clipboard = new p()),
              (this.views = new m()),
              (this.popupTracker = new b()),
              (this.layout = {}),
              (this.components = []),
              (this.events = new f.U()),
              (this.presence = new I()),
              this.presence.start(),
              this.updateCsrfToken(),
              (this.blockingRequests = !0),
              (this.blocking = 0),
              (this.blockingExceptInitial = !1),
              ($.blockUI.defaults.fadeIn = 0),
              ($.blockUI.defaults.fadeOut = 0),
              ($.blockUI.defaults.message = null),
              ($.blockUI.defaults.overlayCSS = {
                backgroundColor: "#000",
                opacity: 0,
                cursor: "default",
              }),
              this.initAxios(),
              (this.pageLoaded = !1),
              (this.pageDelayLoadedCallbacks = []),
              (this.waitComponentConnectedCallbacks = []),
              (this.waitComponentLoadedCallbacks = []),
              (this.turbolinks = E()),
              this.turbolinks.start(),
              this.initTurbolinksPatches(),
              this.initTurbolinksLogging(),
              this.initTurbolinksEvents();
            var e = s(35095);
            (this.stimulus = w.Mx.start()),
              this.stimulus.load((0, v.X)(e)),
              this.initStimulusEvents(),
              (this.$elements = {}),
              (this.$elements.window = $(window)),
              this.$elements.window.on("keydown", this.doKeyDown),
              this.$elements.window.on("keyup", this.doKeyUp),
              (this.keys = {}),
              (this.keys.isAltPressed = !1),
              (this.keys.isCommandPressed = !1),
              (this.keys.isControlPressed = !1),
              (this.keys.isShiftPressed = !1),
              (this.clearKeysTimer = null),
              this.initDragDropHandlers(),
              this.initPrint();
          }
          initPrint() {
            (this.mediaMatchPrint = matchMedia("print")),
              (this.mediaMatchScreen = matchMedia("screen")),
              this.mediaMatchPrint?.addEventListener &&
                this.mediaMatchPrint.addEventListener(
                  "change",
                  this.doPrintMediaChange
                ),
              this.mediaMatchScreen?.addEventListener &&
                this.mediaMatchScreen.addEventListener(
                  "change",
                  this.doPrintMediaChange
                );
          }
          updateCsrfToken() {
            let e = document.head.querySelector('meta[name="csrf-token"]');
            e &&
              e.content &&
              ((this.csrfToken = e.content),
              (U().defaults.headers.common["X-CSRF-TOKEN"] = this.csrfToken));
          }
          configureSentry() {
            x.YA("app.env", this.context.env),
              x.YA("instance.id", this.context.instanceId),
              x.v("App", {
                "request-id": this.context.requestId,
                "app-url": this.context.appUrl,
                env: this.context.env,
                runtime: this.context.runtime,
                version: this.context.version,
                commit: this.context.commit,
                "log-level": this.context.logLevel,
                "instance-id": this.context.instanceId,
                "user-id": this.context.userId,
                "project-id": this.context.projectId,
              }),
              x.av({
                id: this.context.userId
                  ? `${this.context.instanceId}-${this.context.userId}`
                  : null,
              });
          }
          updateContext() {
            let e = document.head.querySelector(
                'meta[name="page-context"]'
              ).content,
              t = _.defaults(JSON.parse(e), this.defaultContext);
            this.context = t;
            let s = d().levels.SILENT,
              i = this.context.logLevel.toUpperCase();
            i in d().levels && (s = d().levels[i]), d().setLevel(s, !1);
          }
          initDragDropHandlers() {
            this.$elements.window.on("dragenter", this.preventDefaults),
              this.$elements.window.on("dragover", this.preventDefaults),
              this.$elements.window.on("dragleave", this.preventDefaults),
              this.$elements.window.on("drop", this.preventDefaults);
          }
          delayLoaded(e) {
            return new Promise((t, s) => {
              this.pageLoaded
                ? setTimeout(() => {
                    t(e());
                  }, 1)
                : this.pageDelayLoadedCallbacks.push(() => {
                    t(e());
                  });
            });
          }
          waitComponentConnected(e, t) {
            this.waitComponentConnectedCallbacks.push({ name: e, callback: t });
          }
          waitComponentLoaded(e, t) {
            this.waitComponentLoadedCallbacks.push({ name: e, callback: t });
          }
          initjQueryPatches() {
            $.event.special.touchstart = {
              setup: function (e, t, s) {
                this.addEventListener("touchstart", s, { passive: !0 });
              },
            };
          }
          initAxios() {
            (U().defaults.headers.common["X-Requested-With"] =
              "XMLHttpRequest"),
              U().interceptors.request.use(
                (e) => {
                  let t = !!e.nonBlocking;
                  return (
                    this.blockingRequests && !t
                      ? (d().debug("app: Blocking with request in progress"),
                        this.blockUI())
                      : d().debug("app: Not blocking request in progress"),
                    e
                  );
                },
                function (e) {
                  return Promise.reject(e);
                }
              ),
              U().interceptors.response.use(
                (e) => {
                  let t = !!e.config.nonBlocking;
                  return (
                    this.blockingRequests && !t
                      ? (d().debug("app: Unblocking with request success"),
                        this.unblockUI())
                      : d().debug("app: Not unblocking with request success"),
                    e
                  );
                },
                (e) => {
                  let t = !0;
                  return (
                    e instanceof U().Cancel || (t = !!e.config.nonBlocking),
                    this.blockingRequests && !t
                      ? (d().debug("app: Unblocking with request failed"),
                        this.unblockUI())
                      : d().debug("app: Not unblocking with request failed"),
                    Promise.reject(e)
                  );
                }
              );
          }
          initStimulusEvents() {
            this.stimulus.handleError = this.handleStimulusError;
          }
          initTurbolinksEvents() {
            document.addEventListener("turbolinks:load", () => {
              this.updateCsrfToken(),
                this.loadCommonViews(),
                this.updateContext(),
                d().info("app: Page context", this.context),
                this.configureSentry(),
                setTimeout(() => {
                  this.pageLoaded = !0;
                  for (let e of this.pageDelayLoadedCallbacks) e();
                  this.pageDelayLoadedCallbacks.length = 0;
                }, 1),
                this.popupTracker.doPageLoad(),
                this.presence.doPageLoad();
            }),
              document.addEventListener("turbolinks:before-render", () => {
                this.pageLoaded = !1;
              }),
              document.addEventListener("turbolinks:render", () => {
                this.layers.clear(),
                  this.clipboard.clear(),
                  this.zindex.clear();
              }),
              document.addEventListener("turbolinks:click", (e) => {
                this.requestCounter++,
                  this.requestCounter >= 50
                    ? e.preventDefault()
                    : this.events.trigger("navigate"),
                  this.addBreadcrumb(
                    "navigation",
                    "Turbolinks navigation click",
                    { from: window.location.href, to: e.data.url }
                  );
              });
          }
          initTurbolinksPatches() {
            (this.turbolinks.HttpRequest.prototype.requestLoaded = function () {
              return this.endRequest(
                ((e = this),
                function () {
                  return e.xhr.getResponseHeader("Turbolinks-Compatible")
                    ? e.delegate.requestCompletedWithResponse(
                        e.xhr.responseText,
                        e.xhr.getResponseHeader("Turbolinks-Location")
                      )
                    : ((e.failed = !0),
                      e.delegate.requestFailedWithStatusCode(
                        e.xhr.status,
                        e.xhr.responseText
                      ));
                })
              );
              var e;
            }),
              document.addEventListener("turbolinks:render", function () {
                document.head.querySelector(
                  'meta[name="turbolinks-compatible"]'
                ) ||
                  ((E().History.prototype.shouldHandlePopState = function () {
                    return !1;
                  }),
                  window.addEventListener("popstate", function (e) {
                    document.location.reload(!0);
                  }));
              });
          }
          initTurbolinksLogging() {
            var e = function (e) {
              d().debug(`turbolinks: ${e.type}`, e);
            };
            for (let t of [
              "turbolinks:click",
              "turbolinks:before-visit",
              "turbolinks:visit",
              "turbolinks:request-start",
              "turbolinks:request-end",
              "turbolinks:before-cache",
              "turbolinks:before-render",
              "turbolinks:render",
              "turbolinks:load",
            ])
              document.addEventListener(t, e);
          }
          registerLayout(e, t) {
            d().info("app: Registering new layout", e, t), (this.layout[e] = t);
          }
          unregisterLayout(e, t) {
            d().info("app: Unregistering layout", e, t),
              _.has(this.layout, e) &&
                this.layout[e] == t &&
                (d().debug("app: Layout successfully deleted", e),
                delete this.layout[e]);
          }
          linkComponent(e, t, s) {
            t.children.push(e),
              e.parents.push(t),
              s.multiple
                ? (t.instance.components[e.name] ||
                    (t.instance.components[e.name] = []),
                  t.instance.components[e.name].push(e.instance))
                : (t.instance.components[e.name] = e.instance);
            for (let t in s.events) e.instance.events.on(t, s.events[t]);
            s.addCallback && s.addCallback(e.instance, e);
          }
          findComponent(e, t) {
            e instanceof $ && (e = e.get(0));
            for (let s of this.components)
              if (s.name == t && s.loaded && o.Z.isParentNode(s.element, e))
                return s.instance;
          }
          findComponents(e, t) {
            let s = [];
            e instanceof $ && (e = e.get(0));
            for (let i of this.components)
              i.name == t &&
                i.loaded &&
                o.Z.isParentNode(i.element, e) &&
                s.push(i.instance);
            return s;
          }
          registerComponent(e, t, s) {
            var i = {
              loaded: !1,
              instance: e,
              element: t,
              name: s,
              children: [],
              parents: [],
              requestedChildren: new Map(),
            };
            return (
              d().info("app: Registering component", i),
              this.components.push(i),
              i
            );
          }
          componentConnected(e, t, s) {
            let i = [];
            for (let e of this.waitComponentConnectedCallbacks)
              e.name == s ? e.callback() : i.push(e);
            this.waitComponentConnectedCallbacks = i;
            for (let i of this.components) {
              var n = i.requestedChildren.get(s);
              n &&
                o.Z.isParentNode(t, i.element) &&
                n.connectedCallback &&
                (d().info("app: Found child for connected callback", i, s, e),
                n.connectedCallback(e));
            }
          }
          markComponentLoaded(e) {
            d().info("app: Marking component as loaded", e), (e.loaded = !0);
            for (let s of this.components) {
              var t = s.requestedChildren.get(e.name);
              t &&
                o.Z.isParentNode(e.element, s.element) &&
                (d().info("app: Later found child for request", s, e.name, e),
                this.linkComponent(e, s, t));
            }
            let s = [];
            for (let t of this.waitComponentLoadedCallbacks)
              t.name == e.name ? t.callback() : s.push(t);
            this.waitComponentLoadedCallbacks = s;
          }
          requestChild(e, t, s = {}) {
            _.defaults(s, {
              onAdded: null,
              onConnected: null,
              onRemoved: null,
              onRemoveCompleted: null,
              multiple: !1,
              events: {},
            }),
              d().info("app: Requesting child", e, t);
            var i = {
              connectedCallback: s.onConnected,
              addCallback: s.onAdded,
              removeCallback: s.onRemoved,
              removeCompletedCallback: s.onRemoveCompleted,
              multiple: s.multiple,
              events: s.events,
            };
            e.requestedChildren.set(t, i);
            for (let s of this.components)
              s.name == t &&
                s.loaded &&
                o.Z.isParentNode(s.element, e.element) &&
                (d().info("app: Immediately found child for request", e, t, s),
                this.linkComponent(s, e, i));
          }
          unregisterComponent(e) {
            if (e) {
              d().info("app: Unregistering component", e);
              for (let s of e.parents) {
                let i = _.indexOf(s.children, e);
                if (-1 != i) {
                  d().info("app: Removing child from parent", e, e.name, s),
                    _.pullAt(s.children, i);
                  var t = s.requestedChildren.get(e.name);
                  t.removeCallback && t.removeCallback(e.instance, e),
                    t.multiple
                      ? (_.pull(s.instance.components[e.name], e.instance),
                        0 == s.instance.components[e.name].length &&
                          delete s.instance.components[e.name])
                      : delete s.instance.components[e.name];
                  for (let s in t.events) e.instance.events.off(s, t.events[s]);
                  t.removeCompletedCallback &&
                    t.removeCompletedCallback(e.instance, e);
                }
              }
              for (let t of e.children) {
                let s = _.indexOf(t.parents, e);
                -1 != s &&
                  (d().info("app: Removing parent from child", e, e.name, t),
                  _.pullAt(t.parents, s));
              }
              _.pull(this.components, e),
                (e.instance = null),
                (e.element = null);
            }
          }
          handleError(e) {
            x.Tb(e), this.processError(!0, e.message, e);
          }
          formatGenericErrorMessage(e) {
            if (!e.response.data || !e.response.data.message) return null;
            if (e.response.data.errors) {
              let t = [];
              return (
                _.each(e.response.data.errors, (e) => {
                  t.push(...e);
                }),
                o.Z.lang("errors.generic_intro", {
                  message: t
                    .map((e) => e + (e.endsWith(".") ? "" : "."))
                    .join(" "),
                })
              );
            }
            return o.Z.lang("errors.generic_intro", {
              message:
                e.response.data.message +
                (e.response.data.message.endsWith(".") ? "" : "."),
            });
          }
          shouldFilterError(e, t, s) {
            if (s && Array.isArray(s))
              for (let e of s)
                if ("string" == typeof e && e.startsWith("chrome-extension://"))
                  return !0;
            return this.events
              .trigger("errorfilter", { error: e, message: t })
              .reduce((e, t) => e || t, !1);
          }
          showErrorDialog(e) {
            let t = !1,
              s = null;
            return (
              this.views && (s = this.views.get("common.error_dialog")),
              s && (new S.w(e).show(s), (t = !0)),
              t ||
                console.error(
                  "An error occurred (and the error dialog is not available)",
                  e
                ),
              t
            );
          }
          processError(e, t, s, ...n) {
            if (this.shouldFilterError(s, t, n))
              return void d().debug("app: Filtered error", t, s);
            d().error(t, s, ...n);
            let r = { allowRefresh: !0 },
              a = this.context && "local" == this.context.env;
            if (
              (e && (a = !0),
              s && "response" in s && s.response && "status" in s.response)
            )
              switch (((a = !0), s.response.status)) {
                case i.X.ForbiddenError:
                  (r.title = o.Z.lang("errors.403_title")),
                    (r.message = this.formatGenericErrorMessage(s));
                  break;
                case i.X.NotFoundError:
                  (r.title = o.Z.lang("errors.404_title")),
                    (r.message = o.Z.lang("errors.404_message")),
                    s.response.data &&
                      s.response.data.message &&
                      (r.message = s.response.data.message);
                  break;
                case i.X.RequestTooLargeError:
                  (r.title = o.Z.lang("errors.413_title")),
                    (r.message = o.Z.lang("errors.413_message"));
                  break;
                case i.X.NotAuthenticatedError:
                case i.X.SessionError:
                  (r.title = o.Z.lang("errors.419_title")),
                    (r.message = o.Z.lang("errors.419_message"));
                  break;
                default:
                  r.message = this.formatGenericErrorMessage(s);
              }
            else r.details = t;
            window.appErrors.push(r),
              a &&
                setTimeout(() => {
                  this.showErrorDialog(r),
                    window.dispatchEvent(new Event("apperror")),
                    x.$e((e) => {
                      let s = {};
                      r.title && (s.header = r.title),
                        r.message && (s.message = r.message),
                        r.details && (s.details = r.details),
                        e.setContext("error dialog", s),
                        e.setLevel("warning"),
                        x.uT(t);
                    });
                }, 0);
          }
          blockUI() {
            this.blocking++,
              (this.blockingExceptInitial = !1),
              this.events.trigger("blocking"),
              $.blockUI(),
              setTimeout(() => {
                this.blockingExceptInitial = this.getBlocking();
              }, 0);
          }
          unblockUI() {
            this.blocking--,
              this.blocking < 0 && (this.blocking = 0),
              this.blocking ||
                (this.events.trigger("unblocking"),
                $.unblockUI(),
                (this.blockingExceptInitial = !1));
          }
          getBlocking() {
            return this.blocking > 0;
          }
          getBlockingExceptInitial() {
            return this.blockingExceptInitial;
          }
          setBlockingRequests(e) {
            this.blockingRequests = e;
          }
          visit(e) {
            return new Promise((t, s) => {
              d().debug("app: Blocking with page visit in progress"),
                this.blockUI(),
                $(document).one("turbolinks:render", () => {
                  d().debug("app: Unblocking with page visit success"),
                    this.unblockUI(),
                    t();
                }),
                this.turbolinks.visit(e);
            });
          }
          visitNonBlocking(e) {
            return new Promise((t, s) => {
              $(document).one("turbolinks:render", () => {
                t();
              }),
                this.turbolinks.visit(e);
            });
          }
          addBreadcrumb(e, t, s = {}) {
            x.n_({ category: e, message: t, level: T.z.Info, data: s });
          }
          loadCommonViews() {
            let e = $("#common-views").attr("data-views");
            if (e) {
              let t = JSON.parse(e);
              this.views.add(t);
            }
          }
          pushLocation(e) {
            this.turbolinks.controller.pushHistoryWithLocationAndRestorationIdentifier(
              e,
              this.turbolinks.uuid()
            );
          }
          replaceLocation(e) {
            this.turbolinks.controller.replaceHistoryWithLocationAndRestorationIdentifier(
              e,
              this.turbolinks.uuid()
            );
          }
          nextTimeTick(e) {
            setTimeout(e, 1);
          }
          resetPopupTracker() {
            this.popupTracker.doPageLoad();
          }
        })();
      },
      22153: (e, t, s) => {
        "use strict";
        s.d(t, { l: () => n });
        var i = s(43689);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n {
          constructor(e, t = !1, s = !1, n = !1) {
            o(this, "settings", { delay: 500, margin: 50, speed: 6 }),
              o(this, "doMove", (e) => {
                cancelAnimationFrame(this.moveAnimationFrame),
                  (this.moveAnimationFrame = null);
                let t = i.Z.getEventClientPos(e);
                (this.currentMousePosition = { clientX: t.x, clientY: t.y }),
                  (this.moveAnimationFrame = requestAnimationFrame(
                    this.scroll
                  ));
              }),
              o(this, "scroll", () => {
                cancelAnimationFrame(this.moveAnimationFrame),
                  (this.moveAnimationFrame = null);
                let e = this.$container.offset(),
                  t = this.$container.height(),
                  s = this.$container.width(),
                  i = e.top + t,
                  o = e.left + s;
                this.outsideScrolling ||
                (this.currentMousePosition.clientY >= e.top &&
                  this.currentMousePosition.clientY <= i &&
                  this.currentMousePosition.clientX >= e.left &&
                  this.currentMousePosition.clientX <= o)
                  ? this.afterDelay
                    ? (this.vertical &&
                        (this.currentMousePosition.clientY - e.top <=
                        this.settings.margin
                          ? (this.container.scrollTop -= this.settings.speed)
                          : i - this.currentMousePosition.clientY <=
                              this.settings.margin &&
                            (this.container.scrollTop += this.settings.speed)),
                      this.horizontal &&
                        (this.currentMousePosition.clientX - e.left <=
                        this.settings.margin
                          ? (this.container.scrollLeft -= this.settings.speed)
                          : o - this.currentMousePosition.clientX <=
                              this.settings.margin &&
                            (this.container.scrollLeft += this.settings.speed)))
                    : this.delayTimeout ||
                      (this.delayTimeout = setTimeout(() => {
                        (this.afterDelay = !0), (this.delayTimeout = null);
                      }, this.settings.delay))
                  : (clearTimeout(this.delayTimeout),
                    (this.delayTimeout = null),
                    (this.afterDelay = !1)),
                  (this.moveAnimationFrame = requestAnimationFrame(
                    this.scroll
                  ));
              }),
              (this.container = e),
              (this.$container = $(e)),
              (this.$window = $(window)),
              (this.afterDelay = !1),
              (this.delayTimeout = null),
              (this.moveAnimationFrame = null),
              (this.currentMousePosition = null),
              (this.horizontal = s),
              (this.vertical = t),
              (this.outsideScrolling = n);
          }
          start() {
            this.$window.on("mousemove", this.doMove),
              this.$window.on("touchmove", this.doMove);
          }
          stop() {
            this.$window.off("mousemove", this.doMove),
              this.$window.off("touchmove", this.doMove),
              cancelAnimationFrame(this.moveAnimationFrame),
              (this.moveAnimationFrame = null);
          }
        }
      },
      89432: (e, t, s) => {
        "use strict";
        s.d(t, { d: () => a });
        var i = s(24862),
          o = s(58771),
          n = s(51385),
          r = s(5270);
        class a extends i.Qr {
          connect(e) {
            (this.name = e),
              (this.events = new o.U()),
              (this.components = {}),
              (this.loaded = !1),
              (this.connected = !0),
              (this.params = null);
            let t = $(this.element).attr("data-params");
            t && (this.params = JSON.parse(t));
            let s = $(this.element).attr("data-views");
            if (s) {
              let e = JSON.parse(s);
              r.Z.views.add(e);
            }
            (this.fragments = new n.n($(this.element))),
              r.Z.delayLoaded(() => {
                this.connected &&
                  ((this.component = r.Z.registerComponent(
                    this,
                    this.element,
                    this.name
                  )),
                  this.load(),
                  r.Z.markComponentLoaded(this.component),
                  (this.loaded = !0));
              });
          }
          disconnect() {
            this.loaded &&
              (this.unload(),
              r.Z.unregisterComponent(this.component),
              (this.loaded = !1)),
              (this.connected = !1);
          }
          load() {}
          unload() {}
          refreshFragments(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              r.Z.handleError(e);
            });
          }
          emptyFragments(...e) {
            return this.fragments.empty(...e);
          }
          refreshFragmentsWithCustomErrorHandling(...e) {
            return this.fragments.refresh(...e);
          }
        }
      },
      14589: (e, t, s) => {
        "use strict";
        s.d(t, { s: () => c });
        var i,
          o,
          n,
          r = s(47914),
          a = s(13814),
          l = s(50609);
        class d extends l.V {
          constructor(e, t) {
            super("common.conflict_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 500,
            });
          }
          load() {}
          doSubmit() {
            this.triggerSuccess();
          }
        }
        (n = ["doSubmit"]),
          (o = "actions") in (i = d)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
        var h = s(5270);
        class c {
          static handle(e, t, s) {
            return e.response &&
              e.response.data &&
              e.response.data.conflict &&
              e.response.status == r.X.ConflictError
              ? a.N.post(
                  "common/render_update_conflict",
                  e.response.data.conflict
                )
                  .then((e) => {
                    let s = new d();
                    (s.onSuccess = () => {
                      t();
                    }),
                      s.show(e.data);
                  })
                  .catch((e) => {
                    h.Z.handleError(e);
                  })
              : Promise.resolve(s());
          }
        }
      },
      50609: (e, t, s) => {
        "use strict";
        s.d(t, { V: () => b });
        var i = s(47914),
          o = s(43689),
          n = s(55578),
          r = s(96622),
          a = s(51385),
          l = s(69555),
          d = s(11802),
          h = s(58771);
        class c {
          constructor() {
            this.callbacks = [];
          }
          push(e) {
            this.callbacks.push(e);
          }
          apply() {
            for (let e of this.callbacks) e();
            this.callbacks.length = 0;
          }
        }
        var u = s(7042),
          g = s(44362),
          p = s(2043),
          m = s.n(p),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b {
          constructor(e, t = {}) {
            C(this, "defaults", {
              hideOnESC: !0,
              margin: 15,
              width: 800,
              height: 600,
              minHeight: 350,
              minWidth: i.X.BodyMinWidth,
              resizable: !1,
              draggable: !0,
              rememberSize: !0,
              onSubmitForm: null,
              variant: !1,
              breadcrumbs: !0,
              responsive: !1,
            }),
              C(this, "dialogSelectors", {
                containerInner: ".dialog-container__inner",
                dialog: ".dialog",
                header: ".dialog__header",
                main: ".dialog__main",
                mainContent: ".dialog__main__content",
                actions: ".dialog__actions",
                resizeGrip: ".dialog__resize-grip",
                hide: ".dialog-hide",
                headerIcon: ".dialog__header__content__icon",
                headerClose: ".dialog__header__content__close",
                headerMaximize: ".dialog__header__content__maximize",
                headerTitle: ".dialog__header__content__title",
              }),
              C(this, "dialogClasses", {
                containerVisible: "dialog-container--visible",
                resizing: "dialog--resizing",
                compact: "dialog--compact",
                variant: "dialog--",
              }),
              C(this, "doHideTransitionEnd", () => {
                if (this.$container) {
                  let e = this.onHidden,
                    t = this.success;
                  this.remove(), e && e(t);
                }
              }),
              C(this, "doMainContentScroll", (e) => {
                r.UI.dropdownHideInContext(this.$mainContent),
                  this.mainContentScroll();
              }),
              C(this, "doWindowResize", (e) => {
                this.refreshSize(), this.refreshPosition();
              }),
              C(this, "doResizeGripMouseDown", (e) => {
                1 == e.which && (e.preventDefault(), this.resizeStart(e));
              }),
              C(this, "doResizeGripTouchStart", (e) => {
                this.resizeStart(e);
              }),
              C(this, "doResizeEnd", (e) => {
                e.preventDefault(),
                  this.resizing &&
                    (this.$container.removeClass(this.dialogClasses.resizing),
                    $("body").removeClass(this.dialogClasses.resizing),
                    this.$window.off("mouseup", this.doResizeEnd),
                    this.$window.off("touchend", this.doResizeEnd),
                    this.$window.off("touchcancel", this.doResizeEnd),
                    this.$window.off("mousemove", this.doResizeMove),
                    this.$window.off("touchmove", this.doResizeMove),
                    this.$window.off("contextmenu", this.doResizeContextMenu),
                    (this.resizing = !1),
                    this.settings.rememberSize && this.storeSize(),
                    this.refreshDropdowns());
              }),
              C(this, "doResizeContextMenu", (e) => {
                e.preventDefault();
              }),
              C(this, "doResizeMove", (e) => {
                if (this.resizing) {
                  var t = this.$dialog.position(),
                    s = o.Z.getEventClientPos(e),
                    i = s.x - t.left + this.resizeOffsetX,
                    n = s.y - t.top + this.resizeOffsetY;
                  (i = Math.max(this.settings.minWidth, i)),
                    (n = Math.max(this.settings.minHeight, n)),
                    (i = Math.min(
                      this.$containerInner.innerWidth() - t.left,
                      i
                    )),
                    (n = Math.min(
                      this.$containerInner.innerHeight() - t.top,
                      n
                    )),
                    (this.targetWidth = i),
                    (this.targetHeight = n),
                    this.refreshSize(!1);
                }
              }),
              C(this, "doMaximizeClick", (e) => {
                this.maximizeRestore();
              }),
              C(this, "doHeaderDoubleClick", (e) => {
                0 ==
                  $(e.target).closest(this.dialogSelectors.headerIcon).length &&
                  this.maximizeRestore();
              }),
              C(this, "doHeaderMouseDown", (e) => {
                1 == e.which &&
                  0 ==
                    $(e.target).closest(this.dialogSelectors.headerIcon)
                      .length &&
                  (e.preventDefault(), this.dragStart(e));
              }),
              C(this, "doHeaderTouchStart", (e) => {
                0 ==
                  $(e.target).closest(this.dialogSelectors.headerIcon).length &&
                  this.dragStart(e);
              }),
              C(this, "doDragEnd", (e) => {
                e.preventDefault(),
                  this.dragging &&
                    (this.$window.off("mouseup", this.doDragEnd),
                    this.$window.off("touchend", this.doDragEnd),
                    this.$window.off("touchcancel", this.doDragEnd),
                    this.$window.off("mousemove", this.doDragMove),
                    this.$window.off("touchmove", this.doDragMove),
                    this.$window.off("contextmenu", this.doDragContextMenu),
                    (this.dragging = !1));
              }),
              C(this, "doDragContextMenu", (e) => {
                e.preventDefault();
              }),
              C(this, "doDragMove", (e) => {
                if (this.dragging) {
                  var t = o.Z.getEventClientPos(e),
                    s = Math.max(0, t.x - this.dragOffsetX),
                    i = Math.max(0, t.y - this.dragOffsetY);
                  (s = Math.min(
                    s,
                    Math.max(
                      0,
                      this.$container.innerWidth() - this.$dialog.outerWidth()
                    )
                  )),
                    (i = Math.min(
                      i,
                      Math.max(
                        0,
                        this.$container.innerHeight() -
                          this.$dialog.outerHeight()
                      )
                    )),
                    this.$dialog.css({ left: s }),
                    this.$dialog.css({ top: i });
                }
              }),
              C(this, "doKeyDown", (e, t) => {
                let s = () => {
                    t.preventDefault(), this.settings.onSubmitForm();
                  },
                  i = (t.ctrlKey || t.metaKey) && t.which == d.N.S;
                if (t.which == d.N.Enter) {
                  if (this.settings.onSubmitForm) {
                    let e = $("input:focus", this.$dialog);
                    e.length > 0 &&
                      0 == e.closest(".dropdown").length &&
                      0 == e.closest(".checkbox").length &&
                      s();
                  }
                } else i && s();
                return this.shortcuts.keyDown(t), this.keyDown(t);
              }),
              C(this, "doHideClick", () => {
                this.hideClick();
              }),
              (this.settings = {}),
              _.defaults(this.settings, t, this.defaults),
              (this.settings.minWidth = Math.min(
                this.settings.minWidth,
                this.settings.width
              )),
              (this.dialogName = e),
              this.initialize(),
              (this.events = new h.U());
          }
          initialize() {
            (this.layer = null),
              (this.resizing = !1),
              (this.$container = null),
              (this.$dialog = null),
              (this.$resizeGrip = null),
              (this.$window = $(window)),
              (this.resizeOffsetX = 0),
              (this.resizeOffsetY = 0),
              (this.resizing = !1),
              (this.dragOffsetX = 0),
              (this.dragOffsetY = 0),
              (this.dragging = !1),
              (this.visible = !1),
              (this.actions = []),
              (this.onSuccess = null),
              (this.success = !1),
              (this.onHide = null),
              (this.onHidden = null),
              (this.formViews = []),
              (this.components = {}),
              (this.component = null),
              (this.restoreWidth = 0),
              (this.restoreHeight = 0),
              (this.fragments = null),
              (this.params = null),
              (this.zindex = null),
              (this.shortcuts = null);
          }
          show(e = null) {
            m().info("dialog: Showing dialog", this.dialogName, this.settings);
            let t = e;
            if (!t && ((t = f.Z.views.get(this.dialogName)), !t))
              throw new Error(`Dialog view "${this.dialogName}" not found.`);
            (this.$container = $(t)),
              this.$container.attr("data-dusk-dialog-name", this.dialogName),
              (this.$containerInner = $(
                this.dialogSelectors.containerInner,
                this.$container
              )),
              (this.$dialog = $(this.dialogSelectors.dialog, this.$container)),
              (this.params = null);
            let s = this.$dialog.attr("data-params");
            s && (this.params = JSON.parse(s));
            let i = this.$dialog.attr("data-views");
            if (i) {
              let e = JSON.parse(i);
              f.Z.views.add(e);
            }
            if (this.settings.breadcrumbs) {
              let e = $(this.dialogSelectors.headerTitle, this.$dialog)
                .text()
                .trim();
              f.Z.addBreadcrumb(
                "ui.dialog",
                `Showing dialog '${this.dialogName}' (${e})`
              );
            }
            if (
              ((this.component = f.Z.registerComponent(
                this,
                this.$dialog.get(0),
                this.dialogName
              )),
              f.Z.markComponentLoaded(this.component),
              this.settings.variant &&
                this.$dialog.addClass(
                  this.dialogClasses.variant + this.settings.variant
                ),
              (this.$header = $(this.dialogSelectors.header, this.$container)),
              (this.$main = $(this.dialogSelectors.main, this.$container)),
              (this.$mainContent = $(
                this.dialogSelectors.mainContent,
                this.$container
              )),
              (this.$actions = $(
                this.dialogSelectors.actions,
                this.$container
              )),
              this.bindAll(),
              (this.targetWidth = this.settings.width),
              (this.targetHeight = this.settings.height),
              this.settings.resizable &&
                ((this.$resizeGrip = $(
                  this.dialogSelectors.resizeGrip,
                  this.$dialog
                )),
                this.$resizeGrip.on("mousedown", this.doResizeGripMouseDown),
                this.$resizeGrip.on("touchstart", this.doResizeGripTouchStart),
                this.$header.on("dblclick", this.doHeaderDoubleClick),
                this.$mainContent.on("scroll", this.doMainContentScroll),
                this.settings.rememberSize))
            ) {
              var o = parseInt(
                  f.Z.storage.getItem(`dialogs.${this.dialogName}.width`),
                  10
                ),
                r = parseInt(
                  f.Z.storage.getItem(`dialogs.${this.dialogName}.height`),
                  10
                );
              o && (this.targetWidth = Math.max(this.settings.minWidth, o)),
                r && (this.targetHeight = Math.max(this.settings.minHeight, r));
            }
            return (
              this.settings.draggable &&
                this.$header.length > 0 &&
                (this.$header.on("mousedown", this.doHeaderMouseDown),
                this.$header.on("touchstart", this.doHeaderTouchStart)),
              (this.layer = f.Z.layers.add({
                hideOnESC: this.settings.hideOnESC,
                onHide: (e) => {
                  this.hide();
                },
                onKeyDown: this.doKeyDown,
                dialog: !0,
                rootNode: this.$container.get(0),
              })),
              (this.shortcuts = new g.f()),
              (this.zindex = f.Z.zindex.register()),
              this.$container.css("z-index", this.zindex),
              $(this.dialogSelectors.hide, this.$container).on(
                "click",
                this.doHideClick
              ),
              $(this.dialogSelectors.headerMaximize, this.$container).click(
                this.doMaximizeClick
              ),
              window.addEventListener("resize", this.doWindowResize, {
                passive: !0,
              }),
              $("body").append(this.$container),
              this.refreshUi(),
              (this.fragments = new a.n(this.$dialog)),
              this.settings.responsive && this.$dialog.addClass("responsive"),
              this.load(),
              this.refreshSize(),
              Promise.resolve()
                .then(() => {
                  let e = this.prepare();
                  return (
                    e || (e = Promise.resolve()),
                    e.then(() => {
                      this.refreshPosition(),
                        this.refreshDropdowns(),
                        this.$container.addClass(
                          this.dialogClasses.containerVisible
                        ),
                        (this.visible = !0),
                        this.$container.focus(),
                        $("[autofocus]", this.$container).first().focus(),
                        setTimeout(() => {
                          n.e.markLoaded(this.$dialog);
                        }, 300),
                        this.loaded();
                    })
                  );
                })
                .catch((e) => {
                  throw (this.cleanup(), this.remove(), e);
                })
            );
          }
          load() {}
          loaded() {}
          unload() {}
          prepare() {}
          resize() {}
          cleanup() {
            this.unload(),
              f.Z.unregisterComponent(this.component),
              f.Z.layers.remove(this.layer),
              f.Z.zindex.unregister(this.zindex),
              window.removeEventListener("resize", this.doWindowResize, {
                passive: !0,
              });
          }
          hide() {
            if (this.visible) {
              if (
                (m().info("dialog: Hiding dialog", this.dialogName),
                this.settings.breadcrumbs)
              ) {
                let e = $(this.dialogSelectors.headerTitle, this.$dialog)
                  .text()
                  .trim();
                f.Z.addBreadcrumb(
                  "ui.dialog",
                  `Hiding dialog '${this.dialogName}' (${e})`
                );
              }
              this.cleanup(),
                (this.visible = !1),
                this.onHide && this.onHide(this.success),
                this.$container.one("transitionend", this.doHideTransitionEnd),
                setTimeout(
                  this.doHideTransitionEnd,
                  i.X.DialogHideTransitionDelay
                ),
                this.$container.removeClass(
                  this.dialogClasses.containerVisible
                );
            }
          }
          remove() {
            this.unbindAll(), this.$container.remove(), this.initialize();
          }
          refreshUi() {
            r.UI.initialize(this.$dialog);
          }
          refreshForms() {
            this.unbindAll(), this.bindAll(), this.refreshUi();
          }
          setActionsVisible(e) {
            e ? this.$actions.show() : this.$actions.hide();
          }
          mainContentScroll() {}
          refreshSize(e = !0) {
            var t = this.$containerInner.innerWidth(),
              s = this.$containerInner.innerHeight(),
              o = this.targetWidth,
              n = this.targetHeight;
            o > t && (o = t);
            var r = Math.max(this.settings.minWidth, o);
            if (
              (this.$dialog.outerWidth(r),
              this.settings.resizable &&
                (n > s && (n = s),
                this.$dialog.outerHeight(Math.max(this.settings.minHeight, n))),
              r <= i.X.DialogCompactBreakpoint
                ? this.$dialog.addClass(this.dialogClasses.compact)
                : this.$dialog.removeClass(this.dialogClasses.compact),
              this.settings.responsive)
            )
              for (
                let e = i.X.ResponsiveStart;
                e <= i.X.ResponsiveEnd;
                e += i.X.ResponsiveIncrement
              )
                this.$dialog.get(0).classList.toggle("responsive-" + e, r >= e);
            e && this.refreshDropdowns(), this.refreshTables(r), this.resize();
          }
          refreshDropdowns() {
            let e = new c();
            r.UI.dropdownRefreshSizes(this.$dialog, e), e.apply();
          }
          refreshTables(e = null) {
            r.UI.tableRefreshSizes(
              this.$dialog,
              null == e ? this.$dialog.outerWidth() : e
            );
          }
          refreshPosition() {
            var e = this.$containerInner.innerWidth(),
              t = this.$containerInner.innerHeight(),
              s = this.$dialog.outerWidth(),
              i = this.$dialog.outerHeight();
            this.$dialog.css({ left: Math.round(Math.max(0, (e - s) / 2)) }),
              this.$dialog.css({ top: Math.round(Math.max(0, (t - i) / 2)) });
          }
          refreshPositionIfNeeded() {
            var e = this.$containerInner.innerWidth(),
              t = this.$containerInner.innerHeight(),
              s = this.$dialog.outerWidth(),
              i = this.$dialog.outerHeight(),
              o = this.$dialog.position();
            (i + o.top > t || s + o.left > e) && this.refreshPosition();
          }
          resizeStart(e) {
            this.unfocusActiveElement(),
              l.GI.hideAllPopups(this),
              (this.resizing = !0),
              this.$window.on("mouseup", this.doResizeEnd),
              this.$window.on("touchend", this.doResizeEnd),
              this.$window.on("touchcancel", this.doResizeEnd),
              this.$window.on("mousemove", this.doResizeMove),
              this.$window.on("touchmove", this.doResizeMove),
              this.$window.on("contextmenu", this.doResizeContextMenu),
              $("body").addClass(this.dialogClasses.resizing),
              this.$container.addClass(this.dialogClasses.resizing);
            var t = o.Z.getEventClientPos(e);
            (this.resizeOffsetX =
              this.$dialog.position().left + this.$dialog.outerWidth() - t.x),
              (this.resizeOffsetY =
                this.$dialog.position().top + this.$dialog.outerHeight() - t.y),
              r.UI.dropdownHideInContext(this.$mainContent);
          }
          maximizeRestore() {
            let e = this.$containerInner.innerWidth(),
              t = this.$containerInner.innerHeight(),
              s = this.$dialog.position(),
              i = this.$dialog.outerWidth(),
              o = this.$dialog.outerHeight();
            if (0 == s.top && 0 == s.left && i == e && o == t) {
              let s = this.restoreWidth || i - 100,
                n = this.restoreHeight || o - 100;
              (this.targetWidth = s),
                (this.targetHeight = n),
                this.refreshSize(),
                this.settings.rememberSize && this.storeSize();
              let r = this.$dialog.outerWidth(),
                a = this.$dialog.outerHeight();
              this.$dialog.css({ left: Math.round((e - r) / 2) }),
                this.$dialog.css({ top: Math.round((t - a) / 2) });
            } else
              (this.restoreWidth = i),
                (this.restoreHeight = o),
                this.$dialog.css({ left: 0 }),
                this.$dialog.css({ top: 0 }),
                (this.targetWidth = this.$containerInner.innerWidth()),
                (this.targetHeight = this.$containerInner.innerHeight()),
                this.refreshSize(),
                this.settings.rememberSize && this.storeSize();
          }
          storeSize() {
            f.Z.storage.setItem(
              `dialogs.${this.dialogName}.width`,
              this.targetWidth
            ),
              f.Z.storage.setItem(
                `dialogs.${this.dialogName}.height`,
                this.targetHeight
              );
          }
          dragStart(e) {
            this.unfocusActiveElement(),
              l.GI.hideAllPopups(this),
              (this.dragging = !0),
              this.$window.on("mouseup", this.doDragEnd),
              this.$window.on("touchend", this.doDragEnd),
              this.$window.on("touchcancel", this.doDragEnd),
              this.$window.on("mousemove", this.doDragMove),
              this.$window.on("touchmove", this.doDragMove),
              this.$window.on("contextmenu", this.doDragContextMenu);
            let t = o.Z.getEventClientPos(e),
              s = this.$dialog.position();
            (this.dragOffsetX = t.x - s.left),
              (this.dragOffsetY = t.y - s.top),
              r.UI.dropdownHideInContext(this.$mainContent);
          }
          bindAll(e = this.$container) {
            "actions" in this.constructor &&
              $("*[data-action]", e).each((e, t) => {
                var s = $(t),
                  i = s.data("action").match(/(.+)->(.+)/);
                if (i && _.includes(this.constructor.actions, i[2])) {
                  var o = this[i[2]];
                  if (o) {
                    var n = {
                      name: i[2],
                      event: i[1],
                      $element: s,
                      binding: o.bind(this),
                    };
                    s.on(n.event, n.binding), this.actions.push(n);
                  }
                }
              });
            var t = [];
            if ("forms" in this.constructor)
              for (let e of this.constructor.forms)
                t.push(e.name), t.push(...e.fields);
            "targets" in this.constructor &&
              t.push(...this.constructor.targets);
            for (let s of t) this["$" + s] = $(`[data-target~=${s}]`, e);
            if (((this.formViews.length = 0), "forms" in this.constructor)) {
              let e = 0;
              for (let t of this.constructor.forms) {
                var s = {
                  $form: this["$" + t.name],
                  fields: t.fields,
                  index: e,
                  name: t.name,
                };
                this.formViews.push(s), e++;
              }
            }
          }
          unbindAll() {
            if ("targets" in this.constructor)
              for (var e of this.constructor.targets) delete this["$" + e];
            for (let e of this.actions) e.$element.off(e.event, e.binding);
            (this.actions.length = 0), (this.formViews.length = 0);
          }
          rebindAll() {
            this.unbindAll(), this.bindAll();
          }
          triggerSuccess(e = null) {
            var t;
            return (
              (this.success = !0),
              this.onSuccess && (t = this.onSuccess(e)),
              t || (t = Promise.resolve()),
              t
                .then(() => {
                  this.hide();
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          triggerSuccessCustomErrors(e = null) {
            var t;
            return (
              (this.success = !0),
              this.onSuccess && (t = this.onSuccess(e)),
              t || (t = Promise.resolve()),
              t.then(() => {
                this.hide();
              })
            );
          }
          keyDown(e) {}
          refreshFragments(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              f.Z.handleError(e);
            });
          }
          refreshFragmentsWithCustomErrorHandling(...e) {
            return this.fragments.refresh(...e);
          }
          refreshFragmentsWithFormValidation(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              u.l.handleFormError(e, this.formViews),
                this.refreshPositionIfNeeded();
            });
          }
          unfocusActiveElement() {
            let e = document.activeElement;
            e && $(e).blur();
          }
          hideClick() {
            this.hide();
          }
        }
      },
      58771: (e, t, s) => {
        "use strict";
        s.d(t, { U: () => o });
        class i {
          constructor(e) {
            (this.name = e), (this.callbacks = []);
          }
          registerCallback(e) {
            this.callbacks.push(e);
          }
          unregisterCallback(e) {
            var t = this.callbacks.indexOf(e);
            -1 != t && this.callbacks.splice(t, 1);
          }
          hasCallback(e) {
            return this.callbacks.indexOf(e) > -1;
          }
          trigger(e) {
            let t = this.callbacks.slice(0),
              s = [];
            for (let i of t) s.push(i(e));
            return s;
          }
          get length() {
            return this.callbacks.length;
          }
        }
        class o {
          constructor() {
            this.events = {};
          }
          trigger(e, t) {
            var s = this.events[e];
            return s ? s.trigger(t) : [];
          }
          on(e, t) {
            var s = this.events[e];
            s || ((s = new i(e)), (this.events[e] = s)), s.registerCallback(t);
          }
          off(e, t) {
            var s = this.events[e];
            s &&
              s.hasCallback(t) &&
              (s.unregisterCallback(t), 0 == s.length && delete this.events[e]);
          }
          has(e) {
            return e in this.events;
          }
        }
      },
      27181: (e, t, s) => {
        "use strict";
        s.d(t, { rN: () => r, JO: () => a, Ek: () => l });
        var i = s(5270);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        let n = new Map();
        class r {
          constructor(e, t) {
            let s = $(t);
            this.fields = [];
            for (let t in e) {
              let i = e[t],
                o = $(`[data-custom-field="${t}"]`, s);
              if (o.length > 0 && n.has(i.type)) {
                let e = new (n.get(i.type))(o, t);
                e.load(),
                  this.fields.push({
                    name: t,
                    $field: o,
                    control: e,
                    settings: i,
                  });
              }
            }
          }
          prepare() {
            let e = [];
            for (let t of this.fields) e.push(t.control.prepare());
            return Promise.all(e);
          }
          loaded() {
            for (let e of this.fields) e.control.loaded();
          }
          getValues(e) {
            let t = {};
            for (let s of this.fields)
              e(s) && (t[s.name] = s.control.getValue());
            return t;
          }
          updateVisibility(e) {
            for (let t of this.fields) {
              let s = e(t);
              t.control.setVisible(s), t.control.setLastVisible(!1);
            }
            let t = this.fields.filter((e) => !e.settings.is_compact);
            for (let e of t.reverse())
              if (e.control.getVisible()) {
                e.control.setLastVisible(!0);
                break;
              }
          }
          getField(e) {
            for (let t of this.fields) if (t.name == e) return t;
            return null;
          }
        }
        class a {
          constructor(e, t) {
            o(this, "fieldSelectors", { fieldSelection: ".field-selection" }),
              o(this, "fieldClasses", {
                hidden: "field--hidden",
                lastVisible: "field--last-visible",
                selectionHidden: "field-selection--hidden",
              }),
              (this.name = t),
              (this.$element = e),
              (this.$fieldSelection = e.closest(
                this.fieldSelectors.fieldSelection
              )),
              (this.hasFieldSelection = this.$fieldSelection.length > 0),
              (this.components = {}),
              (this.component = i.Z.registerComponent(
                this,
                this.$element.get(0),
                this.name
              )),
              i.Z.markComponentLoaded(this.component);
          }
          load() {}
          loaded() {}
          prepare() {
            return Promise.resolve();
          }
          getValue() {}
          focus() {}
          getVisible() {
            return !this.$element.hasClass(this.fieldClasses.hidden);
          }
          setVisible(e) {
            this.$element.toggleClass(this.fieldClasses.hidden, !e),
              this.$fieldSelection.toggleClass(
                this.fieldClasses.selectionHidden,
                !e
              );
          }
          setLastVisible(e) {
            this.$element.toggleClass(this.fieldClasses.lastVisible, e);
          }
        }
        function l(e, t) {
          n.set(e, t);
        }
        let d = s(85086);
        d.keys().forEach(d);
      },
      36649: (e, t, s) => {
        "use strict";
        s.d(t, { R: () => n });
        var i = s(58771);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n {
          constructor(e, t = !1) {
            o(this, "selectors", {
              tabIndexDisabled: '[tabindex="-1"]',
              tabbableElements:
                'a[href], object, [tabindex]:not([tabindex="-1"]), .ck-editor__editable, .timer-input',
              tabbableInputs: "input, select, textarea, button",
              visible: ":visible",
              enabled: ":enabled",
              focused: ":focus",
            }),
              o(this, "doElementFocus", (e) => {
                this.focusChanged();
              }),
              o(this, "doElementBlur", (e) => {
                this.focusChanged();
              }),
              (this.events = new i.U()),
              (this.includeHidden = t),
              (this.$elements = this.findElements(e)),
              this.registerEvents(this.$elements);
          }
          findElements(e) {
            let t = $(this.selectors.tabbableInputs, e)
                .filter(this.selectors.enabled)
                .not(this.selectors.tabIndexDisabled),
              s = $(this.selectors.tabbableElements, e)
                .not(this.selectors.tabIndexDisabled)
                .add(t);
            return (
              this.includeHidden || (s = s.filter(this.selectors.visible)), s
            );
          }
          unregisterEvents(e) {
            this.$elements.off("focus", this.doElementFocus),
              this.$elements.off("blur", this.doElementBlur);
          }
          registerEvents(e) {
            this.$elements.on("focus", this.doElementFocus),
              this.$elements.on("blur", this.doElementBlur);
          }
          refreshElements(e) {
            this.unregisterEvents(this.$elements),
              (this.$elements = this.findElements(e)),
              this.registerEvents(this.$elements);
          }
          focusChanged() {
            setTimeout(() => {
              this.events.trigger("change", {
                target: this,
                focused: this.getFocused(),
              });
            }, 1);
          }
          hasElement(e) {
            return this.$elements.is(e);
          }
          getFocused() {
            return this.$elements
              .get()
              .reduce((e, t) => $(t).is(this.selectors.focused) || e, !1);
          }
        }
      },
      7042: (e, t, s) => {
        "use strict";
        s.d(t, { X: () => d, l: () => h });
        var i,
          o,
          n,
          r = s(43689),
          a = s(47914),
          l = s(5270);
        class d extends Error {
          constructor(e, t) {
            super(e), (this.field = t);
          }
        }
        class h {
          static mapValidationErrors(e, t) {
            if (0 == t.length)
              throw new Error("Cannot map errors without views");
            var s = [],
              i = [],
              o = null;
            return (
              t.forEach((t, n) => {
                var a = {},
                  l = [];
                for (let s of t.fields) {
                  let t = r.Z.underscorize(s);
                  _.has(e, t) && (l.push(s), (a[s] = e[t]), i.push(t));
                }
                if (l.length > 0) {
                  var d = { view: t, fieldsWithErrors: l, fieldErrors: a };
                  s.push(d), 0 == n && (o = d);
                }
              }),
              _.forEach(e, (e, n) => {
                if (!_.includes(i, n)) {
                  o ||
                    ((o = {
                      view: t[0],
                      fieldsWithErrors: [],
                      fieldErrors: {},
                    }),
                    s.unshift(o));
                  let i = r.Z.camelcaserize(n);
                  o.fieldsWithErrors.push(i), (o.fieldErrors[i] = e);
                }
              }),
              s
            );
          }
          static showValidationErrors(e, t = null, s = null) {
            for (let i of e) {
              i.view.$form.addClass("error");
              let e = _.keys(i.fieldErrors);
              t && e.sort(t);
              for (let t of e) {
                let e = i.fieldErrors[t];
                for (let o of e) {
                  $(`[data-target~=${t}]`, i.view.$form)
                    .closest(".field")
                    .addClass("error");
                  let e = null;
                  s && (e = s(t, o)),
                    e || (e = `<li>${r.Z.htmlEscape(o)}</li>`),
                    $(".message-block--negative ul", i.view.$form).append(e);
                }
              }
            }
          }
          static highlightFieldError(e, t) {
            $(`[data-target~=${t}]`, e.$form)
              .closest(".field")
              .addClass("error");
          }
          static appendValidationError(e, t) {
            $("ul", e).append(`<li>${r.Z.htmlEscape(t)}</li>`);
          }
          static showValidationBlockErrors(e, t) {
            $("ul", e).empty();
            for (let s of t) this.appendValidationError(e, s);
          }
          static showValidationErrorMessage(e, t) {
            let s = $(".message-block--negative", e.$form);
            e.$form.addClass("error"),
              $("ul", s).empty(),
              this.appendValidationError(s, t);
          }
          static hideValidationErrors(e) {
            for (let t of e)
              t.$form.removeClass("error"),
                $(".message-block--negative ul", t.$form).empty(),
                $(".field", t.$form).removeClass("error");
          }
          static hidePageValidationErrors(e) {
            e.removeClass("error"),
              $(".message-block--negative ul", e).empty(),
              $(".field", e).removeClass("error");
          }
          static handlePageFormError(e, t, s = null, i = null) {
            if (
              e.response &&
              e.response.status == a.X.ValidationError &&
              e.response.data.errors
            ) {
              let r = [{ $form: t, fields: [] }];
              var o = e.response.data.errors,
                n = this.mapValidationErrors(o, r);
              this.hideValidationErrors(r),
                this.showValidationErrors(n, s, i),
                n.length > 0 &&
                  $(
                    `[data-target~=${n[0].fieldsWithErrors[0]}]`,
                    n[0].view.$form
                  ).focus();
            } else l.Z.handleError(e);
          }
          static scrollResizableDialogIfNeeded(e) {
            if (0 == e.length) return;
            let t = e[0].view.$form.closest(this.selectors.dialog);
            0 != t.length &&
              t.is(this.selectors.dialogResizable) &&
              $(this.selectors.dialogContent, t).scrollTop(0);
          }
          static handleClientFormError(e, t) {
            t instanceof d
              ? (h.showValidationErrorMessage(e, t.message),
                t.field && h.highlightFieldError(e, t.field))
              : l.Z.handleError(t);
          }
          static handleFormError(e, t, s = null, i = null) {
            if (
              e.response &&
              e.response.status == a.X.ValidationError &&
              (e.response.data.errors || e.response.data.message)
            ) {
              var o = e.response.data.errors
                  ? e.response.data.errors
                  : { unnamed: [e.response.data.message] },
                n = this.mapValidationErrors(o, t);
              this.hideValidationErrors(t),
                this.showValidationErrors(n, s, i),
                n.length > 0 &&
                  ($(
                    `[data-target~=${n[0].fieldsWithErrors[0]}]`,
                    n[0].view.$form
                  ).focus(),
                  h.scrollResizableDialogIfNeeded(n));
            } else l.Z.handleError(e);
          }
          static handleTabbedFormError(e, t, s, i = null, o = null) {
            if (
              e.response &&
              e.response.status == a.X.ValidationError &&
              (e.response.data.errors || e.response.data.message)
            ) {
              var n = e.response.data.errors
                  ? e.response.data.errors
                  : { unnamed: [e.response.data.message] },
                r = this.mapValidationErrors(n, t);
              if (
                (this.hideValidationErrors(t),
                this.showValidationErrors(r, i, o),
                r.length > 0)
              ) {
                var d = _.map(r, (e) => e.view.index),
                  c = s.getCurrentTab();
                _.includes(d, s.viewIndex) || (s.showTab(d[0]), (c = d[0]));
                for (let e of r)
                  e.view.index == c &&
                    $(
                      `[data-target~=${e.fieldsWithErrors[0]}]`,
                      e.view.$form
                    ).focus();
                h.scrollResizableDialogIfNeeded(r);
              }
            } else l.Z.handleError(e);
          }
          static handleCustomFormError(e, t) {
            if (
              e.response &&
              e.response.status == a.X.ValidationError &&
              (e.response.data.errors || e.response.data.message)
            ) {
              var s = e.response.data.errors
                ? e.response.data.errors
                : { unnamed: [e.response.data.message] };
              let i = [];
              for (let e in s) i.push(...s[e]);
              return t(s, i), !0;
            }
            return l.Z.handleError(e), !1;
          }
          static handleCustomMessageError(e, t) {
            return e.response &&
              e.response.status == a.X.ValidationError &&
              e.response.data.message
              ? (t(e.response.data.message), !0)
              : (l.Z.handleError(e), !1);
          }
        }
        (n = {
          dialog: ".dialog",
          dialogContent: ".dialog__main__content",
          dialogResizable: ".dialog--resizable",
        }),
          (o = "selectors") in (i = h)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      51385: (e, t, s) => {
        "use strict";
        s.d(t, { n: () => o });
        var i = s(96622);
        class o {
          constructor(e = null) {
            (this.scope = e), (this.fragments = {});
          }
          register(e, t, s = {}) {
            let i = _.defaults(s, { initUi: !0, completedCallback: null });
            this.fragments[e] = { renderCallback: t, settings: i };
          }
          refresh(...e) {
            let t = [];
            for (let s of e) {
              let e,
                i = null,
                o = null;
              if (
                (Array.isArray(s)
                  ? ((e = s[0]), (i = s[1]), s[2] && (o = s[2]))
                  : (e = s),
                e in this.fragments)
              ) {
                let s,
                  n = this.fragments[e];
                (s = i ? n.renderCallback(i) : n.renderCallback()),
                  s || (s = Promise.resolve()),
                  (s.fragmentName = e),
                  (s.fragment = n),
                  (s.fragmentTarget = o),
                  t.push(s);
              }
            }
            return Promise.all(t).then(() => {
              let e = [];
              for (let s of t) {
                let t = s.then((e) => {
                  if (e && "data" in e) {
                    let t = s.fragmentTarget
                      ? $(s.fragmentTarget)
                      : $(`[data-fragment~="${s.fragmentName}"]`, this.scope);
                    t.html(e.data),
                      s.fragment.settings.completedCallback &&
                        s.fragment.settings.completedCallback(t),
                      s.fragment.settings.initUi && i.UI.initialize(t);
                  } else if (e && e.response && "data" in e.response) {
                    let t = document.createElement("div");
                    t.innerHTML = e.response.data;
                    for (let o of t.children) {
                      let t = o.dataset.fragmentFor;
                      if (!t) continue;
                      if (!_.includes(e.fragments, t)) continue;
                      let n = $(`[data-fragment~="${t}"]`, this.scope);
                      n.empty(),
                        n.append(o.childNodes),
                        s.fragment.settings.initUi && i.UI.initialize(n);
                    }
                    s.fragment.settings.completedCallback &&
                      s.fragment.settings.completedCallback();
                  }
                });
                e.push(t);
              }
              return Promise.all(e);
            });
          }
          empty(...e) {
            for (let t of e) $(`[data-fragment~="${t}"]`, this.scope).empty();
          }
          getClosest(e, t) {
            return $(e).closest(`[data-fragment~="${t}"]`);
          }
        }
      },
      24406: (e, t, s) => {
        "use strict";
        s.d(t, { VH: () => u, vq: () => c });
        var i = s(58771),
          o = s(17746);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends o.a {
          constructor() {
            super("common.glass_overlay", {});
          }
          load() {}
        }
        n(r, "actions", []), n(r, "targets", []);
        var a = s(10380),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h {
          static get External() {
            return 0;
          }
          static get Window() {
            return 1;
          }
          static get Overlay() {
            return 2;
          }
          static get Navigation() {
            return 3;
          }
        }
        class c extends Error {}
        class u {
          constructor(e, t = {}) {
            d(this, "defaults", {
              modal: !1,
              closeOnNavigate: !0,
              messages: !1,
              messagesAllowAllWindows: !1,
              messagesOrigin: null,
            }),
              d(this, "doClosedInterval", () => {
                if (!this.opened || !this.windowHandle)
                  return (
                    clearInterval(this.closedInterval),
                    void (this.closedInterval = null)
                  );
                this.windowHandle &&
                  this.windowHandle.closed &&
                  this.close(h.Window);
              }),
              d(this, "doModalOverlayHide", () => {
                (this.modalOverlay = null),
                  this.opened && this.close(h.Overlay);
              }),
              d(this, "doMessengerMessage", (e) => {
                this.events.trigger("message", {
                  target: this,
                  originalEvent: e.originalEvent,
                  data: e.data,
                });
              }),
              d(this, "doAppNavigate", (e) => {
                this.settings.closeOnNavigate && this.close(h.Navigation);
              }),
              (this.settings = {}),
              _.defaults(this.settings, t, this.defaults),
              (this.url = e),
              this.initialize(),
              (this.events = new i.U());
          }
          calculateWindowPosition(e, t) {
            let s =
                void 0 !== window.screenLeft
                  ? window.screenLeft
                  : window.screenX,
              i =
                void 0 !== window.screenTop ? window.screenTop : window.screenY;
            return {
              width: e,
              height: t,
              left:
                s +
                ((window.outerWidth
                  ? window.outerWidth
                  : document.documentElement.clientWidth
                  ? document.documentElement.clientWidth
                  : window.screen.width) -
                  e) /
                  2,
              top:
                i +
                ((window.outerHeight
                  ? window.outerHeight
                  : document.documentElement.clientHeight
                  ? document.documentElement.clientHeight
                  : window.screen.height) -
                  t) /
                  2,
            };
          }
          initialize() {
            (this.windowHandle = null),
              (this.messenger = null),
              (this.opened = !1),
              (this.closedInterval = null),
              (this.modalOverlay = null);
          }
          open(e, t) {
            this.opened && this.close();
            let s = this.calculateWindowPosition(e, t);
            if (
              ((this.windowHandle = window.open(
                this.url,
                "",
                `scrollbars=yes,\n            location=yes,\n            width=${s.width},\n            height=${s.height},\n            top=${s.top},\n            left=${s.left}`
              )),
              !this.windowHandle || this.windowHandle.closed)
            )
              throw new c("Could not open glass window");
            return (
              this.settings.modal &&
                ((this.modalOverlay = new r()),
                (this.modalOverlay.onHide = this.doModalOverlayHide),
                this.modalOverlay.show()),
              (this.opened = !0),
              (this.closedInterval = setInterval(this.doClosedInterval, 100)),
              l.Z.events.on("navigate", this.doAppNavigate),
              this.settings.messages &&
                ((this.messenger = new a.P()),
                this.messenger.events.on("message", this.doMessengerMessage),
                this.messenger.startListen(
                  this.settings.messagesAllowAllWindows
                    ? null
                    : this.windowHandle,
                  this.settings.messagesOrigin
                )),
              !0
            );
          }
          openAsync(e, t) {
            return new Promise((s, i) => {
              this.events.on("close", () => {
                s();
              }),
                this.open(e, t);
            });
          }
          navigate(e) {
            (this.url = e),
              this.opened &&
                this.windowHandle &&
                (this.windowHandle.location = e);
          }
          close(e = h.External) {
            this.opened &&
              this.windowHandle &&
              (this.windowHandle.close(),
              (this.opened = !1),
              this.settings.messages &&
                this.messenger &&
                (this.messenger.stopListen(), (this.messenger = null)),
              this.modalOverlay &&
                (this.modalOverlay.hide(), (this.modalOverlay = null)),
              clearInterval(this.closedInterval),
              (this.closedInterval = null),
              l.Z.events.off("navigate", this.doAppNavigate),
              this.events.trigger("close", { target: this, reason: e }),
              this.initialize());
          }
        }
      },
      43689: (e, t, s) => {
        "use strict";
        s.d(t, { S: () => i, Z: () => o });
        class i extends Error {}
        class o {
          static getEventClientPos(e) {
            return "touches" in e.originalEvent
              ? {
                  x: Math.round(e.originalEvent.touches[0].clientX),
                  y: Math.round(e.originalEvent.touches[0].clientY),
                }
              : { x: e.clientX, y: e.clientY };
          }
          static getEventPagePos(e) {
            return "touches" in e.originalEvent
              ? {
                  x: Math.round(e.originalEvent.touches[0].pageX),
                  y: Math.round(e.originalEvent.touches[0].pageY),
                }
              : { x: e.pageX, y: e.pageY };
          }
          static arrayToMap(e, t = "id") {
            let s = new Map();
            for (let i of e) {
              let e = i[t];
              e && s.set(e, i);
            }
            return s;
          }
          static dasherize(e) {
            return e
              .toString()
              .replace(/([A-Z])/g, (e, t) => `-${t.toLowerCase()}`);
          }
          static underscorize(e) {
            return e
              .toString()
              .replace(/([A-Z])/g, (e, t) => `_${t.toLowerCase()}`);
          }
          static camelcaserize(e) {
            return _.camelCase(e);
          }
          static random(e, t) {
            return Math.floor(Math.random() * (t - e + 1)) + e;
          }
          static randomColor() {
            let e = "";
            for (let t = 0; t < 6; t++)
              e += Math.random().toString(16).substr(-6).substr(-1);
            return "#" + e;
          }
          static isParentNode(e, t) {
            let s = e.parentNode;
            for (; null != s; ) {
              if (s == t) return !0;
              s = s.parentNode;
            }
            return !1;
          }
          static isSelfOrParentNode(e, t) {
            let s = e;
            for (; null != s; ) {
              if (s == t) return !0;
              s = s.parentNode;
            }
            return !1;
          }
          static htmlEscape(e) {
            return e
              .toString()
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
          }
          static template(e, t) {
            let s = e;
            for (let e in t)
              s = _.replace(
                s,
                new RegExp("\\$\\(" + e + "\\)", "g"),
                this.htmlEscape(t[e])
              );
            return s;
          }
          static lang(e, t) {
            if (!window.lang) return e;
            let s = window.lang[e] || e;
            return (
              _.forEachRight(t, (e, t) => {
                s = _.replace(s, `:${t}`, e);
              }),
              s
            );
          }
          static langEscape(e, t) {
            let s = window.lang[e] || e;
            return (
              _.forEachRight(t, (e, t) => {
                s = _.replace(s, `:${t}`, this.htmlEscape(e));
              }),
              s
            );
          }
          static getFileExtension(e) {
            let t = e.lastIndexOf(".");
            return "" === e || t < 1 ? "" : e.slice(t + 1);
          }
          static getFileBasename(e) {
            let t = e.lastIndexOf(".");
            return "" === e || t < 1 ? "" : e.slice(0, t);
          }
          static fuzzySearch(e, t) {
            let s = e.length,
              i = t.length;
            if (((t = t.toLowerCase()), (e = e.toLowerCase()), i > s))
              return !1;
            if (i === s) return t === e;
            e: for (let o = 0; o < i; o++) {
              let i = 0,
                n = t.charCodeAt(o);
              for (; i < s; ) if (e.charCodeAt(i++) === n) continue e;
              return !1;
            }
            return !0;
          }
          static getTagForText(e) {
            return e
              .toString()
              .replace(/&#x\d+?;/g, "")
              .replace(/&.+?;/g, "")
              .replace(/[~!@#&$%^*()_=+\\[{}\]|/.,;:'"?]/g, "")
              .replace(/([_\s]+)/g, "-")
              .replace(/[^\S-]/g, "")
              .toLowerCase();
          }
          static generateUuidV4() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
              /[xy]/g,
              function (e) {
                var t = (16 * Math.random()) | 0;
                return ("x" == e ? t : (3 & t) | 8).toString(16);
              }
            );
          }
          static formatSecondsFormal(e, t = !1) {
            let s,
              i = Math.trunc(e / 3600),
              o = Math.trunc((e - 3600 * i) / 60),
              n = e - 3600 * i - 60 * o,
              r = i > 0;
            return (
              (i = i.toString().padStart(2, "0")),
              (o = o.toString().padStart(2, "0")),
              (n = n.toString().padStart(2, "0")),
              (s = r || t ? `${i}:${o}:${n}` : `${o}:${n}`),
              s
            );
          }
          static microsecondsToSeconds(e) {
            return Math.trunc(e / 1e6);
          }
          static truncateText(e, t) {
            return (e = e.trim()).length <= t
              ? e
              : e.substring(0, t).trim() + " â€¦";
          }
          static removeWhitespaceFromTextList(e) {
            return e
              .split("\n")
              .map((e) => e.trim())
              .filter((e) => e.length > 0)
              .join("\n");
          }
          static splitTextList(e) {
            return e.split("\n").filter((e) => e.length > 0);
          }
          static base64EncodeUrlsafe(e) {
            let t = btoa(e);
            return _.trimEnd(t.replace("+", "-").replace("/", "_"), "=");
          }
          static roundToDecimal(e, t) {
            return +(Math.round(e + "e+" + t) + "e-" + t);
          }
          static longestCommonPrefix(e) {
            let t = "";
            if (0 == e.length) return t;
            for (let s = 0; s < e[0].length; s++) {
              let i = e[0][s];
              for (let o = 1; o < e.length; o++) if (e[o][s] !== i) return t;
              t += i;
            }
            return t;
          }
          static longestCommonPrefixWithDelimiter(e, t = ".:\\/") {
            let s = "";
            if (0 == e.length) return s;
            let i = e[0].length;
            for (let s = 0; s < t.length; s++) {
              let o = e[0].lastIndexOf(t.charAt(s));
              if (o >= 0) {
                i = o + 1;
                break;
              }
            }
            for (let t = 0; t < i; t++) {
              let i = e[0][t];
              for (let o = 1; o < e.length; o++) if (e[o][t] !== i) return s;
              s += i;
            }
            return s;
          }
          static originFromUrl(e) {
            return new URL(e).origin;
          }
          static validateUrl(e) {
            try {
              new URL(e);
            } catch {
              return !1;
            }
            return !0;
          }
          static scorePassword(e) {
            let t = 0;
            if (!e) return t;
            let s = {};
            for (let i = 0; i < e.length; i++)
              (s[e[i]] = (s[e[i]] || 0) + 1), (t += 5 / s[e[i]]);
            let i = {
                digits: /\d/.test(e),
                lower: /[a-z]/.test(e),
                upper: /[A-Z]/.test(e),
                nonWords: /\W/.test(e),
              },
              o = 0;
            for (let e in i) o += 1 == i[e] ? 1 : 0;
            return (t += 10 * (o - 1)), Math.round(t);
          }
          static trimHtmlFrom(e, t) {
            let s = new DOMParser().parseFromString(e, "text/html");
            for (; s.body.children.length; ) {
              let e = t ? 0 : s.body.children.length - 1,
                i = s.body.children[e];
              if (
                0 != i.textContent.replace(/\s/g, "").length ||
                "p" !== i.localName ||
                0 != i.children.length
              )
                break;
              i.remove();
            }
            return s.body.innerHTML;
          }
          static trimHtml(e) {
            return (e = this.trimHtmlFrom(e, !0)), this.trimHtmlFrom(e, !1);
          }
          static appendUrlParameter(e, t, s) {
            let i = new URL(e);
            return i.searchParams.set(t, s), i.toString();
          }
          static formatBytes(e) {
            return e >= 1073741824
              ? Math.round(e / 1073741824) + "G"
              : e >= 1048576
              ? Math.round(e / 1048576) + "M"
              : e >= 1024
              ? Math.round(e / 1024) + "K"
              : e + "B";
          }
          static readFileAsArrayBuffer(e) {
            return new Promise((t, s) => {
              let o = new FileReader();
              (o.onload = () => {
                t(o.result);
              }),
                (o.onerror = () => {
                  s(new i(`Could not open file: ${e.name}`));
                }),
                o.readAsArrayBuffer(e);
            });
          }
        }
      },
      11802: (e, t, s) => {
        "use strict";
        s.d(t, { N: () => i });
        class i {
          static get ESC() {
            return 27;
          }
          static get Enter() {
            return 13;
          }
          static get Control() {
            return 17;
          }
          static get Shift() {
            return 16;
          }
          static get Alt() {
            return 18;
          }
          static get Tab() {
            return 9;
          }
          static get Backspace() {
            return 8;
          }
          static get Space() {
            return 32;
          }
          static get Command() {
            return 224;
          }
          static get CommandWebkit() {
            return 93;
          }
          static get PageUp() {
            return 33;
          }
          static get PageDown() {
            return 34;
          }
          static get End() {
            return 35;
          }
          static get Home() {
            return 36;
          }
          static get LeftArrow() {
            return 37;
          }
          static get RightArrow() {
            return 39;
          }
          static get UpArrow() {
            return 38;
          }
          static get DownArrow() {
            return 40;
          }
          static get Slash() {
            return 191;
          }
          static get E() {
            return 69;
          }
          static get H() {
            return 72;
          }
          static get J() {
            return 74;
          }
          static get K() {
            return 75;
          }
          static get L() {
            return 76;
          }
          static get P() {
            return 80;
          }
          static get R() {
            return 82;
          }
          static get S() {
            return 83;
          }
        }
      },
      10380: (e, t, s) => {
        "use strict";
        s.d(t, { P: () => n });
        var i = s(58771),
          o = s(43689);
        class n {
          constructor() {
            var e, t;
            (t = (e) => {
              if (!this.allowedSource || this.allowedSource == e.source) {
                if (
                  this.allowedOriginUrl &&
                  o.Z.originFromUrl(this.allowedOriginUrl) != e.origin
                )
                  return;
                this.events.trigger("message", {
                  originalEvent: e,
                  data: e.data,
                });
              }
            }),
              (e = "doWindowMessage") in this
                ? Object.defineProperty(this, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[e] = t),
              (this.events = new i.U()),
              (this.allowedOrigin = null),
              (this.allowedSource = null);
          }
          startListen(e = null, t = null) {
            (this.allowedOriginUrl = t),
              (this.allowedSource = e),
              window.addEventListener("message", this.doWindowMessage, !1);
          }
          stopListen() {
            (this.allowedOrigin = null),
              (this.allowedSource = null),
              window.removeEventListener("message", this.doWindowMessage, !1);
          }
          post(e, t, s) {
            e.postMessage(s, t);
          }
        }
      },
      16559: (e, t, s) => {
        "use strict";
        s.d(t, { T: () => c });
        var i = s(43689),
          o = s(13814),
          n = s(15612),
          r = s(47914),
          a = s(71258),
          l = s(50609);
        class d extends l.V {
          constructor(e) {
            let t = 600;
            "release_print" == e && (t = 680),
              super("notifications.notification_dialog", { width: t });
          }
          load() {}
        }
        var h = s(5270);
        class c {
          static open(e) {
            switch (e.target) {
              case n.g.NotificationsTargetLinkInternal:
                return this.openInternalLinkNotification(e);
              case n.g.NotificationsTargetLinkExternal:
                return this.openExternalLinkNotification(e);
              case n.g.NotificationsTargetAction:
                return this.openActionNotification(e);
              default:
                return Promise.resolve();
            }
          }
          static openInternalLinkNotification(e) {
            return this.markRead(e).then(() =>
              o.N.get(e.target_resource)
                .then(() => o.N.visit(e.target_resource))
                .catch((e) => {
                  e.response &&
                  e.response.status &&
                  e.response.status == r.X.NotFoundError
                    ? new a.w({
                        title: i.Z.lang("errors.notification_404_title"),
                        message: i.Z.lang("errors.notification_404_message"),
                      }).show()
                    : h.Z.handleError(e);
                })
            );
          }
          static openExternalLinkNotification(e) {
            return this.markRead(e).then(
              () =>
                new Promise(() => {
                  o.N.redirect(e.target_resource);
                })
            );
          }
          static markRead(e) {
            return e.is_read
              ? Promise.resolve()
              : o.N.post("users/profile/read_notification/" + e.id);
          }
          static openActionNotification(e) {
            return this.markRead(e).then(() => {
              let t,
                s,
                i = e.target_resource.indexOf(":");
              return (
                -1 != i
                  ? ((t = e.target_resource.substr(0, i)),
                    (s = e.target_resource.substr(i + 1)))
                  : (t = e.target_resource),
                "dialog" === t
                  ? this.showDialogNotification(s)
                  : Promise.resolve()
              );
            });
          }
          static showDialogNotification(e) {
            return o.N.post("users/profile/render_notification_dialog", {
              dialog: e,
            }).then((t) => {
              new d(e).show(t.data);
            });
          }
          static showPageNotification(e) {
            return e.is_read ? Promise.resolve() : this.open(e);
          }
        }
      },
      61470: (e, t, s) => {
        "use strict";
        s.d(t, { B: () => a, f: () => l });
        var i = s(24406),
          o = s(47914),
          n = s(15612),
          r = s(5270);
        class a extends Error {}
        class l {
          constructor(e) {
            this.url = e;
          }
          start() {
            return new Promise((e, t) => {
              let s = new i.VH(this.url, {
                modal: !0,
                messages: !0,
                messagesOrigin: r.Z.context.appUrl,
              });
              s.events.on("close", () => {
                e({ isSuccess: !1, error: null });
              }),
                s.events.on("message", (t) => {
                  t.data &&
                    t.data.messageType == n.g.MessageOauthComplete &&
                    (e({ isSuccess: t.data.isSuccess, error: t.data.error }),
                    s.close());
                }),
                s.open(700, 600);
            });
          }
          static isOauthRequiredError(e) {
            return (
              e.response &&
              e.response.status == o.X.ForbiddenError &&
              e.response.data.message &&
              e.response.data.code &&
              e.response.data.code == n.g.Errors403UserOAuthRequired
            );
          }
        }
      },
      17746: (e, t, s) => {
        "use strict";
        s.d(t, { a: () => p });
        var i = s(47914),
          o = s(55578),
          n = s(96622),
          r = s(51385),
          a = s(11802),
          l = s(58771),
          d = s(7042),
          h = s(2043),
          c = s.n(h),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p {
          constructor(e, t = {}) {
            g(this, "defaults", {
              hideOnESC: !0,
              onSubmitForm: null,
              breadcrumbs: !0,
              animations: !0,
            }),
              g(this, "overlaySelectors", {
                containerInner: ".overlay-container__inner",
                overlay: ".overlay",
                hide: ".overlay-hide",
              }),
              g(this, "overlayClasses", {
                containerVisible: "overlay-container--visible",
              }),
              g(this, "doHideTransitionEnd", () => {
                if (this.$container) {
                  let e = this.onHidden,
                    t = this.success;
                  this.remove(), e && e(t);
                }
              }),
              g(this, "doKeyDown", (e, t) => {
                if (t.which == a.N.Enter && this.settings.onSubmitForm) {
                  var s = $("input:focus", this.$overlay);
                  s.length > 0 &&
                    0 == s.closest(".dropdown").length &&
                    0 == s.closest(".checkbox").length &&
                    (t.preventDefault(),
                    this.settings.onSubmitForm && this.settings.onSubmitForm());
                }
                return this.keyDown(t);
              }),
              (this.settings = {}),
              _.defaults(this.settings, t, this.defaults),
              (this.overlayName = e),
              this.initialize(),
              (this.events = new l.U());
          }
          initialize() {
            (this.layer = null),
              (this.$container = null),
              (this.$overlay = null),
              (this.visible = !1),
              (this.actions = []),
              (this.onSuccess = null),
              (this.success = !1),
              (this.onHide = null),
              (this.onHidden = null),
              (this.formViews = []),
              (this.components = {}),
              (this.component = null),
              (this.fragments = null),
              (this.params = null),
              (this.zindex = null);
          }
          show(e = null) {
            c().info(
              "overlay: Showing overlay",
              this.overlayName,
              this.settings
            );
            let t = e;
            if (!t && ((t = u.Z.views.get(this.overlayName)), !t))
              throw new Error(`Overlay view "${this.overlayName}" not found.`);
            (this.$container = $(t)),
              (this.$containerInner = $(
                this.overlaySelectors.containerInner,
                this.$container
              )),
              (this.$overlay = $(
                this.overlaySelectors.overlay,
                this.$container
              )),
              (this.params = null);
            let s = this.$overlay.attr("data-params");
            s && (this.params = JSON.parse(s));
            let i = this.$overlay.attr("data-views");
            if (i) {
              let e = JSON.parse(i);
              u.Z.views.add(e);
            }
            return (
              this.settings.breadcrumbs &&
                u.Z.addBreadcrumb(
                  "ui.overlay",
                  `Showing overlay '${this.overlayName}'`
                ),
              (this.component = u.Z.registerComponent(
                this,
                this.$overlay.get(0),
                this.overlayName
              )),
              u.Z.markComponentLoaded(this.component),
              this.bindAll(),
              (this.layer = u.Z.layers.add({
                hideOnESC: this.settings.hideOnESC,
                onHide: (e) => {
                  this.hide();
                },
                onKeyDown: this.doKeyDown,
                dialog: !0,
                rootNode: this.$container.get(0),
              })),
              (this.zindex = u.Z.zindex.register()),
              this.$container.css("z-index", this.zindex),
              $(this.overlaySelectors.hide, this.$container).click(() =>
                this.hide()
              ),
              $("body").append(this.$container),
              this.refreshUi(),
              (this.fragments = new r.n(this.$overlay)),
              this.load(),
              Promise.resolve()
                .then(() => {
                  let e = this.prepare();
                  return (
                    e || (e = Promise.resolve()),
                    e.then(() => {
                      this.$container.addClass(
                        this.overlayClasses.containerVisible
                      ),
                        (this.visible = !0),
                        this.$container.focus(),
                        $("[autofocus]", this.$container).first().focus(),
                        o.e.markLoaded(this.$overlay),
                        this.loaded();
                    })
                  );
                })
                .catch((e) => {
                  throw (this.cleanup(), this.remove(), e);
                })
            );
          }
          load() {}
          loaded() {}
          unload() {}
          prepare() {}
          resize() {}
          cleanup() {
            this.unload(),
              u.Z.unregisterComponent(this.component),
              u.Z.layers.remove(this.layer),
              u.Z.zindex.unregister(this.zindex);
          }
          hide() {
            this.visible &&
              (c().info("overlay: Hiding overlay", this.overlayName),
              this.settings.breadcrumbs &&
                u.Z.addBreadcrumb(
                  "ui.overlay",
                  `Hiding overlay '${this.overlayName}'`
                ),
              this.cleanup(),
              (this.visible = !1),
              this.onHide && this.onHide(this.success),
              this.settings.animations
                ? (this.$container.one(
                    "transitionend",
                    this.doHideTransitionEnd
                  ),
                  setTimeout(
                    this.doHideTransitionEnd,
                    i.X.DialogHideTransitionDelay
                  ),
                  this.$container.removeClass(
                    this.overlayClasses.containerVisible
                  ))
                : (this.$container.removeClass(
                    this.overlayClasses.containerVisible
                  ),
                  this.doHideTransitionEnd()));
          }
          remove() {
            this.unbindAll(), this.$container.remove(), this.initialize();
          }
          refreshUi() {
            n.UI.initialize(this.$overlay);
          }
          refreshForms() {
            this.unbindAll(), this.bindAll(), this.refreshUi();
          }
          bindAll(e = this.$container) {
            "actions" in this.constructor &&
              $("*[data-action]", e).each((e, t) => {
                var s = $(t),
                  i = s.data("action").match(/(.+)->(.+)/);
                if (i && _.includes(this.constructor.actions, i[2])) {
                  var o = this[i[2]];
                  if (o) {
                    var n = {
                      name: i[2],
                      event: i[1],
                      $element: s,
                      binding: o.bind(this),
                    };
                    s.on(n.event, n.binding), this.actions.push(n);
                  }
                }
              });
            var t = [];
            if ("forms" in this.constructor)
              for (let e of this.constructor.forms)
                t.push(e.name), t.push(...e.fields);
            "targets" in this.constructor &&
              t.push(...this.constructor.targets);
            for (let s of t) this["$" + s] = $(`[data-target~=${s}]`, e);
            if (((this.formViews.length = 0), "forms" in this.constructor)) {
              let e = 0;
              for (let t of this.constructor.forms) {
                var s = {
                  $form: this["$" + t.name],
                  fields: t.fields,
                  index: e,
                  name: t.name,
                };
                this.formViews.push(s), e++;
              }
            }
          }
          unbindAll() {
            if ("targets" in this.constructor)
              for (var e of this.constructor.targets) delete this["$" + e];
            for (let e of this.actions) e.$element.off(e.event, e.binding);
            (this.actions.length = 0), (this.formViews.length = 0);
          }
          rebindAll() {
            this.unbindAll(), this.bindAll();
          }
          triggerSuccess(e = null) {
            var t;
            return (
              (this.success = !0),
              this.onSuccess && (t = this.onSuccess(e)),
              t || (t = Promise.resolve()),
              t
                .then(() => {
                  this.hide();
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          keyDown(e) {}
          refreshFragments(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              u.Z.handleError(e);
            });
          }
          refreshFragmentsWithCustomErrorHandling(...e) {
            return this.fragments.refresh(...e);
          }
          refreshFragmentsWithFormValidation(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              d.l.handleFormError(e, this.formViews),
                this.refreshPositionIfNeeded();
            });
          }
          unfocusActiveElement() {
            let e = document.activeElement;
            e && $(e).blur();
          }
        }
      },
      26454: (e, t, s) => {
        "use strict";
        s.d(t, { v: () => u });
        var i = s(24862),
          o = s(58771),
          n = s(11802),
          r = s(47914),
          a = s(51385),
          l = s(44362),
          d = s(43689),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.Qr {
          constructor(...e) {
            super(...e),
              c(this, "pageSelectors", {
                toolbarButton: ".page-header .page-header__toolbar button",
              }),
              c(this, "defaults", { onSubmitForm: null }),
              c(this, "doShortcutSave", (e) => {
                e.preventDefault();
              }),
              c(this, "doSidebarChange", (e) => {
                this.triggerResize(), this.refreshResponsiveContainer();
              }),
              c(this, "doWindowResize", (e) => {
                this.triggerResize(), this.refreshResponsiveContainer();
              }),
              c(this, "doPrintChange", (e) => {
                this.triggerResize(), this.refreshResponsiveContainer();
              }),
              c(this, "doKeyDown", (e, t) => {
                if (t.which == n.N.Enter && this.settings.onSubmitForm) {
                  var s = $("input:focus", this.element);
                  s.length > 0 &&
                    0 == s.closest(".dropdown").length &&
                    0 == s.closest(".checkbox").length &&
                    (t.preventDefault(),
                    this.settings.onSubmitForm && this.settings.onSubmitForm());
                }
                this.shortcuts.keyDown(t), this.triggerKeyDown(t);
              });
          }
          initialize(e = {}) {
            super.initialize(),
              (this.settings = {}),
              _.defaults(this.settings, e, this.defaults),
              (this.layer = null);
          }
          connect() {
            h.Z.registerLayout("page", this),
              (this.events = new o.U()),
              (this.shortcuts = new l.f()),
              (this.fragments = new a.n(this.element)),
              (this.components = {}),
              (this.$window = $(window)),
              (this.loaded = !1),
              (this.connected = !0),
              (this.params = null);
            let e = $(this.element).attr("data-params");
            e && (this.params = JSON.parse(e));
            let t = $(this.element).attr("data-views");
            if (t) {
              let e = JSON.parse(t);
              h.Z.views.add(e);
            }
            (this.layer = h.Z.layers.add({
              onKeyDown: this.doKeyDown,
              rootNode: this.element,
            })),
              (this.hasResponsiveContainer = !1),
              this.hasResponsiveContainerTarget &&
                ((this.hasResponsiveContainer = !0),
                this.calculateResponsiveContainerWidths(),
                window.addEventListener("resize", this.doWindowResize, {
                  passive: !0,
                }),
                h.Z.events.on("printchange", this.doPrintChange),
                h.Z.layout.sidebar &&
                  h.Z.layout.sidebar.events.on("change", this.doSidebarChange)),
              (this.component = h.Z.registerComponent(
                this,
                this.element,
                "page"
              )),
              h.Z.delayLoaded(() => {
                this.connected &&
                  ((this.$toolbarButtons = $(
                    this.pageSelectors.toolbarButton,
                    this.element
                  )),
                  this.$toolbarButtons.on("click", this.pageToolbarButtonClick),
                  this.load(),
                  h.Z.markComponentLoaded(this.component),
                  (this.loaded = !0));
              }),
              this.prepare(),
              this.shortcuts.register(n.N.S, this.doShortcutSave, {
                control: !0,
              });
          }
          disconnect() {
            this.hasResponsiveContainerTarget &&
              (window.removeEventListener("resize", this.doWindowResize, {
                passive: !0,
              }),
              h.Z.events.off("printchange", this.doPrintChange),
              h.Z.layout.sidebar &&
                h.Z.layout.sidebar.events.off("change", this.doSidebarChange)),
              this.loaded &&
                (this.$toolbarButtons &&
                  this.$toolbarButtons.off(
                    "click",
                    this.pageToolbarButtonClick
                  ),
                this.unload(),
                (this.loaded = !1)),
              h.Z.layers.remove(this.layer),
              h.Z.unregisterComponent(this.component),
              h.Z.unregisterLayout("page", this),
              (this.connected = !1);
          }
          pageToolbarButtonClick(e) {
            $(e.currentTarget).blur();
          }
          triggerResponsiveContainerResize() {
            this.events.trigger("responsivecontainerresize", { target: this }),
              this.responsiveContainerResize();
          }
          refreshResponsiveContainer() {
            this.calculateResponsiveContainerWidths(),
              this.triggerResponsiveContainerResize();
          }
          calculateResponsiveContainerWidths() {
            for (let e of this.responsiveContainerTargets)
              (e.dataset.width = e.clientWidth), e.classList.add("responsive");
            for (let e of this.responsiveContainerTargets) {
              let t = e.dataset.width;
              for (
                let s = r.X.ResponsiveStart;
                s <= r.X.ResponsiveEnd;
                s += r.X.ResponsiveIncrement
              )
                e.classList.toggle("responsive-" + s, t >= s);
            }
          }
          prepare() {}
          load() {}
          unload() {}
          triggerKeyDown(e) {
            this.keyDown(e),
              this.events.trigger("keydown", { target: this, event: e });
          }
          keyDown(e) {}
          getResponsiveContainerWidth(e) {
            if (!e.responsiveContainerParent)
              for (let t of this.responsiveContainerTargets)
                if (d.Z.isSelfOrParentNode(e, t)) {
                  e.responsiveContainerParent = t;
                  break;
                }
            return e.responsiveContainerParent
              ? e.responsiveContainerParent.dataset.width
              : 0;
          }
          refreshFragments(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              h.Z.handleError(e);
            });
          }
          refreshFragmentsWithCustomErrorHandling(...e) {
            return this.fragments.refresh(...e);
          }
          triggerResize() {
            this.resize(), this.events.trigger("resize", { target: this });
          }
          resize() {}
          responsiveContainerResize() {}
        }
      },
      69555: (e, t, s) => {
        "use strict";
        s.d(t, { Fz: () => g, ec: () => p, UT: () => m, GI: () => f });
        var i = s(47914),
          o = s(58771),
          n = s(96622),
          r = s(55578),
          a = s(11802),
          l = s(51385),
          d = s(2043),
          h = s.n(d),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g {
          static get TopRight() {
            return 1;
          }
          static get TopCenter() {
            return 2;
          }
          static get TopLeft() {
            return 3;
          }
          static get BottomRight() {
            return 4;
          }
          static get BottomCenter() {
            return 5;
          }
          static get BottomLeft() {
            return 6;
          }
          static get RightTop() {
            return 7;
          }
          static get RightCenter() {
            return 8;
          }
          static get LeftTop() {
            return 9;
          }
          static get LeftCenter() {
            return 10;
          }
        }
        class p {
          static get None() {
            return 0;
          }
          static get Click() {
            return 1;
          }
          static get Hover() {
            return 2;
          }
          static get ClickHover() {
            return 3;
          }
          static get FollowElement() {
            return 4;
          }
        }
        class m {
          static get External() {
            return 0;
          }
          static get ESCPressed() {
            return 1;
          }
          static get OutsideClick() {
            return 2;
          }
          static get LinkClick() {
            return 3;
          }
          static get HideItemClick() {
            return 4;
          }
          static get AppError() {
            return 5;
          }
          static get WindowResize() {
            return 6;
          }
          static get HoverHide() {
            return 7;
          }
          static get Success() {
            return 8;
          }
          static get ItemSelected() {
            return 9;
          }
        }
        class f {
          static hideAllPopups(e = null) {
            let t = new Array(...this.visiblePopups);
            for (let s of t) (e && _.includes(s.activeDialogs, e)) || s.hide();
          }
          static windowClickAllPopups(e) {
            let t = new Array(...this.visiblePopups);
            for (let s of t) s.doProxyWindowClick(e);
          }
          constructor(e, t = {}) {
            u(this, "defaults", {
              leakKeys: !1,
              hideOnESC: !0,
              onSubmitForm: null,
              margin: 12,
              showPointer: !0,
              preventMousedown: !1,
              hoverable: !0,
              hoverShowDelay: 200,
              hoverReducedShowDelay: i.X.TooltipReducedDelay,
              useHoverReducedShowDelay: !1,
              useHoverPageLoadDelay: !1,
              hoverHideDelay: 300,
              maxHeight: !1,
              width: !1,
              verticalOffset: 0,
              horizontalOffset: 0,
              additionalClasses: "",
              context: null,
              markPopupVisible: !0,
              dontShowForExistingPopups: !1,
              breadcrumbs: !0,
              enableDuringDragging: !1,
              animations: !0,
              extraHeight: 0,
              extraWidth: 0,
              ignoreWindowResize: !1,
              hideOtherPopupsOnShow: !1,
              $parentElement: null,
              allowedPositions: [
                g.TopRight,
                g.TopCenter,
                g.TopLeft,
                g.BottomRight,
                g.BottomCenter,
                g.BottomLeft,
                g.RightTop,
                g.RightCenter,
                g.LeftTop,
                g.LeftCenter,
              ],
            }),
              u(this, "popupSelectors", {
                pointer: ".popup__pointer",
                border: ".popup__border",
                hide: ".popup-hide",
                linkItems: ".popup__menu__link-item",
                actionItems: ".popup__menu__action-item",
                actionItemFocus: ".popup__menu__action-item:focus",
                bodyDragging: ".draggable--is-dragging",
                followElement: '[data-follow-element="true"]',
                glassOverlayContainer: ".glass-overlay-container",
                body: "body",
              }),
              u(this, "popupClasses", {
                visible: "popup--visible",
                visibleNoAnimation: "popup--visible--no-animation",
                top: "popup--top",
                withPointer: "popup--with-pointer",
                largeWindow: "popup--large-window",
                positions:
                  "popup--top-right popup--top-center popup--top-left\n            popup--bottom-right popup--bottom-center popup--bottom-left\n            popup--right-top popup--right-center popup--left-top popup--left-center",
                positionTopRight: "popup--top-right",
                positionTopCenter: "popup--top-center",
                positionTopLeft: "popup--top-left",
                positionBottomRight: "popup--bottom-right",
                positionBottomCenter: "popup--bottom-center",
                positionBottomLeft: "popup--bottom-left",
                positionRightTop: "popup--right-top",
                positionRightCenter: "popup--right-center",
                positionLeftTop: "popup--left-top",
                positionLeftCenter: "popup--left-center",
                scrolling: "popup--scrolling",
                positioning: "popup--positioning",
                hiding: "popup--hiding",
              }),
              u(this, "popupTemplates", {
                container:
                  '<div class="popup-container"><div class="popup-container__inner"></div></div>',
              }),
              u(this, "doAppError", (e) => {
                this.visible && this.hide(m.AppError);
              }),
              u(this, "doWindowResize", (e) => {
                this.visible &&
                  !this.settings.ignoreWindowResize &&
                  this.hide(m.WindowResize);
              }),
              u(this, "doProxyWindowClick", (e) => {
                if (this.windowClickEnabled) return this.doWindowClick(e);
              }),
              u(this, "doWindowClick", (e) => {
                const t = $(e.target);
                if (this.visible) {
                  if (
                    this.attached &&
                    this.$target &&
                    this.attachMode == p.ClickHover &&
                    t.closest(this.$target).length > 0
                  )
                    return;
                  if (c.Z.getBlockingExceptInitial()) return;
                  if (
                    t.closest(this.popupSelectors.glassOverlayContainer)
                      .length > 0
                  )
                    return;
                  if (t.is(this.popupSelectors.body)) return;
                  for (let e of this.activeDialogs)
                    if (t.closest(e.$container).length > 0) return;
                  if (this.clickHideFilter(t)) return;
                  if (
                    this.settings.$parentElement &&
                    (t.closest(this.settings.$parentElement).length > 0 ||
                      $(":focus").closest(this.settings.$parentElement).length >
                        0)
                  )
                    return;
                  0 == t.closest(this.$popup).length &&
                    this.hide(m.OutsideClick);
                }
              }),
              u(this, "doAttachElementClick", (e) => {
                if (!this.visible) {
                  if (
                    this.attachMode == p.Hover ||
                    this.attachMode == p.FollowElement
                  )
                    return (
                      clearTimeout(this.attachHoverTimer),
                      void (this.attachHoverTimer = null)
                    );
                  if (this.events.has("beforeshow")) {
                    let e = this.events.trigger("beforeshow", {
                      target: this,
                      $element: this.$attachElement,
                    });
                    for (let t of e) if (!1 === t) return;
                  }
                  this.show(this.$attachElement, this.attachPosition);
                }
              }),
              u(this, "doAttachHoverShow", () => {
                if (!this.visible) {
                  if (
                    !this.settings.enableDuringDragging &&
                    $("body").is(this.popupSelectors.bodyDragging)
                  )
                    return !1;
                  if (this.events.has("beforeshow")) {
                    let e = this.events.trigger("beforeshow", {
                      target: this,
                      $element: this.$attachElement,
                    });
                    for (let t of e) if (!1 === t) return;
                  }
                  this.show(this.$attachElement, this.attachPosition);
                }
              }),
              u(this, "doAttachHoverHide", () => {
                this.visible && this.hide(m.HoverHide);
              }),
              u(this, "doAttachElementMouseEnter", (e) => {
                if (
                  (clearTimeout(this.attachHoverTimer),
                  (this.attachHoverTimer = null),
                  this.settings.useHoverPageLoadDelay &&
                    c.Z.popupTracker.getPageRecentlyLoaded())
                )
                  return;
                if (
                  this.settings.dontShowForExistingPopups &&
                  n.UI.popupVisible(this.$attachElement)
                )
                  return;
                let t = this.settings.hoverShowDelay;
                this.settings.useHoverReducedShowDelay &&
                  c.Z.popupTracker.getPopupRecentlyShown() &&
                  (t = this.settings.hoverReducedShowDelay),
                  (this.attachHoverTimer = setTimeout(
                    this.doAttachHoverShow,
                    t
                  ));
              }),
              u(this, "doAttachElementMouseLeave", (e) => {
                clearTimeout(this.attachHoverTimer),
                  (this.attachHoverTimer = null),
                  c.Z.events.off("unblocking", this.doAttachElementMouseLeave),
                  c.Z.getBlocking()
                    ? c.Z.events.on(
                        "unblocking",
                        this.doAttachElementMouseLeave
                      )
                    : this.$popupContainer ||
                      (this.attachHoverTimer = setTimeout(
                        this.doAttachHoverHide,
                        this.settings.hoverHideDelay
                      ));
              }),
              u(this, "doPopupMouseEnter", (e) => {
                clearTimeout(this.attachHoverTimer),
                  (this.attachHoverTimer = null);
              }),
              u(this, "doPopupMouseLeave", (e) => {
                clearTimeout(this.attachHoverTimer),
                  (this.attachHoverTimer = null),
                  c.Z.events.off("unblocking", this.doAttachElementMouseLeave),
                  c.Z.getBlocking()
                    ? c.Z.events.on(
                        "unblocking",
                        this.doAttachElementMouseLeave
                      )
                    : (this.attachHoverTimer = setTimeout(
                        this.doAttachHoverHide,
                        this.settings.hoverHideDelay
                      ));
              }),
              u(this, "doAttachFollowShow", () => {
                if (this.visible)
                  this.updateAndMove(
                    this.$currentFollowElement,
                    this.attachPosition
                  );
                else {
                  if (
                    !this.settings.enableDuringDragging &&
                    $("body").is(this.popupSelectors.bodyDragging)
                  )
                    return !1;
                  if (this.events.has("beforeshow")) {
                    let e = this.events.trigger("beforeshow", {
                      target: this,
                      $element: this.$attachElement,
                    });
                    for (let t of e) if (!1 === t) return;
                  }
                  this.show(this.$currentFollowElement, this.attachPosition);
                }
              }),
              u(this, "doAttachFollowHide", () => {
                this.visible && this.hide(m.HoverHide);
              }),
              u(this, "doAttachElementFollowMouseEnter", (e) => {
                if (
                  (clearTimeout(this.attachHoverTimer),
                  (this.attachHoverTimer = null),
                  this.settings.useHoverPageLoadDelay &&
                    c.Z.popupTracker.getPageRecentlyLoaded())
                )
                  return;
                if (
                  this.settings.dontShowForExistingPopups &&
                  n.UI.popupVisible(this.$attachElement)
                )
                  return;
                let t = this.settings.hoverShowDelay;
                this.settings.useHoverReducedShowDelay &&
                  c.Z.popupTracker.getPopupRecentlyShown() &&
                  (t = this.settings.hoverReducedShowDelay),
                  (this.$currentFollowElement = $(e.currentTarget)),
                  (this.attachHoverTimer = setTimeout(
                    this.doAttachFollowShow,
                    t
                  ));
              }),
              u(this, "doAttachElementFollowMouseLeave", (e) => {
                (this.$currentFollowElement = null),
                  clearTimeout(this.attachHoverTimer),
                  c.Z.events.off(
                    "unblocking",
                    this.doAttachElementFollowMouseLeave
                  ),
                  c.Z.getBlocking()
                    ? c.Z.events.on(
                        "unblocking",
                        this.doAttachElementFollowMouseLeave
                      )
                    : (this.attachHoverTimer = setTimeout(
                        this.doAttachFollowHide,
                        this.settings.hoverHideDelay
                      ));
              }),
              u(this, "doActionItemClick", (e) => {
                this.triggerActionItemClick($(e.currentTarget));
              }),
              u(this, "doPopupMousedown", (e) => {
                e.preventDefault();
              }),
              u(this, "doKeyDown", (e, t) => {
                if (t.which == a.N.Enter)
                  if (this.settings.onSubmitForm) {
                    let e = $("input:focus", this.$popup);
                    e.length > 0 &&
                      0 == e.closest(".dropdown").length &&
                      0 == e.closest(".checkbox").length &&
                      (t.preventDefault(), this.settings.onSubmitForm());
                  } else {
                    let e = $(this.popupSelectors.actionItemFocus, this.$popup);
                    e.length > 0 && this.triggerActionItemClick(e);
                  }
                return this.keyDown(t);
              }),
              (this.settings = {}),
              _.defaults(this.settings, t, this.defaults),
              (this.popupName = e),
              this.initialize(),
              (this.attached = !1),
              (this.attachMode = p.None),
              (this.attachPosition = g.BottomLeft),
              (this.$attachElement = null),
              (this.attachHoverTimer = null),
              (this.events = new o.U());
          }
          initialize() {
            (this.layer = null),
              (this.$popup = null),
              (this.$popupContainer = null),
              (this.$pointer = null),
              (this.$border = null),
              (this.$target = null),
              (this.targetXY = null),
              (this.$window = $(window)),
              (this.$currentFollowElement = null),
              (this.position = g.BottomLeft),
              (this.visible = !1),
              (this.actions = []),
              (this.components = {}),
              (this.component = {}),
              (this.onSuccess = null),
              (this.success = !1),
              (this.onHide = null),
              (this.onHidden = null),
              (this.formViews = []),
              (this.displayPosition = null),
              (this.activeDialogs = []),
              (this.fragments = null),
              (this.params = null),
              (this.zindex = null);
          }
          attach(e, t = g.BottomLeft, s = p.Click) {
            this.attached && this.detach(),
              (this.attachMode = s),
              (this.attachPosition = t),
              (this.$attachElement = $(e)),
              this.$attachElement.on("click", this.doAttachElementClick),
              (this.attachMode != p.ClickHover && this.attachMode != p.Hover) ||
                (this.$attachElement.on(
                  "mouseenter",
                  this.doAttachElementMouseEnter
                ),
                this.$attachElement.on(
                  "mouseleave",
                  this.doAttachElementMouseLeave
                )),
              this.attachMode == p.FollowElement &&
                ((this.$followElements = $(
                  this.popupSelectors.followElement,
                  this.$attachElement
                )),
                this.$followElements.on(
                  "mouseenter",
                  this.doAttachElementFollowMouseEnter
                ),
                this.$followElements.on(
                  "mouseleave",
                  this.doAttachElementFollowMouseLeave
                )),
              (this.attached = !0);
          }
          detach() {
            this.attached &&
              ((this.attachMode != p.ClickHover &&
                this.attachMode != p.Hover) ||
                (this.$attachElement.off(
                  "mouseenter",
                  this.doAttachElementMouseEnter
                ),
                this.$attachElement.off(
                  "mouseleave",
                  this.doAttachElementMouseLeave
                )),
              this.attachMode == p.FollowElement &&
                (this.$followElements.off(
                  "mouseenter",
                  this.doAttachElementFollowMouseEnter
                ),
                this.$followElements.off(
                  "mouseleave",
                  this.doAttachElementFollowMouseLeave
                )),
              this.$attachElement.off("click", this.doAttachElementClick),
              (this.attached = !1),
              (this.attachMode = p.None),
              (this.attachPosition = g.BottomLeft),
              (this.attachElement = null),
              (this.attachHoverTimer = null));
          }
          show(e, t = g.BottomLeft, s = null, o = null) {
            if (!e && !o) throw new Error("Popup target is not set");
            let n;
            if (
              (e
                ? ((this.$target = $(e)),
                  this.settings.markPopupVisible &&
                    (this.$target.data("popupVisible", !0),
                    this.$target.data("popup", this)))
                : (this.targetXY = o),
              (this.position = t),
              h().info("popup: Showing popup", this.popupName, this.settings),
              this.events.has("content"))
            ) {
              let e = this.events.trigger("content", { target: this });
              if (!e)
                throw new Error(
                  "Popup content event didn't provide any content."
                );
              n = e[0];
            } else if (
              ((n = s), !n && ((n = c.Z.views.get(this.popupName)), !n))
            )
              throw new Error(`Popup view "${this.popupName}" not found.`);
            (this.$popup = $(n)), (this.params = null);
            let a = this.$popup.attr("data-params");
            a && (this.params = JSON.parse(a));
            let d = this.$popup.attr("data-views");
            if (d) {
              let e = JSON.parse(d);
              c.Z.views.add(e);
            }
            this.settings.breadcrumbs &&
              c.Z.addBreadcrumb(
                "ui.popup",
                `Showing popup '${this.popupName}'`
              ),
              (this.component = c.Z.registerComponent(
                this,
                this.$popup.get(0),
                this.popupName
              )),
              c.Z.markComponentLoaded(this.component),
              this.bindAll(),
              (this.layer = c.Z.layers.add({
                leakKeys: this.settings.leakKeys,
                hideOnESC: this.settings.hideOnESC,
                onKeyDown: this.doKeyDown,
                onHide: (e) => {
                  this.hide(m.ESCPressed);
                },
              })),
              (this.zindex = c.Z.zindex.register()),
              this.$popup.css("z-index", this.zindex),
              this.settings.showPointer &&
                (this.$popup.addClass(this.popupClasses.withPointer),
                (this.$pointer = $(this.popupSelectors.pointer, this.$popup))),
              (this.windowClickEnabled = !1),
              setTimeout(() => {
                this.$window.on("click", this.doWindowClick),
                  (this.windowClickEnabled = !0);
              }, 1),
              window.addEventListener("resize", this.doWindowResize, {
                passive: !0,
              }),
              this.$window.on("apperror", this.doAppError),
              (this.attachMode != p.ClickHover &&
                this.attachMode != p.Hover &&
                this.attachMode != p.FollowElement) ||
                (this.attached &&
                  this.settings.hoverable &&
                  (this.$popup.on("mouseenter", this.doPopupMouseEnter),
                  this.$popup.on("mouseleave", this.doPopupMouseLeave))),
              this.settings.additionalClasses &&
                this.$popup.addClass(this.settings.additionalClasses),
              window.innerWidth >= i.X.PopupLargeWindowWidthBreakpoint &&
                window.innerHeight >= i.X.PopupLargeWindowHeightBreakpoint &&
                this.$popup.addClass(this.popupClasses.largeWindow);
            let u = $("body").get(0).scrollHeight;
            return (
              c.Z.layers.hasActiveDialog() || u >= i.X.BodyMinPopupHeight
                ? $("body").append(this.$popup)
                : this.$popupContainer ||
                  ((this.$popupContainer = $(this.popupTemplates.container)),
                  (this.popupContainerZindex = c.Z.zindex.register()),
                  this.$popupContainer.css(
                    "z-index",
                    this.popupContainerZindex
                  ),
                  $("body").append(this.$popupContainer),
                  this.$popupContainer.children().first().append(this.$popup)),
              (this.$border = $(this.popupSelectors.border, this.$popup)),
              this.settings.preventMousedown &&
                this.$popup.on("mousedown", this.doPopupMousedown),
              (this.fragments = new l.n(this.$popup)),
              this.refreshUi(),
              !1 === this.load()
                ? (this.cleanup(), this.remove(), !1)
                : (this.refreshSize(),
                  $(this.popupSelectors.hide, this.$popup).click(() =>
                    this.hide(m.HideItemClick)
                  ),
                  $(this.popupSelectors.linkItems, this.$popup).click(() =>
                    this.hide(m.LinkClick)
                  ),
                  $(this.popupSelectors.actionItems, this.$popup).on(
                    "click",
                    this.doActionItemClick
                  ),
                  Promise.resolve()
                    .then(() => {
                      let e = this.prepare();
                      return (
                        e || (e = Promise.resolve()),
                        e.then(() => {
                          this.refreshPosition(),
                            this.settings.animations
                              ? this.$popup.addClass(this.popupClasses.visible)
                              : this.$popup.addClass(
                                  this.popupClasses.visibleNoAnimation
                                ),
                            (this.visible = !0),
                            this.settings.hideOtherPopupsOnShow &&
                              f.hideAllPopups(),
                            this.constructor.visiblePopups.push(this),
                            c.Z.popupTracker.doPopupShow(),
                            this.settings.animations
                              ? setTimeout(() => {
                                  r.e.markLoaded(this.$popup);
                                }, 300)
                              : r.e.markLoaded(this.$popup),
                            this.loaded();
                        })
                      );
                    })
                    .catch((e) => {
                      throw (this.cleanup(), this.remove(), e);
                    }))
            );
          }
          updateAndMove(e, t = g.BottomLeft) {
            this.visible &&
              (this.$target &&
                this.settings.markPopupVisible &&
                (this.$target.removeData("popupVisible"),
                this.$target.removeData("popup")),
              (this.$target = $(e)),
              (this.targetXY = null),
              this.settings.markPopupVisible &&
                (this.$target.data("popupVisible", !0),
                this.$target.data("popup", this)),
              (this.position = t),
              this.$popup.removeAttr("style"),
              this.$popup.detach(),
              this.update(),
              $("body").append(this.$popup),
              this.refreshPosition());
          }
          load() {}
          update() {}
          loaded() {}
          unload() {}
          prepare() {}
          refreshUi() {
            n.UI.initialize(this.$popup);
          }
          cleanup() {
            this.$target &&
              this.settings.markPopupVisible &&
              (this.$target.removeData("popupVisible"),
              this.$target.removeData("popup")),
              this.settings.preventMousedown &&
                this.$popup.off("mousedown", this.doPopupMousedown),
              this.unload(),
              c.Z.unregisterComponent(this.component),
              c.Z.layers.remove(this.layer),
              c.Z.zindex.unregister(this.zindex),
              window.removeEventListener("resize", this.doWindowResize, {
                passive: !0,
              }),
              this.$window.off("click", this.doWindowClick),
              this.$window.off("apperror", this.doAppError),
              (this.attachMode != p.ClickHover &&
                this.attachMode != p.Hover &&
                this.attachMode != p.FollowElement) ||
                (this.attached &&
                  this.settings.hoverable &&
                  (this.$popup.off("mouseenter", this.doPopupMouseEnter),
                  this.$popup.off("mouseleave", this.doPopupMouseLeave)));
          }
          remove() {
            this.unbindAll(),
              this.$popup.remove(),
              this.$popupContainer &&
                (c.Z.zindex.unregister(this.popupContainerZindex),
                this.$popupContainer.remove()),
              this.initialize();
          }
          hide(e = m.External) {
            if (this.visible) {
              h().info("popup: Hiding popup", this.popupName, e),
                this.settings.breadcrumbs &&
                  c.Z.addBreadcrumb(
                    "ui.popup",
                    `Hiding popup '${this.popupName}' (${e})`
                  ),
                this.cleanup(),
                (this.visible = !1),
                _.pull(this.constructor.visiblePopups, this),
                c.Z.popupTracker.doPopupHide(),
                this.onHide && this.onHide(this.success, e);
              let t = this.$popup,
                s = this.onHidden,
                o = this.success,
                n = () => {
                  t && (t.remove(), (t = null), s && s(o));
                };
              this.remove(),
                this.settings.animations
                  ? (t.one("transitionend", n),
                    setTimeout(n, i.X.PopupHideTransitionDelay),
                    t.removeClass(this.popupClasses.visible),
                    t.addClass(this.popupClasses.hiding))
                  : n();
            }
          }
          refreshPosition() {
            let e = [];
            switch ((e.push(this.position), this.position)) {
              case g.TopRight:
                e.push(g.BottomRight), e.push(g.TopLeft), e.push(g.BottomLeft);
                break;
              case g.TopCenter:
                e.push(g.BottomCenter), e.push(g.TopLeft), e.push(g.TopRight);
                break;
              case g.TopLeft:
                e.push(g.BottomLeft), e.push(g.TopRight), e.push(g.BottomRight);
                break;
              case g.BottomRight:
                e.push(g.TopRight), e.push(g.BottomLeft), e.push(g.TopLeft);
                break;
              case g.BottomCenter:
                e.push(g.TopCenter),
                  e.push(g.BottomLeft),
                  e.push(g.BottomRight);
                break;
              case g.BottomLeft:
                e.push(g.TopLeft), e.push(g.BottomRight), e.push(g.TopRight);
                break;
              case g.RightTop:
                e.push(g.LeftTop);
                break;
              case g.RightCenter:
                e.push(g.LeftCenter);
                break;
              case g.LeftTop:
                e.push(g.RightTop);
                break;
              case g.LeftCenter:
                e.push(g.RightCenter);
            }
            let t,
              s,
              i,
              o = [
                g.TopRight,
                g.TopLeft,
                g.BottomRight,
                g.BottomCenter,
                g.BottomLeft,
                g.RightTop,
                g.RightCenter,
                g.LeftTop,
                g.LeftCenter,
                g.TopCenter,
              ];
            e.push(..._.difference(o, e)),
              (e = _.intersection(e, this.settings.allowedPositions));
            let n = "default";
            this.$target
              ? ((t = this.$target.offset()),
                (s = this.$target.outerHeight()),
                (i = this.$target.outerWidth()),
                (n = this.$target.data("offset") || "default"))
              : ((t = { top: this.targetXY.y, left: this.targetXY.x }),
                (s = 1),
                (i = 1));
            const r = {
              targetPosition: t,
              targetHeight: s,
              targetWidth: i,
              targetBottom: this.$window.height() - t.top + s,
              targetOffset: n,
              popupWidth: this.$popup.outerWidth() + this.settings.extraWidth,
              popupHeight:
                this.$popup.outerHeight() + this.settings.extraHeight,
            };
            let a = {};
            if (this.$popupContainer) {
              let e = this.$popupContainer.children().first();
              const t = e.offset();
              a = {
                top: t.top,
                left: t.left,
                bottom: t.top + e.innerHeight(),
                right: t.left + e.innerWidth(),
              };
            } else {
              const e = c.Z.layers.getActiveDialog();
              if (e) {
                const t = $(e.rootNode),
                  s = t.offset();
                a = {
                  top: s.top,
                  left: s.left,
                  bottom: s.top + t.innerHeight(),
                  right: s.left + t.innerWidth(),
                };
              } else {
                const e = $(document);
                a = { top: 0, left: 0, bottom: e.height(), right: e.width() };
              }
            }
            this.$popup.addClass(this.popupClasses.positioning);
            for (let t of e)
              if (((this.displayPosition = t), this.tryPosition(t, r, a)))
                break;
            this.$popup.removeClass(this.popupClasses.positioning),
              this.$popup.get(0).offsetHeight;
          }
          tryPosition(e, t, s) {
            let o,
              n = "auto",
              r = "auto",
              a = "auto";
            (e != g.TopRight && e != g.TopCenter && e != g.TopLeft) ||
              (a = t.targetBottom - t.targetHeight + this.settings.margin),
              (e != g.BottomRight &&
                e != g.BottomCenter &&
                e != g.BottomLeft) ||
                (r =
                  t.targetPosition.top + t.targetHeight + this.settings.margin),
              (e != g.TopLeft && e != g.BottomLeft) ||
                (n = t.targetPosition.left),
              (e != g.TopCenter && e != g.BottomCenter) ||
                (n =
                  t.targetPosition.left + (t.targetWidth - t.popupWidth) / 2),
              (e != g.TopRight && e != g.BottomRight) ||
                (n = t.targetPosition.left + t.targetWidth - t.popupWidth),
              (e != g.RightTop && e != g.LeftTop) || (r = t.targetPosition.top),
              (e != g.RightCenter && e != g.LeftCenter) ||
                (r =
                  t.targetPosition.top + (t.targetHeight - t.popupHeight) / 2),
              (e != g.LeftTop && e != g.LeftCenter) ||
                (n =
                  t.targetPosition.left - t.popupWidth - this.settings.margin),
              (e != g.RightTop && e != g.RightCenter) ||
                (n =
                  t.targetPosition.left + t.targetWidth + this.settings.margin);
            let l = 0,
              d = 0;
            switch (t.targetOffset) {
              case "table-action":
              case "header-icon":
                l = -6;
                break;
              case "table-dropdown":
                l = -8;
                break;
              case "popup-item":
                l = -9;
                break;
              case "default":
                (l = this.settings.verticalOffset),
                  (d = this.settings.horizontalOffset);
            }
            switch (e) {
              case g.TopRight:
                (o = this.popupClasses.positionTopRight), (a += l);
                break;
              case g.TopCenter:
                (o = this.popupClasses.positionTopCenter), (a += l), (n += d);
                break;
              case g.TopLeft:
                (o = this.popupClasses.positionTopLeft), (a += l);
                break;
              case g.BottomRight:
                (o = this.popupClasses.positionBottomRight), (r += l), (n += d);
                break;
              case g.BottomCenter:
                (o = this.popupClasses.positionBottomCenter),
                  (r += l),
                  (n += d);
                break;
              case g.BottomLeft:
                (o = this.popupClasses.positionBottomLeft), (r += l);
                break;
              case g.RightTop:
                (o = this.popupClasses.positionRightTop), (n += d), (r += l);
                break;
              case g.RightCenter:
                (o = this.popupClasses.positionRightCenter), (n += d);
                break;
              case g.LeftTop:
                (o = this.popupClasses.positionLeftTop), (n -= d), (r += l);
                break;
              case g.LeftCenter:
                (o = this.popupClasses.positionLeftCenter), (n -= d);
            }
            if (this.settings.showPointer) {
              const s = [g.TopRight, g.TopLeft, g.BottomRight, g.BottomLeft],
                o = [g.RightTop, g.LeftTop];
              _.includes(s, e)
                ? t.targetWidth <= i.X.PopupTargetSizeAdjustment &&
                  (e == g.TopRight || e == g.BottomRight
                    ? (n -= (t.targetWidth - 32) / 2)
                    : (n += (t.targetWidth - 32) / 2))
                : _.includes(o, e) &&
                  t.targetHeight <= i.X.PopupTargetSizeAdjustment &&
                  (r += (t.targetHeight - 32) / 2);
            }
            this.$popup.removeClass(this.popupClasses.positions),
              this.$popup.addClass(o),
              this.$popup.css({
                left: "auto" == n ? n : Math.round(n),
                right: "auto",
                top: "auto" == r ? r : Math.round(r),
                bottom: "auto" == a ? a : Math.round(a),
              });
            let c = this.$popup.offset(),
              u = this.$popup.outerHeight() + this.settings.extraHeight,
              p = this.$popup.outerWidth() + this.settings.extraWidth,
              m = {
                top: c.top - s.top,
                left: c.left - s.left,
                right: s.right - (c.left + p),
                bottom: s.bottom - (c.top + u),
              };
            return (
              h().debug("popup: Trying position", e, t, s, c, m),
              m.top > 2 && m.left > 2 && m.right > 2 && m.bottom > 2
            );
          }
          refreshSize() {
            this.settings.maxHeight &&
              this.$border.css({
                "max-height": this.settings.maxHeight + "px",
              }),
              this.settings.width &&
                this.$border.css({ width: this.settings.width + "px" });
          }
          bindAll() {
            "actions" in this.constructor &&
              $("*[data-action]", this.$popup).each((e, t) => {
                var s = $(t),
                  i = s.data("action").match(/(.+)->(.+)/);
                if (i && _.includes(this.constructor.actions, i[2])) {
                  var o = this[i[2]];
                  if (o) {
                    var n = {
                      name: i[2],
                      event: i[1],
                      $element: s,
                      binding: o.bind(this),
                    };
                    s.on(n.event, n.binding), this.actions.push(n);
                  }
                }
              });
            var e = [];
            if ("forms" in this.constructor)
              for (let t of this.constructor.forms)
                e.push(t.name), e.push(...t.fields);
            "targets" in this.constructor &&
              e.push(...this.constructor.targets);
            for (let t of e)
              this["$" + t] = $(`[data-target~=${t}]`, this.$popup);
            if (((this.formViews.length = 0), "forms" in this.constructor)) {
              let e = 0;
              for (let s of this.constructor.forms) {
                var t = {
                  $form: this["$" + s.name],
                  fields: s.fields,
                  index: e,
                };
                this.formViews.push(t), e++;
              }
            }
          }
          unbindAll() {
            if ("targets" in this.constructor)
              for (var e of this.constructor.targets) delete this["$" + e];
            for (let e of this.actions) e.$element.off(e.event, e.binding);
            (this.actions.length = 0), (this.formViews.length = 0);
          }
          rebindAll() {
            this.unbindAll(),
              this.bindAll(),
              $(this.popupSelectors.actionItems, this.$popup).off(
                "click",
                this.doActionItemClick
              ),
              $(this.popupSelectors.actionItems, this.$popup).on(
                "click",
                this.doActionItemClick
              );
          }
          clickHideFilter() {}
          triggerActionItemClick(e) {
            const t = {
              target: this,
              trigger: this.$target ? this.$target.get(0) : null,
              actionItem: e.get(0),
              $actionItem: e,
              actionName: e.data("action"),
              actionValue: e.data("value"),
              context: this.settings.context,
            };
            this.events.trigger("actionclick", t);
          }
          setScrolling(e) {
            e
              ? this.$popup.addClass(this.popupClasses.scrolling)
              : this.$popup.removeClass(this.popupClasses.scrolling);
          }
          triggerSuccess(e = null) {
            var t;
            return (
              (this.success = !0),
              this.onSuccess && (t = this.onSuccess(e)),
              t || (t = Promise.resolve()),
              t
                .then(() => {
                  this.hide(m.Success);
                })
                .catch((e) => {
                  c.Z.handleError(e);
                })
            );
          }
          keyDown(e) {}
          addActiveDialog(e) {
            this.activeDialogs.push(e);
          }
          removeActiveDialog(e) {
            _.pull(this.activeDialogs, e);
          }
          refreshFragments(...e) {
            return this.fragments.refresh(...e).catch((e) => {
              c.Z.handleError(e);
            });
          }
          emptyFragments(...e) {
            return this.fragments.empty(...e);
          }
          refreshFragmentsWithCustomErrorHandling(...e) {
            return this.fragments.refresh(...e);
          }
        }
        u(f, "visiblePopups", []);
      },
      84709: (e, t, s) => {
        "use strict";
        s.d(t, { K: () => a });
        var i = s(47914),
          o = s(24406),
          n = s(67811),
          r = s(5270);
        class a {
          static openPrintGass(e) {
            try {
              let t = new o.VH(e);
              return (
                t.open(
                  Math.min(
                    i.X.PrintWindowMaxWidth,
                    Math.max(i.X.PrintWindowMinWidth, window.outerWidth - 100)
                  ),
                  Math.min(
                    i.X.PrintWindowMaxHeight,
                    Math.max(i.X.PrintWindowMinHeight, window.outerHeight - 100)
                  )
                ),
                t
              );
            } catch (e) {
              e instanceof o.vq ? new n.s().show() : r.Z.handleError(e);
            }
          }
        }
      },
      13814: (e, t, s) => {
        "use strict";
        s.d(t, { N: () => a });
        var i = s(43689),
          o = s(9669),
          n = s.n(o),
          r = s(5270);
        class a {
          static getCancelSource() {
            return n().CancelToken.source();
          }
          static cancelRequests(e) {
            e.cancel();
          }
          static formPost(e, t = {}) {
            let s = a.url(e),
              o = t;
            o._token = r.Z.csrfToken;
            let n = "";
            for (let e in o)
              n += `<input type="hidden" name="${i.Z.htmlEscape(
                e
              )}"\n                value="${i.Z.htmlEscape(o[e])}">\n`;
            let l = `<form action="${i.Z.htmlEscape(
              s
            )}" method="POST">${n}</form>`;
            $(l).appendTo("body").submit();
          }
          static formPostTarget(e, t, s = {}) {
            let o = a.url(e),
              n = s;
            n._token = r.Z.csrfToken;
            let l = "";
            for (let e in n)
              l += `<input type="hidden" name="${i.Z.htmlEscape(
                e
              )}"\n                value="${i.Z.htmlEscape(n[e])}">\n`;
            let d = `<form action="${i.Z.htmlEscape(
              o
            )}"\n            method="POST" target="${t}">${l}</form>`;
            $(d).appendTo("body").submit();
          }
          static formPostDownload(e, t = {}) {
            let s = a.url(e),
              o = t;
            o._token = r.Z.csrfToken;
            let n = "";
            for (let e in o)
              n += `<input type="hidden" name="${i.Z.htmlEscape(
                e
              )}"\n                value="${i.Z.htmlEscape(o[e])}">\n`;
            let l = `<form action="${i.Z.htmlEscape(
              s
            )}" method="POST">${n}</form>`;
            $(l).appendTo("body").submit();
          }
          static post(e, ...t) {
            let s = a.url(e);
            return n().post(s, ...t);
          }
          static postNonBlocking(e, t = {}, s = {}) {
            let i = a.url(e);
            return (s.nonBlocking = !0), n().post(i, t, s);
          }
          static get(e, ...t) {
            let s = a.url(e);
            return n().get(s, ...t);
          }
          static postReplace(e, t, ...s) {
            let i = a.url(e);
            return n()
              .post(i, ...s)
              .then((e) => {
                $(t).html(e.data);
              });
          }
          static postReplaceAll(e) {
            let t = [];
            for (let s of e) {
              let e = a.url(s.link),
                i = n().post(e, "data" in s ? s.data : {}, { replacement: s });
              t.push(i);
            }
            return Promise.all(t).then(() => {
              let e = [];
              for (let s of t) {
                let t = s.then((e) => {
                  let t = e.config.replacement;
                  $(t.container).html(e.data);
                });
                e.push(t);
              }
              return Promise.all(e);
            });
          }
          static url(e) {
            return r.Z.context.appUrl + e.replace(/^\//g, "");
          }
          static assetUrl(e) {
            return r.Z.context.assetUrl + e.replace(/^\//g, "");
          }
          static relativeUrl(e) {
            return "/" + e.replace(/^\//g, "");
          }
          static toNetworkCase(e) {
            let t = {};
            for (let s in e) t[i.Z.underscorize(s)] = e[s];
            return t;
          }
          static visit(e) {
            return r.Z.visit(a.url(e));
          }
          static visitTab(e) {
            return a.openExternalTab(a.url(e)), Promise.resolve();
          }
          static redirect(e) {
            window.location = e;
          }
          static downloadFile(e) {
            let t = document.createElement("a");
            (t.href = e),
              (t.download = !0),
              (t.dataset.turbolinks = "false"),
              t.click();
          }
          static openExternalTab(e) {
            window.open(e, "_blank", "noopener");
          }
        }
      },
      8338: (e, t, s) => {
        "use strict";
        s.d(t, { z: () => i, T: () => o });
        class i {
          static get Default() {
            return 1;
          }
        }
        class o {
          static measureText(e, t) {
            if (!this.measureTextContext || !this.measureTextContext[t]) {
              this.measureTextContext || (this.measureTextContext = {});
              let e = document.createElement("canvas");
              (this.measureTextContext[t] = e.getContext("2d")),
                t === i.Default &&
                  (this.measureTextContext[t].font = "normal 15px Lato");
            }
            return Math.ceil(this.measureTextContext[t].measureText(e).width);
          }
          static renderResponsiveList(e, t, s, i, o, n, r, a) {
            if (!t || 0 == t.length) return "";
            let l = 0,
              d = 0;
            for (let o = 0; o < t.length; o++) {
              (d += i(t[o])), o > 0 && (d += s);
              let r = d;
              if (
                (o < t.length - 1 && (r = r + s + n(t.length - o + 1)),
                !(r <= e))
              )
                break;
              l = o + 1;
            }
            let h = "";
            if (l > 0) {
              for (let e = 0; e < l; e++) h += o(t[e]);
              l < t.length && (h += r(t.length - l));
            } else h = a(t.length);
            return h;
          }
        }
      },
      44362: (e, t, s) => {
        "use strict";
        s.d(t, { f: () => i });
        class i {
          constructor() {
            var e, t;
            (t = { inputs: 'input, textarea, [contenteditable="true"]' }),
              (e = "selectors") in this
                ? Object.defineProperty(this, e, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[e] = t),
              (this.shortcuts = []);
          }
          keyDown(e) {
            let t = e.ctrlKey || e.metaKey;
            for (let s of this.shortcuts)
              if (
                (!s.settings.control || t) &&
                (s.settings.control || !t) &&
                (!s.settings.shift || e.shiftKey) &&
                (s.settings.shift || !e.shiftKey) &&
                (!s.settings.alt || e.altKey) &&
                (s.settings.alt || !e.altKey) &&
                (!s.settings.onlyTriggerInitial || e.isInitial)
              ) {
                if (s.settings.disableForInputs) {
                  let e = document.activeElement;
                  if (e && $(e).closest(this.selectors.inputs).length > 0)
                    continue;
                }
                e.which == s.key && s.callback(e);
              }
          }
          register(e, t, s = {}) {
            _.defaults(s, {
              shift: !1,
              control: !1,
              alt: !1,
              disableForInputs: !1,
              onlyTriggerInitial: !1,
            }),
              this.shortcuts.push({ key: e, callback: t, settings: s });
          }
        }
      },
      55578: (e, t, s) => {
        "use strict";
        s.d(t, { e: () => i });
        class i {
          static markLoaded(e) {
            e &&
              e.is("[dusk-loaded]") &&
              (e.attr("dusk", e.attr("dusk-loaded")),
              e.removeAttr("dusk-loaded"));
          }
        }
      },
      58947: (e, t, s) => {
        "use strict";
        s.d(t, { B: () => l });
        var i,
          o,
          n,
          r = s(69555),
          a = s(57407);
        class l {
          static initialize(e, t = {}) {
            _.defaults(t, this.defaults),
              $(e).each((e, s) => {
                let i = $(s),
                  o = i.data("tooltip");
                if (!o) {
                  (t.popupSettings.useHoverReducedShowDelay = !0),
                    (t.popupSettings.useHoverPageLoadDelay = !0),
                    (t.popupSettings.markPopupVisible = !1),
                    (t.popupSettings.dontShowForExistingPopups = !0),
                    (t.popupSettings.leakKeys = !0);
                  let e = new a.z(t.variant, t.popupSettings);
                  t.onBeforeShow && e.events.on("beforeshow", t.onBeforeShow);
                  let s = r.ec.Hover;
                  t.clickable && t.hoverable
                    ? (s = r.ec.ClickHover)
                    : t.clickable && (s = r.ec.Click),
                    e.attach(i, t.position, s),
                    (o = { popup: e, settings: t }),
                    i.data("tooltip", o);
                }
              });
          }
          static uninitialize(e) {
            $(e).each((e, t) => {
              let s = $(t),
                i = s.data("tooltip");
              i &&
                (i.settings.onBeforeShow &&
                  i.popup.events.off("beforeshow", i.settings.onBeforeShow),
                i.popup.detach(),
                s.removeData("tooltip"));
            });
          }
        }
        (i = l),
          (o = "defaults"),
          (n = {
            position: r.Fz.TopCenter,
            onBeforeShow: null,
            popupSettings: {},
            variant: "default",
            clickable: !1,
            hoverable: !0,
          }),
          o in i
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      96622: (e, t, s) => {
        "use strict";
        s.d(t, { UI: () => u });
        var i = s(47914),
          o = s(58947),
          n = s(13814),
          r = s(69555),
          a = s(43689);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends r.GI {
          constructor() {
            super("common.chart_popup", {
              hoverShowDelay: 0,
              hoverHideDelay: i.X.ChartTooltipHideDelay,
              markPopupVisible: !1,
              dontShowForExistingPopups: !0,
            }),
              l(this, "templates", {
                title: '<div class="popup__chart__title">$(title)</div>',
                content: '<div class="popup__chart__content">$(content)</div>',
              }),
              l(this, "classes", { statusBorder: "status-$(status)-border" });
          }
          load() {
            this.update();
          }
          update() {
            this.$container.empty();
            let e = this.$currentFollowElement.data("title"),
              t = this.$currentFollowElement.data("content"),
              s = this.$currentFollowElement.data("status");
            if (
              (e &&
                e.trim() &&
                this.$container.append(
                  a.Z.template(this.templates.title, { title: e })
                ),
              t &&
                t.trim() &&
                this.$container.append(
                  a.Z.template(this.templates.content, { content: t })
                ),
              this.$popup.removeClass((e, t) =>
                (t.match(/(^|\s)status-.+?-border/g) || []).join(" ")
              ),
              this.$pointer.removeClass((e, t) =>
                (t.match(/(^|\s)status-.+?-border/g) || []).join(" ")
              ),
              s)
            ) {
              let e = a.Z.template(this.classes.statusBorder, { status: s });
              this.$popup.addClass(e), this.$pointer.addClass(e);
            }
          }
        }
        l(d, "targets", ["container"]);
        var h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u {
          static getTarget(e, t) {
            return $(`[data-target~='${e}']`, t);
          }
          static getByName(e, t) {
            return $(`[data-name~='${e}']`, t);
          }
          static getToggle(e, t) {
            return $(`[data-toggle~='${e}']`, t);
          }
        //   static initialize(e = document) {
        //     $(".ui.checkbox:not([data-ui=true])", e)
        //       .checkbox()
        //       .attr("data-ui", "true");
        //     let t = $(
        //       ".interactive-disabled.tooltip:not([data-ui-tooltip=true])",
        //       e
        //     );
        //     o.B.initialize(t, {
        //       popupSettings: {
        //         hoverable: !1,
        //         hoverShowDelay: i.X.TooltipLongDelay,
        //         hoverHideDelay: i.X.TooltipHideDelay,
        //       },
        //       onBeforeShow: (e) => {
        //         let t = $("body").get(0).scrollHeight >= i.X.BodyMinPopupHeight,
        //           s = e.$element.hasClass(this.classes.interactiveDisabled);
        //         return t && s;
        //       },
        //     }),
        //       t.attr(this.attributes.dataUiTooltip, "true");
        //     let s = $(".tooltip:not([data-ui-tooltip=true])", e);
        //     o.B.initialize(s, {
        //       popupSettings: {
        //         hoverable: !1,
        //         hoverShowDelay: i.X.TooltipLongDelay,
        //         hoverHideDelay: i.X.TooltipHideDelay,
        //       },
        //       onBeforeShow: () =>
        //         $("body").get(0).scrollHeight >= i.X.BodyMinPopupHeight,
        //     }),
        //       s.attr(this.attributes.dataUiTooltip, "true");
        //     let n = $(".help:not([data-ui-tooltip=true])", e);
        //     o.B.initialize(n, {
        //       clickable: !0,
        //       popupSettings: {
        //         hoverable: !0,
        //         hoverShowDelay: i.X.TooltipShortDelay,
        //       },
        //     }),
        //       n.attr(this.attributes.dataUiTooltip, "true"),
        //       $(".chart-hover:not([data-ui-tooltip=true])", e).each((e, t) => {
        //         let s = $(t);
        //         new d().attach(s, r.Fz.TopCenter, r.ec.FollowElement);
        //       }),
        //       n.attr(this.attributes.dataUiTooltip, "true"),
        //       u.initializePageLinks(e);
        //   }
          static clearInitializedTags(e) {
            $("[data-ui=true]", e).removeAttr(this.attributes.dataUi),
              $("[data-ui-tooltip=true]", e).removeAttr(
                this.attributes.dataUiTooltip
              );
          }
          static initializePageLinks(e = document) {
            $(this.selectors.pageLink, e).on("click", (e) => {
              if (e.shiftKey || e.metaKey || e.ctrlKey || e.altKey) return;
              let t = $(e.currentTarget),
                s = t.attr("href");
              if (!s) return;
              let i = n.N.url("/").replace(/\/$/g, "");
              s.startsWith(i) &&
                (t.closest(this.selectors.disabledPageLinkElements).length >
                  0 ||
                  $(this.selectors.pageContainer).addClass(
                    this.classes.navigating
                  ));
            });
          }
          static getText(e) {
            return e.val();
          }
          static getTextIntOrNullOrError(e) {
            let t = u.getText(e).trim();
            if (0 == t.length) return null;
            let s = parseInt(t, 10);
            return Number.isNaN(s) ? "NaN" : s;
          }
          static getTextIntOrNull(e) {
            let t = u.getText(e).trim();
            if (0 == t.length) return null;
            let s = parseInt(t, 10);
            return Number.isNaN(s) ? null : s;
          }
          static getTextFloatOrNullOrError(e) {
            let t = u.getText(e).trim();
            if (0 == t.length) return null;
            if (
              ((t = t.replace(",", ".")),
              !/^[-+]?([0-9]*\.[0-9]+|[0-9]+)$/.test(t))
            )
              return "NaN";
            let s = parseFloat(t);
            return Number.isNaN(s) ? "NaN" : s;
          }
          static selectAndScrollText(e, t) {
            let s = e[0],
              i = e.val(),
              o = i.split("\n"),
              n = 0,
              r = i.length;
            for (let e = 0; e < o.length && e != t; e++) n += o[e].length + 1;
            t < o.length && (r = n + o[t].length),
              e.focus(),
              (s.selectionStart = n),
              (s.selectionEnd = r);
            let a =
              (s.scrollHeight -
                parseInt(e.css("padding-top"), 10) -
                parseInt(e.css("padding-bottom"), 10)) /
              o.length;
            s.scrollTop = t * a - a;
          }
          static setText(e, t) {
            return e.val(t);
          }
          static clearText(e) {
            u.setText(e, "");
          }
          static onTextChange(e, t) {
            e.on("change", t);
          }
          static offTextChange(e, t) {
            e.off("change", t);
          }
          static setTextPlaceholder(e, t) {
            return e.attr(this.attributes.placeholder, t);
          }
          static toggleTextEnabled(e, t) {
            e.prop(this.attributes.disabled, !t);
          }
          static getTextEnabled(e) {
            return !e.prop(this.attributes.disabled);
          }
          static toggleTextReadonly(e, t) {
            e.prop(this.attributes.readonly, t);
          }
          static focusText(e) {
            e.focus();
          }
          static blurText(e) {
            e.blur();
          }
          static toggleLinkActionEnabled(e, t) {
            e.toggleClass(this.classes.linkActionDisabled, !t);
          }
          static setLinkActionText(e, t) {
            $(this.selectors.linkActionLabel, e).text(t);
          }
          static toggleIconActionEnabled(e, t) {
            e.toggleClass(this.classes.iconActionDisabled, !t);
          }
          static getIconActionEnabled(e) {
            return !e.hasClass(this.classes.iconActionDisabled);
          }
          static getClosestIconAction(e) {
            return e.closest(this.selectors.iconAction);
          }
          static getClosestSelectAction(e) {
            return e.closest(this.selectors.selectAction);
          }
          static setSelectActionText(e, t) {
            $(this.selectors.selectActionLabel, e).text(t);
          }
          static getSelectActionEnabled(e) {
            return !e.hasClass(this.classes.selectActionDisabled);
          }
          static toggleSelectActionEnabled(e, t) {
            e.toggleClass(this.classes.selectActionDisabled, !t);
          }
          static setSelectActionCount(e, t) {
            t > 0
              ? (e.addClass(this.classes.selectActionHasCount),
                $(this.selectors.selectActionCounter, e).text(t))
              : e.removeClass(this.classes.selectActionHasCount);
          }
          static clearFile(e) {
            return e.val(null);
          }
          static toggleFileEnabled(e, t) {
            e.prop(this.attributes.disabled, !t);
          }
          static getDate(e) {
            let t = u.getText(e),
              s = Date.parse(t);
            return !Number.isNaN(s) && new Date(t);
          }
          static setDate(e, t) {
            let s = t.getFullYear().toString(),
              i = (t.getMonth() + 1).toString(),
              o = t.getDate().toString();
            i.length < 2 && (i = "0" + i), o.length < 2 && (o = "0" + o);
            let n = [s, i, o].join("-");
            u.setText(e, n);
          }
          static getCheckbox(e) {
            return 0 != e.length && e.checkbox("is checked");
          }
          static getCheckboxUnchecked(e) {
            return 0 == e.length || e.checkbox("is unchecked");
          }
          static getCheckboxIndeterminate(e) {
            return e.hasClass(this.classes.checkboxIndeterminate);
          }
          static setCheckbox(e, t) {
            e.checkbox(t ? "set checked" : "set unchecked");
          }
          static setCheckboxForChildren(e, t) {
            let s = t.toArray(),
              i = s.reduce((e, t) => e || u.getCheckboxIndeterminate($(t)), !1),
              o = s.reduce((e, t) => e && u.getCheckbox($(t)), !0),
              n = s.reduce((e, t) => e && u.getCheckboxUnchecked($(t)), !0);
            i || (!o && !n)
              ? u.setCheckboxIndeterminate(e)
              : o
              ? u.setCheckbox(e, !0)
              : n && u.setCheckbox(e, !1);
          }
          static setCheckboxWithEvents(e, t) {
            e.checkbox(t ? "check" : "uncheck");
          }
          static toggleCheckboxWithEvents(e) {
            e.checkbox("toggle");
          }
          static getCheckboxValue(e) {
            return $(this.selectors.checkboxInput, e).val();
          }
          static blurCheckbox(e) {
            return $(this.selectors.checkboxInput, e).blur();
          }
          static setCheckboxIndeterminate(e) {
            e.checkbox("set indeterminate");
          }
          static toggleCheckboxEnabled(e, t) {
            e.toggleClass(this.classes.disabled, !t);
          }
          static onCheckboxChange(e, t) {
            e.checkbox("setting", {
              onChange: function () {
                t($(this).closest(".checkbox"));
              },
            });
          }
          static offCheckboxChange(e, t) {
            e.checkbox("setting", { onChange: null });
          }
          static onCheckboxChecked(e, t) {
            e.checkbox("setting", {
              onChecked: function () {
                t($(this).closest(".checkbox"));
              },
            });
          }
          static offCheckboxChecked(e, t) {
            e.checkbox("setting", { onChecked: null });
          }
          static onCheckboxBeforeUnchecked(e, t) {
            e.checkbox("setting", {
              beforeUnchecked: function () {
                return t($(this).closest(".checkbox"));
              },
            });
          }
          static offCheckboxBeforeUnchecked(e, t) {
            e.checkbox("setting", { beforeUnchecked: null });
          }
          static onCheckboxBeforeChecked(e, t) {
            e.checkbox("setting", {
              beforeChecked: function () {
                return t($(this).closest(".checkbox"));
              },
            });
          }
          static offCheckboxBeforeChecked(e, t) {
            e.checkbox("setting", { beforeChecked: null });
          }
          static dropdownRefreshSizes(e, t = null) {
            $(this.selectors.dropdown, e).each((e, s) => {
              let i = $(s);
              u.dropdownRefreshSize(i, t);
            });
          }
          static dropdownRefreshSize(e, t = null) {
            let s = this.getDropdownController(e);
            s && s.refreshSize(t);
          }
          static getDropdownController(e) {
            return h.Z.stimulus.getControllerForElementAndIdentifier(
              e.get(0),
              "components--dropdown"
            );
          }
          static setDropdown(e, t) {
            let s = this.getDropdownController(e);
            s && s.setValue(t);
          }
          static showDropdownDefaultText(e, t) {
            let s = this.getDropdownController(e);
            s && s.showDefaultText(t);
          }
          static setDropdownDefaultText(e, t) {
            let s = this.getDropdownController(e);
            s && s.setDefaultText(t);
          }
          static getDropdownIndexValue(e, t) {
            return $(
              `.dropdown__items .dropdown__items__row--item:nth-child(${
                t + 1
              })`,
              e
            ).data("value");
          }
          static getDropdown(e) {
            let t = this.getDropdownController(e);
            return t ? t.getValue() : null;
          }
          static getDropdownInts(e) {
            let t = this.getDropdownController(e);
            return (t ? t.getValue() : []).map((e) => parseInt(e, 10));
          }
          static getDropdownIntOrNull(e) {
            let t = u.getDropdown(e);
            return Number.isInteger(t) ? t : t ? parseInt(t, 10) : null;
          }
          static getDropdownItems(e) {
            let t = this.getDropdownController(e);
            return t ? t.getItems() : [];
          }
          static getDropdownItemsContent(e) {
            let t = this.getDropdownController(e);
            return t ? t.getItemsContent() : null;
          }
          static focusDropdown(e) {
            let t = this.getDropdownController(e);
            t && t.focus();
          }
          static clearDropdown(e) {
            let t = this.getDropdownController(e);
            t && t.clear();
          }
          static dropdownHideInContext(e) {
            $(this.selectors.dropdown, e).each((e, t) => {
              let s = $(t);
              u.dropdownHide(s);
            });
          }
          static dropdownHide(e) {
            let t = this.getDropdownController(e);
            t && t.hideMenu();
          }
          static onDropdownChange(e, t) {
            let s = this.getDropdownController(e);
            s && s.events.on("change", t);
          }
          static offDropdownChange(e, t) {
            let s = this.getDropdownController(e);
            s && s.events.off("change", t);
          }
          static onDropdownChangeHide(e, t) {
            let s = this.getDropdownController(e);
            s && s.events.on("changehide", t);
          }
          static offDropdownChangeHide(e, t) {
            let s = this.getDropdownController(e);
            s && s.events.off("changehide", t);
          }
          static onDropdownActionClick(e, t) {
            let s = this.getDropdownController(e);
            s && s.events.on("actionclick", t);
          }
          static offDropdownActionClick(e, t) {
            let s = this.getDropdownController(e);
            s && s.events.off("actionclick", t);
          }
          static toggleDropdownEnabled(e, t) {
            let s = this.getDropdownController(e);
            s && s.setEnabled(t);
          }
          static setDropdownEnabled(e) {
            let t = this.getDropdownController(e);
            t && t.setEnabled(!0);
          }
          static setDropdownDisabled(e) {
            let t = this.getDropdownController(e);
            t && t.setEnabled(!1);
          }
          static setDropdownItems(e, t) {
            let s = this.getDropdownController(e);
            s && s.setItems(t);
          }
          static setDropdownItemsContent(e, t) {
            let s = this.getDropdownController(e);
            s && s.setItemsContent(t);
          }
          static getRadio(e) {
            return e.checkbox("is checked");
          }
          static setRadio(e, t) {
            e.checkbox(t ? "set checked" : "set unchecked");
          }
          static getRadioEnabled(e) {
            return !$(this.selectors.radioInput, e).prop(
              this.attributes.disabled
            );
          }
          static getRadioValue(e) {
            return $(this.selectors.radioInput, e).val();
          }
          static onRadioChange(e, t) {
            e.checkbox("setting", {
              onChange: function () {
                t(this);
              },
            });
          }
          static offRadioChange(e, t) {
            e.checkbox("setting", { onChange: null });
          }
          static setRadioLabel(e, t) {
            $(this.selectors.radioLabel, e).text(t);
          }
          static setRange(e, t) {
            e.val(t);
          }
          static getRange(e) {
            return parseInt(e.val(), 10);
          }
          static onRangeChange(e, t) {
            e.on("change", t);
          }
          static offRangeChange(e, t) {
            e.off("change", t);
          }
          static onRangeInput(e, t) {
            e.on("input", t);
          }
          static offRangeInput(e, t) {
            e.off("input", t);
          }
          static chartRefreshSizes(e) {
            $(this.selectors.chart, e).each((e, t) => {
              let s = $(t);
              u.chartRefreshSize(s);
            });
          }
          static chartRefreshSize(e) {
            let t = this.getChartController(e);
            t && t.refreshSize();
          }
          static getChartController(e) {
            return h.Z.stimulus.getControllerForElementAndIdentifier(
              e.get(0),
              "charts--highchart"
            );
          }
          static getEditorController(e) {
            return h.Z.stimulus.getControllerForElementAndIdentifier(
              e.get(0),
              "components--editor"
            );
          }
          static getCaseStepEditorController(e) {
            return h.Z.stimulus.getControllerForElementAndIdentifier(
              e.get(0),
              "components--case-step-editor"
            );
          }
          static getTableController(e) {
            return h.Z.stimulus.getControllerForElementAndIdentifier(
              e.get(0),
              "components--table"
            );
          }
          static tableRefreshSizes(e, t) {
            $(this.selectors.table, e).each((e, s) => {
              let i = $(s);
              u.tableRefreshSize(i, t);
            });
          }
          static tableRefreshSize(e, t) {
            let s = this.getTableController(e);
            s && s.refreshSize(t);
          }
          static setButtonEnabled(e) {
            this.toggleButtonEnabled(e, !0);
          }
          static setButtonDisabled(e) {
            this.toggleButtonEnabled(e, !1);
          }
          static toggleButtonEnabled(e, t) {
            e.prop(this.attributes.disabled, !t);
          }
          static getButtonEnabled(e) {
            return !e.prop(this.attributes.disabled);
          }
          static getButtonInteractiveEnabled(e) {
            return !e.hasClass(this.classes.interactiveDisabled);
          }
          static toggleButtonInteractiveEnabled(e, t) {
            e.toggleClass(this.classes.interactiveDisabled, !t);
          }
          static onButtonBlur(e, t) {
            e.on("blur", t);
          }
          static offButtonBlur(e, t) {
            e.off("blur", t);
          }
          static onButtonFocus(e, t) {
            e.on("focus", t);
          }
          static offButtonFocus(e, t) {
            e.off("focus", t);
          }
          static loading(e, t) {
            return (
              u.markLoading(e),
              (t() || Promise.resolve()).then((t) => (u.markCompleted(e), t))
            );
          }
          static markLoading(e, t = null) {
            e.addClass(this.classes.loading);
          }
          static markCompleted(e) {
            e.removeClass(this.classes.loading);
          }
          static markParentLoading(e) {
            e.parent().addClass(this.classes.loading);
          }
          static markParentCompleted(e) {
            e.parent().removeClass(this.classes.loading);
          }
          static popupVisible(e) {
            return e.data("popupVisible");
          }
          static getVisiblePopup(e) {
            return e.data("popup");
          }
          static windowAnimateIntoView(e, t = null) {
            let s = $("html"),
              o = $(e).offset().top - 150;
            s.animate({ scrollTop: o }, i.X.AnimationScrollDelay, () => {
              t && t();
            });
          }
          static windowAnimateIntoViewIfNeeded(e, t = null) {
            let s = $(e),
              i = $("html").scrollTop(),
              o = i + $(window).height(),
              n = s.offset().top,
              r = n + s.outerHeight();
            n >= i && r <= o ? t && t() : u.windowAnimateIntoView(e, t);
          }
          static fixedContainerScrollIntoViewIfNeeded(e, t) {
            let s = $(e),
              i = $(t),
              o = i.scrollTop(),
              n = i.height(),
              r = s.height(),
              a = 0,
              l = s.offset(),
              d = i.offset(),
              h = l.top - d.top;
            if (h < 0) a = h;
            else {
              let e = l.top - d.top + r - n;
              e > 0 && (a = e);
            }
            0 != a && (a < 0 ? (a -= 20) : (a += 20), i.scrollTop(o + a));
          }
          static highlight(e, t = null) {
            let s = $(e);
            s.removeClass(this.classes.highlightBackground),
              setTimeout(() => {
                s.addClass(this.classes.highlightBackground),
                  setTimeout(() => {
                    s.removeClass(this.classes.highlightBackground);
                  }, i.X.AnimationHighlightDelay + 100);
              }, 0);
          }
          static scrollToBottom(e) {
            e.scrollTop(e.get(0).scrollHeight);
          }
          static show(e) {
            e.removeClass(this.classes.defaultHidden);
          }
          static hide(e) {
            e.addClass(this.classes.defaultHidden);
          }
          static copyTextToClipbiard(e) {
            const t = $("<textarea></textarea>");
            t.val(e),
              t.css({ position: "absolute", left: "-9999px" }),
              t.attr("readonly", ""),
              $(document.body).append(t),
              t.select(),
              document.execCommand("copy"),
              t.remove();
          }
        }
        c(u, "selectors", {
          dropdownDefaultText: ".default.text",
          radioInput: "input",
          checkboxInput: "input",
          radioLabel: "label",
          pageLink: "a[href]:not([data-turbolinks=false])",
          pageContainer: ".page-container",
          disabledPageLinkElements:
            ".inline-tabs__selection, .data-table[data-disable-action-links-default=true] td.table__field__avatar-text a[data-action]",
          dropdown: ".dropdown",
          chart: ".chart",
          table: ".data-table",
          selectActionCounter: ".select-action__count",
          selectActionLabel: ".select-action__label",
          linkActionLabel: ".link-action__label",
          iconAction: ".icon-action",
          selectAction: ".select-action",
        }),
          c(u, "classes", {
            dropdownActiveSelected: "active selected",
            loading: "loading",
            disabled: "disabled",
            navigating: "navigating",
            iconActionDisabled: "icon-action--disabled",
            selectActionDisabled: "select-action--disabled",
            linkActionDisabled: "link-action--disabled",
            highlightBackground: "highlight-background",
            selectActionHasCount: "select-action--has-count",
            checkboxIndeterminate: "indeterminate",
            defaultHidden: "default-hidden",
            interactiveDisabled: "interactive-disabled",
          }),
          c(u, "attributes", {
            disabled: "disabled",
            readonly: "readonly",
            dataUi: "data-ui",
            dataUiTooltip: "data-ui-tooltip",
            placeholder: "placeholder",
          });
      },
      15612: (e, t, s) => {
        "use strict";
        s.d(t, { g: () => i });
        class i {
          static get Errors403UserSeatLimit() {
            return 1;
          }
          static get Errors403UserOAuthRequired() {
            return 2;
          }
          static get Errors422IntentNotAuthorized() {
            return 3;
          }
          static get EntitiesRole() {
            return 1;
          }
          static get EntitiesUser() {
            return 2;
          }
          static get EntitiesGroup() {
            return 3;
          }
          static get EntitiesProject() {
            return 4;
          }
          static get EntitiesAuthMethod() {
            return 5;
          }
          static get EntitiesPlatformGroup() {
            return 6;
          }
          static get EntitiesPlatform() {
            return 7;
          }
          static get EntitiesConfig() {
            return 8;
          }
          static get EntitiesMilestoneType() {
            return 9;
          }
          static get EntitiesStatus() {
            return 10;
          }
          static get EntitiesMilestone() {
            return 11;
          }
          static get EntitiesField() {
            return 12;
          }
          static get EntitiesTemplate() {
            return 13;
          }
          static get EntitiesSession() {
            return 14;
          }
          static get EntitiesSessionResult() {
            return 15;
          }
          static get EntitiesRepository() {
            return 16;
          }
          static get EntitiesRepositoryCase() {
            return 17;
          }
          static get EntitiesRepositoryFolder() {
            return 18;
          }
          static get EntitiesRun() {
            return 19;
          }
          static get EntitiesRunTest() {
            return 20;
          }
          static get EntitiesRunResult() {
            return 21;
          }
          static get ProjectsAccessNoAccess() {
            return 1;
          }
          static get ProjectsAccessGlobal() {
            return 2;
          }
          static get ProjectsAccessRole() {
            return 3;
          }
          static get ProjectsReposSingle() {
            return 1;
          }
          static get ProjectsReposBaselines() {
            return 2;
          }
          static get AuthRulesScopeViewers() {
            return 1;
          }
          static get AuthRulesScopeRegular() {
            return 2;
          }
          static get AuthRulesScopeAdmins() {
            return 3;
          }
          static get AuthRulesScopeSiteAdmins() {
            return 4;
          }
          static get AuthRulesScopeGroup() {
            return 5;
          }
          static get AuthRulesScopeOthers() {
            return 6;
          }
          static get FiltersAll() {
            return 1;
          }
          static get FiltersAny() {
            return 2;
          }
          static get FiltersCheckNull() {
            return 1;
          }
          static get FiltersCheckNotNull() {
            return 2;
          }
          static get FiltersCheckEq() {
            return 3;
          }
          static get FiltersCheckNotEq() {
            return 4;
          }
          static get FiltersCheckLt() {
            return 5;
          }
          static get FiltersCheckLte() {
            return 6;
          }
          static get FiltersCheckGt() {
            return 7;
          }
          static get FiltersCheckGte() {
            return 8;
          }
          static get FiltersCheckIn() {
            return 9;
          }
          static get FiltersCheckNotIn() {
            return 10;
          }
          static get FiltersDateCustom() {
            return 3;
          }
          static get FiltersFormatInt() {
            return 1;
          }
          static get FiltersFormatBool() {
            return 2;
          }
          static get FiltersFormatString() {
            return 3;
          }
          static get FiltersFormatTimespan() {
            return 4;
          }
          static get FiltersFormatFloat() {
            return 5;
          }
          static get FiltersSelectionSet() {
            return 1;
          }
          static get FiltersSelectionAdd() {
            return 2;
          }
          static get FiltersSelectionRemove() {
            return 3;
          }
          static get FiltersSelectionIntersect() {
            return 4;
          }
          static get NotificationsTargetLinkInternal() {
            return 1;
          }
          static get NotificationsTargetLinkExternal() {
            return 2;
          }
          static get NotificationsTargetAction() {
            return 3;
          }
          static get AuthProvidersInternal() {
            return 1;
          }
          static get AuthProvidersOauthGithub() {
            return 2;
          }
          static get AuthProvidersOauthGoogle() {
            return 3;
          }
          static get AuthProvidersSamlAzureAd() {
            return 4;
          }
          static get AuthProvidersSamlGoogle() {
            return 5;
          }
          static get AuthProvidersSamlOkta() {
            return 6;
          }
          static get AuthProvidersSamlOneLogin() {
            return 7;
          }
          static get AuthProvidersSamlOther() {
            return 8;
          }
          static get AddManyUsersLimit() {
            return 250;
          }
          static get FieldTypesString() {
            return 1;
          }
          static get FieldTypesText() {
            return 2;
          }
          static get FieldTypesInteger() {
            return 3;
          }
          static get FieldTypesFloat() {
            return 4;
          }
          static get FieldTypesDate() {
            return 5;
          }
          static get FieldTypesUrl() {
            return 6;
          }
          static get FieldTypesCheckbox() {
            return 7;
          }
          static get FieldTypesDropdown() {
            return 8;
          }
          static get FieldTypesMultiselect() {
            return 9;
          }
          static get FieldTypesSteps() {
            return 10;
          }
          static get ColorIconDefault() {
            return "333435";
          }
          static get FieldTypeString() {
            return 1;
          }
          static get FieldTypeText() {
            return 2;
          }
          static get FieldTypeInteger() {
            return 3;
          }
          static get FieldTypeFloat() {
            return 4;
          }
          static get FieldTypeDate() {
            return 5;
          }
          static get FieldTypeUrl() {
            return 6;
          }
          static get FieldTypeCheckbox() {
            return 7;
          }
          static get FieldTypeDropdown() {
            return 8;
          }
          static get FieldTypeMultiselect() {
            return 9;
          }
          static get FieldTypeSteps() {
            return 10;
          }
          static get MixModeList() {
            return 1;
          }
          static get MixModeDetails() {
            return 2;
          }
          static get MixModeListDetails() {
            return 3;
          }
          static get MixModeTreeList() {
            return 4;
          }
          static get MixModeTreeListDetails() {
            return 5;
          }
          static get MixContentInitial() {
            return 1;
          }
          static get MixContentNoSelection() {
            return 2;
          }
          static get MixContentNotFound() {
            return 3;
          }
          static get MixContentEmptyFilter() {
            return 4;
          }
          static get MixContentNoData() {
            return 5;
          }
          static get MixContentContent() {
            return 6;
          }
          static get RepositoryCasesName() {
            return "repository_cases:name";
          }
          static get RepositoryCasesFolderId() {
            return "repository_cases:folder_id";
          }
          static get RepositoryGroupByFolder() {
            return "repository_cases:folder_id";
          }
          static get AutomationRunGroupByFolder() {
            return "automation_run_tests:folder_id";
          }
          static get RepositoryPositionFolderStart() {
            return 1;
          }
          static get RepositoryPositionFolderEnd() {
            return 2;
          }
          static get RepositoryPositionFolderCustom() {
            return 3;
          }
          static get RepositoryHashResults() {
            return "results";
          }
          static get PaginationCurrentMax() {
            return 1e5;
          }
          static get PaginationDefaultRows() {
            return 25;
          }
          static get MessageOauthComplete() {
            return 1;
          }
          static get MessageJiraConnectConfirmed() {
            return "confirmed";
          }
          static get MessageJiraPushReady() {
            return "ready";
          }
          static get MessageJiraPushAdd() {
            return "add";
          }
          static get MessageJiraPushDone() {
            return "done";
          }
          static get MessageJiraResizeFrame() {
            return "resize";
          }
          static get IssueTargetsCustom() {
            return 1;
          }
          static get IssueTargetsGitHub() {
            return 2;
          }
          static get IssueTargetsGitLab() {
            return 3;
          }
          static get IssueTargetsJira() {
            return 4;
          }
          static get JiraAppInstallSuffix() {
            return "/plugins/servlet/ac/com.atlassian.jira.emcee/discover?s=com.atlassian.jira.emcee__discover#!/discover/app/com.testmo.jira.connect";
          }
          static get AtlassianLoginPrefix() {
            return "https://id.atlassian.com/login?continue=";
          }
          static get StatusesUntestedId() {
            return 1;
          }
          static get RichTextAttachmentPreviewStart() {
            return "/attachments/view_preview/";
          }
          static get RichTextAttachmentViewStart() {
            return "/attachments/view/";
          }
          static get ImportCsvMaxFileSize() {
            return 20971520;
          }
          static get ImportTlxMaxFileSize() {
            return 104857600;
          }
          static get ImportCsvMaxValues() {
            return 100;
          }
          static get ImportTlxMaxValues() {
            return 100;
          }
          static get ImportFolderModeFlat() {
            return 1;
          }
          static get ImportFolderModeSub() {
            return 2;
          }
          static get ImportFolderModeRoot() {
            return 3;
          }
          static get ImportFolderFormatArray() {
            return 5;
          }
          static get ImportTextFormatMarkdown() {
            return 2;
          }
          static get ImportTypesString() {
            return 1;
          }
          static get ImportTypesText() {
            return 2;
          }
          static get ImportTypesInteger() {
            return 3;
          }
          static get ImportTypesFloat() {
            return 4;
          }
          static get ImportTypesDate() {
            return 5;
          }
          static get ImportTypesUrl() {
            return 6;
          }
          static get ImportTypesCheckbox() {
            return 7;
          }
          static get ImportTypesDropdown() {
            return 8;
          }
          static get ImportTypesMultiselect() {
            return 9;
          }
          static get ImportTypesSteps() {
            return 10;
          }
          static get ImportTypesFolder() {
            return 11;
          }
          static get ImportTypesTimespan() {
            return 12;
          }
          static get CopyCasesModeAll() {
            return 1;
          }
          static get CopyCasesModeFolder() {
            return 2;
          }
          static get CopyCasesModeCases() {
            return 3;
          }
          static get RepositoryExportModeAll() {
            return 1;
          }
          static get RepositoryExportModeFolder() {
            return 2;
          }
          static get RepositoryExportModeCases() {
            return 3;
          }
          static get MixColumnWidthDefaultPrint() {
            return 180;
          }
          static get RunsPrintTestModeNone() {
            return 1;
          }
          static get RunsPrintTestModeList() {
            return 2;
          }
          static get RunsPrintTestModeDetails() {
            return 3;
          }
          static get RunsPrintTestModeFull() {
            return 4;
          }
          static get RunsPrintFolderModeNone() {
            return 1;
          }
          static get RunsPrintFolderModeName() {
            return 2;
          }
          static get RunsPrintFolderModeFull() {
            return 3;
          }
          static get SessionsPrintResultModeNone() {
            return 1;
          }
          static get SessionsPrintResultModeFull() {
            return 2;
          }
          static get AutomationRunsPrintTestModeNone() {
            return 1;
          }
          static get AutomationRunsPrintTestModeList() {
            return 2;
          }
          static get AutomationRunsPrintTestModeDetails() {
            return 3;
          }
          static get AutomationRunsPrintTestModeFull() {
            return 4;
          }
          static get AutomationRunsPrintFolderModeNone() {
            return 1;
          }
          static get AutomationRunsPrintFolderModeName() {
            return 2;
          }
          static get RepositoryPrintCaseModeNone() {
            return 1;
          }
          static get RepositoryPrintCaseModeList() {
            return 2;
          }
          static get RepositoryPrintCaseModeDetails() {
            return 3;
          }
          static get RepositoryPrintFolderModeNone() {
            return 1;
          }
          static get RepositoryPrintFolderModeName() {
            return 2;
          }
          static get RepositoryPrintFolderModeFull() {
            return 3;
          }
        }
      },
      59434: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => m });
        var i = s(26454),
          o = s(47914),
          n = s(13814),
          r = s(43689),
          a = s(69555),
          l = s(62612),
          d = s(132);
        class h extends a.GI {
          constructor() {
            super("admin.auditing.event_popup");
          }
        }
        var c = s(24850),
          u = s(96622),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m extends i.v {
          constructor(...e) {
            super(...e),
              p(this, "doStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column);
                let t = e.state;
                this.components.searchBar.getHasSearched() &&
                  (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  n.N.postReplace(
                    "admin/auditing/render_table",
                    this.auditsContainerTarget,
                    n.N.toNetworkCase(t)
                  ).catch((t) => {
                    e.target.setLoading(e.loading, !1, e.column),
                      g.Z.handleError(t);
                  });
              }),
              p(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              p(this, "doSearch", () => {
                this.refreshSearch();
              }),
              p(this, "doFilter", (e) => {
                const t = $(e.button);
                u.UI.popupVisible(t) ||
                  (this.components.searchBar.setFilterLoading(!0),
                  n.N.post(
                    "admin/auditing/render_filter",
                    n.N.toNetworkCase(this.filter)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new c.y();
                      (s.onSubmit = (e) => this.saveFilter(e.filter)),
                        s.show(t, a.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        g.Z.handleError(e);
                    }));
              }),
              p(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                u.UI.popupVisible(t) && u.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  u.UI.loading(t, () =>
                    this.saveFilter(s).catch((e) => {
                      g.Z.handleError(e);
                    })
                  );
              }),
              p(this, "doEnabledChecked", () => {
                let e = u.UI.getCheckbox(this.$isEnabled);
                return (
                  u.UI.markParentLoading(this.$isEnabled),
                  n.N.post("admin/auditing/enable")
                    .then((e) =>
                      this.refreshSearch(!1).then(() => {
                        u.UI.markParentCompleted(this.$isEnabled);
                      })
                    )
                    .catch((t) => {
                      u.UI.setCheckbox(this.$isEnabled, !e),
                        u.UI.markParentCompleted(this.$isEnabled),
                        g.Z.handleError(t);
                    })
                );
              }),
              p(this, "doEnabledBeforeUnchecked", () => {
                if (u.UI.popupVisible(this.$isEnabled)) return !1;
                const e = new d.l(r.Z.lang("auditing.really_disable"));
                return (
                  (e.onSuccess = () => {
                    u.UI.markParentLoading(this.$isEnabled),
                      n.N.post("admin/auditing/disable")
                        .then((e) =>
                          this.refreshSearch(!1).then(() => {
                            u.UI.markParentCompleted(this.$isEnabled),
                              u.UI.setCheckbox(this.$isEnabled, !1);
                          })
                        )
                        .catch((e) => {
                          u.UI.markParentCompleted(this.$isEnabled),
                            g.Z.handleError(e);
                        });
                  }),
                  e.show(this.$isEnabled, a.Fz.BottomLeft),
                  !1
                );
              }),
              p(this, "doActionClick", (e) => {
                "details" === e.actionName &&
                  this.showDetails(e.id, e.$action, e.$field);
              });
          }
          load() {
            u.UI.initialize(this.element),
              this.hasIsEnabledTarget &&
                ((this.$isEnabled = $(this.isEnabledTarget)),
                u.UI.onCheckboxChecked(this.$isEnabled, this.doEnabledChecked),
                u.UI.onCheckboxBeforeUnchecked(
                  this.$isEnabled,
                  this.doEnabledBeforeUnchecked
                )),
              this.params.filter
                ? (this.filter = this.params.filter)
                : (this.filter = o.X.EmptyFilter),
              g.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  cancelfilter: this.doCancelFilter,
                  filter: this.doFilter,
                },
              }),
              g.Z.requestChild(this.component, "audits", {
                events: {
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                },
              });
          }
          unload() {
            this.hasIsEnabledTarget &&
              (u.UI.offCheckboxChecked(this.$isEnabled, this.doEnabledChecked),
              u.UI.offCheckboxBeforeUnchecked(
                this.$isEnabled,
                this.doEnabledBeforeUnchecked
              ));
          }
          refreshSearch(e = !0) {
            e && this.components.searchBar.setInputLoading(!0);
            let t = this.components.audits.getState();
            return (
              delete t.paginationCurrent,
              this.components.searchBar.getHasSearched() &&
                (t.search = this.components.searchBar.getSearchTerm()),
              _.keys(this.filter.conditions).length > 0 &&
                (t.filter = this.filter),
              n.N.postReplace(
                "admin/auditing/render_table",
                this.auditsContainerTarget,
                n.N.toNetworkCase(t)
              )
                .then(() => {
                  e && this.components.searchBar.setInputLoading(!1);
                })
                .catch((t) => {
                  e && this.components.searchBar.setInputLoading(!1),
                    g.Z.handleError(t);
                })
            );
          }
          saveFilter(e) {
            return n.N.post(
              "admin/auditing/save_filter",
              n.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshSearch(!1).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
          doClear() {
            let e = new l.A(
              r.Z.lang("auditing.clear_title"),
              r.Z.lang("auditing.clear_message"),
              r.Z.lang("auditing.clear_button")
            );
            (e.onSuccess = () =>
              n.N.post("admin/auditing/clear")
                .then(() => this.refreshSearch(!1))
                .catch((e) => {
                  g.Z.handleError(e);
                })),
              e.show();
          }
          showDetails(e, t, s) {
            u.UI.popupVisible(t) ||
              (this.components.audits.setLoading("actionfield", !0, s),
              n.N.post("admin/auditing/render_event/" + e)
                .then((e) => {
                  this.components.audits.setLoading("actionfield", !1, s),
                    new h().show(t, a.Fz.BottomRight, e.data);
                })
                .catch((e) => {
                  this.components.audits.setLoading("actionfield", !1, s),
                    g.Z.handleError(e);
                }));
          }
        }
        p(m, "targets", [
          "responsiveContainer",
          "auditsContainer",
          "isEnabled",
        ]);
      },
      93078: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => y });
        var i = s(26454),
          o = s(13814),
          n = s(43689),
          r = s(69555),
          a = s(47914),
          l = s(50609),
          d = s(7042),
          h = s(96622);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends l.V {
          constructor() {
            super("admin.auth.password_policy_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: a.X.BodyMinWidth,
            }),
              c(this, "doMinLengthOtherChange", () => {
                h.UI.toggleTextEnabled(
                  this.$minLengthOtherInput,
                  h.UI.getRadio(this.$minLengthOther)
                );
              });
          }
          load() {
            h.UI.onRadioChange(
              this.$minLengthOther,
              this.doMinLengthOtherChange
            ),
              h.UI.onRadioChange(
                this.$minLengthChoice,
                this.doMinLengthOtherChange
              );
          }
          unload() {
            h.UI.offRadioChange(
              this.$minLengthOther,
              this.doMinLengthOtherChange
            ),
              h.UI.offRadioChange(
                this.$minLengthChoice,
                this.doMinLengthOtherChange
              );
          }
          doSave() {
            h.UI.markLoading(this.$saveButton),
              d.l.hideValidationErrors(this.formViews);
            let e = {
              lowercase: h.UI.getCheckbox(this.$lowercase),
              uppercase: h.UI.getCheckbox(this.$uppercase),
              numbers: h.UI.getCheckbox(this.$numbers),
              specials: h.UI.getCheckbox(this.$specials),
            };
            h.UI.getRadio(this.$minLengthOther)
              ? (e.minLength = parseInt(
                  h.UI.getText(this.$minLengthOtherInput),
                  10
                ))
              : this.$minLengthChoice.each((t, s) => {
                  let i = $(s);
                  if (h.UI.getRadio(i))
                    return (
                      (e.minLength = parseInt(h.UI.getRadioValue(i), 10)), !1
                    );
                }),
              o.N.post(
                "admin/auth/update_internal_password_policy",
                o.N.toNetworkCase(e)
              )
                .then((e) =>
                  this.triggerSuccess(e.data).then(() => {
                    h.UI.markCompleted(this.$saveButton);
                  })
                )
                .catch((e) => {
                  h.UI.markCompleted(this.$saveButton),
                    d.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
          }
        }
        c(u, "forms", [
          {
            name: "settings",
            fields: [
              "lowercase",
              "uppercase",
              "numbers",
              "specials",
              "minLengthChoice",
              "minLengthOther",
              "minLengthOtherInput",
            ],
          },
        ]),
          c(u, "targets", ["saveButton"]),
          c(u, "actions", ["doSave"]);
        var g = s(15612),
          p = s(132),
          m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends l.V {
          constructor() {
            super("admin.auth.login_rules_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: 750,
            }),
              f(this, "doRulesBoxScroll", (e) => {
                h.UI.dropdownHideInContext(this.$rulesBox);
              }),
              f(this, "doRulesActionClick", (e) => {
                switch (e.actionName) {
                  case "delete":
                    this.doRulesDeleteAction(e);
                    break;
                  case "add":
                    this.doRulesAddAction(e);
                }
              });
          }
          load() {
            this.$rulesBox.on("scroll", this.doRulesBoxScroll),
              m.Z.requestChild(this.component, "rules", {
                events: { actionclick: this.doRulesActionClick },
              });
          }
          unload() {
            this.$rulesBox.off("scroll", this.doRulesBoxScroll);
          }
          doSave() {
            let e = [],
              t = this.components.rules.getRows(),
              s = !1;
            t.slice(1).each((t, i) => {
              let o = $(i),
                n = h.UI.getTarget("scope", o),
                r = h.UI.getTarget("access", o);
              if (!n.length || !r.length) return void (s = !0);
              let a = h.UI.getDropdownIntOrNull(n),
                l = { is_allowed: !!h.UI.getDropdownIntOrNull(r) };
              a < 0
                ? (l.scope = -a)
                : a > 0 &&
                  ((l.scope = g.g.AuthRulesScopeGroup), (l.group_id = a)),
                e.push(l);
            }),
              s ||
                (h.UI.markLoading(this.$saveButton),
                d.l.hideValidationErrors(this.formViews),
                o.N.post("admin/auth/update_internal_rules", e)
                  .then((e) =>
                    this.triggerSuccess(e.data).then(() => {
                      h.UI.markCompleted(this.$saveButton);
                    })
                  )
                  .catch((e) => {
                    h.UI.markCompleted(this.$saveButton),
                      d.l.handleFormError(e, this.formViews),
                      this.refreshPositionIfNeeded();
                  }));
          }
          doAddRule() {
            h.UI.markLoading(this.$addRuleButton),
              o.N.post("admin/auth/render_internal_rule")
                .then((e) => {
                  h.UI.markCompleted(this.$addRuleButton);
                  let t = $(e.data);
                  this.$othersRuleRow.before(t),
                    this.refreshUi(),
                    this.components.rules.addRows(t);
                })
                .catch((e) => {
                  h.UI.markCompleted(this.$addRuleButton), m.Z.handleError(e);
                });
          }
          doRulesDeleteAction(e) {
            if (h.UI.popupVisible(e.$action)) return;
            const t = new p.l(n.Z.lang("auth.login_rules_really_remove"));
            (t.onSuccess = () => {
              this.components.rules.removeRows(e.$row), e.$row.remove();
            }),
              t.show(e.$action, r.Fz.BottomRight);
          }
          doRulesAddAction(e) {
            e.target.setLoading("actionfield", !0, e.$field),
              o.N.post("admin/auth/render_internal_rule")
                .then((t) => {
                  e.target.setLoading("actionfield", !1, e.$field);
                  let s = $(t.data);
                  e.$row.after(s),
                    this.refreshUi(),
                    this.components.rules.addRows(s);
                })
                .catch((t) => {
                  e.target.setLoading("actionfield", !1, e.$field),
                    m.Z.handleError(t);
                });
          }
        }
        f(C, "forms", [{ name: "rules", fields: [] }]),
          f(C, "targets", [
            "saveButton",
            "addRuleButton",
            "rulesBox",
            "othersRuleRow",
          ]),
          f(C, "actions", ["doSave", "doAddRule"]);
        var b = s(48995);
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends l.V {
          constructor() {
            super("admin.auth.disable_tfa_dialog", { width: 520 }),
              I(this, "doConfirmationCheckboxChange", () => {
                h.UI.toggleButtonEnabled(
                  this.$disableButton,
                  h.UI.getCheckbox(this.$confirmationCheckbox)
                );
              });
          }
          load() {
            h.UI.onCheckboxChange(
              this.$confirmationCheckbox,
              this.doConfirmationCheckboxChange
            );
          }
          unload() {
            h.UI.offCheckboxChange(
              this.$confirmationCheckbox,
              this.doConfirmationCheckboxChange
            );
          }
          doDisable() {
            h.UI.getCheckbox(this.$confirmationCheckbox) &&
              this.triggerSuccess();
          }
        }
        I(w, "actions", ["doDisable"]),
          I(w, "targets", ["disableButton", "confirmationCheckbox"]);
        var v = s(14589);
        function _(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class S {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class x extends l.V {
          constructor(e = x.Add, t = null) {
            super("admin.auth.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: a.X.SplitDialogWidth,
            }),
              _(this, "doRulesBoxScroll", (e) => {
                h.UI.dropdownHideInContext(this.$rulesBox);
              }),
              _(this, "doProviderChange", () => {
                this.$samlSettings.hide(),
                  this.$oauthSettings.hide(),
                  this.$emptySettings.hide(),
                  h.UI.getDropdownIntOrNull(this.$provider)
                    ? this.$samlSettings.show()
                    : this.$emptySettings.show(),
                  this.refreshPositionIfNeeded();
              }),
              _(this, "doCanProvisionChange", () => {
                const e = 1 == h.UI.getDropdownIntOrNull(this.$canProvision);
                h.UI.toggleTextEnabled(this.$provDomains, e),
                  h.UI.toggleDropdownEnabled(this.$provType, e),
                  h.UI.toggleDropdownEnabled(this.$provRoleId, e),
                  h.UI.toggleDropdownEnabled(this.$provGroups, e),
                  this.refreshPositionIfNeeded();
              }),
              _(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded(),
                  this.$addRuleButton.toggle(1 == e.index);
              }),
              _(this, "doRulesActionClick", (e) => {
                switch (e.actionName) {
                  case "delete":
                    this.doRulesDeleteAction(e);
                    break;
                  case "add":
                    this.doRulesAddAction(e);
                }
              }),
              (this.mode = e),
              (this.methodId = t);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              this.$addRuleButton.hide(),
              this.$rulesBox.on("scroll", this.doRulesBoxScroll),
              m.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              m.Z.requestChild(this.component, "rules", {
                events: { actionclick: this.doRulesActionClick },
              }),
              m.Z.requestChild(this.component, "provider", {
                onAdded: () => {
                  this.doProviderChange();
                },
                events: { change: this.doProviderChange },
              }),
              m.Z.requestChild(this.component, "canProvision", {
                onAdded: () => {
                  this.doCanProvisionChange();
                },
                events: { change: this.doCanProvisionChange },
              }),
              this.mode == S.Edit &&
                m.Z.waitComponentConnected("provider", () => {
                  h.UI.setDropdownDisabled(this.$provider);
                });
          }
          unload() {
            this.$rulesBox.off("scroll", this.doRulesBoxScroll);
          }
          doAddRule() {
            h.UI.markLoading(this.$addRuleButton),
              o.N.post("admin/auth/render_external_rule")
                .then((e) => {
                  h.UI.markCompleted(this.$addRuleButton);
                  let t = $(e.data);
                  this.$othersRuleRow.before(t),
                    this.refreshUi(),
                    this.components.rules.addRows(t);
                })
                .catch((e) => {
                  h.UI.markCompleted(this.$addRuleButton), m.Z.handleError(e);
                });
          }
          doRulesDeleteAction(e) {
            if (h.UI.popupVisible(e.$action)) return;
            const t = new p.l(n.Z.lang("auth.login_rules_really_remove"));
            (t.onSuccess = () => {
              this.components.rules.removeRows(e.$row), e.$row.remove();
            }),
              t.show(e.$action, r.Fz.BottomRight);
          }
          doRulesAddAction(e) {
            e.target.setLoading("actionfield", !0, e.$field),
              o.N.post("admin/auth/render_external_rule")
                .then((t) => {
                  e.target.setLoading("actionfield", !1, e.$field);
                  let s = $(t.data);
                  e.$row.after(s),
                    this.refreshUi(),
                    this.components.rules.addRows(s);
                })
                .catch((t) => {
                  e.target.setLoading("actionfield", !1, e.$field),
                    m.Z.handleError(t);
                });
          }
          collectMethodData() {
            let e = [],
              t = this.components.rules.getRows(),
              s = !1;
            if (
              (t.each((t, i) => {
                let o = $(i),
                  n = h.UI.getTarget("scope", o),
                  r = h.UI.getTarget("access", o);
                if (!n.length || !r.length) return void (s = !0);
                let a = h.UI.getDropdownIntOrNull(n),
                  l = { is_allowed: !!h.UI.getDropdownIntOrNull(r) };
                a < 0
                  ? (l.scope = -a)
                  : a > 0 &&
                    ((l.scope = g.g.AuthRulesScopeGroup), (l.group_id = a)),
                  e.push(l);
              }),
              s)
            )
              return;
            let i = h.UI.getDropdownInts(this.$provGroups) || [];
            i = i.map((e) => parseInt(e, 10));
            let o = {
                name: h.UI.getText(this.$name),
                isActive: h.UI.getCheckbox(this.$isActive),
                rules: e,
                canProvision:
                  1 == h.UI.getDropdownIntOrNull(this.$canProvision),
                provDomains: h.UI.getText(this.$provDomains),
                provType: h.UI.getDropdownIntOrNull(this.$provType),
                provRoleId: h.UI.getDropdownIntOrNull(this.$provRoleId),
                provGroups: i,
              },
              n = h.UI.getDropdownIntOrNull(this.$provider);
            return (
              this.mode == S.Add && (o.provider = n),
              (o.samlIdpId = h.UI.getText(this.$samlIdpId)),
              (o.samlIdpSso = h.UI.getText(this.$samlIdpSso)),
              (o.samlIdpX509 = h.UI.getText(this.$samlIdpX509)),
              (o.samlClaimId = h.UI.getText(this.$samlClaimId)),
              (o.samlClaimName = h.UI.getText(this.$samlClaimName)),
              (o.samlClaimEmail = h.UI.getText(this.$samlClaimEmail)),
              o
            );
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            h.UI.markLoading(this.$submitButton),
              d.l.hideValidationErrors(this.formViews);
            let t = this.collectMethodData();
            this.mode == S.Edit &&
              ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
            let s =
              this.mode == S.Add
                ? "admin/auth/create"
                : "admin/auth/update/" + this.methodId;
            o.N.post(s, o.N.toNetworkCase(t))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  h.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                v.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      d.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    h.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        _(x, "forms", [
          {
            name: "login",
            fields: [
              "name",
              "provider",
              "isActive",
              "samlIdpId",
              "samlIdpSso",
              "samlIdpX509",
              "samlClaimId",
              "samlClaimName",
              "samlClaimEmail",
            ],
          },
          { name: "rules", fields: [] },
          {
            name: "provisioning",
            fields: [
              "canProvision",
              "provDomains",
              "provType",
              "provRoleId",
              "provGroups",
            ],
          },
        ]),
          _(x, "targets", [
            "submitButton",
            "addRuleButton",
            "rulesBox",
            "othersRuleRow",
            "emptySettings",
            "oauthSettings",
            "samlSettings",
          ]),
          _(x, "actions", ["doSubmit", "doAddRule"]);
        var k = s(62612);
        function T(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class y extends i.v {
          constructor(...e) {
            super(...e),
              T(this, "doForgotChange", () => {
                this.changeCheckboxOption(this.$forgot, "forgot");
              }),
              T(this, "doRememberChange", () => {
                this.changeCheckboxOption(this.$remember, "remember");
              }),
              T(this, "doTfaChecked", () => {
                this.changeCheckboxOption(this.$tfa, "tfa").then(() => {
                  this.updateTfaForceEnabled();
                });
              }),
              T(
                this,
                "doTfaBeforeUnchecked",
                () => (
                  h.UI.markParentLoading(this.$tfa),
                  o.N.post("admin/auth/prepare_disable_2fa")
                    .then((e) => {
                      if (e.data) {
                        h.UI.markParentCompleted(this.$tfa);
                        const t = new w();
                        (t.onSuccess = (e) => {
                          h.UI.setCheckbox(this.$tfa, !1),
                            this.changeCheckboxOption(this.$tfa, "tfa"),
                            this.updateTfaForceEnabled();
                        }),
                          t.show(e.data);
                      } else
                        h.UI.setCheckbox(this.$tfa, !1),
                          this.changeCheckboxOption(this.$tfa, "tfa"),
                          this.updateTfaForceEnabled();
                    })
                    .catch((e) => {
                      h.UI.markParentCompleted(this.$tfa), m.Z.handleError(e);
                    }),
                  !1
                )
              ),
              T(this, "doTfaForcedChange", () => {
                this.changeCheckboxOption(this.$tfaForced, "tfaForced")
                  .then((e) => {
                    e &&
                      new b.u(
                        b.Y.Positive,
                        n.Z.lang("auth.2fa_now_required_title"),
                        n.Z.lang("auth.2fa_now_required_message", {
                          url: o.N.url("admin/users"),
                        })
                      ).show(this.tfaForcedTarget, r.Fz.BottomRight);
                  })
                  .catch((e) => {
                    m.Z.handleError(e);
                  });
              }),
              T(this, "doMethodsToggleChange", (e) => {
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s,
                  i = h.UI.getCheckbox(e.$toggle);
                (s = i ? "admin/auth/enable/" : "admin/auth/disable/"),
                  o.N.post(s + e.id)
                    .then((s) => {
                      t.setLoading("field", !1, e.$field),
                        i ||
                          new b.u(
                            b.Y.Positive,
                            n.Z.lang("auth.method_disabled_title"),
                            n.Z.lang("auth.method_disabled_message", {
                              url: o.N.url("admin/users"),
                            })
                          ).show(e.$toggle, r.Fz.BottomLeft);
                    })
                    .catch((s) => {
                      h.UI.setCheckbox(e.$toggle, !i),
                        t.setLoading("field", !1, e.$field),
                        m.Z.handleError(s);
                    });
              }),
              T(this, "doMethodsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editMethod(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteMethod(e.id, e.$row);
                }
              });
          }
          load() {
            h.UI.initialize(this.element),
              (this.$passwordPolicyButton = $(this.passwordPolicyButtonTarget)),
              (this.$loginRulesButton = $(this.loginRulesButtonTarget)),
              (this.$forgot = $(this.forgotTarget)),
              (this.$remember = $(this.rememberTarget)),
              (this.$tfa = $(this.tfaTarget)),
              (this.$tfaForced = $(this.tfaForcedTarget)),
              (this.$addMethodButton = $(this.addMethodButtonTarget)),
              h.UI.onCheckboxChange(this.$forgot, this.doForgotChange),
              h.UI.onCheckboxChange(this.$remember, this.doRememberChange),
              h.UI.onCheckboxChecked(this.$tfa, this.doTfaChecked),
              h.UI.onCheckboxBeforeUnchecked(
                this.$tfa,
                this.doTfaBeforeUnchecked
              ),
              h.UI.onCheckboxChange(this.$tfaForced, this.doTfaForcedChange),
              m.Z.requestChild(this.component, "methods", {
                events: {
                  actionclick: this.doMethodsActionClick,
                  togglechange: this.doMethodsToggleChange,
                },
              });
          }
          unload() {
            h.UI.offCheckboxChange(this.$forgot, this.doForgotChange),
              h.UI.offCheckboxChange(this.$remember, this.doRememberChange),
              h.UI.offCheckboxChecked(this.$tfa, this.doTfaChecked),
              h.UI.offCheckboxBeforeUnchecked(
                this.$tfa,
                this.doTfaBeforeUnchecked
              ),
              h.UI.offCheckboxChange(this.$tfaForced, this.doTfaForcedChange);
          }
          doConfigurePasswordPolicy() {
            h.UI.markLoading(this.$passwordPolicyButton),
              o.N.post("admin/auth/render_internal_password_policy")
                .then((e) => {
                  h.UI.markCompleted(this.$passwordPolicyButton),
                    new u().show(e.data);
                })
                .catch((e) => {
                  h.UI.markCompleted(this.$passwordPolicyButton),
                    m.Z.handleError(e);
                });
          }
          doConfigureLoginRules() {
            h.UI.markLoading(this.$loginRulesButton),
              o.N.post("admin/auth/render_internal_rules")
                .then((e) => {
                  h.UI.markCompleted(this.$loginRulesButton),
                    new C().show(e.data);
                })
                .catch((e) => {
                  h.UI.markCompleted(this.$loginRulesButton),
                    m.Z.handleError(e);
                });
          }
          changeCheckboxOption(e, t) {
            let s = h.UI.getCheckbox(e);
            h.UI.markParentLoading(e);
            let i = {};
            return (
              (i[t] = s),
              o.N.post(
                "admin/auth/update_internal_options",
                o.N.toNetworkCase(i)
              )
                .then((t) => (h.UI.markParentCompleted(e), s))
                .catch((t) => {
                  h.UI.setCheckbox(e, !s),
                    h.UI.markParentCompleted(e),
                    m.Z.handleError(t);
                })
            );
          }
          updateTfaForceEnabled() {
            let e = h.UI.getCheckbox(this.$tfa);
            h.UI.toggleCheckboxEnabled(this.$tfaForced, e),
              e || h.UI.setCheckbox(this.$tfaForced, !1);
          }
          doAddMethod() {
            h.UI.markLoading(this.$addMethodButton),
              o.N.post("admin/auth/render_create")
                .then((e) => {
                  h.UI.markCompleted(this.$addMethodButton);
                  const t = new x(S.Add);
                  (t.onSuccess = (e) => this.refreshMethods()), t.show(e.data);
                })
                .catch((e) => {
                  h.UI.markCompleted(this.$addMethodButton), m.Z.handleError(e);
                });
          }
          editMethod(e, t, s) {
            t.setLoading("actionfield", !0, s),
              o.N.post("admin/auth/render_update/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new x(S.Edit, e);
                  (o.onSuccess = (e) => this.refreshMethods()), o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), m.Z.handleError(e);
                });
          }
          deleteMethod(e, t) {
            let s = t.data("name"),
              i = new k.A(
                n.Z.lang("auth.method_delete_title"),
                n.Z.langEscape("auth.method_delete_message", { name: s }),
                n.Z.lang("auth.method_delete_button"),
                null,
                { htmlWarning: n.Z.lang("auth.method_delete_warning") }
              );
            (i.onSuccess = () =>
              o.N.post("admin/auth/delete/" + e).then(() =>
                this.refreshMethods()
              )),
              i.show();
          }
          refreshMethods() {
            return o.N.postReplace(
              "admin/auth/render_table",
              this.methodsContainerTarget
            );
          }
        }
        T(y, "targets", [
          "responsiveContainer",
          "passwordPolicyButton",
          "loginRulesButton",
          "forgot",
          "remember",
          "tfa",
          "tfaForced",
          "addMethodButton",
          "methodsContainer",
        ]);
      },
      57874: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.v {
          constructor(...e) {
            super(...e),
              a(this, "doAutoCompleteChange", () => {
                this.changeDropdownOption(
                  this.$autoComplete,
                  "automation_auto_complete",
                  !0
                );
              }),
              a(this, "doArchiveChange", () => {
                this.changeDropdownOption(
                  this.$archive,
                  "automation_archive",
                  !0
                );
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$autoComplete = $(this.autoCompleteTarget)),
              (this.$archive = $(this.archiveTarget)),
              n.UI.onDropdownChangeHide(
                this.$autoComplete,
                this.doAutoCompleteChange
              ),
              n.UI.onDropdownChangeHide(this.$archive, this.doArchiveChange);
          }
          unload() {
            n.UI.offDropdownChangeHide(
              this.$autoComplete,
              this.doAutoCompleteChange
            ),
              n.UI.offDropdownChangeHide(this.$archive, this.doArchiveChange);
          }
          changeDropdownOption(e, t, s = !1) {
            let i = {};
            (i[t] = s ? n.UI.getDropdownIntOrNull(e) : n.UI.getDropdown(e)),
              n.UI.markLoading(e),
              o.N.post("admin/settings/update", o.N.toNetworkCase(i))
                .then((t) => {
                  n.UI.markCompleted(e);
                })
                .catch((t) => {
                  n.UI.markCompleted(e), r.Z.handleError(t);
                });
          }
        }
        a(l, "targets", ["autoComplete", "archive"]);
      },
      68683: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(26454),
          o = s(96622);
        const n = class extends i.v {
          load() {
            o.UI.initialize(this.element);
          }
          unload() {}
        };
      },
      93072: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => U });
        var i = s(26454),
          o = s(13814),
          n = s(69555),
          r = s(24850),
          a = s(16087),
          l = s(132),
          d = s(48995),
          h = s(50609),
          c = s(96622),
          u = s(7042),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m {
          static get Include() {
            return 1;
          }
          static get Exclude() {
            return 2;
          }
        }
        class f extends h.V {
          constructor(e = m.Include, t = null) {
            super("admin.configurations.include_exclude_projects_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              (this.mode = e),
              (this.configurationIds = t);
          }
          load() {
            g.Z.requestChild(this.component, "projects");
          }
          doSubmit() {
            c.UI.markLoading(this.$submitButton),
              u.l.hideValidationErrors(this.formViews);
            let e = {
                projects: this.components.projects
                  ? this.components.projects.getSelectedIds()
                  : [],
                ids: this.configurationIds,
              },
              t =
                this.mode == m.Include
                  ? "admin/configs/include_projects"
                  : "admin/configs/exclude_projects";
            o.N.post(t, o.N.toNetworkCase(e))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  c.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                c.UI.markCompleted(this.$submitButton),
                  u.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        p(f, "forms", [{ name: "configurations", fields: [] }]),
          p(f, "targets", ["submitButton"]),
          p(f, "actions", ["doSubmit"]);
        class b extends h.V {
          constructor() {
            super("admin.configurations.add_many_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              width: 700,
              minHeight: 550,
              resizable: !0,
            }),
              C(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  c.UI.setRadio(this.$includeSelected, !0);
              }),
              (this.platforms = []),
              (this.configurations = []),
              (this.includeAll = !0),
              (this.projects = []);
          }
          load() {
            g.Z.requestChild(this.component, "projects", {
              events: { selectionchange: this.doProjectsSelectionChange },
            }),
              this.setWizardPage(1);
          }
          toggleButtons(e) {
            let t = {};
            _.defaults(t, e, { previous: !1, next: !1, confirm: !1 }),
              t.previous
                ? this.$previousButton.show()
                : this.$previousButton.hide(),
              t.next ? this.$nextButton.show() : this.$nextButton.hide(),
              t.confirm ? this.$submitButton.show() : this.$submitButton.hide();
          }
          setWizardPage(e) {
            switch (((this.page = e), e)) {
              case 1:
                this.toggleButtons({ previous: !1, next: !0, confirm: !1 });
                break;
              case 2:
                this.toggleButtons({ previous: !0, next: !0, confirm: !1 });
                break;
              case 3:
                this.toggleButtons({ previous: !0, next: !1, confirm: !0 });
            }
            c.UI.toggleButtonEnabled(
              this.$nextButton,
              0 == this.$emptyText.length
            );
          }
          collectConfigurationData() {
            if (1 == this.page) {
              this.platforms.length = 0;
              let e = g.Z.findComponents(this.$dialog, "platforms");
              for (let t of e) this.platforms.push(...t.getSelectedIds());
            }
            if (2 == this.page) {
              this.configurations.length = 0;
              let e = g.Z.findComponent(this.$dialog, "configs");
              e &&
                e.getSelectedRows().each((e, t) => {
                  let s = $(t).data("platforms");
                  this.configurations.push(s);
                });
            }
            if (3 == this.page) {
              this.includeAll = c.UI.getRadio(this.$includeAll);
              let e = g.Z.findComponent(this.$dialog, "projects");
              this.projects = e ? e.getSelectedIds() : [];
            }
            return {
              platforms: this.platforms,
              configurations: this.configurations,
              includeAll: this.includeAll,
              projects: this.projects,
            };
          }
          loadPage(e, t) {
            c.UI.markLoading(t), u.l.hideValidationErrors(this.formViews);
            let s = this.collectConfigurationData();
            o.N.postReplace(
              `admin/configs/render_create_many${e}`,
              this.$contentContainer,
              o.N.toNetworkCase(s)
            )
              .then(() => {
                c.UI.markCompleted(t),
                  this.rebindAll(),
                  this.setWizardPage(e),
                  this.refreshPositionIfNeeded(),
                  c.UI.initialize(this.$contentContainer);
              })
              .catch((e) => {
                c.UI.markCompleted(t),
                  u.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
          doNext() {
            (1 != this.page && 2 != this.page) ||
              this.loadPage(this.page + 1, this.$nextButton);
          }
          doPrevious() {
            (2 != this.page && 3 != this.page) ||
              this.loadPage(this.page - 1, this.$previousButton);
          }
          doSubmit() {
            c.UI.markLoading(this.$submitButton),
              u.l.hideValidationErrors(this.formViews);
            let e = this.collectConfigurationData();
            o.N.post("admin/configs/create_many", o.N.toNetworkCase(e))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  c.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                c.UI.markCompleted(this.$submitButton),
                  u.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        C(b, "forms", [
          { name: "configs", fields: ["includeAll", "includeSelected"] },
        ]),
          C(b, "targets", [
            "submitButton",
            "nextButton",
            "previousButton",
            "contentContainer",
            "emptyText",
          ]),
          C(b, "actions", ["doSubmit", "doNext", "doPrevious"]);
        class w extends h.V {
          constructor(e) {
            super("admin.configurations.edit_projects_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              I(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  c.UI.setRadio(this.$includeSelected, !0);
              }),
              (this.configurationId = e);
          }
          load() {
            g.Z.requestChild(this.component, "projects", {
              events: { selectionchange: this.doProjectsSelectionChange },
            });
          }
          doSubmit() {
            c.UI.markLoading(this.$submitButton),
              u.l.hideValidationErrors(this.formViews);
            let e = {
              includeAll: c.UI.getRadio(this.$includeAll),
              projects: this.components.projects
                ? this.components.projects.getSelectedIds()
                : [],
            };
            o.N.post(
              "admin/configs/update_projects/" + this.configurationId,
              o.N.toNetworkCase(e)
            )
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  c.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                c.UI.markCompleted(this.$submitButton),
                  u.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function v(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        I(w, "forms", [
          { name: "configuration", fields: ["includeAll", "includeSelected"] },
        ]),
          I(w, "targets", ["submitButton"]),
          I(w, "actions", ["doSubmit"]);
        class S extends h.V {
          constructor() {
            super("admin.configurations.add_group_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 500,
            });
          }
          doSubmit() {
            c.UI.markLoading(this.$submitButton),
              u.l.hideValidationErrors(this.formViews);
            let e = { name: c.UI.getText(this.$name) };
            o.N.post("admin/configs/create_platform_group", e)
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  c.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                c.UI.markCompleted(this.$submitButton),
                  u.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        v(S, "forms", [{ name: "group", fields: ["name"] }]),
          v(S, "targets", ["submitButton"]),
          v(S, "actions", ["doSubmit"]);
        class k extends h.V {
          constructor(e) {
            super("admin.configurations.add_platforms_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 550,
            }),
              (this.groupId = e);
          }
          doSubmit() {
            c.UI.markLoading(this.$submitButton),
              u.l.hideValidationErrors(this.formViews);
            let e = { platforms: c.UI.getText(this.$platforms) };
            o.N.post("admin/configs/create_platforms/" + this.groupId, e)
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  c.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                c.UI.markCompleted(this.$submitButton),
                  u.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        x(k, "forms", [{ name: "group", fields: ["platforms"] }]),
          x(k, "targets", ["submitButton"]),
          x(k, "actions", ["doSubmit"]);
        var T = s(62612),
          y = s(43689),
          E = s(47914);
        function N(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class U extends i.v {
          constructor(...e) {
            super(...e),
              N(this, "classes", {
                platformBoxEmpty: "admin-configurations-platform-box--empty",
                actionsEmpty: "admin-configurations-actions--empty",
              }),
              N(this, "doPlatformsToggleChecked", (e) => {
                e.target.setLoading("field", !0, e.$field),
                  o.N.post("admin/configs/enable_platform/" + e.id)
                    .then((t) => {
                      this.refreshTable().then(() => {
                        e.target.setLoading("field", !1, e.$field);
                      });
                    })
                    .catch((t) => {
                      c.UI.setCheckbox(e.$toggle, !1),
                        e.target.setLoading("field", !1, e.$field),
                        g.Z.handleError(t);
                    });
              }),
              N(this, "doPlatformsToggleBeforeUnchecked", (e) => {
                if (c.UI.popupVisible(e.$toggle)) return !1;
                const t = new l.l(
                  y.Z.lang("configurations.really_disable_platform")
                );
                return (
                  (t.onSuccess = () => {
                    e.target.setLoading("field", !0, e.$field),
                      o.N.post("admin/configs/disable_platform/" + e.id)
                        .then((t) => {
                          c.UI.setCheckbox(e.$toggle, !1),
                            this.refreshTable().then(() => {
                              e.target.setLoading("field", !1, e.$field);
                            });
                        })
                        .catch((t) => {
                          c.UI.setCheckbox(e.$toggle, !0),
                            e.target.setLoading("field", !1, e.$field),
                            g.Z.handleError(t);
                        });
                  }),
                  t.show(e.$toggle, n.Fz.BottomRight),
                  !1
                );
              }),
              N(this, "doGroupsAdded", (e) => {
                if (this.selectedGroupId) {
                  let e = this.components.groups.getRowById(
                    this.selectedGroupId
                  );
                  e.length > 0
                    ? this.components.groups.markActivatedRow(e)
                    : this.updateSelectedGroup(null);
                }
              }),
              N(this, "doGroupsActivatedChange", (e) => {
                if (!e.$row) return;
                let t = e.$row,
                  s = $("td", t).first(),
                  i = t.data("id");
                e.target.setLoading("actionfield", !0, s),
                  o.N.postReplace(
                    "admin/configs/render_platform_table/" + i,
                    this.platformContainerTarget
                  )
                    .then(() => {
                      e.target.setLoading("actionfield", !1, s),
                        this.updateSelectedGroup(i);
                    })
                    .catch((t) => {
                      e.target.setLoading("actionfield", !1, s),
                        g.Z.handleError(t);
                    });
              }),
              N(this, "doGroupsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editGroup(e.id, e.$row, e.target);
                    break;
                  case "delete":
                    this.deleteGroup(e.id, e.$row);
                }
              }),
              N(this, "doPlatformsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editPlatform(e.id, e.$row, e.target);
                    break;
                  case "delete":
                    this.deletePlatform(e.id, e.$row);
                }
              }),
              N(this, "doCancelSearch", (e) => {
                this.refreshSearch();
              }),
              N(this, "doSearch", () => {
                this.refreshSearch();
              }),
              N(this, "doStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column);
                let t = e.state;
                this.components.searchBar.getHasSearched() &&
                  (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  o.N.postReplace(
                    "admin/configs/render_table",
                    this.configsContainerTarget,
                    o.N.toNetworkCase(t)
                  ).catch((t) => {
                    e.target.setLoading(e.loading, !1, e.column),
                      g.Z.handleError(t);
                  });
              }),
              N(this, "doFilter", (e) => {
                const t = $(e.button);
                c.UI.popupVisible(t) ||
                  (this.components.searchBar.setFilterLoading(!0),
                  o.N.post(
                    "admin/configs/render_filter",
                    o.N.toNetworkCase(this.filter)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new r.y();
                      (s.onSubmit = (e) => this.saveFilter(e.filter)),
                        s.show(t, n.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        g.Z.handleError(e);
                    }));
              }),
              N(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                c.UI.popupVisible(t) && c.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  c.UI.loading(t, () =>
                    this.saveFilter(s).catch((e) => {
                      g.Z.handleError(e);
                    })
                  );
              }),
              N(this, "doToggleChange", (e) => {
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s,
                  i = c.UI.getCheckbox(e.$toggle);
                (s = i ? "admin/configs/enable/" : "admin/configs/disable/"),
                  o.N.post(s + e.id)
                    .then((s) => {
                      t.setLoading("field", !1, e.$field);
                    })
                    .catch((s) => {
                      c.UI.setCheckbox(e.$toggle, !i),
                        t.setLoading("field", !1, e.$field),
                        i
                          ? this.handleEnableError(s, e.$toggle)
                          : g.Z.handleError(s);
                    });
              }),
              N(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editProjects(e.id, e.$field);
                    break;
                  case "menu":
                    this.showContextMenu(e.id, e.$action, e.$row, e.$field);
                }
              }),
              N(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editProjects(e.context.id, e.context.$field);
                    break;
                  case "enable":
                    this.toggleConfigurationEnabled(
                      e.context.id,
                      e.context.$action,
                      e.context.$field,
                      !0
                    );
                    break;
                  case "disable":
                    this.toggleConfigurationEnabled(
                      e.context.id,
                      e.context.$action,
                      e.context.$field,
                      !1
                    );
                    break;
                  case "delete":
                    this.deleteConfiguration(
                      e.context.id,
                      e.context.$action,
                      e.context.$field
                    );
                }
              }),
              N(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.configs.getSelectedIds();
                switch (e.actionName) {
                  case "enable":
                    this.toggleConfigurationsEnabled(t, e.context.$action, !0);
                    break;
                  case "disable":
                    this.toggleConfigurationsEnabled(t, e.context.$action, !1);
                    break;
                  case "delete":
                    this.deleteConfigurations(t, e.context.$action);
                    break;
                  case "assignprojects":
                    this.assignRemoveConfigurationsProjects(
                      t,
                      e.context.$field,
                      !0
                    );
                    break;
                  case "removeprojects":
                    this.assignRemoveConfigurationsProjects(
                      t,
                      e.context.$field,
                      !1
                    );
                }
              });
          }
          prepare() {
            this.params.filter
              ? (this.filter = this.params.filter)
              : (this.filter = E.X.EmptyFilter),
              (this.$addManyButton = $(this.addManyButtonTarget)),
              (this.$addPlatformsButton = $(this.addPlatformsButtonTarget)),
              (this.$platformContainer = $(this.platformContainerTarget)),
              (this.$noGroupSelected = $(this.noGroupSelectedTarget)),
              (this.$platformBox = $(this.platformBoxTarget)),
              (this.$configurationActions = $(this.configurationActionsTarget)),
              this.updateSelectedGroup(this.params.initialGroupId);
          }
          load() {
            c.UI.initialize(this.element),
              g.Z.requestChild(this.component, "groups", {
                onAdded: this.doGroupsAdded,
                events: {
                  actionclick: this.doGroupsActionClick,
                  activatedchange: this.doGroupsActivatedChange,
                },
              }),
              g.Z.requestChild(this.component, "platforms", {
                events: {
                  actionclick: this.doPlatformsActionClick,
                  togglechecked: this.doPlatformsToggleChecked,
                  togglebeforeunchecked: this.doPlatformsToggleBeforeUnchecked,
                },
              }),
              g.Z.requestChild(this.component, "configs", {
                events: {
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                  togglechange: this.doToggleChange,
                },
              }),
              g.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  cancelfilter: this.doCancelFilter,
                  filter: this.doFilter,
                },
              });
          }
          unload() {}
          updateSelectedGroup(e) {
            this.selectedGroupId = e;
            let t = !!e;
            this.$platformContainer.toggle(t),
              this.$noGroupSelected.toggle(!t),
              c.UI.toggleButtonEnabled(this.$addPlatformsButton, t);
          }
          doAddPlatforms() {
            const e = new k(this.selectedGroupId);
            (e.onSuccess = (e) => this.refreshPlatformTable()), e.show();
          }
          doEmptyAddGroup() {
            this.addGroup();
          }
          doAddGroup() {
            this.addGroup();
          }
          addGroup() {
            const e = new S();
            (e.onSuccess = (e) =>
              o.N.post("admin/configs/render_platform_group_table")
                .then((t) =>
                  o.N.post("admin/configs/render_platform_table/" + e.id).then(
                    (s) => {
                      $(this.groupContainerTarget).html(t.data),
                        $(this.platformContainerTarget).html(s.data);
                      let i = this.components.groups.getRowById(e.id);
                      i.length > 0 &&
                        this.components.groups.markActivatedRow(i),
                        this.updateSelectedGroup(e.id),
                        this.$platformBox.removeClass(
                          this.classes.platformBoxEmpty
                        ),
                        this.$configurationActions.removeClass(
                          this.classes.actionsEmpty
                        );
                    }
                  )
                )
                .catch((e) => {
                  g.Z.handleError(e);
                })),
              e.show();
          }
          deleteGroup(e, t) {
            let s = t.data("name"),
              i = new T.A(
                y.Z.lang("configurations.delete_group_title"),
                y.Z.langEscape("configurations.delete_group_message", {
                  name: s,
                }),
                y.Z.lang("configurations.delete_group_button"),
                null,
                { htmlWarning: y.Z.lang("configurations.delete_group_warning") }
              );
            (i.onSuccess = () =>
              o.N.post("admin/configs/delete_platform_group/" + e).then(() =>
                Promise.all([this.refreshGroupTable(), this.refreshTable()])
              )),
              i.show();
          }
          editGroup(e, t, s) {
            let i = t.data("name");
            s.startEditingTextField(e, "name", i, (t) => {
              c.UI.markLoading(t.$button);
              let s = { name: t.value };
              return o.N.post("admin/configs/update_platform_group/" + e, s)
                .then(() => this.refreshGroupTable().then(() => !0))
                .catch((e) => {
                  c.UI.markCompleted(t.$button), g.Z.handleError(e);
                });
            });
          }
          deletePlatform(e, t) {
            let s = t.data("name"),
              i = new T.A(
                y.Z.lang("configurations.delete_platform_title"),
                y.Z.langEscape("configurations.delete_platform_message", {
                  name: s,
                }),
                y.Z.lang("configurations.delete_platform_button"),
                null,
                {
                  htmlWarning: y.Z.lang(
                    "configurations.delete_platform_warning"
                  ),
                }
              );
            (i.onSuccess = () =>
              o.N.post("admin/configs/delete_platform/" + e).then(() =>
                Promise.all([this.refreshPlatformTable(), this.refreshTable()])
              )),
              i.show();
          }
          editPlatform(e, t, s) {
            let i = t.data("name");
            s.startEditingTextField(e, "name", i, (t) => {
              c.UI.markLoading(t.$button);
              let s = { name: t.value };
              return o.N.post("admin/configs/update_platform/" + e, s)
                .then(() =>
                  Promise.all([
                    this.refreshPlatformTable(),
                    this.refreshTable(),
                  ]).then(() => !0)
                )
                .catch((e) => {
                  c.UI.markCompleted(t.$button), g.Z.handleError(e);
                });
            });
          }
          refreshGroupTable() {
            return o.N.postReplace(
              "admin/configs/render_platform_group_table",
              this.groupContainerTarget
            ).catch((e) => {
              g.Z.handleError(e);
            });
          }
          refreshPlatformTable() {
            return o.N.postReplace(
              "admin/configs/render_platform_table/" + this.selectedGroupId,
              this.platformContainerTarget
            ).catch((e) => {
              g.Z.handleError(e);
            });
          }
          doAddMany() {
            c.UI.markLoading(this.$addManyButton),
              o.N.post("admin/configs/render_create_many")
                .then((e) => {
                  c.UI.markCompleted(this.$addManyButton);
                  const t = new b();
                  (t.onSuccess = (e) => this.refreshTable()), t.show(e.data);
                })
                .catch((e) => {
                  c.UI.markCompleted(this.$addManyButton), g.Z.handleError(e);
                });
          }
          refreshSearch(e = !0) {
            e && this.components.searchBar.setInputLoading(!0);
            let t = this.components.configs.getState();
            return (
              delete t.paginationCurrent,
              this.components.searchBar.getHasSearched() &&
                (t.search = this.components.searchBar.getSearchTerm()),
              _.keys(this.filter.conditions).length > 0 &&
                (t.filter = this.filter),
              o.N.postReplace(
                "admin/configs/render_table",
                this.configsContainerTarget,
                o.N.toNetworkCase(t)
              )
                .then(() => {
                  e && this.components.searchBar.setInputLoading(!1);
                })
                .catch((t) => {
                  e && this.components.searchBar.setInputLoading(!1),
                    g.Z.handleError(t);
                })
            );
          }
          refreshTable() {
            let e = this.components.configs.getState();
            return (
              this.components.searchBar.getHasSearched() &&
                (e.search = this.components.searchBar.getSearchTerm()),
              _.keys(this.filter.conditions).length > 0 &&
                (e.filter = this.filter),
              o.N.postReplace(
                "admin/configs/render_table",
                this.configsContainerTarget,
                o.N.toNetworkCase(e)
              ).catch((e) => {
                g.Z.handleError(e);
              })
            );
          }
          saveFilter(e) {
            return o.N.post(
              "admin/configs/save_filter",
              o.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshSearch(!1).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
          handleEnableError(e, t) {
            u.l.handleCustomMessageError(e, (e) => {
              new d.u(
                d.Y.Negative,
                y.Z.lang("configurations.platform_disabled"),
                y.Z.htmlEscape(e)
              ).show(t, n.Fz.BottomLeft);
            });
          }
          showContextMenu(e, t, s, i) {
            if (c.UI.popupVisible(t)) return;
            let o = [],
              r = this.components.configs.getSelectedRows(),
              l = this.components.configs.getSelectedIds();
            if (r.length <= 1 || !_.includes(l, e)) {
              let t = c.UI.getCheckbox(
                this.components.configs.getToggleCheckbox(e, "isActive")
              );
              o.push({
                type: "action",
                title: y.Z.lang("configurations.edit_projects"),
                name: "edit",
                callback: this.doContextMenuSingleClick,
              }),
                t
                  ? o.push({
                      type: "action",
                      title: y.Z.lang("configurations.disable_configuration"),
                      name: "disable",
                      callback: this.doContextMenuSingleClick,
                    })
                  : o.push({
                      type: "action",
                      title: y.Z.lang("configurations.enable_configuration"),
                      name: "enable",
                      callback: this.doContextMenuSingleClick,
                    }),
                o.push({ type: "divider" }),
                o.push({
                  type: "action",
                  title: y.Z.lang("configurations.delete_configuration"),
                  name: "delete",
                  callback: this.doContextMenuSingleClick,
                });
            } else
              r.get().reduce((e, t) => {
                let s = $(t).data("id"),
                  i = this.components.configs.getToggleCheckbox(s, "isActive");
                return e || c.UI.getCheckbox(i);
              }, !1)
                ? o.push({
                    type: "action",
                    title: y.Z.lang("configurations.disable_configurations"),
                    name: "disable",
                    callback: this.doContextMenuMultipleClick,
                  })
                : o.push({
                    type: "action",
                    title: y.Z.lang("configurations.enable_configurations"),
                    name: "enable",
                    callback: this.doContextMenuMultipleClick,
                  }),
                o.push({ type: "divider" }),
                o.push({
                  type: "action",
                  title: y.Z.lang("configurations.assign_projects"),
                  name: "assignprojects",
                  callback: this.doContextMenuMultipleClick,
                }),
                o.push({
                  type: "action",
                  title: y.Z.lang("configurations.remove_projects"),
                  name: "removeprojects",
                  callback: this.doContextMenuMultipleClick,
                }),
                o.push({ type: "divider" }),
                o.push({
                  type: "action",
                  title: y.Z.lang("configurations.delete_configurations"),
                  name: "delete",
                  callback: this.doContextMenuMultipleClick,
                });
            new a.x(o, {
              context: { id: e, $field: i, $action: t, $row: s },
            }).show(t, n.Fz.BottomLeft);
          }
          editProjects(e, t) {
            this.components.configs.setLoading("actionfield", !0, t),
              o.N.post("admin/configs/render_update_projects/" + e)
                .then((s) => {
                  this.components.configs.setLoading("actionfield", !1, t);
                  const i = new w(e);
                  (i.onSuccess = (e) => this.refreshTable()), i.show(s.data);
                })
                .catch((e) => {
                  this.components.configs.setLoading("actionfield", !1, t),
                    g.Z.handleError(e);
                });
          }
          toggleConfigurationEnabled(e, t, s, i) {
            let n,
              r = this.components.configs.getToggleCheckbox(e, "isActive");
            return (
              this.components.configs.setLoading("actionfield", !0, s),
              c.UI.setCheckbox(r, i),
              (n = i ? "admin/configs/enable/" : "admin/configs/disable/"),
              o.N.post(n + e)
                .then(() => {
                  this.components.configs.setLoading("actionfield", !1, s);
                })
                .catch((e) => {
                  this.components.configs.setLoading("actionfield", !1, s),
                    c.UI.setCheckbox(r, !i),
                    i ? this.handleEnableError(e, t) : g.Z.handleError(e);
                })
            );
          }
          toggleConfigurationsEnabled(e, t, s) {
            let i,
              n = this.components.configs.getManyToggleCheckboxes(
                e,
                "isActive"
              );
            return (
              this.components.configs.setManyLoading(
                e,
                "actionfield",
                !0,
                "menu"
              ),
              c.UI.setCheckbox(n, s),
              (i = s
                ? "admin/configs/enable_many"
                : "admin/configs/disable_many"),
              o.N.post(i, { ids: e })
                .then(() => {
                  this.components.configs.setManyLoading(
                    e,
                    "actionfield",
                    !1,
                    "menu"
                  );
                })
                .catch((i) => {
                  this.components.configs.setManyLoading(
                    e,
                    "actionfield",
                    !1,
                    "menu"
                  ),
                    c.UI.setCheckbox(n, !s),
                    s ? this.handleEnableError(i, t) : g.Z.handleError(i);
                })
            );
          }
          deleteConfiguration(e, t, s) {
            if (c.UI.popupVisible(t)) return;
            const i = new l.l(
              y.Z.lang("configurations.really_delete_configuration")
            );
            (i.onSuccess = () => {
              this.components.configs.setLoading("actionfield", !0, s),
                o.N.post("admin/configs/delete/" + e)
                  .then(() => {
                    this.refreshTable();
                  })
                  .catch((e) => {
                    this.components.configs.setLoading("actionfield", !1, s),
                      g.Z.handleError(e);
                  });
            }),
              i.show(t, n.Fz.BottomRight);
          }
          deleteConfigurations(e, t) {
            if (c.UI.popupVisible(t)) return;
            const s = new l.l(
              y.Z.lang("configurations.really_delete_configurations")
            );
            (s.onSuccess = () => {
              this.components.configs.setManyLoading(
                e,
                "actionfield",
                !0,
                "menu"
              ),
                o.N.post("admin/configs/delete_many", { ids: e })
                  .then(() => {
                    this.refreshTable();
                  })
                  .catch((t) => {
                    this.components.configs.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    ),
                      g.Z.handleError(t);
                  });
            }),
              s.show(t, n.Fz.BottomRight);
          }
          assignRemoveConfigurationsProjects(e, t, s) {
            this.components.configs.setLoading("actionfield", !0, t);
            let i = s
              ? "admin/configs/render_include_projects"
              : "admin/configs/render_exclude_projects";
            o.N.post(i, { ids: e })
              .then((i) => {
                this.components.configs.setLoading("actionfield", !1, t);
                const o = new f(s ? m.Include : m.Exclude, e);
                (o.onSuccess = (e) => this.refreshTable()), o.show(i.data);
              })
              .catch((e) => {
                this.components.configs.setLoading("actionfield", !1, t),
                  g.Z.handleError(e);
              });
          }
        }
        N(U, "targets", [
          "responsiveContainer",
          "addPlatformsButton",
          "groupContainer",
          "platformContainer",
          "noGroupSelected",
          "addManyButton",
          "configsContainer",
          "platformBox",
          "platformBoxEmptyPlaceholder",
          "configurationActions",
        ]);
      },
      11450: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(69555);
        class a extends r.GI {
          constructor() {
            super("admin.exports.details_popup");
          }
        }
        var l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends i.v {
          constructor(...e) {
            super(...e),
              d(this, "classes", { hidden: "default-hidden" }),
              d(this, "doActionClick", (e) => {
                "details" === e.actionName &&
                  this.showDetails(e.id, e.$action, e.$row);
              }),
              d(this, "renderExports", () =>
                o.N.post("admin/exports/render_table")
              );
          }
          load() {
            n.UI.initialize(this.element),
              l.Z.requestChild(this.component, "exports", {
                events: { actionclick: this.doActionClick },
              }),
              this.fragments.register("exports", this.renderExports);
          }
          doEmptyAddExport() {
            this.addExport($(this.emptyAddButtonTarget));
          }
          doAddExport() {
            this.addExport($(this.addButtonTarget));
          }
          addExport(e) {
            n.UI.loading(e, () =>
              o.N.post("admin/exports/create")
                .then((e) =>
                  this.refreshFragments("exports").then(() => {
                    $(this.addButtonTarget).addClass(this.classes.hidden),
                      $(this.disabledAddButtonTarget).removeClass(
                        this.classes.hidden
                      );
                  })
                )
                .catch((e) => {
                  l.Z.handleError(e);
                })
            );
          }
          showDetails(e, t, s) {
            n.UI.popupVisible(t) ||
              new a().show(t, r.Fz.BottomRight, s.data("detailsPopup"));
          }
        }
        d(h, "targets", [
          "responsiveContainer",
          "addButton",
          "emptyAddButton",
          "disabledAddButton",
        ]);
      },
      66903: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => k });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(62612),
          l = s(132),
          d = s(69555),
          h = s(47914),
          c = s(50609),
          u = s(7042),
          g = s(14589),
          p = s(5270);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class C extends c.V {
          constructor(e, t, s = null) {
            super("admin.templates.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: h.X.SplitDialogWidth,
            }),
              m(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              m(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.getRadioEnabled(this.$includeSelected) &&
                  o.UI.setRadio(this.$includeSelected, !0);
              }),
              (this.mode = e),
              (this.entity = t),
              (this.templateId = s);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              p.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              p.Z.requestChild(this.component, "projects", {
                events: { selectionchange: this.doProjectsSelectionChange },
              });
          }
          getSelectedFields() {
            let e = [],
              t = p.Z.findComponents(this.$dialog, "fields");
            for (let s of t) e = [...e, ...s.getSelectedIds()];
            return e;
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              u.l.hideValidationErrors(this.formViews);
              let t = {
                entity: this.entity,
                name: o.UI.getText(this.$name),
                fields: this.getSelectedFields(),
                isActive: o.UI.getCheckbox(this.$isActive),
                includeAll: o.UI.getRadio(this.$includeAll),
                projects: this.components.projects
                  ? this.components.projects.getSelectedIds()
                  : [],
              };
              this.mode == f.Edit &&
                ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
              let s =
                this.mode == f.Add
                  ? "admin/templates/create"
                  : "admin/templates/update/" + this.templateId;
              return n.N.post(s, n.N.toNetworkCase(t))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) =>
                  g.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      u.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                );
            });
          }
        }
        m(C, "forms", [
          { name: "template", fields: ["name", "isActive"] },
          {
            name: "projects",
            fields: ["includeAll", "includeSelected", "projects"],
          },
        ]),
          m(C, "targets", ["submitButton"]),
          m(C, "actions", ["doSubmit"]);
        var b = s(15612);
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends c.V {
          constructor(e) {
            super("admin.fields.add_edit_option_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              I(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              I(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$includeSelected, !0);
              }),
              I(this, "doValuesSorting", (e) => {
                this.type == b.g.FieldTypesDropdown &&
                  this.updateDefaultDropdown();
              }),
              I(this, "doValuesActionClick", (e) => {
                switch (e.actionName) {
                  case "add":
                    this.addValueAfter(e);
                    break;
                  case "delete":
                    this.deleteValue(e);
                }
              }),
              I(this, "doValueNameChange", (e) => {
                this.updateDefaultDropdown();
              }),
              (this.type = e);
          }
          load() {
            p.Z.requestChild(this.component, "tabs", {
              events: { tabchange: this.doTabChanged },
            }),
              p.Z.requestChild(this.component, "projects", {
                events: { selectionchange: this.doProjectsSelectionChange },
              }),
              p.Z.requestChild(this.component, "values", {
                onAdded: (e) => {
                  this.type == b.g.FieldTypesDropdown &&
                    e.getRows().each((e, t) => {
                      let s = $(t);
                      o.UI.getTarget("name", s).on(
                        "input textInput",
                        this.doValueNameChange
                      );
                    }),
                    this.refreshValuesVisibility();
                },
                events: {
                  actionclick: this.doValuesActionClick,
                  sorting: this.doValuesSorting,
                },
              });
          }
          unload() {}
          prepare() {
            if (this.type == b.g.FieldTypesText)
              return new Promise((e, t) => {
                p.Z.requestChild(this.component, "defaultText", {
                  onAdded: () => {
                    this.components.defaultText.loadEditor().then(() => {
                      e();
                    });
                  },
                });
              });
          }
          doAddValue() {
            o.UI.loading(this.$addValueIcon, () =>
              n.N.post("admin/fields/render_value_control")
                .then((e) => {
                  let t = $(e.data);
                  t.data("uuid", r.Z.generateUuidV4());
                  let s = o.UI.getTarget("name", t);
                  s.on("input textInput", this.doValueNameChange),
                    this.components.values.$header.parent().append(t),
                    this.refreshUi(),
                    this.components.values.addRows(t),
                    this.refreshValuesVisibility(),
                    o.UI.focusText(s);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              u.l.hideValidationErrors(this.formViews);
              let e = {
                type: this.type,
                isRequired: o.UI.getRadio(this.$isRequired),
                isRestricted:
                  1 == o.UI.getDropdownIntOrNull(this.$isRestricted),
                includeAll: o.UI.getRadio(this.$includeAll),
                projects: this.components.projects
                  ? this.components.projects.getSelectedIds()
                  : [],
              };
              switch (this.type) {
                case b.g.FieldTypesString:
                  e.defaultString = o.UI.getText(
                    o.UI.getTarget("defaultString", this.$dialog)
                  );
                  break;
                case b.g.FieldTypesText:
                  {
                    e.defaultText = this.components.defaultText.getData();
                    let t = o.UI.getDropdownIntOrNull(
                      o.UI.getTarget("textInitialHeight", this.$dialog)
                    );
                    e.initialHeight = t > 0 ? t : null;
                  }
                  break;
                case b.g.FieldTypesInteger:
                  (e.defaultInteger = o.UI.getTextIntOrNullOrError(
                    o.UI.getTarget("defaultInteger", this.$dialog)
                  )),
                    (e.integerMin = o.UI.getTextIntOrNullOrError(
                      o.UI.getTarget("integerMin", this.$dialog)
                    )),
                    (e.integerMax = o.UI.getTextIntOrNullOrError(
                      o.UI.getTarget("integerMax", this.$dialog)
                    ));
                  break;
                case b.g.FieldTypesFloat:
                  (e.defaultFloat = o.UI.getTextFloatOrNullOrError(
                    o.UI.getTarget("defaultFloat", this.$dialog)
                  )),
                    (e.floatMin = o.UI.getTextFloatOrNullOrError(
                      o.UI.getTarget("floatMin", this.$dialog)
                    )),
                    (e.floatMax = o.UI.getTextFloatOrNullOrError(
                      o.UI.getTarget("floatMax", this.$dialog)
                    ));
                  break;
                case b.g.FieldTypesDate:
                  break;
                case b.g.FieldTypesUrl:
                  e.defaultString = o.UI.getText(
                    o.UI.getTarget("defaultUrl", this.$dialog)
                  );
                  break;
                case b.g.FieldTypesCheckbox:
                  e.defaultBool =
                    1 ==
                    o.UI.getDropdownIntOrNull(
                      o.UI.getTarget("defaultCheckbox", this.$dialog)
                    );
                  break;
                case b.g.FieldTypesDropdown:
                  {
                    e.values = this.getValues();
                    let t = this.components.values.getRows(),
                      s = o.UI.getDropdown(
                        o.UI.getTarget("defaultIndex", this.$dialog)
                      ),
                      i = null,
                      n = 1;
                    t.each((e, t) => {
                      if ($(t).data("uuid") == s) return (i = n), !1;
                      n++;
                    }),
                      (e.defaultIndex = i);
                  }
                  break;
                case b.g.FieldTypesMultiselect:
                  e.values = this.getValues();
                  break;
                case b.g.FieldTypesSteps:
                  (e.values = []),
                    this.components.values.getRows().each((t, s) => {
                      let i = $(s),
                        n = o.UI.getTarget("name", i),
                        r = o.UI.getText(n),
                        a = o.UI.getCheckbox(o.UI.getToggle("isActive", i));
                      0 == r.trim().length && (o.UI.setText(n, "-"), (r = "-")),
                        e.values.push({ name: r, is_active: a });
                    });
              }
              let t = n.N.toNetworkCase(e);
              return n.N.post("admin/fields/validate_option", t)
                .then((e) => (delete t.type, this.triggerSuccess(t)))
                .catch((e) => {
                  u.l.handleTabbedFormError(
                    e,
                    this.formViews,
                    this.components.tabs
                  ),
                    this.refreshPositionIfNeeded();
                });
            });
          }
          getValues() {
            let e = [];
            return (
              this.components.values.getRows().each((t, s) => {
                let i = $(s),
                  n = o.UI.getText(o.UI.getTarget("name", i)),
                  r = o.UI.getCheckbox(o.UI.getToggle("isActive", i)),
                  a = p.Z.findComponent(i, "iconInput"),
                  l = a.getIcon(),
                  d = a.getColor(),
                  h = i.data("id"),
                  c = { name: n, is_active: r, icon: l, color: d };
                h && (c.id = h), e.push(c);
              }),
              e
            );
          }
          addValueAfter(e) {
            e.target.setLoading("actionfield", !0, e.$field),
              n.N.post("admin/fields/render_value_control")
                .then((t) => {
                  e.target.setLoading("actionfield", !1, e.$field);
                  let s = $(t.data);
                  e.$row.after(s), s.data("uuid", r.Z.generateUuidV4());
                  let i = o.UI.getTarget("name", s);
                  i.on("input textInput", this.doValueNameChange),
                    this.refreshUi(),
                    this.components.values.addRows(s),
                    this.updateDefaultDropdown(),
                    this.refreshValuesVisibility(),
                    o.UI.focusText(i);
                })
                .catch((t) => {
                  e.target.setLoading("actionfield", !1, e.$field),
                    p.Z.handleError(t);
                });
          }
          deleteValue(e) {
            let t = new a.A(
              r.Z.lang("fields.delete_option_value_title"),
              r.Z.lang("fields.delete_option_value_message"),
              r.Z.lang("fields.delete_option_value_button"),
              null,
              { htmlWarning: r.Z.lang("fields.delete_option_value_warning") }
            );
            (t.onSuccess = () => {
              o.UI.getTarget("name", e.$row).off(
                "input textInput",
                this.doValueNameChange
              ),
                e.target.removeRows(e.$row),
                e.$row.remove(),
                this.updateDefaultDropdown(),
                this.refreshValuesVisibility();
            }),
              t.show();
          }
          updateDefaultDropdown() {
            let e = o.UI.getTarget("defaultIndex", this.$dialog),
              t = o.UI.getDropdown(e),
              s = [{ label: " ", value: "" }];
            this.components.values.getRows().each((e, t) => {
              let i = $(t),
                n = o.UI.getText(o.UI.getTarget("name", i)).trim();
              s.push({ label: n || " ", value: i.data("uuid") });
            }),
              o.UI.setDropdownItems(e, s),
              o.UI.setDropdown(e, t);
          }
          refreshValuesVisibility() {
            let e = this.components.values.getRows().length > 0;
            this.$optionsEmptyContainer.toggle(!e),
              this.$optionsTableContainer.toggle(e);
          }
        }
        I(w, "forms", [
          { name: "options", fields: ["isRequired", "isRestricted"] },
          {
            name: "projects",
            fields: ["includeAll", "includeSelected", "projects"],
          },
        ]),
          I(w, "targets", [
            "submitButton",
            "addValueIcon",
            "optionsTableContainer",
            "optionsEmptyContainer",
          ]),
          I(w, "actions", ["doSubmit", "doAddValue"]);
        var v = s(48995);
        function _(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class S {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class x extends c.V {
          constructor(e, t, s = null) {
            super("admin.fields.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: h.X.SplitDialogWidth,
            }),
              _(this, "classes", { hidden: "default-hidden" }),
              _(this, "doTypeChange", (e) => {
                if (this.mode != S.Add) return;
                if (0 == this.options.length)
                  return void (this.previousType = e.value);
                o.UI.setDropdown(this.$type, this.previousType);
                const t = new l.l(r.Z.lang("fields.type_really_clear_options"));
                (t.onSuccess = () => (
                  o.UI.setDropdown(this.$type, e.value),
                  (this.previousType = e.value),
                  (this.options.length = 0),
                  this.refreshFragments("options")
                )),
                  t.show(this.$type, d.Fz.BottomRight);
              }),
              _(this, "doSystemNameChange", (e) => {
                let t = o.UI.getText(this.$systemName);
                (t = t.trim().toLowerCase().replace(/\s/g, "_")),
                  o.UI.setText(this.$systemName, t);
              }),
              _(this, "doNameChange", (e) => {
                if (0 == o.UI.getText(this.$systemName).length) {
                  let e = o.UI.getText(this.$name)
                    .trim()
                    .toLowerCase()
                    .replace(/\s/g, "_")
                    .replace(/[^a-z0-9_]/g, "");
                  o.UI.setText(this.$systemName, e);
                }
              }),
              _(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              _(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.getRadioEnabled(this.$includeSelected) &&
                  o.UI.setRadio(this.$includeSelected, !0);
              }),
              _(this, "renderOptions", () => {
                let e = {
                  options: this.options,
                  type: o.UI.getDropdownIntOrNull(this.$type),
                };
                return n.N.post(
                  "admin/fields/render_option_table",
                  n.N.toNetworkCase(e)
                );
              }),
              _(this, "doOptionsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editOption(e.target, e.$row.data("index"), e.$field);
                    break;
                  case "delete":
                    this.deleteOption(
                      e.target,
                      e.$row.data("index"),
                      e.$action,
                      e.$field
                    );
                }
              }),
              (this.mode = e),
              (this.entity = t),
              (this.fieldId = s),
              (this.previousType = null);
          }
          load() {
            (this.options = this.params.options),
              (this.updatedAt = this.params.updatedAt),
              p.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              p.Z.requestChild(this.component, "projects", {
                events: { selectionchange: this.doProjectsSelectionChange },
              }),
              p.Z.requestChild(this.component, "options", {
                events: { actionclick: this.doOptionsActionClick },
              }),
              p.Z.requestChild(this.component, "type", {
                events: { change: this.doTypeChange },
              }),
              o.UI.onTextChange(this.$name, this.doNameChange),
              o.UI.onTextChange(this.$systemName, this.doSystemNameChange),
              this.fragments.register("options", this.renderOptions);
          }
          unload() {
            o.UI.offTextChange(this.$name, this.doNameChange),
              o.UI.offTextChange(this.$systemName, this.doSystemNameChange);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            this.doSystemNameChange(),
              this.doNameChange(),
              o.UI.loading(this.$submitButton, () => {
                u.l.hideValidationErrors(this.formViews);
                let t = {
                  entity: this.entity,
                  name: o.UI.getText(this.$name),
                  note: o.UI.getText(this.$note),
                  isActive: o.UI.getCheckbox(this.$isActive),
                  options: this.options,
                };
                this.mode == S.Add &&
                  ((t.systemName = o.UI.getText(this.$systemName)),
                  (t.type = o.UI.getDropdownIntOrNull(this.$type))),
                  this.mode == S.Edit &&
                    ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
                let s =
                  this.mode == S.Add
                    ? "admin/fields/create"
                    : "admin/fields/update/" + this.fieldId;
                return n.N.post(s, n.N.toNetworkCase(t))
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    g.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        u.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  );
              });
          }
          doAddOption() {
            let e = o.UI.getDropdownIntOrNull(this.$type);
            if (e)
              o.UI.loading(this.$addOptionIcon, () => {
                let t = { type: e };
                return n.N.post(
                  "admin/fields/render_create_option",
                  n.N.toNetworkCase(t)
                )
                  .then((t) => {
                    const s = new w(e);
                    (s.onSuccess = (e) => (
                      this.options.push(e), this.refreshFragments("options")
                    )),
                      s.show(t.data);
                  })
                  .catch((e) => {
                    p.Z.handleError(e);
                  });
              });
            else {
              if (o.UI.popupVisible(this.$addOptionIcon)) return;
              new v.u(
                v.Y.Negative,
                r.Z.lang("fields.add_option_no_type_title"),
                r.Z.lang("fields.add_option_no_type_message")
              ).show(this.$addOptionIcon, d.Fz.BottomRight);
            }
          }
          deleteOption(e, t, s, i) {
            let o = new a.A(
              r.Z.lang("fields.delete_option_title"),
              r.Z.lang("fields.delete_option_message"),
              r.Z.lang("fields.delete_option_button"),
              null,
              { htmlWarning: r.Z.lang("fields.delete_option_warning") }
            );
            (o.onSuccess = () => (
              this.options.splice(t, 1),
              e.setLoading("actionfield", !0, i),
              this.refreshFragments("options").then(() => {
                e.setLoading("actionfield", !1, i);
              })
            )),
              o.show();
          }
          editOption(e, t, s) {
            let i = o.UI.getDropdownIntOrNull(this.$type);
            if (i) {
              e.setLoading("actionfield", !0, s);
              let o = this.options[t];
              return (
                (o.type = i),
                n.N.post(
                  "admin/fields/render_update_option",
                  n.N.toNetworkCase(o)
                )
                  .then((o) => {
                    e.setLoading("actionfield", !1, s);
                    const n = new w(i);
                    (n.onSuccess = (e) => {
                      let s = this.options[t];
                      return (
                        (this.options[t] = e),
                        s.id && (this.options[t].id = s.id),
                        this.refreshFragments("options")
                      );
                    }),
                      n.show(o.data);
                  })
                  .catch((t) => {
                    e.setLoading("actionfield", !1, s), p.Z.handleError(t);
                  })
              );
            }
          }
        }
        _(x, "forms", [
          {
            name: "field",
            fields: ["name", "systemName", "type", "note", "isActive"],
          },
        ]),
          _(x, "targets", ["submitButton", "addOptionIcon", "typeSetTag"]),
          _(x, "actions", ["doSubmit", "doAddOption"]);
        class k extends i.v {
          addField(e, t, s, i) {
            o.UI.loading(e, () => {
              let e = { entity: t };
              return n.N.post(
                "admin/fields/render_create",
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const o = new x(S.Add, t);
                  (o.onSuccess = (e) =>
                    this.refreshFragments(s).then(() => {
                      i && i();
                    })),
                    o.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                });
            });
          }
          addTemplate(e, t, s) {
            o.UI.loading(e, () => {
              let e = { entity: t };
              return n.N.post(
                "admin/templates/render_create",
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const i = new C(f.Add, t);
                  (i.onSuccess = (e) => this.refreshFragments(...s)),
                    i.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                });
            });
          }
          templatesToggleChange(e) {
            if ("isActive" != e.toggleName) return;
            let t = e.target;
            t.setLoading("field", !0, e.$field);
            let s,
              i = o.UI.getCheckbox(e.$toggle);
            (s = i ? "admin/templates/enable/" : "admin/templates/disable/"),
              n.N.post(s + e.id)
                .then((s) => {
                  t.setLoading("field", !1, e.$field);
                })
                .catch((s) => {
                  o.UI.setCheckbox(e.$toggle, !i),
                    t.setLoading("field", !1, e.$field),
                    p.Z.handleError(s);
                });
          }
          fieldSorting(e, t) {
            if (e.oldIndex != e.newIndex) {
              let s = e.target,
                i = e.$row.data("id"),
                o = s.getActionField(i, "edit"),
                r = 1,
                a = s.getPreviousRow(e.$row);
              a.length > 0 && (r = a.data("displayOrder") + 1);
              let l = { displayOrder: r };
              s.loading("actionfield", o, () =>
                n.N.post("admin/fields/move/" + i, n.N.toNetworkCase(l))
                  .then((e) => this.refreshFragments(t))
                  .catch((e) => {
                    p.Z.handleError(e);
                  })
              );
            }
          }
          fieldsToggleChange(e) {
            if ("isActive" != e.toggleName) return;
            let t = e.target;
            t.setLoading("field", !0, e.$field);
            let s,
              i = o.UI.getCheckbox(e.$toggle);
            (s = i ? "admin/fields/enable/" : "admin/fields/disable/"),
              n.N.post(s + e.id)
                .then((s) => {
                  t.setLoading("field", !1, e.$field);
                })
                .catch((s) => {
                  o.UI.setCheckbox(e.$toggle, !i),
                    t.setLoading("field", !1, e.$field),
                    p.Z.handleError(s);
                });
          }
          templatesToggleBeforeChecked(e) {
            if ("default" != e.toggleName) return;
            if (o.UI.popupVisible(e.$toggle)) return !1;
            const t = new l.l(r.Z.lang("templates.really_make_default"));
            return (
              (t.onSuccess = () => {
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s = e.$toggle,
                  i = s.closest("tr"),
                  a = t.getToggleForRow(i, "isActive"),
                  l = t.getToggles("default", !0).not(s),
                  d = l.closest("tr"),
                  h = t.getToggleForRow(d, "isActive");
                o.UI.setCheckbox(l, !1),
                  o.UI.setCheckbox(s, !0),
                  o.UI.toggleCheckboxEnabled(l, !0),
                  o.UI.toggleCheckboxEnabled(h, !0),
                  o.UI.toggleCheckboxEnabled(s, !1),
                  o.UI.toggleCheckboxEnabled(a, !1),
                  n.N.post("admin/templates/set_default/" + e.id)
                    .then((n) => {
                      o.UI.setCheckbox(a, !0),
                        t.setTextFieldContent(
                          i,
                          "projects",
                          r.Z.lang("templates.all_projects")
                        ),
                        t.setLoading("field", !1, e.$field),
                        t.toggleActionVisible(i, "delete", !1),
                        t.toggleActionVisible(d, "delete", !0),
                        o.UI.blurCheckbox(s);
                    })
                    .catch((i) => {
                      o.UI.setCheckbox(l, !0),
                        o.UI.setCheckbox(s, !1),
                        o.UI.toggleCheckboxEnabled(l, !1),
                        o.UI.toggleCheckboxEnabled(h, !1),
                        o.UI.toggleCheckboxEnabled(s, !0),
                        o.UI.toggleCheckboxEnabled(a, !0),
                        t.setLoading("field", !1, e.$field),
                        p.Z.handleError(i);
                    });
              }),
              t.show(e.$toggle, d.Fz.BottomRight),
              !1
            );
          }
          deleteTemplate(e, t, s) {
            let i = t.data("name"),
              o = new a.A(
                r.Z.lang("templates.delete_title"),
                r.Z.langEscape("templates.delete_message", { name: i }),
                r.Z.lang("templates.delete_button"),
                r.Z.langEscape("templates.delete_confirmation", { name: i }),
                { htmlWarning: r.Z.lang("templates.delete_warning") }
              );
            (o.onSuccess = () =>
              n.N.post("admin/templates/delete/" + e).then(() =>
                this.refreshFragments(...s)
              )),
              o.show();
          }
          editTemplate(e, t, s, i, o) {
            s.setLoading("actionfield", !0, i),
              n.N.post("admin/templates/render_update/" + t)
                .then((n) => {
                  s.setLoading("actionfield", !1, i);
                  const r = new C(f.Edit, e, t);
                  (r.onSuccess = (e) => this.refreshFragments(...o)),
                    r.show(n.data);
                })
                .catch((e) => {
                  s.setLoading("actionfield", !1, i), p.Z.handleError(e);
                });
          }
          deleteField(e, t, s) {
            let i = t.data("name"),
              o = new a.A(
                r.Z.lang("fields.delete_title"),
                r.Z.langEscape("fields.delete_message", { name: i }),
                r.Z.lang("fields.delete_button"),
                r.Z.langEscape("fields.delete_confirmation", { name: i }),
                { htmlWarning: r.Z.lang("fields.delete_warning") }
              );
            (o.onSuccess = () =>
              n.N.post("admin/fields/delete/" + e).then(() =>
                this.refreshFragments(s)
              )),
              o.show();
          }
          editField(e, t, s, i, o) {
            s.setLoading("actionfield", !0, i),
              n.N.post("admin/fields/render_update/" + t)
                .then((n) => {
                  s.setLoading("actionfield", !1, i);
                  const r = new x(S.Edit, e, t);
                  (r.onSuccess = (e) => this.refreshFragments(o)),
                    r.show(n.data);
                })
                .catch((e) => {
                  s.setLoading("actionfield", !1, i), p.Z.handleError(e);
                });
          }
          templatesActionClick(e, t, s) {
            switch (t.actionName) {
              case "edit":
                this.editTemplate(e, t.id, t.target, t.$field, s);
                break;
              case "delete":
                this.deleteTemplate(t.id, t.$row, s);
            }
          }
          fieldsActionClick(e, t, s) {
            switch (t.actionName) {
              case "edit":
                this.editField(e, t.id, t.target, t.$field, s);
                break;
              case "delete":
                this.deleteField(t.id, t.$row, s);
            }
          }
        }
      },
      72318: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(15612),
          o = s(66903),
          n = s(96622),
          r = s(13814),
          a = s(48995),
          l = s(69555),
          d = s(43689),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends o.BaseController {
          constructor(...e) {
            super(...e),
              c(this, "doCaseFieldsSorting", (e) => {
                this.fieldSorting(e, "caseFields");
              }),
              c(this, "doResultFieldsSorting", (e) => {
                this.fieldSorting(e, "resultFields");
              }),
              c(this, "doFieldsToggleChange", (e) => {
                this.fieldsToggleChange(e);
              }),
              c(this, "doCaseFieldsActionClick", (e) => {
                this.fieldsActionClick(
                  i.g.EntitiesRepositoryCase,
                  e,
                  "caseFields"
                );
              }),
              c(this, "doResultFieldsActionClick", (e) => {
                this.fieldsActionClick(
                  i.g.EntitiesRunResult,
                  e,
                  "resultFields"
                );
              }),
              c(this, "doTemplatesActionClick", (e) => {
                this.templatesActionClick(i.g.EntitiesRepositoryCase, e, [
                  "templates",
                  "caseFields",
                  "resultFields",
                ]);
              }),
              c(this, "doTemplatesToggleChange", (e) => {
                this.templatesToggleChange(e);
              }),
              c(this, "doTemplatesToggleBeforeChecked", (e) =>
                this.templatesToggleBeforeChecked(e)
              ),
              c(this, "renderTemplates", () => {
                let e = { entity: i.g.EntitiesRepositoryCase };
                return r.N.post(
                  "admin/templates/render_table",
                  r.N.toNetworkCase(e)
                );
              }),
              c(this, "renderCaseFields", () => {
                let e = { entity: i.g.EntitiesRepositoryCase };
                return r.N.post(
                  "admin/fields/render_table",
                  r.N.toNetworkCase(e)
                );
              }),
              c(this, "renderResultFields", () => {
                let e = { entity: i.g.EntitiesRunResult };
                return r.N.post(
                  "admin/fields/render_table",
                  r.N.toNetworkCase(e)
                );
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$addTemplateButton = $(this.addTemplateButtonTarget)),
              (this.$addCaseFieldButton = $(this.addCaseFieldButtonTarget)),
              (this.$addResultFieldButton = $(this.addResultFieldButtonTarget)),
              h.Z.requestChild(this.component, "templates", {
                events: {
                  actionclick: this.doTemplatesActionClick,
                  togglechange: this.doTemplatesToggleChange,
                  togglebeforechecked: this.doTemplatesToggleBeforeChecked,
                },
              }),
              h.Z.requestChild(this.component, "caseFields", {
                events: {
                  actionclick: this.doCaseFieldsActionClick,
                  togglechange: this.doFieldsToggleChange,
                  sorting: this.doCaseFieldsSorting,
                },
              }),
              h.Z.requestChild(this.component, "resultFields", {
                events: {
                  actionclick: this.doResultFieldsActionClick,
                  togglechange: this.doFieldsToggleChange,
                  sorting: this.doResultFieldsSorting,
                },
              }),
              this.fragments.register("templates", this.renderTemplates),
              this.fragments.register("caseFields", this.renderCaseFields),
              this.fragments.register("resultFields", this.renderResultFields);
          }
          doAddTemplate() {
            this.addTemplate(
              this.$addTemplateButton,
              i.g.EntitiesRepositoryCase,
              ["templates", "caseFields", "resultFields"]
            );
          }
          doAddCaseField() {
            this.addField(
              this.$addCaseFieldButton,
              i.g.EntitiesRepositoryCase,
              "caseFields",
              () => {
                setTimeout(() => {
                  new a.u(
                    a.Y.Positive,
                    d.Z.lang("fields.field_added_tip_title"),
                    d.Z.htmlEscape(d.Z.lang("fields.field_added_tip_message"))
                  ).show($(this.templateBoxTarget), l.Fz.BottomCenter);
                }, 250);
              }
            );
          }
          doAddResultField() {
            this.addField(
              this.$addResultFieldButton,
              i.g.EntitiesRunResult,
              "resultFields",
              () => {
                setTimeout(() => {
                  new a.u(
                    a.Y.Positive,
                    d.Z.lang("fields.field_added_tip_title"),
                    d.Z.htmlEscape(d.Z.lang("fields.field_added_tip_message"))
                  ).show($(this.templateBoxTarget), l.Fz.BottomCenter);
                }, 250);
              }
            );
          }
        }
        c(u, "targets", [
          "responsiveContainer",
          "addTemplateButton",
          "addCaseFieldButton",
          "addResultFieldButton",
          "templateBox",
        ]);
      },
      85507: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(15612),
          o = s(66903),
          n = s(96622),
          r = s(13814),
          a = s(48995),
          l = s(69555),
          d = s(43689),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends o.BaseController {
          constructor(...e) {
            super(...e),
              c(this, "doFieldsSorting", (e) => {
                this.fieldSorting(e, "sessionFields");
              }),
              c(this, "doTemplatesToggleChange", (e) => {
                this.templatesToggleChange(e);
              }),
              c(this, "doTemplatesToggleBeforeChecked", (e) =>
                this.templatesToggleBeforeChecked(e)
              ),
              c(this, "renderTemplates", () => {
                let e = { entity: i.g.EntitiesSession };
                return r.N.post(
                  "admin/templates/render_table",
                  r.N.toNetworkCase(e)
                );
              }),
              c(this, "renderSessionFields", () => {
                let e = { entity: i.g.EntitiesSession };
                return r.N.post(
                  "admin/fields/render_table",
                  r.N.toNetworkCase(e)
                );
              }),
              c(this, "doTemplatesActionClick", (e) => {
                this.templatesActionClick(i.g.EntitiesSession, e, [
                  "templates",
                  "sessionFields",
                ]);
              }),
              c(this, "doFieldsToggleChange", (e) => {
                this.fieldsToggleChange(e);
              }),
              c(this, "doFieldsActionClick", (e) => {
                this.fieldsActionClick(
                  i.g.EntitiesSessions,
                  e,
                  "sessionFields"
                );
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$addTemplateButton = $(this.addTemplateButtonTarget)),
              (this.$addFieldButton = $(this.addFieldButtonTarget)),
              h.Z.requestChild(this.component, "templates", {
                events: {
                  actionclick: this.doTemplatesActionClick,
                  togglechange: this.doTemplatesToggleChange,
                  togglebeforechecked: this.doTemplatesToggleBeforeChecked,
                },
              }),
              h.Z.requestChild(this.component, "sessionFields", {
                events: {
                  actionclick: this.doFieldsActionClick,
                  togglechange: this.doFieldsToggleChange,
                  sorting: this.doFieldsSorting,
                },
              }),
              this.fragments.register("templates", this.renderTemplates),
              this.fragments.register(
                "sessionFields",
                this.renderSessionFields
              );
          }
          doAddTemplate() {
            this.addTemplate(this.$addTemplateButton, i.g.EntitiesSession, [
              "templates",
              "sessionFields",
            ]);
          }
          doAddField() {
            this.addField(
              this.$addFieldButton,
              i.g.EntitiesSession,
              "sessionFields",
              () => {
                setTimeout(() => {
                  new a.u(
                    a.Y.Positive,
                    d.Z.lang("fields.field_added_tip_title"),
                    d.Z.htmlEscape(d.Z.lang("fields.field_added_tip_message"))
                  ).show($(this.templateBoxTarget), l.Fz.BottomCenter);
                }, 250);
              }
            );
          }
        }
        c(u, "targets", [
          "responsiveContainer",
          "addTemplateButton",
          "addFieldButton",
          "templateBox",
        ]);
      },
      19170: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => f });
        var i = s(26454),
          o = s(13814),
          n = s(43689),
          r = s(50609),
          a = s(96622),
          l = s(7042),
          d = s(14589),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class g extends r.V {
          constructor(e = g.Add, t = null) {
            super("admin.groups.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 750,
            }),
              c(this, "doUsersStateChange", (e) => {
                e.target.setLoading(e.loading, !0);
                let t = e.state;
                (t.members = this.members),
                  this.components.usersSearchBar.getHasSearched() &&
                    (t.search = this.components.usersSearchBar.getSearchTerm()),
                  o.N.postReplace(
                    "admin/groups/render_users",
                    this.$usersContainer,
                    o.N.toNetworkCase(t)
                  ).catch((t) => {
                    e.target.setLoading(e.loading, !1), h.Z.handleError(t);
                  });
              }),
              c(this, "doUsersSelectionChange", (e) => {
                let t = this.components.users.getSelectedIds(),
                  s = this.components.users.getUnselectedIds();
                (this.members = _.difference(this.members, s)),
                  (this.members = _.union(this.members, t));
              }),
              c(this, "doUsersCancelSearch", (e) => {
                this.refreshSearch();
              }),
              c(this, "doUsersSearch", () => {
                this.refreshSearch();
              }),
              (this.mode = e),
              (this.groupId = t);
          }
          load() {
            (this.members = this.params.members),
              (this.updatedAt = this.params.updatedAt),
              h.Z.requestChild(this.component, "usersSearchBar", {
                events: {
                  search: this.doUsersSearch,
                  cancelsearch: this.doUsersCancelSearch,
                },
              }),
              h.Z.requestChild(this.component, "users", {
                events: {
                  selectionchange: this.doUsersSelectionChange,
                  statechange: this.doUsersStateChange,
                },
              });
          }
          refreshSearch() {
            let e = { members: this.members };
            this.components.usersSearchBar.getHasSearched() &&
              (e.search = this.components.usersSearchBar.getSearchTerm()),
              this.components.usersSearchBar.setInputLoading(!0),
              o.N.postReplace(
                "admin/groups/render_users",
                this.$usersContainer,
                o.N.toNetworkCase(e)
              )
                .then(() => {
                  this.components.usersSearchBar.setInputLoading(!1);
                })
                .catch((e) => {
                  this.components.usersSearchBar.setInputLoading(!1),
                    h.Z.handleError(e);
                });
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            a.UI.markLoading(this.$submitButton),
              l.l.hideValidationErrors(this.formViews);
            let t = { name: a.UI.getText(this.$name), members: this.members };
            this.mode == u.Edit &&
              ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
            let s =
              this.mode == u.Add
                ? "admin/groups/create"
                : "admin/groups/update/" + this.groupId;
            o.N.post(s, o.N.toNetworkCase(t))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  a.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                d.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      l.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    a.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        c(g, "forms", [{ name: "group", fields: ["name"] }]),
          c(g, "targets", ["submitButton", "usersContainer"]),
          c(g, "actions", ["doSubmit"]);
        var p = s(62612);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f extends i.v {
          constructor(...e) {
            super(...e),
              m(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editGroup(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteGroup(e.id, e.$row);
                }
              });
          }
          load() {
            a.UI.initialize(this.element),
              (this.$addButton = $(this.addButtonTarget)),
              h.Z.requestChild(this.component, "groups", {
                events: { actionclick: this.doActionClick },
              });
          }
          unload() {}
          doAdd() {
            a.UI.markLoading(this.$addButton),
              o.N.post("admin/groups/render_create")
                .then((e) => {
                  a.UI.markCompleted(this.$addButton);
                  const t = new g(u.Add);
                  (t.onSuccess = (e) => this.refreshContent()), t.show(e.data);
                })
                .catch((e) => {
                  a.UI.markCompleted(this.$addButton), h.Z.handleError(e);
                });
          }
          editGroup(e, t, s) {
            t.setLoading("actionfield", !0, s),
              o.N.post("admin/groups/render_update/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new g(u.Edit, e);
                  (o.onSuccess = (e) => this.refreshContent()), o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), h.Z.handleError(e);
                });
          }
          deleteGroup(e, t) {
            let s = t.data("name"),
              i = new p.A(
                n.Z.lang("users.delete_group_title"),
                n.Z.langEscape("users.delete_group_message", { name: s }),
                n.Z.lang("users.delete_group_button")
              );
            (i.onSuccess = () =>
              o.N.post("admin/groups/delete/" + e).then(() =>
                this.refreshContent()
              )),
              i.show();
          }
          refreshContent() {
            return o.N.postReplace(
              "admin/groups/render_table",
              this.groupsContainerTarget
            ).catch((e) => {
              h.Z.handleError(e);
            });
          }
        }
        m(f, "targets", [
          "responsiveContainer",
          "addButton",
          "groupsContainer",
        ]);
      },
      2905: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i,
          o,
          n,
          r = s(26454),
          a = s(16559),
          l = s(96622),
          d = s(5270);
        class h extends r.v {
          load() {
            l.UI.initialize(this.element),
              this.params.notification &&
                a.T.showPageNotification(this.params.notification)
                  .then(() => d.Z.layout.navbar.refreshNotifications())
                  .catch((e) => {
                    d.Z.handleError(e);
                  });
          }
        }
        (n = ["responsiveContainer"]),
          (o = "targets") in (i = h)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      95654: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => T });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(7042),
          l = s(48995),
          d = s(62612),
          h = s(69555),
          c = s(47914),
          u = s(50609),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class f extends u.V {
          constructor(e = m.Add, t = null) {
            super("admin.integrations.github.add_edit_issue_mapping_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: c.X.BodyMinWidth,
            }),
              p(this, "classes", { hidden: "default-hidden" }),
              p(this, "doSelectedExternalChange", () => {
                o.UI.getRadio(this.$selectedExternal) &&
                  !this.components.externalProjects &&
                  o.UI.loading(this.$externalProjectsBox, () =>
                    this.refreshFragments("repositories")
                  );
              }),
              p(this, "doInternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedInternal, !0);
              }),
              p(this, "doExternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedExternal, !0);
              }),
              p(this, "renderRepositories", (e = {}) => {
                let t =
                  this.mode == m.Add
                    ? o.UI.getDropdownIntOrNull(this.$connectionId)
                    : this.params.connectionId;
                if (!t) return;
                let s = {};
                return (
                  e.selected
                    ? (s.selected = e.selected)
                    : this.components.externalProjects &&
                      (s.selected =
                        this.components.externalProjects.getSelectedIds()),
                  e.forceRefresh && (s.forceRefresh = !0),
                  n.N.post(
                    "admin/integrations/github/render_issue_mapping_repositories/" +
                      t,
                    n.N.toNetworkCase(s)
                  )
                );
              }),
              p(this, "afterRenderRepositories", () => {
                this.rebindAll();
              }),
              (this.mode = e),
              (this.issueMappingId = t),
              (this.externalLoaded = !1);
          }
          load() {
            g.Z.requestChild(this.component, "internalProjects", {
              events: {
                selectionchange: this.doInternalProjectsSelectionChange,
              },
            }),
              g.Z.requestChild(this.component, "externalProjects", {
                events: {
                  selectionchange: this.doExternalProjectsSelectionChange,
                },
              }),
              o.UI.onRadioChange(
                this.$selectedExternal,
                this.doSelectedExternalChange
              ),
              this.fragments.register("repositories", this.renderRepositories, {
                completedCallback: this.afterRenderRepositories,
              }),
              o.UI.getRadio(this.$selectedExternal) &&
                o.UI.loading(this.$externalProjectsBox, () =>
                  this.refreshFragments([
                    "repositories",
                    { selected: this.params.external },
                  ])
                );
          }
          unload() {
            o.UI.offRadioChange(
              this.$selectedExternal,
              this.doSelectedExternalChange
            );
          }
          doRefreshExternalProjects() {
            o.UI.loading(this.$externalProjectsBox, () =>
              this.refreshFragments(["repositories", { forceRefresh: !0 }])
            );
          }
          doLoadExternalProjects() {
            o.UI.loading(this.$loadExternalProjectsButton, () =>
              this.refreshFragments("repositories")
            );
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let e = {
                allInternal: o.UI.getRadio(this.$allInternal),
                allExternal: o.UI.getRadio(this.$allExternal),
                internal: this.components.internalProjects
                  ? this.components.internalProjects.getSelectedIds()
                  : [],
                external: this.components.externalProjects
                  ? this.components.externalProjects.getSelectedIds()
                  : [],
              };
              this.mode == m.Add &&
                (e.connectionId = o.UI.getDropdownIntOrNull(
                  this.$connectionId
                ));
              let t =
                this.mode == m.Add
                  ? "admin/integrations/github/create_issue_mapping"
                  : "admin/integrations/github/update_issue_mapping/" +
                    this.issueMappingId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        p(f, "forms", [
          {
            name: "mapping",
            fields: [
              "connectionId",
              "allInternal",
              "selectedInternal",
              "allExternal",
              "selectedExternal",
              "externalProjectsBox",
            ],
          },
        ]),
          p(f, "targets", ["submitButton", "loadExternalProjectsButton"]),
          p(f, "actions", [
            "doSubmit",
            "doRefreshExternalProjects",
            "doLoadExternalProjects",
          ]);
        var C = s(15612),
          b = s(61470),
          I = s(12877),
          w = s(24406),
          v = s(67811);
        function _(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class S {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class x extends u.V {
          constructor(e = S.Add, t = null) {
            super("admin.integrations.github.add_edit_connection_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: c.X.BodyMinWidth,
            }),
              _(this, "classes", { hidden: "default-hidden" }),
              (this.mode = e),
              (this.connectionId = t);
          }
          load() {
            this.connectionIntentKey = this.params.connectionIntentKey;
          }
          unload() {}
          doAuthorize() {
            a.l.hideValidationErrors(this.formViews),
              this.clearAuthorizedMessages(),
              o.UI.loading(this.$authorizeButton, () => {
                let e = { i: this.connectionIntentKey };
                return n.N.post(
                  "admin/integrations/github/create_connection_oauth_intent",
                  n.N.toNetworkCase(e)
                )
                  .then((e) =>
                    new b.f(e.data.url).start().then((e) => {
                      if (e.isSuccess) {
                        let e = {
                          i: this.connectionIntentKey,
                          account: o.UI.getText(this.$account),
                        };
                        return n.N.post(
                          "admin/integrations/github/authorize_connection",
                          n.N.toNetworkCase(e)
                        )
                          .then((e) => {
                            this.$authorizedMessage.removeClass(
                              this.classes.hidden
                            );
                          })
                          .catch((e) => {
                            this.handleFormError(e);
                          });
                      }
                      e.error &&
                        this.$notAuthorizedMessage.removeClass(
                          this.classes.hidden
                        );
                    })
                  )
                  .catch((e) => {
                    e instanceof w.vq ? new v.s().show() : g.Z.handleError(e);
                  });
              });
          }
          doTestConnection() {
            const e = new I.c(
              r.Z.langEscape("github.test_connection_content_title", {
                account: o.UI.getText(this.$account),
              })
            );
            e.show();
            let t = {
              i: this.connectionIntentKey,
              account: o.UI.getText(this.$account),
            };
            n.N.post(
              "admin/integrations/github/render_test_connection",
              n.N.toNetworkCase(t)
            )
              .then((t) => {
                e.complete(t.data);
              })
              .catch((t) => {
                setTimeout(() => {
                  this.handleFormError(t), e.hide();
                }, 200);
              });
          }
          clearAuthorizedMessages() {
            this.$notAuthorizedMessage.addClass(this.classes.hidden),
              this.$authorizedMessage.addClass(this.classes.hidden);
          }
          handleFormError(e) {
            e.response.data.code &&
              e.response.data.code == C.g.Errors422IntentNotAuthorized &&
              this.$notAuthorizedMessage.removeClass(this.classes.hidden),
              a.l.handleFormError(e, this.formViews),
              this.refreshPositionIfNeeded();
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews),
                this.clearAuthorizedMessages();
              let e = {
                  i: this.connectionIntentKey,
                  name: o.UI.getText(this.$name),
                  account: o.UI.getText(this.$account),
                },
                t =
                  this.mode == S.Add
                    ? "admin/integrations/github/create_connection"
                    : "admin/integrations/github/update_connection/" +
                      this.connectionId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  this.handleFormError(e);
                });
            });
          }
        }
        function k(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        _(x, "forms", [{ name: "connection", fields: ["name", "account"] }]),
          _(x, "targets", [
            "submitButton",
            "authorizeButton",
            "notAuthorizedMessage",
            "authorizedMessage",
          ]),
          _(x, "actions", ["doSubmit", "doAuthorize", "doTestConnection"]);
        class T extends i.v {
          constructor(...e) {
            super(...e),
              k(this, "classes", {
                configurationConfigured:
                  "admin-integrations-tools__tool__details__configuration--configured",
              }),
              k(this, "doConnectionsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editConnection(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteConnection(e.id, e.$row);
                }
              }),
              k(this, "doIssueMappingsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editIssueMapping(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteIssueMapping(e.id, e.$row);
                }
              }),
              k(this, "doConnectionsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/github/enable_connection/"
                      : "admin/integrations/github/disable_connection/"),
                    n.N.post(t + e.id)
                      .then(() => this.refreshFragments("issueMappings"))
                      .catch((t) => {
                        o.UI.setCheckbox(e.$toggle, !s), g.Z.handleError(t);
                      })
                  );
                });
              }),
              k(this, "doIssueMappingsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/github/enable_issue_mapping/"
                      : "admin/integrations/github/disable_issue_mapping/"),
                    n.N.post(t + e.id).catch((t) => {
                      o.UI.setCheckbox(e.$toggle, !s),
                        s
                          ? a.l.handleCustomMessageError(t, (t) => {
                              new l.u(
                                l.Y.Negative,
                                r.Z.lang("github.connection_disabled"),
                                r.Z.htmlEscape(t)
                              ).show(e.$toggle, h.Fz.BottomLeft);
                            })
                          : g.Z.handleError(t);
                    })
                  );
                });
              }),
              k(this, "renderConnections", () =>
                n.N.post("admin/integrations/github/render_connections")
              ),
              k(this, "afterRenderConnections", () => {
                setTimeout(() => {
                  this.updateConfigurationText();
                }, 100);
              }),
              k(this, "renderIssueMappings", () =>
                n.N.post("admin/integrations/github/render_issue_mappings")
              );
          }
          load() {
            o.UI.initialize(this.element),
              (this.$addConnectionButton = $(this.addConnectionButtonTarget)),
              (this.$addIssueMappingButton = $(
                this.addIssueMappingButtonTarget
              )),
              g.Z.requestChild(this.component, "connections", {
                events: {
                  actionclick: this.doConnectionsActionClick,
                  togglechange: this.doConnectionsToggleChange,
                },
              }),
              g.Z.requestChild(this.component, "issueMappings", {
                events: {
                  actionclick: this.doIssueMappingsActionClick,
                  togglechange: this.doIssueMappingsToggleChange,
                },
              }),
              this.fragments.register("connections", this.renderConnections, {
                completedCallback: this.afterRenderConnections,
              }),
              this.fragments.register(
                "issueMappings",
                this.renderIssueMappings
              );
          }
          doAddConnection() {
            o.UI.loading(this.$addConnectionButton, () =>
              n.N.post("admin/integrations/github/render_create_connection")
                .then((e) => {
                  const t = new x(S.Add);
                  (t.onSuccess = (e) =>
                    this.refreshFragments("connections").then(() => {
                      setTimeout(() => {
                        new l.u(
                          l.Y.Positive,
                          r.Z.lang("github.connection_added_tip_title"),
                          r.Z.htmlEscape(
                            r.Z.lang("github.connection_added_tip_message")
                          )
                        ).show(this.$addIssueMappingButton, h.Fz.RightCenter);
                      }, 250);
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          editConnection(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post(
                "admin/integrations/github/render_update_connection/" + e
              )
                .then((t) => {
                  const s = new x(S.Edit, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("connections", "issueMappings")),
                    s.show(t.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          editIssueMapping(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post(
                "admin/integrations/github/render_update_issue_mapping/" + e
              )
                .then((t) => {
                  const s = new f(m.Edit, e);
                  (s.onSuccess = (e) => this.refreshFragments("issueMappings")),
                    s.show(t.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          deleteConnection(e, t) {
            let s = t.data("name"),
              i = new d.A(
                r.Z.lang("github.delete_connection_title"),
                r.Z.langEscape("github.delete_connection_message", { name: s }),
                r.Z.lang("github.delete_connection_button"),
                r.Z.langEscape("github.delete_connection_confirmation", {
                  name: s,
                }),
                { htmlWarning: r.Z.lang("github.delete_connection_warning") }
              );
            (i.onSuccess = () =>
              n.N.post("admin/integrations/github/delete_connection/" + e).then(
                () => this.refreshFragments("connections", "issueMappings")
              )),
              i.show();
          }
          deleteIssueMapping(e, t) {
            let s = t.data("name"),
              i = new d.A(
                r.Z.lang("github.delete_issue_mapping_title"),
                r.Z.langEscape("github.delete_issue_mapping_message", {
                  name: s,
                }),
                r.Z.lang("github.delete_issue_mapping_button")
              );
            (i.onSuccess = () =>
              n.N.post(
                "admin/integrations/github/delete_issue_mapping/" + e
              ).then(() => this.refreshFragments("issueMappings"))),
              i.show();
          }
          doAddIssueMapping() {
            o.UI.loading(this.$addIssueMappingButton, () =>
              n.N.post("admin/integrations/github/render_create_issue_mapping")
                .then((e) => {
                  const t = new f(m.Add);
                  (t.onSuccess = (e) => this.refreshFragments("issueMappings")),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          updateConfigurationText() {
            this.components.connections &&
            this.components.connections.getRowCount() > 0
              ? ($(this.configurationTarget).addClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_configured")
                ))
              : ($(this.configurationTarget).removeClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_not_configured")
                ));
          }
        }
        k(T, "targets", [
          "addConnectionButton",
          "addIssueMappingButton",
          "responsiveContainer",
          "configurationText",
          "configuration",
        ]);
      },
      77328: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => k });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(7042),
          l = s(48995),
          d = s(62612),
          h = s(69555),
          c = s(47914),
          u = s(50609),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class f extends u.V {
          constructor(e = m.Add, t = null) {
            super("admin.integrations.gitlab.add_edit_issue_mapping_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: c.X.BodyMinWidth,
            }),
              p(this, "classes", { hidden: "default-hidden" }),
              p(this, "doSelectedExternalChange", () => {
                o.UI.getRadio(this.$selectedExternal) &&
                  !this.components.externalProjects &&
                  o.UI.loading(this.$externalProjectsBox, () =>
                    this.refreshFragments("projects")
                  );
              }),
              p(this, "doInternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedInternal, !0);
              }),
              p(this, "doExternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedExternal, !0);
              }),
              p(this, "renderProjects", (e = {}) => {
                let t =
                  this.mode == m.Add
                    ? o.UI.getDropdownIntOrNull(this.$connectionId)
                    : this.params.connectionId;
                if (!t) return;
                let s = {};
                return (
                  e.selected
                    ? (s.selected = e.selected)
                    : this.components.externalProjects &&
                      (s.selected =
                        this.components.externalProjects.getSelectedIds()),
                  e.forceRefresh && (s.forceRefresh = !0),
                  n.N.post(
                    "admin/integrations/gitlab/render_issue_mapping_projects/" +
                      t,
                    n.N.toNetworkCase(s)
                  )
                );
              }),
              p(this, "afterRenderProjects", () => {
                this.rebindAll();
              }),
              (this.mode = e),
              (this.issueMappingId = t),
              (this.externalLoaded = !1);
          }
          load() {
            g.Z.requestChild(this.component, "internalProjects", {
              events: {
                selectionchange: this.doInternalProjectsSelectionChange,
              },
            }),
              g.Z.requestChild(this.component, "externalProjects", {
                events: {
                  selectionchange: this.doExternalProjectsSelectionChange,
                },
              }),
              o.UI.onRadioChange(
                this.$selectedExternal,
                this.doSelectedExternalChange
              ),
              this.fragments.register("projects", this.renderProjects, {
                completedCallback: this.afterRenderProjects,
              }),
              o.UI.getRadio(this.$selectedExternal) &&
                o.UI.loading(this.$externalProjectsBox, () =>
                  this.refreshFragments([
                    "projects",
                    { selected: this.params.external },
                  ])
                );
          }
          unload() {
            o.UI.offRadioChange(
              this.$selectedExternal,
              this.doSelectedExternalChange
            );
          }
          doRefreshExternalProjects() {
            o.UI.loading(this.$externalProjectsBox, () =>
              this.refreshFragments(["projects", { forceRefresh: !0 }])
            );
          }
          doLoadExternalProjects() {
            o.UI.loading(this.$loadExternalProjectsButton, () =>
              this.refreshFragments("projects")
            );
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let e = {
                allInternal: o.UI.getRadio(this.$allInternal),
                allExternal: o.UI.getRadio(this.$allExternal),
                internal: this.components.internalProjects
                  ? this.components.internalProjects.getSelectedIds()
                  : [],
                external: this.components.externalProjects
                  ? this.components.externalProjects.getSelectedIds()
                  : [],
              };
              this.mode == m.Add &&
                (e.connectionId = o.UI.getDropdownIntOrNull(
                  this.$connectionId
                ));
              let t =
                this.mode == m.Add
                  ? "admin/integrations/gitlab/create_issue_mapping"
                  : "admin/integrations/gitlab/update_issue_mapping/" +
                    this.issueMappingId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        p(f, "forms", [
          {
            name: "mapping",
            fields: [
              "connectionId",
              "allInternal",
              "selectedInternal",
              "allExternal",
              "selectedExternal",
              "externalProjectsBox",
            ],
          },
        ]),
          p(f, "targets", ["submitButton", "loadExternalProjectsButton"]),
          p(f, "actions", [
            "doSubmit",
            "doRefreshExternalProjects",
            "doLoadExternalProjects",
          ]);
        var C = s(61470),
          b = s(12877),
          I = s(24406),
          w = s(67811);
        function v(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class _ {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class S extends u.V {
          constructor(e = _.Add, t = null) {
            super("admin.integrations.gitlab.add_edit_connection_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: c.X.BodyMinWidth,
            }),
              v(this, "classes", { hidden: "default-hidden" }),
              v(this, "doIsCustomChange", (e) => {
                let t = 1 == o.UI.getDropdownIntOrNull(this.$isCustom);
                o.UI.toggleTextEnabled(this.$gitlabUrl, t),
                  o.UI.toggleCheckboxEnabled(this.$verifySsl, t),
                  t &&
                    setTimeout(() => {
                      o.UI.focusText(this.$gitlabUrl);
                    }, 0);
              }),
              (this.mode = e),
              (this.connectionId = t);
          }
          load() {
            (this.connectionIntentKey = this.params.connectionIntentKey),
              g.Z.requestChild(this.component, "isCustom", {
                events: { change: this.doIsCustomChange },
              });
          }
          unload() {}
          collectAddress() {
            let e = 1 == o.UI.getDropdownIntOrNull(this.$isCustom),
              t = { isCustom: e };
            return (
              e &&
                ((t.gitlabUrl = o.UI.getText(this.$gitlabUrl)),
                (t.verifySsl = o.UI.getCheckbox(this.$verifySsl))),
              t
            );
          }
          doTestConnection() {
            a.l.hideValidationErrors(this.formViews),
              this.clearAuthorizedMessages(),
              o.UI.loading(this.$testConnectionButton, () => {
                let e = this.collectAddress();
                return (
                  (e.i = this.connectionIntentKey),
                  (e.gitlabOauthClientId = o.UI.getText(
                    this.$gitlabOauthClientId
                  )),
                  (e.gitlabOauthClientSecret = o.UI.getText(
                    this.$gitlabOauthClientSecret
                  )),
                  n.N.post(
                    "admin/integrations/gitlab/create_connection_oauth_intent",
                    n.N.toNetworkCase(e)
                  )
                    .then((e) =>
                      new C.f(e.data.url).start().then((e) => {
                        if (e.isSuccess) {
                          let e = this.collectAddress();
                          (e.i = this.connectionIntentKey),
                            (e.gitlabAccessToken = o.UI.getText(
                              this.$gitlabAccessToken
                            ));
                          let t = "...";
                          t = e.isCustom
                            ? r.Z.langEscape(
                                "gitlab.test_connection_content_title_custom",
                                { address: o.UI.getText(this.$gitlabUrl) }
                              )
                            : r.Z.lang(
                                "gitlab.test_connection_content_title_cloud"
                              );
                          const s = new b.c(t);
                          s.show(),
                            n.N.post(
                              "admin/integrations/gitlab/render_test_connection",
                              n.N.toNetworkCase(e)
                            )
                              .then((e) => {
                                s.complete(e.data);
                              })
                              .catch((e) => {
                                setTimeout(() => {
                                  a.l.handleFormError(e, this.formViews),
                                    this.refreshPositionIfNeeded(),
                                    s.hide();
                                }, 200);
                              });
                        } else
                          e.error &&
                            this.$testNotAuthorizedMessage.removeClass(
                              this.classes.hidden
                            );
                      })
                    )
                    .catch((e) => {
                      e instanceof I.vq
                        ? new w.s().show()
                        : (a.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded());
                    })
                );
              });
          }
          clearAuthorizedMessages() {
            this.$testNotAuthorizedMessage.addClass(this.classes.hidden);
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews),
                this.clearAuthorizedMessages();
              let e = this.collectAddress();
              if (
                ((e.i = this.connectionIntentKey),
                (e.name = o.UI.getText(this.$name)),
                (e.gitlabOauthClientId = o.UI.getText(
                  this.$gitlabOauthClientId
                )),
                e.isCustom &&
                  ((e.gitlabUrl = o.UI.getText(this.$gitlabUrl)),
                  (e.verifySsl = o.UI.getCheckbox(this.$verifySsl))),
                this.mode == _.Add)
              )
                (e.gitlabAccessToken = o.UI.getText(this.$gitlabAccessToken)),
                  (e.gitlabOauthClientSecret = o.UI.getText(
                    this.$gitlabOauthClientSecret
                  ));
              else {
                let t = o.UI.getText(this.$gitlabAccessToken);
                t && (e.gitlabAccessToken = t);
                let s = o.UI.getText(this.$gitlabOauthClientSecret);
                s && (e.gitlabOauthClientSecret = s);
              }
              let t =
                this.mode == _.Add
                  ? "admin/integrations/gitlab/create_connection"
                  : "admin/integrations/gitlab/update_connection/" +
                    this.connectionId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        v(S, "forms", [
          {
            name: "connection",
            fields: [
              "name",
              "isCustom",
              "gitlabUrl",
              "verifySsl",
              "gitlabAccessToken",
              "gitlabOauthClientId",
              "gitlabOauthClientSecret",
            ],
          },
        ]),
          v(S, "targets", [
            "submitButton",
            "testConnectionButton",
            "testNotAuthorizedMessage",
          ]),
          v(S, "actions", ["doSubmit", "doAuthorize", "doTestConnection"]);
        class k extends i.v {
          constructor(...e) {
            super(...e),
              x(this, "classes", {
                configurationConfigured:
                  "admin-integrations-tools__tool__details__configuration--configured",
              }),
              x(this, "doConnectionsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editConnection(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteConnection(e.id, e.$row);
                }
              }),
              x(this, "doIssueMappingsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editIssueMapping(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteIssueMapping(e.id, e.$row);
                }
              }),
              x(this, "doConnectionsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/gitlab/enable_connection/"
                      : "admin/integrations/gitlab/disable_connection/"),
                    n.N.post(t + e.id)
                      .then(() => this.refreshFragments("issueMappings"))
                      .catch((t) => {
                        o.UI.setCheckbox(e.$toggle, !s), g.Z.handleError(t);
                      })
                  );
                });
              }),
              x(this, "doIssueMappingsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/gitlab/enable_issue_mapping/"
                      : "admin/integrations/gitlab/disable_issue_mapping/"),
                    n.N.post(t + e.id).catch((t) => {
                      o.UI.setCheckbox(e.$toggle, !s),
                        s
                          ? a.l.handleCustomMessageError(t, (t) => {
                              new l.u(
                                l.Y.Negative,
                                r.Z.lang("gitlab.connection_disabled"),
                                r.Z.htmlEscape(t)
                              ).show(e.$toggle, h.Fz.BottomLeft);
                            })
                          : g.Z.handleError(t);
                    })
                  );
                });
              }),
              x(this, "renderConnections", () =>
                n.N.post("admin/integrations/gitlab/render_connections")
              ),
              x(this, "afterRenderConnections", () => {
                setTimeout(() => {
                  this.updateConfigurationText();
                }, 100);
              }),
              x(this, "renderIssueMappings", () =>
                n.N.post("admin/integrations/gitlab/render_issue_mappings")
              );
          }
          load() {
            o.UI.initialize(this.element),
              (this.$addConnectionButton = $(this.addConnectionButtonTarget)),
              (this.$addIssueMappingButton = $(
                this.addIssueMappingButtonTarget
              )),
              g.Z.requestChild(this.component, "connections", {
                events: {
                  actionclick: this.doConnectionsActionClick,
                  togglechange: this.doConnectionsToggleChange,
                },
              }),
              g.Z.requestChild(this.component, "issueMappings", {
                events: {
                  actionclick: this.doIssueMappingsActionClick,
                  togglechange: this.doIssueMappingsToggleChange,
                },
              }),
              this.fragments.register("connections", this.renderConnections, {
                completedCallback: this.afterRenderConnections,
              }),
              this.fragments.register(
                "issueMappings",
                this.renderIssueMappings
              );
          }
          doAddConnection() {
            o.UI.loading(this.$addConnectionButton, () =>
              n.N.post("admin/integrations/gitlab/render_create_connection")
                .then((e) => {
                  const t = new S(_.Add);
                  (t.onSuccess = (e) =>
                    this.refreshFragments("connections").then(() => {
                      setTimeout(() => {
                        new l.u(
                          l.Y.Positive,
                          r.Z.lang("gitlab.connection_added_tip_title"),
                          r.Z.htmlEscape(
                            r.Z.lang("gitlab.connection_added_tip_message")
                          )
                        ).show(this.$addIssueMappingButton, h.Fz.RightCenter);
                      }, 250);
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          editConnection(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post(
                "admin/integrations/gitlab/render_update_connection/" + e
              )
                .then((t) => {
                  const s = new S(_.Edit, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("connections", "issueMappings")),
                    s.show(t.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          editIssueMapping(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post(
                "admin/integrations/gitlab/render_update_issue_mapping/" + e
              )
                .then((t) => {
                  const s = new f(m.Edit, e);
                  (s.onSuccess = (e) => this.refreshFragments("issueMappings")),
                    s.show(t.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          deleteConnection(e, t) {
            let s = t.data("name"),
              i = new d.A(
                r.Z.lang("gitlab.delete_connection_title"),
                r.Z.langEscape("gitlab.delete_connection_message", { name: s }),
                r.Z.lang("gitlab.delete_connection_button"),
                r.Z.langEscape("gitlab.delete_connection_confirmation", {
                  name: s,
                }),
                { htmlWarning: r.Z.lang("gitlab.delete_connection_warning") }
              );
            (i.onSuccess = () =>
              n.N.post("admin/integrations/gitlab/delete_connection/" + e).then(
                () => this.refreshFragments("connections", "issueMappings")
              )),
              i.show();
          }
          deleteIssueMapping(e, t) {
            let s = t.data("name"),
              i = new d.A(
                r.Z.lang("gitlab.delete_issue_mapping_title"),
                r.Z.langEscape("gitlab.delete_issue_mapping_message", {
                  name: s,
                }),
                r.Z.lang("gitlab.delete_issue_mapping_button")
              );
            (i.onSuccess = () =>
              n.N.post(
                "admin/integrations/gitlab/delete_issue_mapping/" + e
              ).then(() => this.refreshFragments("issueMappings"))),
              i.show();
          }
          doAddIssueMapping() {
            o.UI.loading(this.$addIssueMappingButton, () =>
              n.N.post("admin/integrations/gitlab/render_create_issue_mapping")
                .then((e) => {
                  const t = new f(m.Add);
                  (t.onSuccess = (e) => this.refreshFragments("issueMappings")),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          updateConfigurationText() {
            this.components.connections &&
            this.components.connections.getRowCount() > 0
              ? ($(this.configurationTarget).addClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_configured")
                ))
              : ($(this.configurationTarget).removeClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_not_configured")
                ));
          }
        }
        x(k, "targets", [
          "addConnectionButton",
          "addIssueMappingButton",
          "responsiveContainer",
          "configurationText",
          "configuration",
        ]);
      },
      77295: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(26454),
          o = s(96622);
        const n = class extends i.v {
          load() {
            o.UI.initialize(this.element);
          }
          unload() {}
        };
      },
      69694: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => f });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(62612),
          l = s(47914),
          d = s(50609),
          h = s(7042),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class p extends d.V {
          constructor(e = g.Add, t = null) {
            super("admin.integrations.issues.add_edit_custom_target_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: l.X.BodyMinWidth,
            }),
              u(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              u(this, "doInternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedInternal, !0);
              }),
              (this.mode = e),
              (this.targetId = t);
          }
          load() {
            c.Z.requestChild(this.component, "tabs", {
              events: { tabchange: this.doTabChanged },
            }),
              c.Z.requestChild(this.component, "internalProjects", {
                events: {
                  selectionchange: this.doInternalProjectsSelectionChange,
                },
              });
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              h.l.hideValidationErrors(this.formViews);
              let e = {
                  name: o.UI.getText(this.$name),
                  newUrl: o.UI.getText(this.$newUrl),
                  viewUrl: o.UI.getText(this.$viewUrl),
                  format: o.UI.getDropdownIntOrNull(this.$format),
                  allInternal: o.UI.getRadio(this.$allInternal),
                  internal: this.components.internalProjects
                    ? this.components.internalProjects.getSelectedIds()
                    : [],
                },
                t =
                  this.mode == g.Add
                    ? "admin/integrations/issues/create_custom_target"
                    : "admin/integrations/issues/update_custom_target/" +
                      this.targetId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  h.l.handleTabbedFormError(
                    e,
                    this.formViews,
                    this.components.tabs
                  ),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        u(p, "forms", [
          { name: "target", fields: ["name", "newUrl", "viewUrl", "format"] },
          {
            name: "projects",
            fields: ["allInternal", "selectedInternal", "internal"],
          },
        ]),
          u(p, "targets", ["submitButton"]),
          u(p, "actions", ["doSubmit"]);
        class f extends i.v {
          constructor(...e) {
            super(...e),
              m(this, "classes", {
                configurationConfigured:
                  "admin-integrations-tools__tool__details__configuration--configured",
              }),
              m(this, "doCustomTargetsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editCustomTarget(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteCustomTarget(e.id, e.$row);
                }
              }),
              m(this, "doCustomTargetsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/issues/enable_custom_target/"
                      : "admin/integrations/issues/disable_custom_target/"),
                    n.N.post(t + e.id).catch((t) => {
                      o.UI.setCheckbox(e.$toggle, !s), c.Z.handleError(t);
                    })
                  );
                });
              }),
              m(this, "renderCustomTargets", () =>
                n.N.post("admin/integrations/issues/render_custom_targets")
              ),
              m(this, "afterRenderCustomTargets", () => {
                setTimeout(() => {
                  this.updateConfigurationText();
                }, 100);
              });
          }
          load() {
            o.UI.initialize(this.element),
              (this.$addCustomTargetButton = $(
                this.addCustomTargetButtonTarget
              )),
              c.Z.requestChild(this.component, "customTargets", {
                events: {
                  actionclick: this.doCustomTargetsActionClick,
                  togglechange: this.doCustomTargetsToggleChange,
                },
              }),
              this.fragments.register(
                "customTargets",
                this.renderCustomTargets,
                { completedCallback: this.afterRenderCustomTargets }
              );
          }
          doAddCustomTarget() {
            o.UI.loading(this.$addCustomTargetButton, () =>
              n.N.post("admin/integrations/issues/render_create_custom_target")
                .then((e) => {
                  const t = new p(g.Add);
                  (t.onSuccess = (e) => this.refreshFragments("customTargets")),
                    t.show(e.data);
                })
                .catch((e) => {
                  c.Z.handleError(e);
                })
            );
          }
          editCustomTarget(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post(
                "admin/integrations/issues/render_update_custom_target/" + e
              )
                .then((t) => {
                  const s = new p(g.Edit, e);
                  (s.onSuccess = (e) => this.refreshFragments("customTargets")),
                    s.show(t.data);
                })
                .catch((e) => {
                  c.Z.handleError(e);
                })
            );
          }
          deleteCustomTarget(e, t) {
            let s = t.data("name"),
              i = new a.A(
                r.Z.lang("issues_custom.delete_custom_target_title"),
                r.Z.langEscape("issues_custom.delete_custom_target_message", {
                  name: s,
                }),
                r.Z.lang("issues_custom.delete_custom_target_button"),
                r.Z.langEscape(
                  "issues_custom.delete_custom_target_confirmation",
                  { name: s }
                ),
                {
                  htmlWarning: r.Z.lang(
                    "issues_custom.delete_custom_target_warning"
                  ),
                }
              );
            (i.onSuccess = () =>
              n.N.post(
                "admin/integrations/issues/delete_custom_target/" + e
              ).then(() => this.refreshFragments("customTargets"))),
              i.show();
          }
          updateConfigurationText() {
            this.components.customTargets &&
            this.components.customTargets.getRowCount() > 0
              ? ($(this.configurationTarget).addClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_configured")
                ))
              : ($(this.configurationTarget).removeClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_not_configured")
                ));
          }
        }
        m(f, "targets", [
          "addCustomTargetButton",
          "responsiveContainer",
          "configurationText",
          "configuration",
        ]);
      },
      18190: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => k });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(7042),
          l = s(48995),
          d = s(62612),
          h = s(69555),
          c = s(47914),
          u = s(50609),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class f extends u.V {
          constructor(e = m.Add, t = null) {
            super("admin.integrations.jira.add_edit_issue_mapping_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: c.X.BodyMinWidth,
            }),
              p(this, "classes", { hidden: "default-hidden" }),
              p(this, "doSelectedExternalChange", () => {
                o.UI.getRadio(this.$selectedExternal) &&
                  !this.components.externalProjects &&
                  o.UI.loading(this.$externalProjectsBox, () =>
                    this.refreshFragments("projects")
                  );
              }),
              p(this, "doInternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedInternal, !0);
              }),
              p(this, "doExternalProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.setRadio(this.$selectedExternal, !0);
              }),
              p(this, "renderProjects", (e = {}) => {
                let t =
                  this.mode == m.Add
                    ? o.UI.getDropdownIntOrNull(this.$connectionId)
                    : this.params.connectionId;
                if (!t) return;
                let s = {};
                return (
                  e.selected
                    ? (s.selected = e.selected)
                    : this.components.externalProjects &&
                      (s.selected =
                        this.components.externalProjects.getSelectedIds()),
                  e.forceRefresh && (s.forceRefresh = !0),
                  n.N.post(
                    "admin/integrations/jira/render_issue_mapping_projects/" +
                      t,
                    n.N.toNetworkCase(s)
                  )
                );
              }),
              p(this, "afterRenderProjects", () => {
                this.rebindAll();
              }),
              (this.mode = e),
              (this.issueMappingId = t),
              (this.externalLoaded = !1);
          }
          load() {
            g.Z.requestChild(this.component, "internalProjects", {
              events: {
                selectionchange: this.doInternalProjectsSelectionChange,
              },
            }),
              g.Z.requestChild(this.component, "externalProjects", {
                events: {
                  selectionchange: this.doExternalProjectsSelectionChange,
                },
              }),
              o.UI.onRadioChange(
                this.$selectedExternal,
                this.doSelectedExternalChange
              ),
              this.fragments.register("projects", this.renderProjects, {
                completedCallback: this.afterRenderProjects,
              }),
              o.UI.getRadio(this.$selectedExternal) &&
                o.UI.loading(this.$externalProjectsBox, () =>
                  this.refreshFragments([
                    "projects",
                    { selected: this.params.external },
                  ])
                );
          }
          unload() {
            o.UI.offRadioChange(
              this.$selectedExternal,
              this.doSelectedExternalChange
            );
          }
          doRefreshExternalProjects() {
            o.UI.loading(this.$externalProjectsBox, () =>
              this.refreshFragments(["projects", { forceRefresh: !0 }])
            );
          }
          doLoadExternalProjects() {
            o.UI.loading(this.$loadExternalProjectsButton, () =>
              this.refreshFragments("projects")
            );
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let e = {
                allInternal: o.UI.getRadio(this.$allInternal),
                allExternal: o.UI.getRadio(this.$allExternal),
                internal: this.components.internalProjects
                  ? this.components.internalProjects.getSelectedIds()
                  : [],
                external: this.components.externalProjects
                  ? this.components.externalProjects.getSelectedIds()
                  : [],
              };
              this.mode == m.Add &&
                (e.connectionId = o.UI.getDropdownIntOrNull(
                  this.$connectionId
                ));
              let t =
                this.mode == m.Add
                  ? "admin/integrations/jira/create_issue_mapping"
                  : "admin/integrations/jira/update_issue_mapping/" +
                    this.issueMappingId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        p(f, "forms", [
          {
            name: "mapping",
            fields: [
              "connectionId",
              "allInternal",
              "selectedInternal",
              "allExternal",
              "selectedExternal",
              "externalProjectsBox",
            ],
          },
        ]),
          p(f, "targets", ["submitButton", "loadExternalProjectsButton"]),
          p(f, "actions", [
            "doSubmit",
            "doRefreshExternalProjects",
            "doLoadExternalProjects",
          ]);
        var C = s(15612),
          b = s(12877),
          I = s(24406),
          w = s(67811);
        function v(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class _ {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class S extends u.V {
          constructor(e = _.Add, t = null) {
            super("admin.integrations.jira.add_edit_connection_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: c.X.BodyMinWidth,
            }),
              v(this, "classes", { hidden: "default-hidden" }),
              (this.mode = e),
              (this.connectionId = t);
          }
          load() {
            this.connectionIntentKey = this.params.connectionIntentKey;
          }
          unload() {}
          doAuthorize() {
            a.l.hideValidationErrors(this.formViews),
              this.clearAuthorizedMessages(),
              this.getAndValidateJiraBaseAddress()
                ? o.UI.loading(this.$authorizeButton, () => {
                    this.prepareJiraUrl();
                    let e = {
                      i: this.connectionIntentKey,
                      jiraUrl: o.UI.getText(this.$jiraUrl),
                    };
                    return n.N.post(
                      "admin/integrations/jira/prepare_authorize_connection",
                      n.N.toNetworkCase(e)
                    )
                      .then((e) => {
                        let t = new I.VH(
                          C.g.AtlassianLoginPrefix +
                            encodeURIComponent(e.data.url),
                          {
                            modal: !0,
                            messages: !0,
                            messagesAllowAllWindows: !0,
                            messagesOrigin: r.Z.originFromUrl(
                              this.params.interopUrl
                            ),
                          }
                        );
                        return (
                          t.events.on("message", (e) => {
                            e.data &&
                              e.data.messageType ==
                                C.g.MessageJiraConnectConfirmed &&
                              (this.$authorizedMessage.removeClass(
                                this.classes.hidden
                              ),
                              this.$authorizationPageUnavailableMessage.addClass(
                                this.classes.hidden
                              ),
                              t.close());
                          }),
                          t.openAsync(750, 600)
                        );
                      })
                      .catch((e) => {
                        e instanceof I.vq
                          ? new w.s().show()
                          : g.Z.handleError(e);
                      });
                  })
                : a.l.highlightFieldError(this.formViews[0], "jiraUrl");
          }
          getAndValidateJiraBaseAddress() {
            let e = o.UI.getText(this.$jiraUrl);
            if (r.Z.validateUrl(e)) return r.Z.originFromUrl(e);
          }
          doInstallApp() {
            a.l.hideValidationErrors(this.formViews);
            let e = this.getAndValidateJiraBaseAddress();
            if (!e)
              return void a.l.highlightFieldError(this.formViews[0], "jiraUrl");
            let t = e + C.g.JiraAppInstallSuffix;
            n.N.openExternalTab(t);
          }
          doTestConnection() {
            a.l.hideValidationErrors(this.formViews);
            let e = this.getAndValidateJiraBaseAddress();
            if (!e)
              return void a.l.highlightFieldError(this.formViews[0], "jiraUrl");
            const t = new b.c(
              r.Z.langEscape("jira.test_connection_content_title", { url: e })
            );
            t.show();
            let s = { i: this.connectionIntentKey, jiraUrl: e };
            n.N.post(
              "admin/integrations/jira/render_test_connection",
              n.N.toNetworkCase(s)
            )
              .then((e) => {
                t.complete(e.data);
              })
              .catch((e) => {
                setTimeout(() => {
                  this.handleFormError(e), t.hide();
                }, 200);
              });
          }
          clearAuthorizedMessages() {
            this.$notAuthorizedMessage.addClass(this.classes.hidden),
              this.$authorizedMessage.addClass(this.classes.hidden);
          }
          handleFormError(e) {
            e.response.data.code &&
              e.response.data.code == C.g.Errors422IntentNotAuthorized &&
              (this.$authorizationPageUnavailableMessage.addClass(
                this.classes.hidden
              ),
              this.$notAuthorizedMessage.removeClass(this.classes.hidden)),
              a.l.handleFormError(e, this.formViews),
              this.refreshPositionIfNeeded();
          }
          prepareJiraUrl() {
            try {
              o.UI.setText(
                this.$jiraUrl,
                r.Z.originFromUrl(o.UI.getText(this.$jiraUrl))
              );
            } catch {}
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews),
                this.clearAuthorizedMessages(),
                this.prepareJiraUrl();
              let e = {
                  i: this.connectionIntentKey,
                  name: o.UI.getText(this.$name),
                  jiraUrl: o.UI.getText(this.$jiraUrl),
                },
                t =
                  this.mode == _.Add
                    ? "admin/integrations/jira/create_connection"
                    : "admin/integrations/jira/update_connection/" +
                      this.connectionId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  this.handleFormError(e);
                });
            });
          }
        }
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        v(S, "forms", [{ name: "connection", fields: ["name", "jiraUrl"] }]),
          v(S, "targets", [
            "submitButton",
            "authorizeButton",
            "notAuthorizedMessage",
            "authorizedMessage",
            "authorizationPageUnavailableMessage",
          ]),
          v(S, "actions", [
            "doSubmit",
            "doAuthorize",
            "doTestConnection",
            "doInstallApp",
          ]);
        class k extends i.v {
          constructor(...e) {
            super(...e),
              x(this, "classes", {
                configurationConfigured:
                  "admin-integrations-tools__tool__details__configuration--configured",
              }),
              x(this, "doConnectionsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editConnection(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteConnection(e.id, e.$row);
                }
              }),
              x(this, "doIssueMappingsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editIssueMapping(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteIssueMapping(e.id, e.$row);
                }
              }),
              x(this, "doConnectionsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/jira/enable_connection/"
                      : "admin/integrations/jira/disable_connection/"),
                    n.N.post(t + e.id)
                      .then(() => this.refreshFragments("issueMappings"))
                      .catch((t) => {
                        o.UI.setCheckbox(e.$toggle, !s),
                          s
                            ? a.l.handleCustomMessageError(t, (t) => {
                                new l.u(
                                  l.Y.Negative,
                                  r.Z.lang("jira.connection_not_authorized"),
                                  r.Z.htmlEscape(t)
                                ).show(e.$toggle, h.Fz.BottomLeft);
                              })
                            : g.Z.handleError(t);
                      })
                  );
                });
              }),
              x(this, "doIssueMappingsToggleChange", (e) => {
                e.target.loading("field", e.$field, () => {
                  let t,
                    s = o.UI.getCheckbox(e.$toggle);
                  return (
                    (t = s
                      ? "admin/integrations/jira/enable_issue_mapping/"
                      : "admin/integrations/jira/disable_issue_mapping/"),
                    n.N.post(t + e.id).catch((t) => {
                      o.UI.setCheckbox(e.$toggle, !s),
                        s
                          ? a.l.handleCustomMessageError(t, (t) => {
                              new l.u(
                                l.Y.Negative,
                                r.Z.lang("jira.connection_disabled"),
                                r.Z.htmlEscape(t)
                              ).show(e.$toggle, h.Fz.BottomLeft);
                            })
                          : g.Z.handleError(t);
                    })
                  );
                });
              }),
              x(this, "renderConnections", () =>
                n.N.post("admin/integrations/jira/render_connections")
              ),
              x(this, "afterRenderConnections", () => {
                setTimeout(() => {
                  this.updateConfigurationText();
                }, 100);
              }),
              x(this, "renderIssueMappings", () =>
                n.N.post("admin/integrations/jira/render_issue_mappings")
              );
          }
          load() {
            o.UI.initialize(this.element),
              (this.$addConnectionButton = $(this.addConnectionButtonTarget)),
              (this.$addIssueMappingButton = $(
                this.addIssueMappingButtonTarget
              )),
              g.Z.requestChild(this.component, "connections", {
                events: {
                  actionclick: this.doConnectionsActionClick,
                  togglechange: this.doConnectionsToggleChange,
                },
              }),
              g.Z.requestChild(this.component, "issueMappings", {
                events: {
                  actionclick: this.doIssueMappingsActionClick,
                  togglechange: this.doIssueMappingsToggleChange,
                },
              }),
              this.fragments.register("connections", this.renderConnections, {
                completedCallback: this.afterRenderConnections,
              }),
              this.fragments.register(
                "issueMappings",
                this.renderIssueMappings
              );
          }
          doAddConnection() {
            o.UI.loading(this.$addConnectionButton, () =>
              n.N.post("admin/integrations/jira/render_create_connection")
                .then((e) => {
                  const t = new S(_.Add);
                  (t.onSuccess = (e) =>
                    this.refreshFragments("connections").then(() => {
                      setTimeout(() => {
                        new l.u(
                          l.Y.Positive,
                          r.Z.lang("jira.connection_added_tip_title"),
                          r.Z.htmlEscape(
                            r.Z.lang("jira.connection_added_tip_message")
                          )
                        ).show(this.$addIssueMappingButton, h.Fz.RightCenter);
                      }, 250);
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          editConnection(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post("admin/integrations/jira/render_update_connection/" + e)
                .then((t) => {
                  const s = new S(_.Edit, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("connections", "issueMappings")),
                    s.show(t.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          editIssueMapping(e, t, s) {
            t.loading("actionfield", s, () =>
              n.N.post(
                "admin/integrations/jira/render_update_issue_mapping/" + e
              )
                .then((t) => {
                  const s = new f(m.Edit, e);
                  (s.onSuccess = (e) => this.refreshFragments("issueMappings")),
                    s.show(t.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          deleteConnection(e, t) {
            let s = t.data("name"),
              i = new d.A(
                r.Z.lang("jira.delete_connection_title"),
                r.Z.langEscape("jira.delete_connection_message", { name: s }),
                r.Z.lang("jira.delete_connection_button"),
                r.Z.langEscape("jira.delete_connection_confirmation", {
                  name: s,
                }),
                { htmlWarning: r.Z.lang("jira.delete_connection_warning") }
              );
            (i.onSuccess = () =>
              n.N.post("admin/integrations/jira/delete_connection/" + e).then(
                () => this.refreshFragments("connections", "issueMappings")
              )),
              i.show();
          }
          deleteIssueMapping(e, t) {
            let s = t.data("name"),
              i = new d.A(
                r.Z.lang("jira.delete_issue_mapping_title"),
                r.Z.langEscape("jira.delete_issue_mapping_message", {
                  name: s,
                }),
                r.Z.lang("jira.delete_issue_mapping_button")
              );
            (i.onSuccess = () =>
              n.N.post(
                "admin/integrations/jira/delete_issue_mapping/" + e
              ).then(() => this.refreshFragments("issueMappings"))),
              i.show();
          }
          doAddIssueMapping() {
            o.UI.loading(this.$addIssueMappingButton, () =>
              n.N.post("admin/integrations/jira/render_create_issue_mapping")
                .then((e) => {
                  const t = new f(m.Add);
                  (t.onSuccess = (e) => this.refreshFragments("issueMappings")),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          updateConfigurationText() {
            this.components.connections &&
            this.components.connections.getRowCount() > 0
              ? ($(this.configurationTarget).addClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_configured")
                ))
              : ($(this.configurationTarget).removeClass(
                  this.classes.configurationConfigured
                ),
                $(this.configurationTextTarget).text(
                  r.Z.lang("integrations.configuration_not_configured")
                ));
          }
        }
        x(k, "targets", [
          "addConnectionButton",
          "addIssueMappingButton",
          "responsiveContainer",
          "configurationText",
          "configuration",
        ]);
      },
      2962: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => I });
        var i = s(26454),
          o = s(13814),
          n = s(43689),
          r = s(62612),
          a = s(132),
          l = s(69555),
          d = s(47914),
          h = s(50609),
          c = s(96622),
          u = s(7042),
          g = s(14589),
          p = s(5270);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class C extends h.V {
          constructor(e = f.Add, t = null) {
            super("admin.milestones.add_edit_type_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: d.X.BodyMinWidth,
            }),
              m(this, "classes", { iconSelected: "selected" }),
              m(this, "selectors", {
                icons: ".admin-milestones-type-avatar-select li",
                iconSelected:
                  ".admin-milestones-type-avatar-select li.selected",
              }),
              m(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              m(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  c.UI.getRadioEnabled(this.$includeSelected) &&
                  c.UI.setRadio(this.$includeSelected, !0);
              }),
              m(this, "doIconClick", (e) => {
                this.$icons.removeClass(this.classes.iconSelected),
                  $(e.currentTarget).addClass(this.classes.iconSelected);
              }),
              (this.mode = e),
              (this.typeId = t);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              p.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              p.Z.requestChild(this.component, "projects", {
                events: { selectionchange: this.doProjectsSelectionChange },
              }),
              (this.$icons = $(this.selectors.icons, this.$dialog)),
              this.$icons.on("click", this.doIconClick);
          }
          unload() {
            this.$icons.off("click", this.doIconClick);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            c.UI.markLoading(this.$submitButton),
              u.l.hideValidationErrors(this.formViews);
            let t =
                $(this.selectors.iconSelected, this.$dialog).data("index") || 1,
              s = {
                name: c.UI.getText(this.$name),
                avatarIndex: t,
                includeAll: c.UI.getRadio(this.$includeAll),
                projects: this.components.projects
                  ? this.components.projects.getSelectedIds()
                  : [],
              };
            this.mode == f.Edit &&
              ((s.updatedAt = this.updatedAt), (s.forceUpdate = e));
            let i =
              this.mode == f.Add
                ? "admin/milestones/create_type"
                : "admin/milestones/update_type/" + this.typeId;
            o.N.post(i, o.N.toNetworkCase(s))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  c.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                g.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      this.refreshPositionIfNeeded(),
                        u.l.handleTabbedFormError(
                          e,
                          this.formViews,
                          this.components.tabs
                        );
                    }
                  )
                  .then(() => {
                    c.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        m(C, "forms", [
          { name: "type", fields: ["name", "avatarIndex"] },
          {
            name: "projects",
            fields: ["includeAll", "includeSelected", "projects"],
          },
        ]),
          m(C, "targets", ["submitButton"]),
          m(C, "actions", ["doSubmit"]);
        class I extends i.v {
          constructor(...e) {
            super(...e),
              b(this, "doToggleBeforeChecked", (e) => {
                if (c.UI.popupVisible(e.$toggle)) return !1;
                const t = new a.l(n.Z.lang("milestones.really_make_default"));
                return (
                  (t.onSuccess = () => {
                    let t = e.target;
                    t.setLoading("field", !0, e.$field);
                    let s = t.getToggles("default", !0).not(e.$toggle);
                    c.UI.setCheckbox(s, !1),
                      c.UI.setCheckbox(e.$toggle, !0),
                      c.UI.toggleCheckboxEnabled(s, !0),
                      c.UI.toggleCheckboxEnabled(e.$toggle, !1),
                      c.UI.toggleCheckboxEnabled(s, !0),
                      c.UI.toggleCheckboxEnabled(e.$toggle, !1),
                      o.N.post("admin/milestones/set_default_type/" + e.id)
                        .then((i) => {
                          t.setLoading("field", !1, e.$field),
                            t.toggleActionVisible(e.$row, "delete", !1),
                            t.toggleActionVisible(
                              s.closest("tr"),
                              "delete",
                              !0
                            ),
                            t.setTextFieldContent(
                              e.$row,
                              "projects",
                              n.Z.lang("milestones.all_projects")
                            ),
                            c.UI.blurCheckbox(e.$toggle);
                        })
                        .catch((i) => {
                          c.UI.setCheckbox(s, !0),
                            c.UI.setCheckbox(e.$toggle, !1),
                            c.UI.toggleCheckboxEnabled(s, !1),
                            c.UI.toggleCheckboxEnabled(e.$toggle, !0),
                            t.setLoading("field", !1, e.$field),
                            p.Z.handleError(i);
                        });
                  }),
                  t.show(e.$toggle, l.Fz.BottomRight),
                  !1
                );
              }),
              b(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editType(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteType(e.id, e.$row);
                }
              });
          }
          load() {
            c.UI.initialize(this.element),
              (this.$addButton = $(this.addButtonTarget)),
              p.Z.requestChild(this.component, "types", {
                events: {
                  actionclick: this.doActionClick,
                  togglebeforechecked: this.doToggleBeforeChecked,
                },
              });
          }
          unload() {}
          doAdd() {
            c.UI.markLoading(this.$addButton),
              o.N.post("admin/milestones/render_create_type")
                .then((e) => {
                  c.UI.markCompleted(this.$addButton);
                  const t = new C(f.Add);
                  (t.onSuccess = (e) => this.refreshContent()), t.show(e.data);
                })
                .catch((e) => {
                  c.UI.markCompleted(this.$addButton), p.Z.handleError(e);
                });
          }
          editType(e, t, s) {
            t.setLoading("actionfield", !0, s),
              o.N.post("admin/milestones/render_update_type/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new C(f.Edit, e);
                  (o.onSuccess = (e) => this.refreshContent()), o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), p.Z.handleError(e);
                });
          }
          deleteType(e, t) {
            let s = t.data("name"),
              i = new r.A(
                n.Z.lang("milestones.delete_type_title"),
                n.Z.langEscape("milestones.delete_type_message", { name: s }),
                n.Z.lang("milestones.delete_type_button")
              );
            (i.onSuccess = () =>
              o.N.post("admin/milestones/delete_type/" + e).then(() =>
                this.refreshContent()
              )),
              i.show();
          }
          refreshContent() {
            return o.N.postReplace(
              "admin/milestones/render_type_table",
              this.typesContainerTarget
            ).catch((e) => {
              p.Z.handleError(e);
            });
          }
        }
        b(I, "targets", ["responsiveContainer", "addButton", "typesContainer"]);
      },
      93223: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => C });
        var i = s(26454),
          o = s(13814),
          n = s(43689),
          r = s(62612),
          a = s(15192),
          l = s(15612),
          d = s(47914),
          h = s(50609),
          c = s(7042),
          u = s(96622);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends h.V {
          constructor() {
            super("admin.projects.defaults_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: d.X.BodyMinWidth,
            });
          }
          doSave() {
            u.UI.markLoading(this.$saveButton),
              c.l.hideValidationErrors(this.formViews);
            let e = {};
            const t = u.UI.getDropdownIntOrNull(this.$defaultAccess);
            t < 0
              ? ((e.default_access = -t), (e.default_role_id = null))
              : ((e.default_access = l.g.ProjectsAccessRole),
                (e.default_role_id = t)),
              o.N.post("admin/projects/set_defaults", o.N.toNetworkCase(e))
                .then((e) =>
                  this.triggerSuccess(e.data).then(() => {
                    u.UI.markCompleted(this.$saveButton);
                  })
                )
                .catch((e) => {
                  u.UI.markCompleted(this.$saveButton),
                    c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
          }
        }
        g(p, "forms", [
          {
            name: "settings",
            fields: [
              "defaultAccess",
              "repositories",
              "repositoriesSingle",
              "repositoriesBaselines",
            ],
          },
        ]),
          g(p, "targets", ["saveButton"]),
          g(p, "actions", ["doSave"]);
        var m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends i.v {
          constructor(...e) {
            super(...e),
              f(this, "doCancelSearch", (e) => {
                this.components.searchBar.setInputLoading(!0),
                  this.refreshContent(!1, !0).then(() => {
                    this.components.searchBar.setInputLoading(!1);
                  });
              }),
              f(this, "doSearch", () => {
                this.components.searchBar.setInputLoading(!0),
                  this.refreshContent(!0, !0).then(() => {
                    this.components.searchBar.setInputLoading(!1);
                  });
              }),
              f(this, "doProjectsActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editProject(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteProject(e.id, e.$row);
                }
              }),
              f(this, "doActiveProjectsStateChange", (e) => {
                this.stateChanged(
                  e,
                  this.components.activeProjects,
                  this.activeProjectsContainerTarget,
                  !1
                );
              }),
              f(this, "doCompletedProjectsStateChange", (e) => {
                this.stateChanged(
                  e,
                  this.components.completedProjects,
                  this.completedProjectsContainerTarget,
                  !0
                );
              });
          }
          load() {
            u.UI.initialize(this.element),
              (this.$addButton = $(this.addButtonTarget)),
              (this.$configureDefaultsButton = $(
                this.configureDefaultsButtonTarget
              )),
              this.hasEmptyAddButtonTarget &&
                (this.$emptyAddButton = $(this.emptyAddButtonTarget)),
              m.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                },
              }),
              m.Z.requestChild(this.component, "activeProjects", {
                events: {
                  statechange: this.doActiveProjectsStateChange,
                  actionclick: this.doProjectsActionClick,
                },
              }),
              m.Z.requestChild(this.component, "completedProjects", {
                events: {
                  statechange: this.doCompletedProjectsStateChange,
                  actionclick: this.doProjectsActionClick,
                },
              });
          }
          doEmptyAddProject() {
            this.addProject(this.$emptyAddButton);
          }
          doAddProject() {
            this.addProject(this.$addButton);
          }
          addProject(e) {
            u.UI.markLoading(e),
              o.N.post("admin/projects/render_create")
                .then((t) => {
                  u.UI.markCompleted(e);
                  const s = new a.q(a.G.Add);
                  (s.onSuccess = (e) =>
                    this.refreshContent().then(() => {
                      this.components.searchBar.setEnabled(!0);
                    })),
                    s.show(t.data);
                })
                .catch((t) => {
                  u.UI.markCompleted(e), m.Z.handleError(t);
                });
          }
          doConfigureDefaults() {
            u.UI.markLoading(this.$configureDefaultsButton),
              o.N.post("admin/projects/render_defaults")
                .then((e) => {
                  u.UI.markCompleted(this.$configureDefaultsButton),
                    new p().show(e.data);
                })
                .catch((e) => {
                  u.UI.markCompleted(this.$configureDefaultsButton),
                    m.Z.handleError(e);
                });
          }
          deleteProject(e, t) {
            let s = t.data("name"),
              i = new r.A(
                n.Z.lang("projects.delete_title"),
                n.Z.langEscape("projects.delete_message", { name: s }),
                n.Z.lang("projects.delete_button"),
                n.Z.langEscape("projects.delete_confirmation", { name: s }),
                { htmlWarning: n.Z.lang("projects.delete_warning") }
              );
            (i.onSuccess = () =>
              o.N.post("admin/projects/delete/" + e).then(() =>
                this.refreshContent()
              )),
              i.show();
          }
          editProject(e, t, s) {
            t.setLoading("actionfield", !0, s),
              o.N.post("admin/projects/render_update/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new a.q(a.G.Edit, e);
                  (o.onSuccess = (e) => this.refreshContent()), o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), m.Z.handleError(e);
                });
          }
          refreshContent(e = !1, t = !1) {
            let s = {
              forceActive: "activeProjects" in this.components || e,
              forceCompleted: "completedProjects" in this.components,
            };
            if ("activeProjects" in this.components) {
              let e = o.N.toNetworkCase(
                this.components.activeProjects.getState()
              );
              t && delete e.pagination_current,
                this.components.searchBar.getHasSearched() &&
                  (e.search = this.components.searchBar.getSearchTerm()),
                (s.active = e);
            }
            if ("completedProjects" in this.components) {
              let e = o.N.toNetworkCase(
                this.components.completedProjects.getState()
              );
              t && delete e.pagination_current,
                this.components.searchBar.getHasSearched() &&
                  (e.search = this.components.searchBar.getSearchTerm()),
                (s.completed = e);
            }
            return o.N.postReplace(
              "admin/projects/render_tables",
              this.contentContainerTarget,
              o.N.toNetworkCase(s)
            ).catch((e) => {
              m.Z.handleError(e);
            });
          }
          stateChanged(e, t, s, i) {
            t.setLoading(e.loading, !0, e.column);
            let n = e.state;
            (n.isCompleted = i),
              this.components.searchBar.getHasSearched() &&
                (n.search = this.components.searchBar.getSearchTerm()),
              o.N.postReplace(
                "admin/projects/render_table",
                s,
                o.N.toNetworkCase(n)
              ).catch((s) => {
                t.setLoading(e.loading, !1, e.column), m.Z.handleError(s);
              });
          }
        }
        f(C, "targets", [
          "responsiveContainer",
          "activeProjectsContainer",
          "completedProjectsContainer",
          "contentContainer",
          "addButton",
          "emptyAddButton",
          "configureDefaultsButton",
        ]);
      },
      33971: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => f });
        var i = s(26454),
          o = s(13814),
          n = s(43689),
          r = s(62612),
          a = s(50609),
          l = s(96622),
          d = s(7042),
          h = s(14589),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class p extends a.V {
          constructor(e = p.Add, t = null) {
            super("admin.roles.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              (this.mode = e),
              (this.roleId = t);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              c.Z.requestChild(this.component, "permissions");
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            l.UI.markLoading(this.$submitButton),
              d.l.hideValidationErrors(this.formViews);
            let t = this.components.permissions.getCheckboxes("permission", !0),
              s = 0;
            t.each((e, t) => {
              let i = parseInt(l.UI.getCheckboxValue($(t)), 10);
              s += i;
            });
            let i = { name: l.UI.getText(this.$name), permissions: s };
            this.mode == g.Edit &&
              ((i.updatedAt = this.updatedAt), (i.forceUpdate = e));
            let n =
              this.mode == g.Add
                ? "admin/roles/create"
                : "admin/roles/update/" + this.roleId;
            o.N.post(n, o.N.toNetworkCase(i))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  l.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                h.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      d.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    l.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        u(p, "forms", [{ name: "role", fields: ["name"] }]),
          u(p, "targets", ["submitButton"]),
          u(p, "actions", ["doSubmit"]);
        class f extends i.v {
          constructor(...e) {
            super(...e),
              m(this, "doToggleChange", (e) => {
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s = t.getToggles("default", !0).not(e.$toggle);
                l.UI.setCheckbox(s, !1),
                  l.UI.toggleCheckboxEnabled(s, !0),
                  l.UI.toggleCheckboxEnabled(e.$toggle, !1),
                  l.UI.toggleCheckboxEnabled(s, !0),
                  l.UI.toggleCheckboxEnabled(e.$toggle, !1),
                  o.N.post("admin/roles/set_default/" + e.id)
                    .then((i) => {
                      t.setLoading("field", !1, e.$field),
                        t.toggleActionVisible(e.$row, "delete", !1),
                        t.toggleActionVisible(s.closest("tr"), "delete", !0),
                        l.UI.blurCheckbox(e.$toggle);
                    })
                    .catch((i) => {
                      l.UI.setCheckbox(s, !0),
                        l.UI.setCheckbox(e.$toggle, !1),
                        l.UI.toggleCheckboxEnabled(s, !1),
                        l.UI.toggleCheckboxEnabled(e.$toggle, !0),
                        t.setLoading("field", !1, e.$field),
                        c.Z.handleError(i);
                    });
              }),
              m(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editRole(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteRole(e.id, e.$row);
                }
              });
          }
          load() {
            l.UI.initialize(this.element),
              (this.$addButton = $(this.addButtonTarget)),
              c.Z.requestChild(this.component, "roles", {
                events: {
                  actionclick: this.doActionClick,
                  togglechange: this.doToggleChange,
                },
              });
          }
          unload() {}
          doAdd() {
            l.UI.markLoading(this.$addButton),
              o.N.post("admin/roles/render_create")
                .then((e) => {
                  l.UI.markCompleted(this.$addButton);
                  const t = new p(g.Add);
                  (t.onSuccess = (e) => this.refreshContent()), t.show(e.data);
                })
                .catch((e) => {
                  l.UI.markCompleted(this.$addButton), c.Z.handleError(e);
                });
          }
          editRole(e, t, s) {
            t.setLoading("actionfield", !0, s),
              o.N.post("admin/roles/render_update/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new p(g.Edit, e);
                  (o.onSuccess = (e) => this.refreshContent()), o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), c.Z.handleError(e);
                });
          }
          deleteRole(e, t) {
            let s = t.data("name"),
              i = new r.A(
                n.Z.lang("users.delete_role_title"),
                n.Z.langEscape("users.delete_role_message", { name: s }),
                n.Z.lang("users.delete_role_button")
              );
            (i.onSuccess = () =>
              o.N.post("admin/roles/delete/" + e).then(() =>
                this.refreshContent()
              )),
              i.show();
          }
          refreshContent() {
            return o.N.postReplace(
              "admin/roles/render_table",
              this.rolesContainerTarget
            ).catch((e) => {
              c.Z.handleError(e);
            });
          }
        }
        m(f, "targets", ["responsiveContainer", "addButton", "rolesContainer"]);
      },
      92738: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.v {
          constructor(...e) {
            super(...e),
              a(this, "doNotificationsChange", () => {
                this.changeDropdownOption(
                  this.$notifications,
                  "notifications",
                  !0
                );
              }),
              a(this, "doNotificationEmailsChange", () => {
                this.changeCheckboxOption(
                  this.$notificationEmails,
                  "notificationEmails"
                );
              }),
              a(this, "doHoursPerDayChange", () => {
                this.changeDropdownOption(this.$hoursPerDay, "hoursPerDay", !0);
              }),
              a(this, "doDaysPerWeekChange", () => {
                this.changeDropdownOption(this.$daysPerWeek, "daysPerWeek", !0);
              }),
              a(this, "doTimezoneChange", () => {
                this.changeDropdownOption(this.$timezone, "timezone");
              }),
              a(this, "doDateFormatChange", () => {
                this.changeDropdownOption(this.$dateFormat, "dateFormat");
              }),
              a(this, "doTimeFormatChange", () => {
                this.changeDropdownOption(this.$timeFormat, "timeFormat");
              }),
              a(this, "doSessionTimeoutChange", () => {
                this.changeDropdownOption(
                  this.$sessionTimeout,
                  "sessionTimeout",
                  !0
                );
              }),
              a(this, "doApiChange", () => {
                this.changeDropdownOption(this.$api, "api", !0);
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$notificationEmails = $(this.notificationEmailsTarget)),
              (this.$notifications = $(this.notificationsTarget)),
              (this.$timezone = $(this.timezoneTarget)),
              (this.$dateFormat = $(this.dateFormatTarget)),
              (this.$hoursPerDay = $(this.hoursPerDayTarget)),
              (this.$daysPerWeek = $(this.daysPerWeekTarget)),
              (this.$timeFormat = $(this.timeFormatTarget)),
              (this.$sessionTimeout = $(this.sessionTimeoutTarget)),
              (this.$api = $(this.apiTarget)),
              n.UI.onCheckboxChange(
                this.$notificationEmails,
                this.doNotificationEmailsChange
              ),
              n.UI.onDropdownChangeHide(
                this.$notifications,
                this.doNotificationsChange
              ),
              n.UI.onDropdownChangeHide(this.$timezone, this.doTimezoneChange),
              n.UI.onDropdownChangeHide(
                this.$dateFormat,
                this.doDateFormatChange
              ),
              n.UI.onDropdownChangeHide(
                this.$timeFormat,
                this.doTimeFormatChange
              ),
              n.UI.onDropdownChangeHide(
                this.$hoursPerDay,
                this.doHoursPerDayChange
              ),
              n.UI.onDropdownChangeHide(
                this.$daysPerWeek,
                this.doDaysPerWeekChange
              ),
              n.UI.onDropdownChangeHide(
                this.$sessionTimeout,
                this.doSessionTimeoutChange
              ),
              n.UI.onDropdownChangeHide(this.$api, this.doApiChange);
          }
          unload() {
            n.UI.offCheckboxChange(
              this.$notificationEmails,
              this.doNotificationEmailsChange
            ),
              n.UI.offDropdownChangeHide(
                this.$notifications,
                this.doNotificationsChange
              ),
              n.UI.offDropdownChangeHide(this.$timezone, this.doTimezoneChange),
              n.UI.offDropdownChangeHide(
                this.$dateFormat,
                this.doDateFormatChange
              ),
              n.UI.offDropdownChangeHide(
                this.$timeFormat,
                this.doTimeFormatChange
              ),
              n.UI.offDropdownChangeHide(
                this.$hoursPerDay,
                this.doHoursPerDayChange
              ),
              n.UI.offDropdownChangeHide(
                this.$daysPerWeek,
                this.doDaysPerWeekChange
              ),
              n.UI.offDropdownChangeHide(
                this.$sessionTimeout,
                this.doSessionTimeoutChange
              ),
              n.UI.offDropdownChangeHide(this.$api, this.doApiChange);
          }
          changeDropdownOption(e, t, s = !1) {
            let i = {};
            (i[t] = s ? n.UI.getDropdownIntOrNull(e) : n.UI.getDropdown(e)),
              n.UI.markLoading(e),
              o.N.post("admin/settings/update", o.N.toNetworkCase(i))
                .then((t) => {
                  n.UI.markCompleted(e);
                })
                .catch((t) => {
                  n.UI.markCompleted(e), r.Z.handleError(t);
                });
          }
          changeCheckboxOption(e, t) {
            let s = n.UI.getCheckbox(e);
            n.UI.markParentLoading(e);
            let i = {};
            (i[t] = s),
              o.N.post("admin/settings/update", o.N.toNetworkCase(i))
                .then((t) => {
                  n.UI.markParentCompleted(e);
                })
                .catch((t) => {
                  n.UI.setCheckbox(e, !s),
                    n.UI.markParentCompleted(e),
                    r.Z.handleError(t);
                });
          }
        }
        a(l, "targets", [
          "notificationEmails",
          "notifications",
          "timezone",
          "dateFormat",
          "timeFormat",
          "sessionTimeout",
          "hoursPerDay",
          "daysPerWeek",
          "api",
        ]);
      },
      9e4: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => C });
        var i = s(26454),
          o = s(13814),
          n = s(47914),
          r = s(50609),
          a = s(96622),
          l = s(7042),
          d = s(14589),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends r.V {
          constructor(e) {
            super("admin.statuses.edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: n.X.BodyMinWidth,
            }),
              c(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              c(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  a.UI.getRadioEnabled(this.$includeSelected) &&
                  a.UI.setRadio(this.$includeSelected, !0);
              }),
              (this.statusId = e);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              h.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              h.Z.requestChild(this.component, "projects", {
                events: { selectionchange: this.doProjectsSelectionChange },
              }),
              h.Z.requestChild(this.component, "colorInput");
          }
          unload() {}
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            a.UI.markLoading(this.$submitButton),
              l.l.hideValidationErrors(this.formViews);
            let t = a.UI.getText(this.$aliases)
                .trim()
                .split(",")
                .map((e) => e.trim().toLowerCase())
                .filter((e) => e.length > 0),
              s = {
                name: a.UI.getText(this.$name),
                color: this.components.colorInput.getColor(),
                isActive: a.UI.getCheckbox(this.$isActive),
                isPassed: a.UI.getCheckbox(this.$isPassed),
                isFailed: a.UI.getCheckbox(this.$isFailed),
                isFinal: a.UI.getCheckbox(this.$isFinal),
                includeAll: a.UI.getRadio(this.$includeAll),
                forCases: a.UI.getCheckbox(this.$forCases),
                forSessions: a.UI.getCheckbox(this.$forSessions),
                forAutomation: a.UI.getCheckbox(this.$forAutomation),
                aliases: t,
                projects: this.components.projects
                  ? this.components.projects.getSelectedIds()
                  : [],
                updatedAt: this.updatedAt,
                forceUpdate: e,
              },
              i = "admin/statuses/update/" + this.statusId;
            o.N.post(i, o.N.toNetworkCase(s))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  a.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                d.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      l.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    a.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        c(u, "forms", [
          {
            name: "status",
            fields: [
              "name",
              "aliases",
              "color",
              "isActive",
              "isPassed",
              "isFailed",
              "isFinal",
            ],
          },
          {
            name: "scope",
            fields: ["forCases", "forSessions", "forAutomation"],
          },
          {
            name: "projects",
            fields: ["includeAll", "includeSelected", "projects"],
          },
        ]),
          c(u, "targets", ["submitButton"]),
          c(u, "actions", ["doSubmit"]);
        var g = s(69555),
          p = s(48995),
          m = s(43689);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends i.v {
          constructor(...e) {
            super(...e),
              f(this, "doActionClick", (e) => {
                "edit" === e.actionName &&
                  this.editStatus(e.id, e.target, e.$field);
              }),
              f(this, "doToggleChange", (e) => {
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s,
                  i = a.UI.getCheckbox(e.$toggle);
                (s = i ? "admin/statuses/enable/" : "admin/statuses/disable/"),
                  o.N.post(s + e.id)
                    .then((s) => {
                      t.setLoading("field", !1, e.$field);
                    })
                    .catch((s) => {
                      a.UI.setCheckbox(e.$toggle, !i),
                        t.setLoading("field", !1, e.$field),
                        this.handleToggleError(s, e.$toggle, i);
                    });
              });
          }
          load() {
            a.UI.initialize(this.element),
              h.Z.requestChild(this.component, "statuses", {
                events: {
                  actionclick: this.doActionClick,
                  togglechange: this.doToggleChange,
                },
              });
          }
          editStatus(e, t, s) {
            t.setLoading("actionfield", !0, s),
              o.N.post("admin/statuses/render_update/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new u(e);
                  (o.onSuccess = (e) => this.refreshContent()), o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), h.Z.handleError(e);
                });
          }
          refreshContent() {
            return o.N.postReplace(
              "admin/statuses/render_table",
              this.statusesContainerTarget
            ).catch((e) => {
              h.Z.handleError(e);
            });
          }
          handleToggleError(e, t, s) {
            l.l.handleCustomMessageError(e, (e) => {
              new p.u(
                p.Y.Negative,
                s
                  ? m.Z.lang("statuses.enable_error_title")
                  : m.Z.lang("statuses.disable_error_title"),
                m.Z.htmlEscape(e)
              ).show(t, g.Fz.BottomLeft);
            });
          }
        }
        f(C, "targets", ["responsiveContainer", "statusesContainer"]);
      },
      79643: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(26454),
          o = s(96622);
        const n = class extends i.v {
          load() {
            o.UI.initialize(this.element);
          }
          unload() {}
        };
      },
      4350: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => G });
        var i,
          o,
          n,
          r = s(26454),
          a = s(96622),
          l = s(13814),
          d = s(43689),
          h = s(47914),
          c = s(15612),
          u = s(50609);
        class g extends u.V {
          constructor(e) {
            super("product.seat_limit_dialog", {
              width: 480,
              variant: "negative",
            }),
              (this.message = e);
          }
          load() {
            this.$message.text(this.message);
          }
        }
        (n = ["message"]),
          (o = "targets") in (i = g)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
        class p {
          static handleSeatLimit(e) {
            return (
              !!(
                e.response &&
                e.response.status == h.X.ForbiddenError &&
                e.response.data.message &&
                e.response.data.code &&
                e.response.data.code == c.g.Errors403UserSeatLimit
              ) && (new g(e.response.data.message).show(), !0)
            );
          }
        }
        var m = s(69555),
          f = s(16087),
          C = s(24850);
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class I extends u.V {
          constructor(e = !1) {
            super("admin.users.forget_dialog", {
              width: 580,
              variant: "negative",
            }),
              b(this, "doChoiceChange", () => {
                a.UI.getRadio(this.$disableChoice)
                  ? (this.$disableButton.show(), this.$forgetButton.hide())
                  : (this.$disableButton.hide(), this.$forgetButton.show());
              }),
              (this.multipleUsers = e);
          }
          load() {
            this.$forgetButton.hide(),
              this.multipleUsers &&
                (this.$title.text(d.Z.lang("users.forget_title_multi")),
                this.$disableButton.text(
                  d.Z.lang("users.forget_disable_button_multi")
                ),
                this.$forgetButton.text(
                  d.Z.lang("users.forget_forget_button_multi")
                ),
                a.UI.setRadioLabel(
                  this.$disableChoice,
                  d.Z.lang("users.forget_choice_disable_multi")
                ),
                a.UI.setRadioLabel(
                  this.$forgetChoice,
                  d.Z.lang("users.forget_choice_forget_multi")
                )),
              a.UI.onRadioChange(this.$disableChoice, this.doChoiceChange),
              a.UI.onRadioChange(this.$forgetChoice, this.doChoiceChange);
          }
          unload() {
            a.UI.offRadioChange(this.$disableChoice, this.doChoiceChange),
              a.UI.offRadioChange(this.$forgetChoice, this.doChoiceChange);
          }
          doDisable() {
            this.submit(this.$disableButton);
          }
          doForget() {
            this.submit(this.$forgetButton);
          }
          submit(e) {
            let t = !a.UI.getRadio(this.$disableChoice);
            a.UI.markLoading(e),
              this.triggerSuccess(t).then(() => {
                a.UI.markCompleted(e);
              });
          }
        }
        b(I, "actions", ["doDisable", "doForget"]),
          b(I, "targets", [
            "disableButton",
            "forgetButton",
            "disableChoice",
            "forgetChoice",
            "title",
          ]);
        class w extends m.GI {
          constructor() {
            super("admin.users.stats_popup");
          }
        }
        var v = s(7042);
        function S(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class x {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class k extends u.V {
          constructor(e, t, s = null, i = null) {
            super(
              e == x.Add
                ? "admin.users.add_api_dialog"
                : "admin.users.edit_api_dialog",
              { onSubmitForm: () => this.doSubmit(), width: 500 }
            ),
              (this.userId = t),
              (this.mode = e),
              (this.series = s),
              (this.name = i);
          }
          prepare() {
            this.mode == x.Edit && a.UI.setText(this.$name, this.name);
          }
          doSubmit() {
            a.UI.markLoading(this.$submitButton),
              v.l.hideValidationErrors(this.formViews);
            let e = { name: a.UI.getText(this.$name) };
            this.mode == x.Edit && (e.series = this.series);
            let t =
              this.mode == x.Add
                ? "admin/users/create_api_token/" + this.userId
                : "admin/users/update_api_token/" + this.userId;
            l.N.post(t, e)
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  a.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                a.UI.markCompleted(this.$submitButton),
                  v.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        S(k, "forms", [{ name: "api", fields: ["name"] }]),
          S(k, "targets", ["submitButton"]),
          S(k, "actions", ["doSubmit"]);
        class T extends u.V {
          constructor(e) {
            super("admin.users.generated_api_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 600,
            }),
              (this.bearer = e);
          }
          prepare() {
            this.$bearer.text(this.bearer);
          }
        }
        !(function (e, t, s) {
          t in e
            ? Object.defineProperty(e, t, {
                value: s,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = s);
        })(T, "targets", ["bearer"]);
        var y = s(132),
          E = s(5270);
        function N(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class U extends u.V {
          constructor(e) {
            super("admin.users.manage_api_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              width: 680,
            }),
              N(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "delete":
                    this.doDeleteAction(e);
                    break;
                  case "edit":
                    this.doEditAction(e);
                }
              }),
              (this.userId = e);
          }
          prepare() {
            (this.hasApiTokens = this.params.hasApiTokens),
              this.setActionsVisible(this.hasApiTokens);
          }
          load() {
            E.Z.requestChild(this.component, "keys", {
              events: { actionclick: this.doActionClick },
            });
          }
          doAdd() {
            const e = new k(x.Add, this.userId);
            (e.onSuccess = (e) => {
              let t;
              return (
                this.hasApiTokens
                  ? (t = l.N.postReplace(
                      "admin/users/render_api_table/" + this.userId,
                      this.$apiContainer
                    ))
                  : ((this.hasApiTokens = !0),
                    (t = l.N.postReplace(
                      "admin/users/render_api_content/" + this.userId,
                      this.$contentContainer
                    ).then(() => {
                      this.setActionsVisible(!0),
                        this.rebindAll(),
                        this.refreshPositionIfNeeded();
                    }))),
                t.then(() => {
                  new T(e.bearer).show();
                })
              );
            }),
              e.show();
          }
          doDeleteAction(e) {
            if (a.UI.popupVisible(e.$action)) return;
            const t = new y.l(d.Z.lang("users.api_really_delete_key"));
            (t.onSuccess = () => {
              e.target.setLoading("actionfield", !0, e.$field),
                l.N.post("admin/users/delete_api_token/" + this.userId, {
                  series: e.id,
                })
                  .then((e) =>
                    l.N.postReplace(
                      "admin/users/render_api_table/" + this.userId,
                      this.$apiContainer
                    )
                  )
                  .catch((t) => {
                    e.target.setLoading("actionfield", !1, e.$field),
                      E.Z.handleError(t);
                  });
            }),
              t.show(e.$action, m.Fz.BottomRight);
          }
          doEditAction(e) {
            const t = new k(x.Edit, this.userId, e.id, e.$row.data("name"));
            (t.onSuccess = (e) =>
              l.N.postReplace(
                "admin/users/render_api_table/" + this.userId,
                this.$apiContainer
              )),
              t.show();
          }
        }
        function F(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        N(U, "targets", ["apiContainer", "contentContainer"]),
          N(U, "actions", ["doAdd"]);
        class A extends u.V {
          constructor(e, t = !1) {
            super("admin.users.unforget_dialog", {
              onSubmitForm: () => {
                this.doUnforget();
              },
              width: 580,
            }),
              F(this, "classes", { required: "required" }),
              (this.userId = e),
              (this.isApi = t);
          }
          load() {
            this.isApi &&
              (a.UI.setTextPlaceholder(
                this.$email,
                d.Z.lang("users.add_edit_email_api_desc")
              ),
              this.$emailField.removeClass(this.classes.required));
          }
          doUnforget() {
            a.UI.markLoading(this.$unforgetButton),
              v.l.hideValidationErrors(this.formViews);
            let e = {
              name: a.UI.getText(this.$name),
              email: a.UI.getText(this.$email),
            };
            l.N.post(
              "admin/users/unforget/" + this.userId,
              l.N.toNetworkCase(e)
            )
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  a.UI.markCompleted(this.$unforgetButton);
                })
              )
              .catch((e) => {
                a.UI.markCompleted(this.$unforgetButton),
                  v.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        F(A, "forms", [
          { name: "unforget", fields: ["name", "email", "emailField"] },
        ]),
          F(A, "actions", ["doUnforget"]),
          F(A, "targets", ["unforgetButton"]);
        var P = s(14589);
        function R(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class M {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class B extends u.V {
          constructor(e = B.Add, t = !1, s = null) {
            super("admin.users.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: h.X.SplitDialogWidth,
            }),
              R(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              R(this, "doInvitationChanged", (e) => {
                e.value
                  ? this.$submitButton.text(d.Z.lang("users.add_submit"))
                  : this.$submitButton.text(
                      d.Z.lang("users.add_submit_no_invitation")
                    );
              }),
              (this.mode = e),
              (this.isApi = t),
              (this.userId = s);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              E.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              E.Z.requestChild(this.component, "invitation", {
                events: { change: this.doInvitationChanged },
              });
          }
          unload() {}
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            a.UI.markLoading(this.$submitButton),
              v.l.hideValidationErrors(this.formViews);
            let t = a.UI.getDropdownIntOrNull(this.$notifications),
              s = a.UI.getDropdown(this.$timezone),
              i = a.UI.getDropdown(this.$dateFormat),
              o = a.UI.getDropdown(this.$timeFormat),
              n = a.UI.getDropdownInts(this.$groups) || [];
            n = n.map((e) => parseInt(e, 10));
            let r = {
              name: a.UI.getText(this.$name),
              email: a.UI.getText(this.$email),
              type: a.UI.getDropdownIntOrNull(this.$type),
              roleId: a.UI.getDropdownIntOrNull(this.$roleId),
              groups: n,
              isActive: a.UI.getCheckbox(this.$isActive),
              notifications: -1 == t ? null : t,
              timezone: -1 == s ? null : s,
              dateFormat: -1 == i ? null : i,
              timeFormat: -1 == o ? null : o,
            };
            if ("invitation" in this.components) {
              let e = this.components.invitation.getValue();
              e && (r.invite = e);
            }
            this.isApi && (r.isApi = !0),
              this.mode == M.Edit &&
                ((r.updatedAt = this.updatedAt), (r.forceUpdate = e));
            let d =
              this.mode == M.Add
                ? "admin/users/create"
                : "admin/users/update/" + this.userId;
            l.N.post(d, l.N.toNetworkCase(r))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  a.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                P.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      p.handleSeatLimit(e) ||
                        v.l.handleTabbedFormError(
                          e,
                          this.formViews,
                          this.components.tabs
                        ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    a.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        R(B, "forms", [
          {
            name: "details",
            fields: ["name", "email", "isActive", "type", "roleId", "groups"],
          },
          {
            name: "settings",
            fields: ["notifications", "timezone", "dateFormat", "timeFormat"],
          },
        ]),
          R(B, "targets", ["submitButton"]),
          R(B, "actions", ["doSubmit"]);
        var D = s(48995);
        function L(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class Z extends u.V {
          constructor(e) {
            super("admin.users.import_dialog", {
              onSubmitForm: () => {
                this.doImport();
              },
              width: h.X.BodyMinWidth,
            }),
              L(this, "templates", {
                errorTemplate:
                  '<li><a data-index="$(index)">$(lang) $(index)</a>: $(error)</li>',
              }),
              L(this, "selectors", {
                errorLinks: ".message-block--negative a",
              }),
              L(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              L(this, "formatError", (e, t) => {
                let s = e.match(/(\d+)/);
                return (
                  !!s &&
                  d.Z.template(this.templates.errorTemplate, {
                    index: parseInt(s[0], 10) + 1,
                    error: t,
                    lang: d.Z.lang("users.import_users_error_user"),
                  })
                );
              }),
              L(this, "sortError", (e, t) => {
                let s = 0,
                  i = 0,
                  o = e.match(/(\d+)/),
                  n = t.match(/(\d+)/);
                return (
                  o && (s = parseInt(o[0], 10)),
                  n && (i = parseInt(n[0], 10)),
                  s < i ? -1 : s > i ? 1 : 0
                );
              }),
              L(this, "doSelectError", (e) => {
                let t = $(e.currentTarget).data("index");
                t && a.UI.selectAndScrollText(this.$users, t - 1);
              }),
              (this.importUserLimit = e);
          }
          cleanupUsers() {
            let e = a.UI.getText(this.$users);
            (e = d.Z.removeWhitespaceFromTextList(e)),
              a.UI.setText(this.$users, e);
          }
          parseUsers(e) {
            return d.Z.splitTextList(e).map((e) => {
              let t = { email: null, name: null },
                s = e.split(",");
              return (
                s.length > 0 && (t.email = s[0].trim()),
                s.length > 1 && (t.name = s[1].trim()),
                t
              );
            });
          }
          doImport() {
            if (a.UI.popupVisible(this.$importButton)) return;
            v.l.hideValidationErrors(this.formViews), this.cleanupUsers();
            let e = this.parseUsers(a.UI.getText(this.$users));
            if (e.length > this.importUserLimit)
              return void new D.u(
                D.Y.Negative,
                d.Z.lang("users.add_many_limit_reached_title"),
                d.Z.lang("users.add_many_limit_reached_message", {
                  limit: c.g.AddManyUsersLimit,
                })
              ).show(this.$importButton, m.Fz.TopRight);
            a.UI.markLoading(this.$importButton);
            let t = a.UI.getDropdownInts(this.$groups);
            t = t.map((e) => parseInt(e, 10));
            let s = {
              users: e,
              type: a.UI.getDropdownIntOrNull(this.$type),
              roleId: a.UI.getDropdownIntOrNull(this.$roleId),
              groups: t,
            };
            l.N.post(
              "admin/users/render_create_many_users",
              l.N.toNetworkCase(s)
            )
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  a.UI.markCompleted(this.$importButton);
                })
              )
              .catch((e) => {
                a.UI.markCompleted(this.$importButton),
                  v.l.handleFormError(
                    e,
                    this.formViews,
                    this.sortError,
                    this.formatError
                  ),
                  $(this.selectors.errorLinks, this.$dialog).on(
                    "click",
                    this.doSelectError
                  ),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        L(Z, "forms", [
          { name: "import", fields: ["users", "type", "roleId", "groups"] },
        ]),
          L(Z, "targets", ["importButton"]),
          L(Z, "actions", ["doImport"]);
        var j = s(11802);
        function z(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class V extends u.V {
          constructor(e) {
            super("admin.users.add_many_progress_dialog", {
              width: h.X.BodyMinWidth,
              hideOnESC: !1,
            }),
              z(this, "templates", {
                successEntry:
                  '<li class="admin-users-add-many-progress-box-success"><span\n            class="fa-li" ><i class="fas fa-check"></i></span>\n            <strong>$(name):</strong> $(message)</li>',
                errorEntry:
                  '<li class="admin-users-add-many-progress-box-error"><span\n            class="fa-li" ><i class="fas fa-times"></i></span>\n            <strong>$(name):</strong> $(message)</li>',
                progressCaption: "$(count)/$(total)",
              }),
              z(this, "classes", {
                hasErrors: "admin-users-add-many-progress-box--has-errors",
              }),
              (this.users = e),
              (this.total = e.length),
              (this.processed = 0),
              (this.errorCount = 0),
              (this.hadNonValidationError = !1),
              (this.cancelled = !1),
              (this.inProgress = !1),
              (this.hasLogEntries = !1);
          }
          load() {
            E.Z.requestChild(this.component, "progress", {
              onAdded: () => {
                this.updateProgress();
              },
            });
          }
          unload() {}
          processUsers() {
            0 != this.total &&
              (a.UI.markLoading(this.$closeButton),
              E.Z.setBlockingRequests(!1),
              (this.inProgress = !0),
              this.users
                .reduce(
                  (e, t) =>
                    e.then(() =>
                      this.cancelled
                        ? Promise.resolve()
                        : l.N.post(
                            "admin/users/create",
                            l.N.toNetworkCase(t.data)
                          )
                            .then(() => {
                              this.addSuccess(t);
                            })
                            .then(
                              () =>
                                new Promise(function (e, t) {
                                  setTimeout(function () {
                                    e();
                                  }, 200);
                                })
                            )
                            .catch((e) => {
                              if (p.handleSeatLimit(e))
                                return (
                                  (this.cancelled = !0),
                                  void (this.hadNonValidationError = !0)
                                );
                              v.l.handleCustomFormError(e, (e, s) => {
                                this.addError(t, s);
                              }) ||
                                ((this.cancelled = !0),
                                (this.hadNonValidationError = !0));
                            })
                    ),
                  Promise.resolve()
                )
                .then(() => {
                  E.Z.setBlockingRequests(!0),
                    (this.inProgress = !1),
                    this.updateCompleted();
                }));
          }
          addSuccess(e) {
            const t = d.Z.template(this.templates.successEntry, {
              name: e.data.name,
              message: d.Z.lang("users.add_many_progress_success"),
            });
            this.addProcessed(t),
              this.events.trigger("added", { target: this, user: e });
          }
          addError(e, t) {
            const s = d.Z.template(this.templates.errorEntry, {
              name: e.data.name,
              message: t.join(" "),
            });
            (this.errorCount += 1), this.addProcessed(s);
          }
          addProcessed(e) {
            this.$usersList.append(e),
              this.scrollToBottom(),
              (this.hasLogEntries = !0),
              (this.processed += 1),
              this.updateProgress();
          }
          updateProgress() {
            let e = d.Z.template(this.templates.progressCaption, {
              count: this.processed,
              total: this.total,
            });
            this.components.progress.setProgress(this.processed, this.total, e);
          }
          scrollToBottom() {
            a.UI.scrollToBottom(this.$usersBox);
          }
          updateCompleted() {
            a.UI.setButtonDisabled(this.$cancelButton),
              a.UI.setButtonEnabled(this.$closeButton),
              a.UI.markCompleted(this.$cancelButton),
              a.UI.markCompleted(this.$closeButton),
              this.hadNonValidationError ||
                this.components.progress.setProgress(this.total, this.total),
              (this.errorCount > 0 || this.hadNonValidationError) &&
                this.$usersBox.addClass(this.classes.hasErrors),
              this.hasLogEntries || this.$usersList.remove(),
              this.scrollToBottom();
          }
          doClose() {
            a.UI.getButtonEnabled(this.$closeButton) &&
              a.UI.loading(this.$closeButton, () =>
                this.triggerSuccess(this.errorCount)
              );
          }
          doCancel() {
            (this.cancelled = !0),
              a.UI.setButtonDisabled(this.$cancelButton),
              a.UI.markLoading(this.$cancelButton),
              a.UI.markCompleted(this.$closeButton);
          }
          keyDown(e) {
            e.which == j.N.ESC &&
              (this.inProgress
                ? this.cancelled || this.doCancel()
                : this.doClose());
          }
        }
        function O(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        z(V, "targets", [
          "closeButton",
          "cancelButton",
          "usersBox",
          "usersList",
        ]),
          z(V, "actions", ["doClose", "doCancel"]);
        class W extends u.V {
          constructor() {
            super("admin.users.add_many_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              width: 800,
              minHeight: 500,
              resizable: !0,
            }),
              O(this, "templates", {
                errorTemplate:
                  '<li><a data-index="$(index)" data-field="$(field)">$(lang) $(index)</a>: $(error)</li>',
              }),
              O(this, "selectors", {
                errorLinks: ".message-block--negative a",
              }),
              O(this, "doUsersBoxScroll", (e) => {
                a.UI.dropdownHideInContext(this.$usersBox);
              }),
              O(this, "doInvitationChanged", (e) => {
                e.value
                  ? this.$submitButton.text(d.Z.lang("users.add_many_submit"))
                  : this.$submitButton.text(
                      d.Z.lang("users.add_many_submit_no_invitation")
                    );
              }),
              O(this, "formatError", (e, t) => {
                let s = e.match(/(\d+)(.*)/);
                return (
                  !!s &&
                  d.Z.template(this.templates.errorTemplate, {
                    index: parseInt(s[1], 10) + 1,
                    field: s[2],
                    error: t,
                    lang: d.Z.lang("users.add_many_error_user"),
                  })
                );
              }),
              O(this, "sortError", (e, t) => {
                let s = 0,
                  i = 0,
                  o = e.match(/(\d+)/),
                  n = t.match(/(\d+)/);
                return (
                  o && (s = parseInt(o[0], 10)),
                  n && (i = parseInt(n[0], 10)),
                  s < i ? -1 : s > i ? 1 : 0
                );
              }),
              O(this, "doSelectError", (e) => {
                let t = $(e.currentTarget).data("index"),
                  s = $(e.currentTarget).data("field");
                if (!t || !s) return;
                let i = this.components.users.getRows();
                if (t > i.length / 2) return;
                let o = i.slice(2 * (t - 1), 2 * (t - 1) + 2);
                a.UI.getTarget(d.Z.camelcaserize(s), o).focus();
              }),
              O(this, "doUsersActionClick", (e) => {
                switch (e.actionName) {
                  case "delete":
                    this.doUsersDeleteAction(e);
                    break;
                  case "add":
                    this.doUsersAddAction(e);
                }
              });
          }
          load() {
            this.$usersBox.on("scroll", this.doUsersBoxScroll),
              E.Z.requestChild(this.component, "users", {
                events: { actionclick: this.doUsersActionClick },
              }),
              E.Z.requestChild(this.component, "invitation", {
                events: { change: this.doInvitationChanged },
              });
          }
          unload() {
            this.$usersBox.off("scroll", this.doUsersBoxScroll);
          }
          toggleEmpty() {
            let e = !1;
            this.components.users &&
              (e = this.components.users.getRowCount() > 0),
              a.UI.toggleButtonEnabled(this.$submitButton, e),
              this.$emptyPlaceholder.toggle(!e);
          }
          collectUsers() {
            let e = [],
              t = this.components.users.getRows(),
              s = 0,
              i = null;
            "invitation" in this.components &&
              (i = this.components.invitation.getValue());
            for (; s < t.length - 1; ) {
              let o = $(t.get(s)).add($(t.get(s + 1))),
                n = a.UI.getDropdownInts(a.UI.getTarget("groups", o));
              n = n.map((e) => parseInt(e, 10));
              let r = {
                name: a.UI.getText(a.UI.getTarget("name", o)),
                email: a.UI.getText(a.UI.getTarget("email", o)),
                type: a.UI.getDropdownIntOrNull(a.UI.getTarget("type", o)),
                role_id: a.UI.getDropdownIntOrNull(a.UI.getTarget("roleId", o)),
                groups: n,
              };
              i && (r.invite = i), e.push({ data: r, $rows: o }), (s += 2);
            }
            return e;
          }
          doSubmit() {
            a.UI.markLoading(this.$submitButton),
              v.l.hideValidationErrors(this.formViews);
            let e = this.collectUsers(),
              t = e.map((e) => e.data);
            l.N.post("admin/users/check_create_many", t)
              .then((t) => {
                a.UI.markCompleted(this.$submitButton),
                  this.addUsersWithProgress(e);
              })
              .catch((e) => {
                a.UI.markCompleted(this.$submitButton),
                  v.l.handleFormError(
                    e,
                    this.formViews,
                    this.sortError,
                    this.formatError
                  ),
                  $(this.selectors.errorLinks, this.$dialog).on(
                    "click",
                    this.doSelectError
                  ),
                  this.$usersBox.scrollTop(0),
                  this.refreshPositionIfNeeded();
              });
          }
          addUsersWithProgress(e) {
            const t = new V(e);
            t.events.on("added", (e) => {
              this.components.users.removeRows(e.user.$rows),
                e.user.$rows.remove(),
                this.toggleEmpty();
            }),
              (t.onSuccess = (e) =>
                Promise.all(this.events.trigger("change")).then(() => {
                  e ||
                    0 != this.components.users.getRows().length ||
                    this.hide();
                })),
              t.show().then(() => {
                t.processUsers();
              });
          }
          testReachedUserLimit() {
            return (
              this.components.users.getRowCount() / 2 >= c.g.AddManyUsersLimit
            );
          }
          doAddUser() {
            a.UI.popupVisible(this.$addUserButton) ||
              (this.testReachedUserLimit()
                ? new D.u(
                    D.Y.Negative,
                    d.Z.lang("users.add_many_limit_reached_title"),
                    d.Z.lang("users.add_many_limit_reached_message", {
                      limit: c.g.AddManyUsersLimit,
                    })
                  ).show(this.$addUserButton, m.Fz.BottomLeft)
                : (a.UI.markLoading(this.$addUserButton),
                  l.N.post("admin/users/render_create_many_user")
                    .then((e) => {
                      a.UI.markCompleted(this.$addUserButton);
                      let t = this.components.users.getRows().last(),
                        s = $(e.data);
                      t.length > 0 &&
                        this.waitForAndDuplicateSelection(t.add(t.prev()), s),
                        this.components.users.insertRows(s, !0),
                        this.refreshUi(),
                        a.UI.focusText(a.UI.getTarget("name", s)),
                        a.UI.scrollToBottom(this.$usersBox),
                        this.toggleEmpty();
                    })
                    .catch((e) => {
                      a.UI.markCompleted(this.$addUserButton),
                        E.Z.handleError(e);
                    })));
          }
          doImportUsers() {
            a.UI.popupVisible(this.$importUsersButton) ||
              (this.testReachedUserLimit()
                ? new D.u(
                    D.Y.Negative,
                    d.Z.lang("users.add_many_limit_reached_title"),
                    d.Z.lang("users.add_many_limit_reached_message", {
                      limit: c.g.AddManyUsersLimit,
                    })
                  ).show(this.$importUsersButton, m.Fz.BottomLeft)
                : (a.UI.markLoading(this.$importUsersButton),
                  l.N.post("admin/users/render_import")
                    .then((e) => {
                      a.UI.markCompleted(this.$importUsersButton);
                      const t = new Z(
                        c.g.AddManyUsersLimit -
                          this.components.users.getRowCount() / 2
                      );
                      (t.onSuccess = (e) => {
                        let t = $(e);
                        this.components.users.insertRows(t, !0),
                          this.refreshUi(),
                          a.UI.scrollToBottom(this.$usersBox),
                          this.toggleEmpty();
                      }),
                        t.show(e.data);
                    })
                    .catch((e) => {
                      a.UI.markCompleted(this.$importUsersButton),
                        E.Z.handleError(e);
                    })));
          }
          doUsersDeleteAction(e) {
            if (a.UI.popupVisible(e.$action)) return;
            const t = new y.l(d.Z.lang("users.add_many_really_remove"));
            (t.onSuccess = () => {
              let t = e.$row.add(e.$row.next());
              this.components.users.removeRows(t),
                t.remove(),
                this.toggleEmpty();
            }),
              t.show(e.$action, m.Fz.BottomRight);
          }
          doUsersAddAction(e) {
            a.UI.popupVisible(e.$action) ||
              (this.testReachedUserLimit()
                ? new D.u(
                    D.Y.Negative,
                    d.Z.lang("users.add_many_limit_reached_title"),
                    d.Z.lang("users.add_many_limit_reached_message", {
                      limit: c.g.AddManyUsersLimit,
                    })
                  ).show(e.$action, m.Fz.BottomRight)
                : (this.components.users.setLoading(
                    "actionfield",
                    !0,
                    e.$field
                  ),
                  l.N.post("admin/users/render_create_many_user")
                    .then((t) => {
                      this.components.users.setLoading(
                        "actionfield",
                        !1,
                        e.$field
                      );
                      let s = $(t.data);
                      this.waitForAndDuplicateSelection(
                        e.$row.add(e.$row.next()),
                        s
                      ),
                        e.$row.next().after(s),
                        this.components.users.addRows(s, !0),
                        this.refreshUi(),
                        a.UI.focusText(a.UI.getTarget("name", s)),
                        this.toggleEmpty();
                    })
                    .catch((t) => {
                      this.components.users.setLoading(
                        "actionfield",
                        !1,
                        e.$field
                      ),
                        E.Z.handleError(t);
                    })));
          }
          waitForAndDuplicateSelection(e, t) {
            let s = a.UI.getDropdown(a.UI.getTarget("roleId", e)),
              i = a.UI.getDropdown(a.UI.getTarget("type", e)),
              o = a.UI.getDropdown(a.UI.getTarget("groups", e));
            E.Z.waitComponentConnected("roleId", () => {
              a.UI.setDropdown(a.UI.getTarget("roleId", t), s);
            }),
              E.Z.waitComponentConnected("type", () => {
                a.UI.setDropdown(a.UI.getTarget("type", t), i);
              }),
              E.Z.waitComponentConnected("groups", () => {
                a.UI.setDropdown(a.UI.getTarget("groups", t), o);
              });
          }
        }
        function H(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        O(W, "forms", [{ name: "users", fields: [] }]),
          O(W, "targets", [
            "submitButton",
            "addUserButton",
            "importUsersButton",
            "usersBox",
            "emptyPlaceholder",
          ]),
          O(W, "actions", ["doSubmit", "doAddUser", "doImportUsers"]);
        class G extends r.v {
          constructor(...e) {
            super(...e),
              H(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              H(this, "doSearch", () => {
                this.refreshSearch();
              }),
              H(this, "doStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column);
                let t = e.state;
                this.components.searchBar.getHasSearched() &&
                  (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  l.N.postReplace(
                    "admin/users/render_table",
                    this.usersContainerTarget,
                    l.N.toNetworkCase(t)
                  ).catch((t) => {
                    e.target.setLoading(e.loading, !1, e.column),
                      E.Z.handleError(t);
                  });
              }),
              H(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "manageapi":
                    this.manageApi(e.id, e.$field);
                    break;
                  case "edit":
                    this.editUser(e.id, e.$field);
                    break;
                  case "menu":
                    this.showContextMenu(e.id, e.$action, e.$row, e.$field);
                    break;
                  case "selectrole":
                    this.selectRole(e.id, e.$field);
                }
              }),
              H(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "enable":
                    this.toggleUserEnabled(e.context.id, e.context.$field, !0);
                    break;
                  case "disable":
                    this.toggleUserEnabled(e.context.id, e.context.$field, !1);
                    break;
                  case "forget":
                    this.forgetUser(e.context.id);
                    break;
                  case "unforget":
                    this.unforgetUser(e.context.id, e.context.$row);
                    break;
                  case "logout":
                    this.logoutUser(
                      e.context.id,
                      e.context.$action,
                      e.context.$field
                    );
                    break;
                  case "reset":
                    this.resetUser(
                      e.context.id,
                      e.context.$action,
                      e.context.$field
                    );
                    break;
                  case "disable2fa":
                    this.disable2FA(
                      e.context.id,
                      e.context.$action,
                      e.context.$field
                    );
                    break;
                  case "removeavatar":
                    this.removeAvatar(
                      e.context.id,
                      e.context.$action,
                      e.context.$field
                    );
                    break;
                  case "edit":
                    this.editUser(e.context.id, e.context.$field);
                    break;
                  case "manageapi":
                    this.manageApi(e.context.id, e.context.$field);
                }
              }),
              H(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.users.getSelectedIds();
                switch (e.actionName) {
                  case "enable":
                    this.toggleUsersEnabled(t, !0);
                    break;
                  case "disable":
                    this.toggleUsersEnabled(t, !1);
                    break;
                  case "forget":
                    this.forgetUsers(t);
                    break;
                  case "logout":
                    this.logoutUsers(t, e.context.$action);
                    break;
                  case "reset":
                    this.resetUsers(t, e.context.$action);
                    break;
                  case "removeavatar":
                    this.removeAvatars(t, e.context.$action);
                }
              }),
              H(this, "doSelectRoleClick", (e) => {
                e.target.hide(),
                  this.components.users.setMenuLabel(
                    e.context.id,
                    "roleId",
                    $(e.actionItem).text()
                  ),
                  this.components.users.setLoading(
                    "field",
                    !0,
                    e.context.$field
                  ),
                  l.N.post("admin/users/update/" + e.context.id, {
                    role_id: e.actionValue,
                  })
                    .then(() => {
                      this.components.users.setLoading(
                        "field",
                        !1,
                        e.context.$field
                      );
                    })
                    .catch((t) => {
                      this.components.users.setLoading(
                        "field",
                        !1,
                        e.context.$field
                      ),
                        E.Z.handleError(t);
                    });
              }),
              H(this, "doToggleChange", (e) => {
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s,
                  i = a.UI.getCheckbox(e.$toggle);
                (s = i ? "admin/users/enable/" : "admin/users/disable/"),
                  l.N.post(s + e.id)
                    .then((s) => {
                      t.setLoading("field", !1, e.$field);
                    })
                    .catch((s) => {
                      a.UI.setCheckbox(e.$toggle, !i),
                        t.setLoading("field", !1, e.$field),
                        p.handleSeatLimit(s) || E.Z.handleError(s);
                    });
              }),
              H(this, "doFilter", (e) => {
                const t = $(e.button);
                a.UI.popupVisible(t) ||
                  (this.components.searchBar.setFilterLoading(!0),
                  l.N.post(
                    "admin/users/render_filter",
                    l.N.toNetworkCase(this.filter)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new C.y();
                      (s.onSubmit = (e) => this.saveFilter(e.filter)),
                        s.show(t, m.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        E.Z.handleError(e);
                    }));
              }),
              H(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                a.UI.popupVisible(t) && a.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  a.UI.loading(t, () =>
                    this.saveFilter(s).catch((e) => {
                      E.Z.handleError(e);
                    })
                  );
              }),
              H(this, "usersTableAdded", () => {
                let e = this.components.users.getParams();
                this.$statsButtonLabel.text(`${e.userMatches}/${e.userTotal}`),
                  this.components.searchBar.refreshElements();
              });
          }
          load() {
            a.UI.initialize(this.element),
              this.params.filter
                ? (this.filter = this.params.filter)
                : (this.filter = h.X.EmptyFilter),
              (this.roles = this.params.roles),
              (this.userId = this.params.userId),
              (this.$addUserButton = $(this.addUserButtonTarget)),
              (this.$addApiUserButton = $(this.addApiUserButtonTarget)),
              (this.$addUsersButton = $(this.addUsersButtonTarget)),
              (this.$statsButton = $(this.statsButtonTarget)),
              (this.$statsButtonLabel = $(this.statsButtonLabelTarget)),
              E.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  cancelfilter: this.doCancelFilter,
                  filter: this.doFilter,
                },
              }),
              E.Z.requestChild(this.component, "users", {
                onAdded: this.usersTableAdded,
                events: {
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                  togglechange: this.doToggleChange,
                },
              });
          }
          unload() {}
          doAddUser() {
            this.addUser(this.$addUserButton, !1);
          }
          doAddApiUser() {
            this.addUser(this.$addApiUserButton, !0);
          }
          addUser(e, t) {
            a.UI.markLoading(e),
              l.N.post(
                "admin/users/render_create",
                l.N.toNetworkCase({ isApi: t })
              )
                .then((s) => {
                  a.UI.markCompleted(e);
                  const i = new B(M.Add, t);
                  (i.onSuccess = (e) =>
                    this.refreshTable().then(() => {
                      if (t)
                        return l.N.post("admin/users/render_manage_api/" + e.id)
                          .then((t) => {
                            new U(e.id).show(t.data);
                          })
                          .catch((e) => {
                            E.Z.handleError(e);
                          });
                    })),
                    i.show(s.data);
                })
                .catch((t) => {
                  a.UI.markCompleted(e), E.Z.handleError(t);
                });
          }
          doAddUsers() {
            a.UI.markLoading(this.$addUsersButton),
              l.N.post("admin/users/render_create_many")
                .then((e) => {
                  a.UI.markCompleted(this.$addUsersButton);
                  const t = new W();
                  t.events.on("change", () => this.refreshTable(!1)),
                    t.show(e.data);
                })
                .catch((e) => {
                  a.UI.markCompleted(this.$addUsersButton), E.Z.handleError(e);
                });
          }
          refreshSearch(e = !0) {
            e && this.components.searchBar.setInputLoading(!0);
            let t = this.components.users.getState();
            return (
              delete t.paginationCurrent,
              this.components.searchBar.getHasSearched() &&
                (t.search = this.components.searchBar.getSearchTerm()),
              _.keys(this.filter.conditions).length > 0 &&
                (t.filter = this.filter),
              l.N.postReplace(
                "admin/users/render_table",
                this.usersContainerTarget,
                l.N.toNetworkCase(t)
              )
                .then(() => {
                  e && this.components.searchBar.setInputLoading(!1);
                })
                .catch((t) => {
                  e && this.components.searchBar.setInputLoading(!1),
                    E.Z.handleError(t);
                })
            );
          }
          refreshTable(e = !0) {
            let t = this.components.users.getState();
            return (
              e || delete t.paginationCurrent,
              this.components.searchBar.getHasSearched() &&
                (t.search = this.components.searchBar.getSearchTerm()),
              _.keys(this.filter.conditions).length > 0 &&
                (t.filter = this.filter),
              l.N.postReplace(
                "admin/users/render_table",
                this.usersContainerTarget,
                l.N.toNetworkCase(t)
              ).catch((e) => {
                E.Z.handleError(e);
              })
            );
          }
          editUser(e, t) {
            this.components.users.setLoading("actionfield", !0, t),
              l.N.post("admin/users/render_update/" + e)
                .then((s) => {
                  this.components.users.setLoading("actionfield", !1, t);
                  const i = new B(M.Edit, !1, e);
                  (i.onSuccess = (e) => this.refreshTable()), i.show(s.data);
                })
                .catch((e) => {
                  this.components.users.setLoading("actionfield", !1, t),
                    E.Z.handleError(e);
                });
          }
          showContextMenu(e, t, s, i) {
            if (a.UI.popupVisible(t)) return;
            let o = [],
              n = this.components.users.getSelectedRows(),
              r = this.components.users.getSelectedIds();
            if (n.length <= 1 || !_.includes(r, e)) {
              let t = !!s.data("user-tfa"),
                i = !!s.data("user-api"),
                n = !!s.data("user-avatar"),
                r = !!s.data("user-forgotten"),
                l = a.UI.getCheckbox(
                  this.components.users.getToggleCheckbox(e, "isActive")
                ),
                h = e == this.userId;
              i
                ? (o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.edit_user"),
                    name: "edit",
                    callback: this.doContextMenuSingleClick,
                  }),
                  l
                    ? o.push({
                        type: "action",
                        enabled: !r,
                        title: d.Z.lang("users.disable_user"),
                        name: "disable",
                        callback: this.doContextMenuSingleClick,
                      })
                    : o.push({
                        type: "action",
                        enabled: !r,
                        title: d.Z.lang("users.enable_user"),
                        name: "enable",
                        callback: this.doContextMenuSingleClick,
                      }),
                  o.push({ type: "divider" }),
                  r
                    ? o.push({
                        type: "action",
                        title: d.Z.lang("users.unforget_user"),
                        name: "unforget",
                        callback: this.doContextMenuSingleClick,
                      })
                    : o.push({
                        type: "action",
                        title: d.Z.lang("users.forget_user"),
                        name: "forget",
                        callback: this.doContextMenuSingleClick,
                      }),
                  o.push({ type: "divider" }),
                  o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.api_keys"),
                    name: "manageapi",
                    callback: this.doContextMenuSingleClick,
                  }))
                : h
                ? (o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.edit_user"),
                    name: "edit",
                    callback: this.doContextMenuSingleClick,
                  }),
                  o.push({ type: "divider" }),
                  o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.log_out_user"),
                    name: "logout",
                    callback: this.doContextMenuSingleClick,
                  }),
                  o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.send_login_reset"),
                    name: "reset",
                    callback: this.doContextMenuSingleClick,
                  }),
                  o.push({ type: "divider" }),
                  o.push({
                    type: "action",
                    enabled: n,
                    title: d.Z.lang("users.remove_avatar"),
                    name: "removeavatar",
                    callback: this.doContextMenuSingleClick,
                  }))
                : (o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.edit_user"),
                    name: "edit",
                    callback: this.doContextMenuSingleClick,
                  }),
                  l
                    ? o.push({
                        type: "action",
                        enabled: !r,
                        title: d.Z.lang("users.disable_user"),
                        name: "disable",
                        callback: this.doContextMenuSingleClick,
                      })
                    : o.push({
                        type: "action",
                        enabled: !r,
                        title: d.Z.lang("users.enable_user"),
                        name: "enable",
                        callback: this.doContextMenuSingleClick,
                      }),
                  o.push({ type: "divider" }),
                  o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.log_out_user"),
                    name: "logout",
                    callback: this.doContextMenuSingleClick,
                  }),
                  o.push({
                    type: "action",
                    enabled: !r,
                    title: d.Z.lang("users.send_login_reset"),
                    name: "reset",
                    callback: this.doContextMenuSingleClick,
                  }),
                  t &&
                    (o.push({ type: "divider" }),
                    o.push({
                      type: "action",
                      enabled: t,
                      title: d.Z.lang("users.disable_2fa"),
                      name: "disable2fa",
                      callback: this.doContextMenuSingleClick,
                    })),
                  o.push({ type: "divider" }),
                  o.push({
                    type: "action",
                    enabled: n,
                    title: d.Z.lang("users.remove_avatar"),
                    name: "removeavatar",
                    callback: this.doContextMenuSingleClick,
                  }),
                  r
                    ? o.push({
                        type: "action",
                        title: d.Z.lang("users.unforget_user"),
                        name: "unforget",
                        callback: this.doContextMenuSingleClick,
                      })
                    : o.push({
                        type: "action",
                        title: d.Z.lang("users.forget_user"),
                        name: "forget",
                        callback: this.doContextMenuSingleClick,
                      }));
            } else {
              let e = n
                  .get()
                  .reduce((e, t) => e || !!$(t).data("user-api"), !1),
                t = n
                  .get()
                  .reduce((e, t) => e || !!$(t).data("user-avatar"), !1),
                s = n
                  .get()
                  .reduce((e, t) => e || !$(t).data("user-forgotten"), !1),
                i = n
                  .get()
                  .reduce((e, t) => e || !!$(t).data("user-forgotten"), !1),
                r = n.get().reduce((e, t) => {
                  let s = $(t).data("id"),
                    i = this.components.users.getToggleCheckbox(s, "isActive");
                  return e || a.UI.getCheckbox(i);
                }, !1),
                l = n.get().reduce((e, t) => {
                  let s = $(t).data("id");
                  return e || s == this.userId;
                }, !1);
              r
                ? o.push({
                    type: "action",
                    enabled: !l,
                    title: d.Z.lang("users.disable_users"),
                    name: "disable",
                    callback: this.doContextMenuMultipleClick,
                  })
                : o.push({
                    type: "action",
                    enabled: !i && !l,
                    title: d.Z.lang("users.enable_users"),
                    name: "enable",
                    callback: this.doContextMenuMultipleClick,
                  }),
                o.push({ type: "divider" }),
                o.push({
                  type: "action",
                  enabled: !i && !e,
                  title: d.Z.lang("users.log_out_users"),
                  name: "logout",
                  callback: this.doContextMenuMultipleClick,
                }),
                o.push({
                  type: "action",
                  enabled: !i && !e,
                  title: d.Z.lang("users.send_login_resets"),
                  name: "reset",
                  callback: this.doContextMenuMultipleClick,
                }),
                o.push({ type: "divider" }),
                o.push({
                  type: "action",
                  enabled: t,
                  title: d.Z.lang("users.remove_avatars"),
                  name: "removeavatar",
                  callback: this.doContextMenuMultipleClick,
                }),
                o.push({
                  type: "action",
                  enabled: s && !l,
                  title: d.Z.lang("users.forget_users"),
                  name: "forget",
                  callback: this.doContextMenuMultipleClick,
                });
            }
            new f.x(o, {
              context: { id: e, $field: i, $action: t, $row: s },
            }).show(t, m.Fz.BottomLeft);
          }
          manageApi(e, t) {
            this.components.users.setLoading("actionfield", !0, t),
              l.N.post("admin/users/render_manage_api/" + e)
                .then((s) => {
                  this.components.users.setLoading("actionfield", !1, t),
                    new U(e).show(s.data);
                })
                .catch((e) => {
                  this.components.users.setLoading("actionfield", !1, t),
                    E.Z.handleError(e);
                });
          }
          toggleUserEnabled(e, t, s) {
            let i,
              o = this.components.users.getToggleCheckbox(e, "isActive");
            return (
              t && this.components.users.setLoading("actionfield", !0, t),
              a.UI.setCheckbox(o, s),
              (i = s ? "admin/users/enable/" : "admin/users/disable/"),
              l.N.post(i + e)
                .then(() => {
                  t && this.components.users.setLoading("actionfield", !1, t);
                })
                .catch((e) => {
                  t && this.components.users.setLoading("actionfield", !1, t),
                    a.UI.setCheckbox(o, !s),
                    p.handleSeatLimit(e) || E.Z.handleError(e);
                })
            );
          }
          toggleUsersEnabled(e, t, s = !0) {
            let i,
              o = this.components.users.getManyToggleCheckboxes(e, "isActive");
            return (
              s &&
                this.components.users.setManyLoading(
                  e,
                  "actionfield",
                  !0,
                  "menu"
                ),
              a.UI.setCheckbox(o, t),
              (i = t ? "admin/users/enable_many" : "admin/users/disable_many"),
              l.N.post(i, { ids: e })
                .then(() => {
                  s &&
                    this.components.users.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    );
                })
                .catch((i) => {
                  s &&
                    this.components.users.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    ),
                    a.UI.setCheckbox(o, !t),
                    p.handleSeatLimit(i) || E.Z.handleError(i);
                })
            );
          }
          logoutUser(e, t, s) {
            if (a.UI.popupVisible(t)) return;
            const i = new y.l(d.Z.lang("users.really_logout_user"));
            (i.onSuccess = () => {
              this.components.users.setLoading("actionfield", !0, s),
                l.N.post("admin/users/logout/" + e)
                  .then(() => {
                    e == this.userId
                      ? l.N.visit("/")
                      : this.components.users.setLoading("actionfield", !1, s);
                  })
                  .catch((e) => {
                    this.components.users.setLoading("actionfield", !1, s),
                      E.Z.handleError(e);
                  });
            }),
              i.show(t, m.Fz.BottomRight);
          }
          logoutUsers(e, t) {
            if (a.UI.popupVisible(t)) return;
            const s = new y.l(d.Z.lang("users.really_logout_users"));
            (s.onSuccess = () => {
              this.components.users.setManyLoading(
                e,
                "actionfield",
                !0,
                "menu"
              ),
                l.N.post("admin/users/logout_many", { ids: e })
                  .then(() => {
                    _.includes(e, this.userId)
                      ? l.N.visit("/")
                      : this.components.users.setManyLoading(
                          e,
                          "actionfield",
                          !1,
                          "menu"
                        );
                  })
                  .catch((t) => {
                    this.components.users.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    ),
                      E.Z.handleError(t);
                  });
            }),
              s.show(t, m.Fz.BottomRight);
          }
          resetUser(e, t, s) {
            if (a.UI.popupVisible(t)) return;
            const i = new y.l(d.Z.lang("users.really_reset_user"));
            (i.onSuccess = () => {
              this.components.users.setLoading("actionfield", !0, s),
                l.N.post("admin/users/send_login_reset/" + e)
                  .then(() => {
                    this.components.users.setLoading("actionfield", !1, s);
                  })
                  .catch((e) => {
                    this.components.users.setLoading("actionfield", !1, s),
                      E.Z.handleError(e);
                  });
            }),
              i.show(t, m.Fz.BottomRight);
          }
          disable2FA(e, t, s) {
            if (a.UI.popupVisible(t)) return;
            const i = new y.l(d.Z.lang("users.really_disable_2fa"));
            (i.onSuccess = () => {
              this.components.users.setLoading("actionfield", !0, s),
                l.N.post("admin/users/disable_2fa/" + e)
                  .then(() => this.refreshTable())
                  .catch((e) => {
                    this.components.users.setLoading("actionfield", !1, s),
                      E.Z.handleError(e);
                  });
            }),
              i.show(t, m.Fz.BottomRight);
          }
          resetUsers(e, t) {
            if (a.UI.popupVisible(t)) return;
            const s = new y.l(d.Z.lang("users.really_reset_users"));
            (s.onSuccess = () => {
              this.components.users.setManyLoading(
                e,
                "actionfield",
                !0,
                "menu"
              ),
                l.N.post("admin/users/send_login_resets", { ids: e })
                  .then(() => {
                    this.components.users.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    );
                  })
                  .catch((t) => {
                    this.components.users.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    ),
                      E.Z.handleError(t);
                  });
            }),
              s.show(t, m.Fz.BottomRight);
          }
          removeAvatar(e, t, s) {
            if (a.UI.popupVisible(t)) return;
            const i = new y.l(d.Z.lang("users.really_remove_avatar"));
            (i.onSuccess = () => {
              this.components.users.setLoading("actionfield", !0, s),
                l.N.post("admin/users/delete_avatar/" + e)
                  .then(() => this.refreshTable())
                  .catch((e) => {
                    this.components.users.setLoading("actionfield", !1, s),
                      E.Z.handleError(e);
                  });
            }),
              i.show(t, m.Fz.BottomRight);
          }
          removeAvatars(e, t) {
            if (a.UI.popupVisible(t)) return;
            const s = new y.l(d.Z.lang("users.really_remove_avatars"));
            (s.onSuccess = () => {
              this.components.users.setManyLoading(
                e,
                "actionfield",
                !0,
                "menu"
              ),
                l.N.post("admin/users/delete_avatars", { ids: e })
                  .then(() => this.refreshTable())
                  .catch((t) => {
                    this.components.users.setManyLoading(
                      e,
                      "actionfield",
                      !1,
                      "menu"
                    ),
                      E.Z.handleError(t);
                  });
            }),
              s.show(t, m.Fz.BottomRight);
          }
          forgetUser(e) {
            const t = new I();
            (t.onSuccess = (t) =>
              t
                ? l.N.post("admin/users/forget/" + e).then(() =>
                    this.refreshTable()
                  )
                : this.toggleUserEnabled(e, null, !1)),
              t.show();
          }
          forgetUsers(e) {
            const t = new I(!0);
            (t.onSuccess = (t) =>
              t
                ? l.N.post("admin/users/forget_many", { ids: e }).then(() =>
                    this.refreshTable()
                  )
                : this.toggleUsersEnabled(e, null, !1, !1)),
              t.show();
          }
          unforgetUser(e, t) {
            let s = !!t.data("user-api");
            const i = new A(e, s);
            (i.onSuccess = () => this.refreshTable()), i.show();
          }
          selectRole(e, t) {
            if (a.UI.popupVisible(t)) return;
            let s = [];
            for (let e of this.roles)
              s.push({
                type: "action",
                title: e.name,
                value: e.id,
                callback: this.doSelectRoleClick,
              });
            new f.x(s, { context: { id: e, $field: t } }).show(
              t,
              m.Fz.BottomLeft
            );
          }
          saveFilter(e) {
            return l.N.post(
              "admin/users/save_filter",
              l.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshSearch(!1).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
          doShowStats(e) {
            e.currentTarget.blur();
            const t = $(e.currentTarget);
            a.UI.popupVisible(t) ||
              (a.UI.markLoading(this.$statsButton),
              l.N.post("admin/users/render_stats")
                .then((e) => {
                  a.UI.markCompleted(this.$statsButton),
                    new w().show(t, m.Fz.BottomRight, e.data);
                })
                .catch((e) => {
                  a.UI.markCompleted(this.$statsButton), E.Z.handleError(e);
                }));
          }
        }
        H(G, "targets", [
          "responsiveContainer",
          "addUserButton",
          "addApiUserButton",
          "addUsersButton",
          "usersContainer",
          "statsButton",
          "statsButtonLabel",
        ]);
      },
      42456: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => I });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(62612),
          l = s(132),
          d = s(69555),
          h = s(47914),
          c = s(50609),
          u = s(7042),
          g = s(14589),
          p = s(5270);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class C extends c.V {
          constructor(e, t, s = null) {
            super("admin.workflows.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: h.X.BodyMinWidth,
            }),
              m(this, "selectors", {
                icons: ".admin-workflows-state-icon-suggestion-box li",
              }),
              m(this, "doIconClick", (e) => {
                this.components.iconInput.setIcon(
                  $(e.currentTarget).data("icon")
                );
              }),
              m(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              m(this, "doProjectsSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  o.UI.getRadioEnabled(this.$includeSelected) &&
                  o.UI.setRadio(this.$includeSelected, !0);
              }),
              (this.mode = e),
              (this.entity = t),
              (this.stateId = s);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              p.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              p.Z.requestChild(this.component, "projects", {
                events: { selectionchange: this.doProjectsSelectionChange },
              }),
              p.Z.requestChild(this.component, "iconInput"),
              (this.$icons = $(this.selectors.icons, this.$dialog)),
              this.$icons.on("click", this.doIconClick);
          }
          unload() {
            this.$icons.off("click", this.doIconClick);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              u.l.hideValidationErrors(this.formViews);
              let t = {
                entity: this.entity,
                name: o.UI.getText(this.$name),
                icon: this.components.iconInput.getIcon(),
                color: this.components.iconInput.getColor(),
                includeAll: o.UI.getRadio(this.$includeAll),
                projects: this.components.projects
                  ? this.components.projects.getSelectedIds()
                  : [],
              };
              this.mode == f.Edit &&
                ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
              let s =
                this.mode == f.Add
                  ? "admin/workflows/create_state"
                  : "admin/workflows/update_state/" + this.stateId;
              return n.N.post(s, n.N.toNetworkCase(t))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) =>
                  g.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      u.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                );
            });
          }
        }
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        m(C, "forms", [
          { name: "state", fields: ["name"] },
          {
            name: "projects",
            fields: ["includeAll", "includeSelected", "projects"],
          },
        ]),
          m(C, "targets", ["submitButton"]),
          m(C, "actions", ["doSubmit"]);
        class I extends i.v {
          constructor(...e) {
            super(...e),
              b(this, "doSorting", (e) => {
                if (e.oldIndex != e.newIndex) {
                  let t = e.target,
                    s = e.$row.data("id"),
                    i = t.getActionField(s, "edit"),
                    o = 1,
                    r = t.getPreviousRow(e.$row);
                  r.length > 0 && (o = r.data("displayOrder") + 1);
                  let a = { displayOrder: o };
                  t.loading("actionfield", i, () =>
                    n.N.post(
                      "admin/workflows/move_state/" + s,
                      n.N.toNetworkCase(a)
                    )
                      .then((e) => this.refreshFragments("table"))
                      .catch((e) => {
                        p.Z.handleError(e);
                      })
                  );
                }
              }),
              b(this, "doToggleBeforeChecked", (e) => {
                if ("default" != e.toggleName) return;
                if (o.UI.popupVisible(e.$toggle)) return !1;
                const t = new l.l(r.Z.lang("workflows.really_make_default"));
                return (
                  (t.onSuccess = () => {
                    let t = e.target;
                    t.setLoading("field", !0, e.$field);
                    let s = e.$toggle,
                      i = s.closest("tr"),
                      a = t.getToggleForRow(i, "isActive"),
                      l = t.getToggles("default", !0).not(s),
                      d = l.closest("tr"),
                      h = t.getToggleForRow(d, "isActive");
                    o.UI.setCheckbox(l, !1),
                      o.UI.setCheckbox(s, !0),
                      o.UI.toggleCheckboxEnabled(l, !0),
                      o.UI.toggleCheckboxEnabled(h, !0),
                      o.UI.toggleCheckboxEnabled(s, !1),
                      o.UI.toggleCheckboxEnabled(a, !1),
                      n.N.post("admin/workflows/set_default_state/" + e.id)
                        .then((n) => {
                          o.UI.setCheckbox(a, !0),
                            t.setTextFieldContent(
                              i,
                              "projects",
                              r.Z.lang("workflows.all_projects")
                            ),
                            t.setLoading("field", !1, e.$field),
                            t.toggleActionVisible(i, "delete", !1),
                            t.toggleActionVisible(d, "delete", !0),
                            o.UI.blurCheckbox(s);
                        })
                        .catch((i) => {
                          o.UI.setCheckbox(l, !0),
                            o.UI.setCheckbox(s, !1),
                            o.UI.toggleCheckboxEnabled(l, !1),
                            o.UI.toggleCheckboxEnabled(h, !1),
                            o.UI.toggleCheckboxEnabled(s, !0),
                            o.UI.toggleCheckboxEnabled(a, !0),
                            t.setLoading("field", !1, e.$field),
                            p.Z.handleError(i);
                        });
                  }),
                  t.show(e.$toggle, d.Fz.BottomRight),
                  !1
                );
              }),
              b(this, "doToggleChange", (e) => {
                if ("isActive" != e.toggleName) return;
                let t = e.target;
                t.setLoading("field", !0, e.$field);
                let s,
                  i = o.UI.getCheckbox(e.$toggle);
                (s = i
                  ? "admin/workflows/enable_state/"
                  : "admin/workflows/disable_state/"),
                  n.N.post(s + e.id)
                    .then((s) => {
                      t.setLoading("field", !1, e.$field);
                    })
                    .catch((s) => {
                      o.UI.setCheckbox(e.$toggle, !i),
                        t.setLoading("field", !1, e.$field),
                        p.Z.handleError(s);
                    });
              }),
              b(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "edit":
                    this.editState(e.id, e.target, e.$field);
                    break;
                  case "delete":
                    this.deleteState(e.id, e.$row);
                }
              }),
              b(this, "renderTable", () => {
                let e = { entity: this.entity };
                return n.N.post(
                  "admin/workflows/render_state_table",
                  n.N.toNetworkCase(e)
                );
              });
          }
          baseLoad(e, t, s) {
            o.UI.initialize(this.element),
              (this.entity = e),
              (this.SettingsDialogClass = t),
              (this.settingsNamespace = s),
              (this.$addButton = $(this.addButtonTarget)),
              (this.$settingsButton = $(this.settingsButtonTarget)),
              p.Z.requestChild(this.component, "states", {
                events: {
                  actionclick: this.doActionClick,
                  togglechange: this.doToggleChange,
                  togglebeforechecked: this.doToggleBeforeChecked,
                  sorting: this.doSorting,
                },
              }),
              this.fragments.register("table", this.renderTable);
          }
          baseUnload() {}
          editState(e, t, s) {
            t.setLoading("actionfield", !0, s),
              n.N.post("admin/workflows/render_update_state/" + e)
                .then((i) => {
                  t.setLoading("actionfield", !1, s);
                  const o = new C(f.Edit, this.entity, e);
                  (o.onSuccess = (e) => this.refreshFragments("table")),
                    o.show(i.data);
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), p.Z.handleError(e);
                });
          }
          deleteState(e, t) {
            let s = t.data("name"),
              i = new a.A(
                r.Z.lang("workflows.delete_state_title"),
                r.Z.langEscape("workflows.delete_state_message", { name: s }),
                r.Z.lang("workflows.delete_state_button"),
                null,
                { htmlWarning: r.Z.lang("workflows.delete_state_warning") }
              );
            (i.onSuccess = () =>
              n.N.post("admin/workflows/delete_state/" + e).then(() =>
                this.refreshFragments("table")
              )),
              i.show();
          }
          doAdd() {
            o.UI.loading(this.$addButton, () => {
              let e = { entity: this.entity };
              return n.N.post(
                "admin/workflows/render_create_state",
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new C(f.Add, this.entity);
                  (t.onSuccess = (e) => this.refreshFragments("table")),
                    t.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                });
            });
          }
          doConfigureSettings() {
            o.UI.loading(this.$settingsButton, () =>
              n.N.post(
                `admin/workflows/render_${this.settingsNamespace}_settings`
              )
                .then((e) => {
                  new this.SettingsDialogClass().show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
        }
      },
      84140: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => f });
        var i,
          o,
          n,
          r = s(15612),
          a = s(42456),
          l = s(47914),
          d = s(50609),
          h = s(13814),
          c = s(7042),
          u = s(96622),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m extends d.V {
          constructor() {
            super("admin.workflows.repository_settings_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: l.X.BodyMinWidth,
            });
          }
          load() {
            g.Z.requestChild(this.component, "states");
          }
          doSave() {
            u.UI.loading(this.$saveButton, () => {
              c.l.hideValidationErrors(this.formViews);
              let e = { forFilter: this.components.states.getSelectedIds() };
              return h.N.post(
                "admin/workflows/set_repository_settings",
                h.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        p(m, "forms", [{ name: "settings", fields: ["states"] }]),
          p(m, "targets", ["saveButton"]),
          p(m, "actions", ["doSave"]);
        class f extends a.BaseController {
          load() {
            return this.baseLoad(r.g.EntitiesRepositoryCase, m, "repository");
          }
          unload() {
            return this.baseUnload();
          }
        }
        (n = ["responsiveContainer", "addButton", "settingsButton"]),
          (o = "targets") in (i = f)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      14312: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => m });
        var i,
          o,
          n,
          r = s(15612),
          a = s(42456),
          l = s(47914),
          d = s(50609),
          h = s(13814),
          c = s(7042),
          u = s(96622);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends d.V {
          constructor() {
            super("admin.workflows.run_settings_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: l.X.BodyMinWidth,
            });
          }
          doSave() {
            u.UI.loading(this.$saveButton, () => {
              c.l.hideValidationErrors(this.formViews);
              let e = {
                forWork: u.UI.getDropdownIntOrNull(this.$forWork),
                forClose: u.UI.getDropdownIntOrNull(this.$forClose),
              };
              return h.N.post(
                "admin/workflows/set_run_settings",
                h.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        g(p, "forms", [{ name: "settings", fields: ["forWork", "forClose"] }]),
          g(p, "targets", ["saveButton"]),
          g(p, "actions", ["doSave"]);
        class m extends a.BaseController {
          load() {
            return this.baseLoad(r.g.EntitiesRun, p, "run");
          }
          unload() {
            return this.baseUnload();
          }
        }
        (n = ["responsiveContainer", "addButton", "settingsButton"]),
          (o = "targets") in (i = m)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      70350: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => m });
        var i,
          o,
          n,
          r = s(15612),
          a = s(42456),
          l = s(47914),
          d = s(50609),
          h = s(13814),
          c = s(7042),
          u = s(96622);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends d.V {
          constructor() {
            super("admin.workflows.settings_settings_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: l.X.BodyMinWidth,
            });
          }
          doSave() {
            u.UI.loading(this.$saveButton, () => {
              c.l.hideValidationErrors(this.formViews);
              let e = {
                forWork: u.UI.getDropdownIntOrNull(this.$forWork),
                forClose: u.UI.getDropdownIntOrNull(this.$forClose),
              };
              return h.N.post(
                "admin/workflows/set_session_settings",
                h.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        g(p, "forms", [{ name: "settings", fields: ["forWork", "forClose"] }]),
          g(p, "targets", ["saveButton"]),
          g(p, "actions", ["doSave"]);
        class m extends a.BaseController {
          load() {
            return this.baseLoad(r.g.EntitiesSession, p, "session");
          }
          unload() {
            return this.baseUnload();
          }
        }
        (n = ["responsiveContainer", "addButton", "settingsButton"]),
          (o = "targets") in (i = m)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      50102: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(89432),
          o = s(13814),
          n = s(96622),
          r = s(11802),
          a = s(43689),
          l = s(69555),
          d = s(132),
          h = s(42722),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends i.d {
          constructor(...e) {
            super(...e),
              u(this, "classes", {
                dropzoneDragging:
                  "attachments-dialog-split-manage__dropzone--dragging",
                manageAttachmentsUploading:
                  "attachments-dialog-split-manage--uploading",
                itemActionsVisible:
                  "attachments-dialog-split-list__item--actions-visible",
                itemEditing: "attachments-dialog-split-list__item--editing",
              }),
              u(this, "selectors", {
                attachmentsListItem: ".attachments-dialog-split-list__item",
                editInput: ".input input",
                editConfirmButton: ".input button.confirm",
                editDenyButton: ".input button.deny",
              }),
              u(this, "doClipboardPaste", (e, t) => {
                !t.targetCanReceiveImages &&
                  t.files.length > 0 &&
                  (this.uploadAttachments(t.files),
                  e.preventDefault(),
                  this.$element.get(0).scrollIntoView());
              }),
              u(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              u(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              u(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              u(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.cancelAttachmentEditing(),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAttachments(t);
              }),
              u(this, "doFileInputChange", (e) => {
                this.cancelAttachmentEditing();
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAttachments(t.files),
                  n.UI.clearFile(this.$fileInput);
              }),
              u(this, "renderAttachments", (e = {}) =>
                o.N.post(
                  "attachments/render_dialog_list/" + this.projectId,
                  o.N.toNetworkCase(
                    e.attachments ? e.attachments : this.attachments
                  )
                )
              );
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.dragLeaveTimer = null),
              (this.hideEditingCallbacks = []),
              (this.activeEditingConfirmCallback = null);
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.attachments = this.params.attachments.map((e) => ({
                attachment_id: e.id,
                name: e.name,
              }))),
              (this.$manageAttachments = $(this.manageAttachmentsTarget)),
              (this.$dropzone = $(this.dropzoneTarget)),
              (this.$fileInput = $(this.fileInputTarget)),
              c.Z.requestChild(this.component, "fileCountProgress"),
              c.Z.requestChild(this.component, "fileByteProgress"),
              this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              this.fragments.register("attachments", this.renderAttachments),
              (this.receiver = c.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              c.Z.clipboard.removeReceiver(this.receiver);
          }
          uploadAttachments(e) {
            let t = [...e],
              s = 0,
              i = e.length;
            this.components.fileByteProgress.setProgress(0, 1),
              this.components.fileCountProgress.setProgress(
                s,
                i,
                a.Z.lang("attachments.dialog_split_progress_caption", {
                  count: 1,
                  total: i,
                })
              );
            let r = !1,
              l = [];
            this.events.trigger("initform", { target: this }),
              n.UI.markLoading(this.$manageAttachments),
              this.$manageAttachments.addClass(
                this.classes.manageAttachmentsUploading
              ),
              t
                .reduce(
                  (e, t) =>
                    e.then(() => {
                      if (r) return Promise.resolve();
                      let e = new FormData();
                      return (
                        e.append("attachment", t),
                        this.components.fileByteProgress.setProgress(0, 1),
                        o.N.post("attachments/create/" + this.projectId, e, {
                          onUploadProgress: (e) => {
                            this.components.fileByteProgress.setProgress(
                              e.loaded,
                              e.total
                            );
                          },
                        })
                          .then((e) => {
                            (s += 1),
                              this.components.fileByteProgress.setProgress(
                                1,
                                1
                              ),
                              this.components.fileCountProgress.setProgress(
                                s,
                                i,
                                a.Z.lang(
                                  "attachments.dialog_split_progress_caption",
                                  { count: s < i ? s + 1 : i, total: i }
                                )
                              ),
                              l.push({
                                attachment_id: e.data.id,
                                name: e.data.name,
                              });
                          })
                          .then(
                            () =>
                              new Promise(function (e, t) {
                                setTimeout(function () {
                                  e();
                                }, 200);
                              })
                          )
                          .catch((e) => {
                            this.events.trigger("error", {
                              target: this,
                              error: e,
                            }),
                              (r = !0);
                          })
                      );
                    }),
                  Promise.resolve()
                )
                .then(() =>
                  r
                    ? (n.UI.markCompleted(this.$manageAttachments),
                      void this.$manageAttachments.removeClass(
                        this.classes.manageAttachmentsUploading
                      ))
                    : (this.attachments.push(...l),
                      this.refreshAttachments().then(() => {
                        n.UI.markCompleted(this.$manageAttachments),
                          this.$manageAttachments.removeClass(
                            this.classes.manageAttachmentsUploading
                          );
                      }))
                );
          }
          doDeleteAttachment(e) {
            this.cancelAttachmentEditing();
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.attachmentsListItem),
              i = n.UI.getClosestIconAction(t),
              o = s.data("id");
            if (n.UI.popupVisible(i)) return;
            s.addClass(this.classes.itemActionsVisible);
            const r = new d.l(a.Z.lang("attachments.really_remove_attachment"));
            (r.onSuccess = () => {
              (this.attachments = this.attachments.filter(
                (e) => e.attachment_id != o
              )),
                n.UI.loading(i, () =>
                  this.refreshAttachments().then(() => {
                    s.removeClass(this.classes.itemActionsVisible);
                  })
                );
            }),
              (r.onHide = (e) => {
                e || s.removeClass(this.classes.itemActionsVisible);
              }),
              r.show(i, l.Fz.BottomRight);
          }
          doEditAttachment(e) {
            this.cancelAttachmentEditing();
            let t,
              s,
              i,
              o,
              a = $(e.currentTarget).closest(
                this.selectors.attachmentsListItem
              ),
              l = $(this.selectors.editInput, a),
              d = $(this.selectors.editConfirmButton, a),
              h = $(this.selectors.editDenyButton, a),
              c = a.data("id"),
              u = a.data("name"),
              g = a.data("extension");
            (o = (e) => {
              if (e.which == r.N.ESC) return e.stopPropagation(), void t();
              e.which == r.N.Enter && (e.stopPropagation(), s());
            }),
              (s = () => {
                let e = n.UI.getText(l).trim();
                if (0 == e.length) return;
                this.events.trigger("initform", { target: this });
                let s = this.attachments.map((e) => ({
                  attachment_id: e.attachment_id,
                  name: e.name,
                }));
                for (let t of s)
                  if (t.attachment_id == c) {
                    t.name = e + "." + g;
                    break;
                  }
                return new Promise((e, i) => {
                  n.UI.loading(d, () =>
                    this.refreshFragmentsWithCustomErrorHandling([
                      "attachments",
                      { attachments: s },
                    ])
                      .then(() => {
                        this.events.trigger("refreshui", { target: this }),
                          t(),
                          (this.attachments = s),
                          e(!0);
                      })
                      .catch((s) => {
                        t(),
                          this.events.trigger("error", {
                            target: this,
                            error: s,
                          }),
                          e(!1);
                      })
                  );
                });
              }),
              (t = () => {
                a.removeClass(this.classes.itemEditing),
                  h.off("click", t),
                  d.off("click", s),
                  l.off("keydown", o),
                  (this.hideEditingCallbacks = _.without(
                    this.hideEditingCallbacks,
                    t
                  )),
                  (this.activeEditingConfirmCallback = null);
              }),
              (i = () => {
                a.addClass(this.classes.itemEditing),
                  h.on("click", t),
                  d.on("click", s),
                  l.on("keydown", o),
                  n.UI.setText(l, u),
                  n.UI.focusText(l),
                  this.hideEditingCallbacks.push(t),
                  (this.activeEditingConfirmCallback = s);
              }),
              i();
          }
          cancelAttachmentEditing() {
            this.events.trigger("initform", { target: this });
            for (let e of this.hideEditingCallbacks) e();
            this.hideEditingCallbacks.length = 0;
          }
          getAttachments() {
            return this.attachments;
          }
          isEditing() {
            return null != this.activeEditingConfirmCallback;
          }
          confirmActiveEditing() {
            if (this.isEditing()) return this.activeEditingConfirmCallback();
          }
          refreshAttachments() {
            return this.refreshFragments("attachments").then(() => {
              this.events.trigger("refreshui", { target: this });
            });
          }
          doAddScreenshot(e) {
            const t = $(e.currentTarget);
            n.UI.popupVisible(t) || new h.j().show(t, l.Fz.TopCenter);
          }
        }
        u(g, "targets", ["manageAttachments", "dropzone", "fileInput"]);
      },
      48900: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => p });
        var i = s(89432),
          o = s(13814),
          n = s(96622),
          r = s(92405),
          a = s(69555),
          l = s(132);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends a.GI {
          constructor(e, t = null) {
            super("common.input_popup", {
              onSubmitForm: () => this.doConfirm(),
            }),
              (this.text = e),
              (this.extension = t);
          }
          prepare() {
            n.UI.setText(this.$name, this.text),
              this.$extension.text(this.extension);
          }
          loaded() {
            n.UI.focusText(this.$name);
          }
          doConfirm() {
            this.triggerSuccess(n.UI.getText(this.$name));
          }
        }
        d(h, "targets", ["name", "extension"]), d(h, "actions", ["doConfirm"]);
        var c = s(43689),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends i.d {
          constructor(...e) {
            super(...e),
              g(this, "selectors", {
                attachment: ".attachment-inline-gallery__attachment",
                inlineAttachment:
                  ".attachment-inline-gallery__attachment--inline",
                toolbar: ".attachment-inline-gallery__attachment__toolbar",
              }),
              g(this, "classes", {
                attachmentToolbarDeleteVisible:
                  "attachment-inline-gallery__attachment--toolbar-delete-visible",
                attachmentToolbarEditVisible:
                  "attachment-inline-gallery__attachment--toolbar-edit-visible",
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            n.UI.initialize(this.$element),
              (this.projectId = this.params.projectId);
          }
          unload() {}
          doAttachmentClick(e) {
            let t = $(e.target);
            if (t.closest(this.selectors.toolbar).length > 0) return;
            let s = t.closest(this.selectors.attachment);
            if (s.data("inline")) {
              let e = {
                ids: $(this.selectors.inlineAttachment, this.$element)
                  .toArray()
                  .map((e) => $(e).data("id")),
                selected: s.data("id"),
              };
              n.UI.loading(s, () =>
                o.N.post(
                  "attachments/render_gallery_dialog/" + this.projectId,
                  o.N.toNetworkCase(e)
                )
                  .then((e) => {
                    const t = new r.b();
                    (t.onHide = () => {
                      this.events.trigger("previewclose", { target: this });
                    }),
                      t.show(e.data);
                  })
                  .catch((e) => {
                    u.Z.handleError(e);
                  })
              );
            } else {
              let e = s.data("getLink");
              o.N.downloadFile(e);
            }
          }
          doDeleteAttachment(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.attachment),
              i = s.data("id");
            s.addClass(this.classes.attachmentToolbarDeleteVisible);
            const o = new l.l(c.Z.lang("attachments.really_remove_attachment"));
            (o.onSuccess = () => {
              n.UI.loading(t, () =>
                Promise.all(
                  this.events.trigger("delete", { target: this, id: i })
                ).then(() => {
                  s.removeClass(this.classes.attachmentToolbarDeleteVisible);
                })
              );
            }),
              (o.onHide = (e) => {
                e || s.removeClass(this.classes.attachmentToolbarDeleteVisible);
              }),
              o.show(t, a.Fz.BottomRight);
          }
          doEditAttachment(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.attachment),
              i = s.data("id"),
              o = s.data("name"),
              r = s.data("extension");
            s.addClass(this.classes.attachmentToolbarEditVisible);
            const l = new h(o, r);
            (l.onSuccess = (e) => {
              n.UI.loading(t, () =>
                Promise.all(
                  this.events.trigger("edit", {
                    target: this,
                    id: i,
                    name: e + "." + r,
                  })
                ).then(() => {
                  s.removeClass(this.classes.attachmentToolbarEditVisible);
                })
              );
            }),
              (l.onHide = (e) => {
                e || s.removeClass(this.classes.attachmentToolbarEditVisible);
              }),
              l.show(t, a.Fz.BottomRight);
          }
        }
        g(p, "targets", []);
      },
      56026: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(26454),
          o = s(96622),
          n = s(7042),
          r = s(13814),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.v {
          constructor(...e) {
            super(...e),
              l(this, "classes", {
                dropzoneDragging: "auth-profile-card__file__dropzone--dragging",
              }),
              l(this, "selectors", { avatar: ".avatar" }),
              l(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              l(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              l(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              l(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAvatar(t[0]);
              }),
              l(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAvatar(t.files[0]),
                  o.UI.clearFile(this.$fileInput);
              }),
              l(this, "doNameInput", () => {
                this.$cardName.text(o.UI.getText(this.$name));
              });
          }
          initialize() {
            super.initialize({ onSubmitForm: () => this.doSubmit() }),
              (this.dragLeaveTimer = null);
          }
          prepare() {
            (this.saving = !1),
              (this.avatarId = this.params.avatarId),
              (this.$form = $(this.formTarget)),
              (this.$submitButton = $(this.submitButtonTarget)),
              (this.$name = $(this.nameTarget)),
              (this.$password = $(this.passwordTarget)),
              (this.$passwordConfirmation = $(this.passwordConfirmationTarget)),
              (this.$dropzone = $(this.dropzoneTarget)),
              (this.$fileSection = $(this.fileSectionTarget)),
              (this.$fileInput = $(this.fileInputTarget)),
              (this.$avatarContainer = $(this.avatarContainerTarget)),
              (this.$cardName = $(this.cardNameTarget)),
              (this.$removeAvatarIcon = $(this.removeAvatarIconTarget)),
              this.updateRemoveAvatarButton();
          }
          load() {
            o.UI.initialize(this.element),
              this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              this.$name.on("change input textInput", this.doNameInput);
          }
          unload() {
            this.$name.off("change input textInput", this.doNameInput),
              this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange);
          }
          doSubmit() {
            (this.saving = !0),
              o.UI.markLoading(this.$submitButton),
              n.l.hidePageValidationErrors(this.$form);
            let e = {
              token: this.params.token,
              email: this.params.email,
              name: o.UI.getText(this.$name),
              password: o.UI.getText(this.$password),
              passwordConfirmation: o.UI.getText(this.$passwordConfirmation),
              avatarId: this.avatarId,
            };
            r.N.post("auth/complete", r.N.toNetworkCase(e))
              .then(() => {
                r.N.visit("/");
              })
              .catch((e) => {
                (this.saving = !1),
                  o.UI.markCompleted(this.$submitButton),
                  n.l.handlePageFormError(e, this.$form);
              });
          }
          uploadAvatar(e) {
            n.l.hidePageValidationErrors(this.$form),
              o.UI.markLoading(this.$fileSection);
            let t = new FormData();
            t.append("avatar", e),
              t.append("email", this.params.email),
              r.N.post("auth/complete/create_avatar", t)
                .then(
                  (e) => (
                    (this.avatarId = e.data.id),
                    this.updateAvatar().then(() => {
                      this.updateRemoveAvatarButton(),
                        o.UI.markCompleted(this.$fileSection);
                    })
                  )
                )
                .catch((e) => {
                  o.UI.markCompleted(this.$fileSection),
                    n.l.handlePageFormError(e, this.$form);
                });
          }
          doNameChange() {
            setTimeout(() => {
              this.saving || this.avatarId || this.updateAvatar();
            }, 50);
          }
          updateAvatar() {
            let e = {
              avatarId: this.avatarId,
              name: o.UI.getText(this.$name),
              email: this.params.email,
            };
            return r.N.postReplace(
              "auth/complete/render_avatar",
              this.$avatarContainer,
              r.N.toNetworkCase(e)
            );
          }
          doRemoveAvatar() {
            let e = $(this.selectors.avatar, this.$avatarContainer);
            o.UI.markLoading(e),
              (this.avatarId = null),
              this.updateAvatar()
                .then(() => {
                  this.updateRemoveAvatarButton();
                })
                .catch((t) => {
                  o.UI.markCompleted(e), a.Z.handleError(t);
                });
          }
          updateRemoveAvatarButton() {
            this.$removeAvatarIcon.toggle(!!this.avatarId);
          }
        }
        l(d, "targets", [
          "submitButton",
          "name",
          "password",
          "passwordConfirmation",
          "form",
          "fileSection",
          "dropzone",
          "fileInput",
          "avatarContainer",
          "cardName",
          "removeAvatarIcon",
        ]);
      },
      75769: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(13814),
          o = s(26454);
        const n = class extends o.v {
          doCancel() {
            i.N.formPost("auth/logout");
          }
        };
      },
      62038: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(26454),
          o = s(96622);
        const n = class extends i.v {
          load() {
            o.UI.initialize(this.element);
          }
        };
      },
      54340: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i,
          o,
          n,
          r = s(26454),
          a = s(96622),
          l = s(7042),
          d = s(13814);
        class h extends r.v {
          initialize() {
            super.initialize({ onSubmitForm: () => this.doSubmit() });
          }
          load() {
            a.UI.initialize(this.element),
              (this.$form = $(this.formTarget)),
              (this.$submitButton = $(this.submitButtonTarget)),
              (this.$password = $(this.passwordTarget)),
              (this.$passwordConfirmation = $(this.passwordConfirmationTarget));
          }
          doSubmit() {
            a.UI.markLoading(this.$submitButton),
              l.l.hidePageValidationErrors(this.$form);
            let e = {
              token: this.params.token,
              email: this.params.email,
              password: a.UI.getText(this.$password),
              passwordConfirmation: a.UI.getText(this.$passwordConfirmation),
            };
            d.N.post("auth/reset", d.N.toNetworkCase(e))
              .then(() => {
                d.N.visit("/");
              })
              .catch((e) => {
                a.UI.markCompleted(this.$submitButton),
                  l.l.handlePageFormError(e, this.$form);
              });
          }
        }
        (n = ["submitButton", "password", "passwordConfirmation", "form"]),
          (o = "targets") in (i = h)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      77086: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => v });
        var i = s(26454),
          o = s(96622),
          n = s(47914),
          r = s(15612),
          a = s(54688),
          l = s(13814),
          d = s(26734),
          h = s(15331),
          c = s(69555),
          u = s(24850),
          g = s(16087),
          p = s(43689),
          m = s(62612),
          f = s(17637),
          C = s(67694),
          b = s(56542),
          I = s(5270);
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class v extends i.v {
          constructor(...e) {
            super(...e),
              w(this, "selectors", { avatar: ".avatar", row: "tr" }),
              w(this, "classes", { popupNoMinWidth: "popup--no-min-width" }),
              w(this, "doSelectionChange", () => {
                this.updateExportButton();
              }),
              w(this, "doExportMenuClick", (e) => {
                e.target.hide(),
                  "csv" === e.actionName &&
                    o.UI.loading($(this.exportButtonTarget), () => {
                      let e = this.components.runs.getSelectedIds(),
                        t = { ids: e };
                      return l.N.post(
                        "automation/runs/render_export_many_csv/" +
                          this.projectId,
                        l.N.toNetworkCase(t)
                      )
                        .then((t) => {
                          new b.u(this.projectId, e).show(t.data);
                        })
                        .catch((e) => {
                          I.Z.handleError(e);
                        });
                    });
              }),
              w(this, "doResizeContent", (e) => {
                this.updateResponsiveRunContent(e);
              }),
              w(this, "doRunActivitySelectDate", (e) => {
                this.selectDate(e.selected, e.date, e.label);
              }),
              w(this, "doFilter", (e) => {
                const t = $(e.button);
                if (!o.UI.popupVisible(t))
                  return (
                    this.components.searchBar.setFilterLoading(!0),
                    l.N.post(
                      "automation/runs/render_filter/" + this.projectId,
                      l.N.toNetworkCase(this.filter)
                    )
                      .then((e) => {
                        this.components.searchBar.setFilterLoading(!1);
                        const s = new u.y();
                        (s.onSubmit = (e) =>
                          this.saveFilter(e.filter).then(() => {
                            this.components.searchBar.setInlineFilter(
                              "milestones",
                              e.labels["automation_runs:milestone_id"]
                                ? e.labels["automation_runs:milestone_id"]
                                : []
                            ),
                              this.components.searchBar.setInlineFilter(
                                "sources",
                                e.labels["automation_runs:source_id"]
                                  ? e.labels["automation_runs:source_id"]
                                  : []
                              ),
                              this.components.searchBar.setInlineFilter(
                                "tags",
                                e.labels["automation_runs:tags"]
                                  ? e.labels["automation_runs:tags"]
                                  : []
                              );
                          })),
                          s.show(t, c.Fz.BottomRight, e.data);
                      })
                      .catch((e) => {
                        this.components.searchBar.setFilterLoading(!1),
                          I.Z.handleError(e);
                      })
                  );
              }),
              w(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          "milestones",
                          []
                        ),
                          this.components.searchBar.setInlineFilter(
                            "sources",
                            []
                          ),
                          this.components.searchBar.setInlineFilter("tags", []);
                      })
                      .catch((e) => {
                        I.Z.handleError(e);
                      })
                  );
              }),
              w(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              w(this, "doSearch", () => {
                this.refreshSearch();
              }),
              w(this, "doCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                "milestones" == e.filter.name
                  ? delete s.conditions["automation_runs:milestone_id"]
                  : "sources" == e.filter.name
                  ? delete s.conditions["automation_runs:source_id"]
                  : "tags" == e.filter.name &&
                    delete s.conditions["automation_runs:tags"],
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          e.filter.name,
                          []
                        );
                      })
                      .catch((e) => {
                        I.Z.handleError(e);
                      })
                  );
              }),
              w(this, "doInlineFilter", (e) => {
                "milestones" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "milestones",
                      "automation/runs/render_milestone_filter/",
                      "automation_runs:milestone_id"
                    )
                  : "sources" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "sources",
                      "automation/runs/render_source_filter/",
                      "automation_runs:source_id"
                    )
                  : "tags" == e.filter.name &&
                    this.showInlineFilter(
                      e.button,
                      "tags",
                      "automation/runs/render_tag_filter/",
                      "automation_runs:tags"
                    );
              }),
              w(this, "doStateChange", (e) => {
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments(["table", { state: e.state }])
                );
              }),
              w(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editRun(e.target, e.id, e.$field);
                }
              }),
              w(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                }
              }),
              w(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.runs.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteRuns(t);
                    break;
                  case "edit":
                    this.editRuns(e.context.table, t, e.context.$field);
                }
              }),
              w(this, "renderContent", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.runs.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar &&
                    this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  l.N.post(
                    "automation/runs/render_content/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              w(this, "renderTable", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.runs.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar &&
                    this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  l.N.post(
                    "automation/runs/render_table/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              w(this, "renderMetrics", () =>
                l.N.post(
                  "automation/runs/render_index_metrics/" + this.projectId
                )
              );
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              (this.filter = this.params.filter || n.X.EmptyFilter),
              I.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              I.Z.requestChild(this.component, "runs", {
                onAdded: (e) => {
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveRunContent(e);
                  this.updateExportButton();
                },
                onRemoved: (e) => {
                  this.updateExportButton();
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                  selectionchange: this.doSelectionChange,
                },
              }),
              I.Z.requestChild(this.component, "runActivity", {
                events: { selectdate: this.doRunActivitySelectDate },
              }),
              o.UI.initialize(this.element),
              this.fragments.register("metrics", this.renderMetrics),
              this.fragments.register("content", this.renderContent),
              this.fragments.register("table", this.renderTable),
              this.params.isLazyLoad && this.lazyLoad(),
              I.Z.replaceLocation(l.N.url(`automation/runs/${this.projectId}`));
          }
          lazyLoad() {
            this.refreshFragments("content").then(() => {
              o.UI.markCompleted($(this.runContainerTarget)),
                this.components.searchBar.setEnabled(!0);
            });
          }
          updateExportButton() {
            o.UI.toggleButtonInteractiveEnabled(
              $(this.exportButtonTarget),
              this.components.runs &&
                this.components.runs.getSelectedCount() > 0
            );
          }
          doShowExportMenu(e) {
            let t = $(this.exportButtonTarget);
            if (!o.UI.getButtonInteractiveEnabled(t)) return;
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: p.Z.lang("automation_runs.export_to_csv"),
              callback: this.doExportMenuClick,
            }),
              new g.x(s, {
                additionalClasses: this.classes.popupNoMinWidth,
              }).show(t, c.Fz.BottomLeft);
          }
          updateResponsiveRunContent(e) {
            "automation_runs:tags" == e.name &&
              d.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.tags;
                return t ? JSON.parse(t) : [];
              });
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                l.N.post("automation/runs/render_stats/" + s)
                  .then((e) => {
                    new C._(!0).show(t, c.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    I.Z.handleError(e);
                  })
              );
          }
          doResetGroupingFilter() {
            this.selectDate(!1);
          }
          selectDate(e, t, s) {
            e
              ? (this.filter.conditions["automation_runs:created_at"] = {
                  type: r.g.FiltersDateCustom,
                  from: t,
                  to: t,
                })
              : delete this.filter.conditions["automation_runs:created_at"],
              I.Z.waitComponentLoaded("runs", () => {
                let t,
                  i = this.components.runs.getParams().runCountFormatted,
                  n = $(this.groupingTitleTarget);
                e
                  ? ((t =
                      1 == i
                        ? p.Z.lang(
                            "automation_runs.grouping_header_filter_singular",
                            { date: s, count: i }
                          )
                        : p.Z.lang(
                            "automation_runs.grouping_header_filter_plural",
                            { date: s, count: i }
                          )),
                    o.UI.show($(this.groupingIconTarget)))
                  : ((t =
                      1 == i
                        ? p.Z.lang(
                            "automation_runs.grouping_header_all_time_singular",
                            { date: s, count: i }
                          )
                        : p.Z.lang(
                            "automation_runs.grouping_header_all_time_plural",
                            { date: s, count: i }
                          )),
                    o.UI.hide($(this.groupingIconTarget)),
                    this.components.runActivity.resetSelection()),
                  n.text(t);
              });
            let i = $(this.selectors.avatar, this.groupingAvatarTarget);
            o.UI.loading(i, () =>
              e
                ? this.refreshFragments(["table", { withPagination: !1 }])
                    .then(() => {
                      let e = _.keys(this.filter.conditions).length;
                      this.components.searchBar.setFilterCount(e);
                    })
                    .catch((e) => {
                      I.Z.handleError(e);
                    })
                : this.saveFilter(this.filter, [
                    "table",
                    { withPagination: !1 },
                  ]).catch((e) => {
                    I.Z.handleError(e);
                  })
            );
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["content", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          showInlineFilter(e, t, s, i) {
            const n = $(e);
            o.UI.popupVisible(n) ||
              o.UI.loading(n, () =>
                l.N.post(s + this.projectId, l.N.toNetworkCase(this.filter))
                  .then((e) => {
                    let s = this.components.searchBar.getInlineFilter(t);
                    const o = new h.d();
                    (o.onSubmit = (e) => {
                      let s = this.filter;
                      return (
                        (s.conditions[i] = e.condition),
                        (s.mode = r.g.FiltersAll),
                        this.saveFilter(s).then(() => {
                          this.components.searchBar.setInlineFilter(
                            t,
                            e.labels
                          );
                        })
                      );
                    }),
                      (o.onHide = (e) => {
                        e || this.components.searchBar.setInlineFilter(t, s);
                      }),
                      o.events.on("change", (e) => {
                        this.components.searchBar.setInlineFilter(t, e.labels);
                      }),
                      o.show(n, c.Fz.BottomRight, e.data);
                  })
                  .catch((e) => {
                    I.Z.handleError(e);
                  })
              );
          }
          saveFilter(e, t = null) {
            let s = _.cloneDeep(e),
              i = !1;
            return (
              "automation_runs:created_at" in s.conditions &&
                s.conditions["automation_runs:created_at"].type ==
                  r.g.FiltersDateCustom &&
                s.conditions["automation_runs:created_at"].to &&
                s.conditions["automation_runs:created_at"].from &&
                s.conditions["automation_runs:created_at"].to ==
                  s.conditions["automation_runs:created_at"].from &&
                (delete s.conditions["automation_runs:created_at"], (i = !0)),
              l.N.post(
                "automation/runs/save_filter/" + this.projectId,
                l.N.toNetworkCase(s)
              ).then((s) => {
                (this.filter = s.data),
                  i &&
                    (this.filter.conditions["automation_runs:created_at"] =
                      e.conditions["automation_runs:created_at"]);
                let o = _.keys(this.filter.conditions).length;
                return (
                  t || (t = ["content", { withPagination: !1 }]),
                  this.refreshFragments(t).then(() => {
                    this.components.searchBar.setFilterCount(o);
                  })
                );
              })
            );
          }
          showContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let r = [];
            this.components.runs.getSelectedRows().length <= 1
              ? (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "edit",
                    title: p.Z.lang("automation_runs.menu_edit_run"),
                    callback: this.doContextMenuSingleClick,
                  }),
                this.canAddEdit &&
                  this.canDelete &&
                  r.push({ type: "divider" }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: p.Z.lang("automation_runs.menu_delete_run"),
                    callback: this.doContextMenuSingleClick,
                  }))
              : (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "edit",
                    title: p.Z.lang("automation_runs.menu_edit_runs"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                this.canAddEdit &&
                  this.canDelete &&
                  r.push({ type: "divider" }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: p.Z.lang("automation_runs.menu_delete_runs"),
                    callback: this.doContextMenuMultipleClick,
                  })),
              new g.x(r, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, c.Fz.BottomLeft);
          }
          deleteRun(e, t, s) {
            let i = s.data("name"),
              o = new m.A(
                p.Z.lang("automation_runs.delete_title"),
                p.Z.langEscape("automation_runs.delete_message", { name: i }),
                p.Z.lang("automation_runs.delete_button")
              );
            (o.onSuccess = () =>
              l.N.post("automation/runs/delete/" + t).then(() =>
                this.refreshFragments("content", "metrics")
              )),
              o.show();
          }
          deleteRuns(e) {
            let t = new m.A(
              p.Z.lang("automation_runs.delete_many_title"),
              p.Z.lang("automation_runs.delete_many_message"),
              p.Z.lang("automation_runs.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return l.N.post(
                "automation/runs/delete_many/" + this.projectId,
                l.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("content", "metrics"));
            }),
              t.show();
          }
          editRun(e, t, s) {
            e.loading("actionfield", s, () =>
              l.N.post("automation/runs/render_update/" + t)
                .then((e) => {
                  const s = new a.m(this.projectId, t);
                  return (
                    (s.onSuccess = (e) => this.refreshFragments("table")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  I.Z.handleError(e);
                })
            );
          }
          editRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return l.N.post(
                "automation/runs/render_update_many/" + this.projectId,
                l.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new f.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) => this.refreshFragments("table")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  I.Z.handleError(e);
                });
            });
          }
        }
        w(v, "targets", [
          "responsiveContainer",
          "runContainer",
          "groupingTitle",
          "groupingAvatar",
          "resetGroupingFilterIcon",
          "groupingIcon",
          "exportButton",
        ]);
      },
      6150: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(57566),
          o = s(96622),
          n = s(13814),
          r = s(15331),
          a = s(69555),
          l = s(9669),
          d = s.n(l),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.BaseController {
          constructor(...e) {
            super(...e),
              c(this, "selectors", {
                issueDetailsField: ".table__field__issue-details",
                issueDetailsFieldDetails:
                  ".table__field__issue-details__details",
              }),
              c(this, "classes", {
                issueDetailsFieldLoading:
                  "table__field__issue-details--loading",
              }),
              c(this, "doAppNavigate", () => {
                this.cancelExecutionRequests(), this.cancelDesignRequests();
              }),
              c(this, "doExecutionCancelSearch", () => {
                this.refreshExecutionSearch();
              }),
              c(this, "doExecutionSearch", () => {
                this.refreshExecutionSearch();
              }),
              c(this, "doDesignCancelSearch", () => {
                this.refreshDesignSearch();
              }),
              c(this, "doDesignSearch", () => {
                this.refreshDesignSearch();
              }),
              c(this, "doIssuesDesignAdded", (e) => {
                this.components.designSearchBar.setEnabled(!0),
                  this.loadIssueDetails(e, this.designCancelSource);
              }),
              c(this, "doIssuesExecutionAdded", (e) => {
                this.loadIssueDetails(e, this.executionCancelSource);
              }),
              c(this, "doIssuesExecutionStateChange", (e) => {
                this.cancelExecutionRequests(),
                  e.target.loading(e.loading, e.column, () =>
                    this.refreshFragments([
                      "issueExecutionPage",
                      { state: e.state },
                    ])
                  );
              }),
              c(this, "doIssuesDesignStateChange", (e) => {
                this.cancelDesignRequests(),
                  e.target.loading(e.loading, e.column, () =>
                    this.refreshFragments([
                      "issueDesignPage",
                      { state: e.state },
                    ])
                  );
              }),
              c(this, "doExecutionCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide(),
                  (this.executionStatuses = []),
                  o.UI.loading(
                    t,
                    () => (
                      this.components.executionSearchBar.setInlineFilter(
                        "statuses",
                        ""
                      ),
                      this.refreshFragments([
                        "issueExecutionPage",
                        { withPagination: !1 },
                      ]).catch((e) => {
                        h.Z.handleError(e);
                      })
                    )
                  );
              }),
              c(this, "doExecutionInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) ||
                  o.UI.loading(t, () => {
                    let e = { selected: this.executionStatuses };
                    return n.N.post(
                      "automation/runs/render_issue_status_filter/" +
                        this.run.id,
                      n.N.toNetworkCase(e)
                    )
                      .then((e) => {
                        const s = "statuses";
                        let i =
                          this.components.executionSearchBar.getInlineFilter(s);
                        const o = new r.d();
                        (o.onSubmit = (e) => (
                          (this.executionStatuses = []),
                          e.condition &&
                            e.condition.values &&
                            (this.executionStatuses = e.condition.values),
                          this.components.executionSearchBar.setInlineFilter(
                            s,
                            e.labels
                          ),
                          this.refreshFragments([
                            "issueExecutionPage",
                            { withPagination: !1 },
                          ]).catch((e) => {
                            h.Z.handleError(e);
                          })
                        )),
                          (o.onHide = (e) => {
                            e ||
                              this.components.executionSearchBar.setInlineFilter(
                                s,
                                i
                              );
                          }),
                          o.events.on("change", (e) => {
                            this.components.executionSearchBar.setInlineFilter(
                              s,
                              e.labels
                            );
                          }),
                          o.show(t, a.Fz.BottomRight, e.data);
                      })
                      .catch((e) => {
                        h.Z.handleError(e);
                      });
                  });
              }),
              c(this, "renderIssueExecutionPage", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.issuesExecution.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.executionStatuses &&
                    (t.statuses = this.executionStatuses),
                  this.components.executionSearchBar &&
                    this.components.executionSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.executionSearchBar.getSearchTerm()),
                  n.N.post(
                    "automation/runs/render_issue_execution_page/" +
                      this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              c(this, "renderIssueDesignPage", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.issuesExecution.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.designSearchBar &&
                    this.components.designSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.designSearchBar.getSearchTerm()),
                  n.N.post(
                    "automation/runs/render_issue_design_page/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              c(this, "renderIssuesDesign", (e = {}) => {
                let t = {};
                return (
                  this.components.designSearchBar &&
                    this.components.designSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.designSearchBar.getSearchTerm()),
                  n.N.post(
                    "automation/runs/render_issues_design/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.page = { name: "issues" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              (this.executionStatuses = []),
              (this.executionCancelSource = n.N.getCancelSource()),
              (this.designCancelSource = n.N.getCancelSource()),
              (this.detailsCache = {}),
              o.UI.initialize(this.element),
              h.Z.requestChild(this.component, "resources"),
              (this.fragmentsAfterEdit = ["about", "header", "issuesDesign"]),
              this.registerBaseFragments(),
              h.Z.requestChild(this.component, "executionSearchBar", {
                events: {
                  search: this.doExecutionSearch,
                  cancelsearch: this.doExecutionCancelSearch,
                  inlinefilter: this.doExecutionInlineFilter,
                  cancelinlinefilter: this.doExecutionCancelInlineFilter,
                },
              }),
              h.Z.requestChild(this.component, "designSearchBar", {
                events: {
                  search: this.doDesignSearch,
                  cancelsearch: this.doDesignCancelSearch,
                },
              }),
              h.Z.requestChild(this.component, "issuesExecution", {
                onAdded: this.doIssuesExecutionAdded,
                events: { statechange: this.doIssuesExecutionStateChange },
              }),
              h.Z.requestChild(this.component, "issuesDesign", {
                onAdded: this.doIssuesDesignAdded,
                events: { statechange: this.doIssuesDesignStateChange },
              }),
              this.fragments.register(
                "issueExecutionPage",
                this.renderIssueExecutionPage
              ),
              this.fragments.register(
                "issueDesignPage",
                this.renderIssueDesignPage
              ),
              this.fragments.register("issuesDesign", this.renderIssuesDesign),
              h.Z.events.on("navigate", this.doAppNavigate);
          }
          unload() {
            this.cancelExecutionRequests(),
              this.cancelDesignRequests(),
              h.Z.events.off("navigate", this.doAppNavigate),
              (this.detailsCache = null);
          }
          cancelExecutionRequests() {
            n.N.cancelRequests(this.executionCancelSource),
              (this.executionCancelSource = n.N.getCancelSource());
          }
          cancelDesignRequests() {
            n.N.cancelRequests(this.designCancelSource),
              (this.designCancelSource = n.N.getCancelSource());
          }
          loadIssueDetails(e, t) {
            const s = (e, t, s) => {
              let i = t
                .filter(`tr[data-id="${e}"]`)
                .find(this.selectors.issueDetailsField);
              i.removeClass(this.classes.issueDetailsFieldLoading),
                i.find(this.selectors.issueDetailsFieldDetails).html(s);
            };
            let i = e.getRows();
            (i = i.filter("[data-new=1]")), i.attr("data-new", 0);
            let o = [];
            i.each((e, t) => {
              let s = $(t),
                i = s.data("id"),
                n = s.data("canLookup"),
                r = s.data("targetId");
              n && r && i && o.push({ id: i, targetId: r });
            }),
              (o = _.uniqWith(o, (e, t) => e.id == t.id)),
              (o = o.filter(
                (e) =>
                  !(e.id in this.detailsCache) ||
                  (s(e.id, i, this.detailsCache[e.id]), !1)
              ));
            let r = {};
            for (let e of o)
              r[e.targetId] || (r[e.targetId] = []), r[e.targetId].push(e);
            for (let e in r) {
              let o = { ids: r[e].map((e) => e.id) };
              n.N.postNonBlocking(
                "issues/render_statuses/" + this.projectId,
                n.N.toNetworkCase(o),
                { cancelToken: t.token }
              )
                .then((e) => {
                  this.loaded &&
                    $(e.data)
                      .filter("[data-id]")
                      .each((e, t) => {
                        let o = $(t),
                          n = o.data("id"),
                          r = o.html();
                        s(n, i, r), (this.detailsCache[n] = r);
                      });
                })
                .catch((e) => {
                  e instanceof d().Cancel || h.Z.handleError(e);
                });
            }
          }
          refreshExecutionSearch() {
            this.cancelExecutionRequests(),
              this.components.executionSearchBar.setInputLoading(!0),
              this.refreshFragments([
                "issueExecutionPage",
                { withPagination: !1 },
              ]).then(() => {
                this.components.executionSearchBar.setInputLoading(!1);
              });
          }
          refreshDesignSearch() {
            this.cancelDesignRequests(),
              this.components.designSearchBar.setInputLoading(!0),
              this.refreshFragments([
                "issueDesignPage",
                { withPagination: !1 },
              ]).then(() => {
                this.components.designSearchBar.setInputLoading(!1);
              });
          }
        }
        c(u, "targets", [
          "aboutSection",
          "addLinkIcon",
          "editButton",
          "editMenuButton",
          "exportButton",
          "responsiveContainer",
          "showInfoIcon",
          "showMilestonePopupIcon",
        ]);
      },
      32050: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => b });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(11802),
          a = s(47914),
          l = s(43689),
          d = s(15612),
          h = s(21077),
          c = s(69555);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends c.GI {
          constructor(e, t, s) {
            super("automation.runs.print_configure_popup"),
              u(this, "doOptionChange", (e) => {
                this.refreshApplyButton();
              }),
              (this.flags = e),
              (this.testMode = t),
              (this.folderMode = s);
          }
          load() {
            n.UI.setCheckbox(this.$showHeader, this.flags.show_header),
              n.UI.setCheckbox(this.$showStats, this.flags.show_stats),
              n.UI.setCheckbox(this.$showContext, this.flags.show_context),
              n.UI.setCheckbox(this.$showThreads, this.flags.show_threads),
              n.UI.setCheckbox(this.$showFooter, this.flags.show_footer),
              n.UI.setCheckbox(this.$showLinks, this.flags.show_links),
              n.UI.setCheckbox(this.$showImages, this.flags.show_images),
              n.UI.setCheckbox(this.$showUsers, this.flags.show_users),
              this.testMode == d.g.AutomationRunsPrintTestModeList
                ? n.UI.setRadio(this.$testModeList, !0)
                : this.testMode == d.g.AutomationRunsPrintTestModeDetails
                ? n.UI.setRadio(this.$testModeDetails, !0)
                : this.testMode == d.g.AutomationRunsPrintTestModeFull
                ? n.UI.setRadio(this.$testModeFull, !0)
                : n.UI.setRadio(this.$testModeNone, !0),
              this.folderMode == d.g.AutomationRunsPrintFolderModeName
                ? n.UI.setRadio(this.$folderModeName, !0)
                : n.UI.setRadio(this.$folderModeNone, !0),
              n.UI.onCheckboxChange(this.$showHeader, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showStats, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showContext, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showThreads, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showFooter, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeNone, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeList, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeDetails, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeFull, this.doOptionChange),
              this.refreshApplyButton();
          }
          unload() {
            n.UI.offCheckboxChange(this.$showHeader, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showStats, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showContext, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showThreads, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showFooter, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeNone, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeList, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeDetails, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeFull, this.doOptionChange);
          }
          refreshApplyButton() {
            let e =
              n.UI.getCheckbox(this.$showHeader, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showStats, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showContext, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showThreads, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showFooter, this.doOptionChange) ||
              0 == n.UI.getRadio(this.$testModeNone, this.doOptionChange);
            n.UI.toggleButtonEnabled(this.$applyButton, e);
          }
          doApply() {
            let e = d.g.AutomationRunsPrintTestModeNone;
            n.UI.getRadio(this.$testModeList)
              ? (e = d.g.AutomationRunsPrintTestModeList)
              : n.UI.getRadio(this.$testModeDetails)
              ? (e = d.g.AutomationRunsPrintTestModeDetails)
              : n.UI.getRadio(this.$testModeFull) &&
                (e = d.g.AutomationRunsPrintTestModeFull);
            let t = d.g.AutomationRunsPrintFolderModeNone;
            n.UI.getRadio(this.$folderModeName) &&
              (t = d.g.AutomationRunsPrintFolderModeName),
              this.triggerSuccess({
                flags: {
                  show_header: n.UI.getCheckbox(this.$showHeader),
                  show_stats: n.UI.getCheckbox(this.$showStats),
                  show_context: n.UI.getCheckbox(this.$showContext),
                  show_threads: n.UI.getCheckbox(this.$showThreads),
                  show_footer: n.UI.getCheckbox(this.$showFooter),
                  show_links: n.UI.getCheckbox(this.$showLinks),
                  show_images: n.UI.getCheckbox(this.$showImages),
                  show_users: n.UI.getCheckbox(this.$showUsers),
                },
                testMode: e,
                folderMode: t,
              });
          }
        }
        u(g, "actions", ["doApply"]),
          u(g, "targets", [
            "showHeader",
            "showStats",
            "showContext",
            "showThreads",
            "showFooter",
            "showLinks",
            "showImages",
            "showUsers",
            "testModeNone",
            "testModeList",
            "testModeDetails",
            "testModeFull",
            "folderModeNone",
            "folderModeName",
            "folderModeFull",
            "applyButton",
          ]);
        var p = s(24850),
          m = s(55885),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b extends i.v {
          constructor(...e) {
            super(...e),
              C(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              });
          }
          load() {
            (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.columns = this.params.columns),
              (this.filter = this.params.filter),
              (this.flags = this.params.flags),
              (this.testMode = this.params.testMode),
              (this.folderMode = this.params.folderMode),
              this.filter &&
                0 == _.keys(this.filter.conditions).length &&
                (this.filter = null),
              f.Z.requestChild(this.component, "printFrame", {
                onAdded: () => {
                  this.refreshContent();
                },
              }),
              n.UI.initialize(this.element),
              this.shortcuts.register(r.N.P, this.doShortcutPrint, {
                control: !0,
              });
          }
          doConfigure() {
            let e = $(this.configureIconTarget);
            if (n.UI.popupVisible(e)) return;
            const t = new g(this.flags, this.testMode, this.folderMode);
            (t.onSuccess = (e) => {
              (this.flags = e.flags),
                (this.testMode = e.testMode),
                (this.folderMode = e.folderMode),
                this.refreshContent();
            }),
              t.show(e, c.Fz.BottomRight);
          }
          doPrint() {
            this.print();
          }
          print() {
            this.components.printFrame.print();
          }
          doRefresh() {
            n.UI.loading($(this.refreshIconTarget), () =>
              this.refreshContent()
            );
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTarget);
            n.UI.popupVisible(e) ||
              n.UI.loading(e, () => this.selectColumns(e));
          }
          selectColumns(e) {
            let t = {
              columns: this.columns,
              showWidth: !0,
              defaultWidth: d.g.MixColumnWidthDefaultPrint,
            };
            return o.N.post(
              "automation/runs/render_test_columns/" + this.projectId,
              o.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new h.D(
                  !!window.opener?.appInstance?.layout?.page?.getCurrentColumns,
                  l.Z.lang("automation_runs.apply_columns")
                );
                s.events.on("externalaction", (e) => {
                  e.target.hide();
                  let t = [];
                  window.opener?.appInstance?.layout?.page?.getCurrentColumns &&
                    (t =
                      window.opener.appInstance.layout.page.getCurrentColumns()),
                    (this.columns = t),
                    this.refreshContent();
                }),
                  (s.onSubmit = (e) => {
                    (this.columns = e), this.refreshContent();
                  }),
                  s.show(e, c.Fz.BottomRight, t.data);
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          doCancelFilter() {
            let e = $(this.filterIconTarget);
            n.UI.popupVisible(e) && n.UI.getVisiblePopup(e).hide(),
              this.saveFilter(a.X.EmptyFilter),
              this.refreshContent();
          }
          doFilter() {
            let e = $(this.filterIconTarget),
              t = $(this.filterIconLabelTarget);
            n.UI.popupVisible(t) ||
              n.UI.loading(e, () => {
                let e = this.filter ? this.filter : a.X.EmptyFilter;
                return o.N.post(
                  "automation/runs/render_test_filter/" + this.run.id,
                  o.N.toNetworkCase(e)
                )
                  .then((e) => {
                    const s = new p.y(
                      !!window.opener?.appInstance?.layout?.page
                        ?.getCurrentFilters,
                      l.Z.lang("automation_runs.apply_filter")
                    );
                    s.events.on("selectfolders", (e) => {
                      let t = { selected: e.ids };
                      return o.N.post(
                        "automation/runs/render_select_folders/" + this.run.id,
                        o.N.toNetworkCase(t)
                      ).then((t) => {
                        const i = new m._();
                        s.addActiveDialog(i),
                          (i.onHidden = () => {
                            s.removeActiveDialog(i);
                          }),
                          (i.onSuccess = (t) => {
                            let s = { selected: t };
                            return o.N.post(
                              "automation/runs/render_test_filter_folders/" +
                                this.run.id,
                              o.N.toNetworkCase(s)
                            ).then((t) => {
                              e.target.setFolderFilterContent(e.name, t.data);
                            });
                          }),
                          i.show(t.data);
                      });
                    }),
                      s.events.on("externalaction", (e) => {
                        e.target.hide();
                        let t = a.X.EmptyFilter;
                        window.opener?.appInstance?.layout?.page
                          ?.getCurrentFilters &&
                          (t =
                            window.opener.appInstance.layout.page.getCurrentFilters()),
                          this.saveFilter(t),
                          this.refreshContent();
                      }),
                      (s.onSubmit = (e) => {
                        this.saveFilter(e.filter), this.refreshContent();
                      }),
                      s.show(t, c.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  });
              });
          }
          saveFilter(e) {
            let t = e ? _.keys(e.conditions).length : 0;
            this.filter = t > 0 ? e : null;
            let s = $(this.filterIconTarget);
            n.UI.setSelectActionCount(s, t);
          }
          refreshContent() {
            let e = {
              folderMode: this.folderMode,
              testMode: this.testMode,
              showHeader: this.flags.show_header,
              showContext: this.flags.show_context,
              showStats: this.flags.show_stats,
              showThreads: this.flags.show_threads,
              showFooter: this.flags.show_footer,
              showLinks: this.flags.show_links,
              showImages: this.flags.show_images,
              showUsers: this.flags.show_users,
              filter: this.filter,
              columns: this.columns,
            };
            return this.components.printFrame.loadPost(
              "automation/runs/render_print_frame/" + this.run.id,
              o.N.toNetworkCase(e)
            );
          }
        }
        C(b, "targets", [
          "contentContainer",
          "printButton",
          "refreshIcon",
          "selectColumnsIcon",
          "filterIcon",
          "filterIconLabel",
          "configureIcon",
        ]);
      },
      47201: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => N });
        var i = s(57566),
          o = s(96622),
          n = s(13814),
          r = s(15612),
          a = s(19968),
          l = s(11802),
          d = s(69555);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends d.GI {
          constructor(e) {
            super("automation.runs.tests.grouping_menu", {}),
              h(this, "selectors", { actionItem: ".popup__menu__action-item" }),
              h(this, "classes", { itemActive: "popup__menu__item--active" }),
              (this.groupBy = e);
          }
          load() {
            this.groupBy &&
              $(this.selectors.actionItem, this.$popup).each((e, t) => {
                let s = $(t);
                s.toggleClass(
                  this.classes.itemActive,
                  s.data("value") == this.groupBy
                );
              });
          }
        }
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends d.GI {
          constructor(e, t) {
            super("automation.runs.thread_filter_popup", {}),
              u(this, "selectors", { actionItem: ".popup__menu__action-item" }),
              u(this, "classes", { itemActive: "popup__menu__item--active" }),
              (this.allThreads = e),
              (this.threadId = t);
          }
          load() {
            $(this.selectors.actionItem, this.$popup).each((e, t) => {
              let s = $(t);
              this.allThreads
                ? s.toggleClass(
                    this.classes.itemActive,
                    "all" == s.data("action")
                  )
                : s.toggleClass(
                    this.classes.itemActive,
                    "select" == s.data("action") &&
                      s.data("value") == this.threadId
                  );
            });
          }
        }
        var p = s(47914),
          m = s(24850),
          f = s(18792),
          C = s(50609),
          b = s(5270);
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends C.V {
          constructor() {
            super("automation.runs.folders.select_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: p.X.BodyMinWidth,
            });
          }
          load() {
            b.Z.requestChild(this.component, "folders");
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () =>
              this.triggerSuccess(
                this.components.folders
                  ? this.components.folders.getSelectedIds()
                  : []
              )
            );
          }
        }
        I(w, "forms", [{ name: "folder", fields: ["folders"] }]),
          I(w, "targets", ["submitButton"]),
          I(w, "actions", ["doSubmit"]);
        var v = s(43689),
          S = s(21077),
          x = s(15331),
          k = s(16087),
          T = s(62612),
          y = s(7045);
        function E(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class N extends i.BaseController {
          constructor(...e) {
            super(...e),
              E(this, "selectors", {
                action: ".action-list__action",
                visible: ":visible",
                treeNodeEntry: ".tree__node > .tree__node__entry",
                treeTopLevelNodeEntry: "> .tree__node > .tree__node__entry",
                treeNodeEntryTitleFull: ".tree__node__entry__title__full",
                treeNodeEntryTitleCompact: ".tree__node__entry__title__compact",
                fieldIdCopyIcon: ".field-value-id__copy i",
                tableToolbarPagination: ".table__toolbar__pagination",
              }),
              E(this, "classes", {
                groupContentEmpty: "automation-runs-group-content--empty",
                groupContentWithFolderNames:
                  "automation-runs-group-content--with-folder-names",
                commentsAdding: "automation-runs-test-comments--adding",
                hidden: "default-hidden",
                iconAnimate: "icon-animation-scale-pulse",
                groupHeaderSearchActive:
                  "automation-runs-group-header--search-active",
                groupPropertiesTitleHasTableToolbar:
                  "automation-runs-group-properties__title--has-table-toolbar",
              }),
              E(this, "templates", {
                actionEditorContainer:
                  '<div class="action-list__action__editor"></div>',
              }),
              E(this, "storage", {
                compactTreeTitles: "automation.results.compact_tree_titles",
                groupFolderNames: "automation.results.group_folder_names",
              }),
              E(this, "doMixDetailsHide", (e) => {
                this.clearTest(),
                  this.components.tests &&
                    this.components.tests.clearActivatedRow(),
                  this.updateUrl(),
                  this.refreshActions();
              }),
              E(this, "doMixResize", (e) => {
                this.refreshListPaneWidth();
              }),
              E(this, "doGroupsNodeClick", (e) => {
                this.components.groups.nodeLoading(e.$node, () =>
                  this.components.listContent.loading(() =>
                    this.selectGroup(e.$node, e.id).catch((e) => {
                      b.Z.handleError(e);
                    })
                  )
                );
              }),
              E(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              }),
              E(this, "doShortcutSearch", (e) => {
                e.preventDefault(),
                  this.components.testSearch &&
                    this.components.testSearch.focus();
              }),
              E(this, "doShortcutNext", (e) => {
                this.nextTest();
              }),
              E(this, "doShortcutPrevious", (e) => {
                this.previousTest();
              }),
              E(this, "doShortcutListUp", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.up(), this.scrollToActivatedTest());
              }),
              E(this, "doShortcutListDown", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.down(), this.scrollToActivatedTest());
              }),
              E(this, "doNavigatorClearItem", (e) => {
                this.clearTest(), this.refreshActions(), this.updateUrl();
              }),
              E(this, "doNavigatorActivateItem", (e) =>
                this.activateTest(
                  this.components.tests,
                  e.id,
                  e.$row,
                  this.components.tests.getField(e.id, "test")
                )
              ),
              E(this, "doNavigatorNextPage", (e) =>
                this.components.tests.nextPage()
              ),
              E(this, "doNavigatorPreviousPage", (e) =>
                this.components.tests.previousPage()
              ),
              E(this, "doNavigatorNextGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                return (
                  (t =
                    s.length > 0
                      ? this.components.groups.getAndLoadNextNode(s)
                      : Promise.resolve(this.components.groups.getFirstNode())),
                  t
                    .then((e) => {
                      if (!e || 0 == e.length) return Promise.resolve();
                      let t = e.data("id");
                      return (
                        (this.pageState.testId = null),
                        this.components.groups.markActivatedNode(e),
                        this.components.groups.markLoading(e),
                        this.refreshFragmentsWithCustomErrorHandling([
                          "groupContainer",
                          { groupId: t },
                        ])
                          .then((s) => {
                            this.components.groups.markCompleted(e),
                              (this.pageState.testId = null),
                              (this.pageState.groupId = t),
                              this.components.listContent.scrollTop(),
                              o.UI.fixedContainerScrollIntoViewIfNeeded(
                                this.components.groups.getActivatedNodeEntry(),
                                this.components.treeContent.getBody()
                              );
                          })
                          .catch((t) => {
                            this.components.groups.markCompleted(e),
                              b.Z.handleError(t);
                          })
                      );
                    })
                    .catch((e) => {
                      b.Z.handleError(e);
                    })
                );
              }),
              E(this, "doNavigatorPreviousGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                if (
                  ((t =
                    s.length > 0
                      ? this.components.groups.getPreviousNode(s)
                      : this.components.groups.getLastNode()),
                  0 == t.length)
                )
                  return Promise.resolve();
                let i = t.data("id");
                return (
                  (this.pageState.testId = null),
                  this.components.groups.markActivatedNode(t),
                  this.components.groups.markLoading(t),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "groupContainer",
                    { groupId: i, paginationCurrent: r.g.PaginationCurrentMax },
                  ])
                    .then((e) => {
                      this.components.groups.markCompleted(t),
                        (this.pageState.testId = null),
                        (this.pageState.groupId = i),
                        this.components.listContent.scrollTop(),
                        o.UI.fixedContainerScrollIntoViewIfNeeded(
                          this.components.groups.getActivatedNodeEntry(),
                          this.components.treeContent.getBody()
                        );
                    })
                    .catch((e) => {
                      this.components.groups.markCompleted(t),
                        b.Z.handleError(e);
                    })
                );
              }),
              E(this, "doGroupsConnected", (e) => {
                e.setCompactTitlesVisible(
                  this.compactTreeTitles &&
                    this.pageState.groupBy == r.g.AutomationRunGroupByFolder
                );
              }),
              E(this, "doGroupsAdded", (e, t) => {
                this.pageState.groupId = null;
                let s = this.components.groups.getActivatedNode();
                s.length > 0 && (this.pageState.groupId = s.first().data("id")),
                  this.navigator.setTree(e),
                  this.refreshActions(),
                  this.updateUrl();
              }),
              E(this, "doGroupsRemoved", (e, t) => {
                this.navigator.setTree(null);
              }),
              E(this, "doTestsConnected", (e, t) => {
                let s = 0 == e.getRowCount();
                if (
                  ($(this.groupContentTarget).toggleClass(
                    this.classes.groupContentEmpty,
                    s
                  ),
                  this.updateTestsToolbar(e),
                  this.hasGroupItemCountTarget)
                ) {
                  let t = e.getParams().itemCount || 0;
                  $(this.groupItemCountTarget).text(`(${t})`);
                }
              }),
              E(this, "doTestsRemoved", (e, t) => {
                this.navigator.setList(null),
                  this.hasGroupItemCountTarget &&
                    $(this.groupItemCountTarget).empty();
              }),
              E(this, "doTestsAdded", (e, t) => {
                let s = e.getResponsiveContentColumns();
                for (let e of s) this.updateResponsiveTestContent(e);
                this.navigator.setList(e),
                  this.refreshActions(),
                  this.updateUrl(),
                  this.updateTestsToolbar();
              }),
              E(this, "doTestsResizeContent", (e) => {
                this.updateResponsiveTestContent(e);
              }),
              E(this, "doTestsStateChange", (e) =>
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments([
                    "groupTests",
                    { state: e.state },
                  ]).then(() => {
                    this.updateUrl(e.state);
                  })
                )
              ),
              E(this, "doTestsColumnResize", (e) => {
                let t = _.clone(this.pageState.columns);
                t[e.name] && (t[e.name].width = e.width);
                let s = { columns: t };
                return n.N.post(
                  "automation/runs/save_test_columns/" + this.projectId,
                  n.N.toNetworkCase(s)
                ).then(() => {
                  (this.pageState.columns = t),
                    this.components.tests.resizeNonResponsiveColumn(
                      e.name,
                      e.width
                    );
                });
              }),
              E(this, "doTestsActionClick", (e) => {
                let t;
                switch (e.actionName) {
                  case "activate":
                    this.activateTest(e.target, e.id, e.$row, e.$field);
                    break;
                  case "copyId":
                    o.UI.copyTextToClipbiard(e.$field.data("copyContent")),
                      (t = e.$field.find(this.selectors.fieldIdCopyIcon)),
                      t.addClass(this.classes.iconAnimate),
                      setTimeout(() => {
                        t.removeClass(this.classes.iconAnimate);
                      }, 600);
                }
              }),
              E(this, "doTestCommentMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editComment(
                      e.context.id,
                      e.context.$comment,
                      e.context.$menu
                    );
                    break;
                  case "delete":
                    this.deleteComment(e.context.id);
                }
              }),
              E(this, "doTestEditCommentEditorRemoved", (e) => {
                this.endCommentEditing();
              }),
              E(this, "doTestEditCommentEditorLoaded", (e) => {
                this.components.testEditCommentEditor.focus();
              }),
              E(this, "doTestEditCommentEditorSuccess", (e) => {
                let t = null;
                return (
                  this.components.testCommentsPager &&
                    (t = this.components.testCommentsPager.getState()),
                  this.refreshFragments(["testCommentPage", { state: t }]).then(
                    () => {
                      this.endCommentEditing();
                    }
                  )
                );
              }),
              E(this, "doTestEditCommentEditorCancel", (e) => {
                this.endCommentEditing();
              }),
              E(this, "doTestCommentsPagerStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments([
                    "testCommentPage",
                    { state: e.state },
                  ]).then(() => {
                    this.endCommentEditing();
                  })
                )
              ),
              E(this, "doTestAddCommentEditorSuccess", (e) =>
                this.refreshFragments("testCommentPage").then(() => {
                  this.components.testAddCommentEditor.resetForm();
                })
              ),
              E(this, "doTestAddCommentEditorCancel", (e) => {
                this.hideTestAddCommentEditor();
              }),
              E(this, "doGroupingMenuActionClick", (e) => {
                if ((e.target.hide(), "select" == e.actionName)) {
                  let t = $(this.groupingMenuIconTarget);
                  o.UI.loading(t, () =>
                    this.changeGrouping(
                      e.actionValue,
                      e.$actionItem.data("name")
                    )
                  );
                }
              }),
              E(this, "doShowThreadFilterMenuActionClick", (e) => {
                let t = $(this.threadFilterMenuIconTarget);
                e.target.hide(),
                  "all" == e.actionName
                    ? o.UI.loading(t, () => {
                        let e = p.X.EmptyFilter;
                        return (
                          this.pageState.filter &&
                            (e = _.cloneDeep(this.pageState.filter)),
                          (e.conditions["automation_run_tests:thread_id"] = {}),
                          this.saveFilter(e)
                            .then(() => {
                              o.UI.setSelectActionText(
                                $(this.threadFilterMenuIconTarget),
                                v.Z.lang("automation_runs.threads_all")
                              );
                            })
                            .catch((e) => {
                              b.Z.handleError(e);
                            })
                        );
                      })
                    : "select" == e.actionName &&
                      o.UI.loading(t, () => {
                        let t = p.X.EmptyFilter;
                        return (
                          this.pageState.filter &&
                            (t = _.cloneDeep(this.pageState.filter)),
                          (t.conditions["automation_run_tests:thread_id"] = {
                            values: [e.actionValue],
                          }),
                          (t.mode = r.g.FiltersAll),
                          this.saveFilter(t)
                            .then(() => {
                              o.UI.setSelectActionText(
                                $(this.threadFilterMenuIconTarget),
                                e.$actionItem.data("name")
                              );
                            })
                            .catch((e) => {
                              b.Z.handleError(e);
                            })
                        );
                      });
              }),
              E(this, "doTestTabsChange", (e) => {
                this.refreshFragments([
                  "testTabContent",
                  { tab: e.index },
                ]).then(() => {
                  this.components.testTabs.highlightTab(e.index),
                    this.components.testTabs.setLoading(!1);
                });
              }),
              E(this, "doTestContextGroupsStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["testContextPage", { state: e.state }])
                )
              ),
              E(this, "doTestIssueGroupsStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["testIssuePage", { state: e.state }])
                )
              ),
              E(this, "doFolderNameMenuClick", (e) => {
                e.target.hide(),
                  (this.groupFolderNames = "show" == e.actionName),
                  b.Z.storage.setBoolItem(
                    this.storage.groupFolderNames,
                    this.groupFolderNames
                  ),
                  this.refreshTestsFolderNames();
              }),
              E(this, "doCompactTreeMenuClick", (e) => {
                e.target.hide(),
                  (this.compactTreeTitles = "compact" == e.actionName),
                  b.Z.storage.setBoolItem(
                    this.storage.compactTreeTitles,
                    this.compactTreeTitles
                  ),
                  this.components.groups &&
                    this.components.groups.setCompactTitlesVisible(
                      this.compactTreeTitles
                    );
              }),
              E(this, "doTestSearchSearch", (e) => {
                let t = { search: e.term };
                return n.N.post(
                  "automation/runs/render_test_search/" + this.run.id,
                  n.N.toNetworkCase(t)
                ).then((e) => e.data);
              }),
              E(this, "doTestSearchStateChange", (e) => {
                let t = {
                  search: this.components.testSearch.getSearchTerm(),
                  paginationCurrent: e.state.paginationCurrent,
                  paginationRows: e.state.paginationRows,
                };
                return n.N.post(
                  "automation/runs/render_test_search/" + this.run.id,
                  n.N.toNetworkCase(t)
                ).then((e) => e.data);
              }),
              E(this, "doTestSearchSelectItem", (e) =>
                e.tab
                  ? n.N.visitTab(
                      `automation/runs/results/${
                        this.run.id
                      }?test_id=${e.$row.data("id")}`
                    )
                  : n.N.visit(
                      `automation/runs/results/${
                        this.run.id
                      }?test_id=${e.$row.data("id")}`
                    )
              ),
              E(this, "doTestSearchFocus", (e) => {
                $(this.groupHeaderToolbarTarget).addClass(
                  this.classes.groupHeaderSearchActive
                );
              }),
              E(this, "doTestSearchBlur", (e) => {
                $(this.groupHeaderToolbarTarget).removeClass(
                  this.classes.groupHeaderSearchActive
                );
              }),
              E(this, "renderTreeGroupContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  n.N.post(
                    "automation/runs/render_tree_group_containers/" +
                      this.run.id,
                    n.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: ["treeContainer", "groupContainer"],
                  }))
                );
              }),
              E(this, "afterRenderTreeGroupContainers", () => {
                this.refreshTreeCompactNames(),
                  this.refreshTestsFolderNames(),
                  this.refreshListPaneWidth(),
                  (this.testContextStatuses = null);
              }),
              E(this, "renderTreeGroupTestContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  n.N.post(
                    "automation/runs/render_tree_group_test_containers/" +
                      this.run.id,
                    n.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: [
                      "treeContainer",
                      "groupContainer",
                      "testContainer",
                    ],
                  }))
                );
              }),
              E(this, "afterRenderTreeGroupTestContainers", () => {
                this.refreshTreeCompactNames(),
                  this.refreshTestsFolderNames(),
                  this.refreshListPaneWidth();
              }),
              E(this, "renderGroupContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.groupId && (t.groupId = e.groupId),
                  e.paginationCurrent &&
                    (t.paginationCurrent = e.paginationCurrent),
                  n.N.post(
                    "automation/runs/render_group_container/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              E(this, "afterRenderGroupContainer", () => {
                this.refreshListPaneWidth(), this.refreshTestsFolderNames();
              }),
              E(this, "renderGroupTests", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.tests &&
                      (t = this.components.tests.getState()),
                  _.defaults(t, this.pageState),
                  e.withPagination || delete t.paginationCurrent,
                  n.N.post(
                    "automation/runs/render_group_tests/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              E(this, "afterRenderGroupTests", () => {
                this.updateTestsToolbar();
              }),
              E(this, "renderTestContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.testId && (t.testId = e.testId),
                  n.N.post(
                    "automation/runs/render_test_container/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              E(this, "afterRenderTestContainer", () => {
                this.testContextStatuses = null;
              }),
              E(this, "renderTestTabContent", (e = {}) => {
                let t, s;
                return (
                  (t =
                    "tab" in e
                      ? e.tab
                      : this.components.testTabs.getCurrentTab()),
                  (s =
                    0 == t
                      ? "automation/runs/render_test_comments/" +
                        this.pageState.testId
                      : 1 == t
                      ? "automation/runs/render_test_context/" +
                        this.pageState.testId
                      : "automation/runs/render_test_issues/" +
                        this.pageState.testId),
                  n.N.post(s)
                );
              }),
              E(this, "afterRenderTestTabContent", () => {
                this.testContextStatuses = null;
              }),
              E(this, "renderTestCommentPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  n.N.post(
                    "automation/runs/render_test_comment_page/" +
                      this.pageState.testId,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              E(this, "afterRenderTestCommentPage", () => {}),
              E(this, "renderTestContextPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  this.testContextStatuses &&
                    (t.statuses = this.testContextStatuses),
                  n.N.post(
                    "automation/runs/render_test_context_page/" +
                      this.pageState.testId,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              E(this, "afterRenderTestContextPage", () => {}),
              E(this, "renderTestIssuePage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  n.N.post(
                    "automation/runs/render_test_issue_page/" +
                      this.pageState.testId,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              E(this, "afterRenderTestIssuePage", () => {});
          }
          prepare() {
            (this.compactTreeTitles = b.Z.storage.getBoolItem(
              this.storage.compactTreeTitles,
              !0
            )),
              (this.groupFolderNames = b.Z.storage.getBoolItem(
                this.storage.groupFolderNames,
                !0
              ));
          }
          load() {
            if (
              ((this.page = { name: "results" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              (this.pageState = {
                testId: this.params.testId,
                groupBy: this.params.groupBy,
                groupId: this.params.groupId,
                columns: this.params.columns,
                filter: this.params.filter,
              }),
              (this.testContextStatuses = null),
              (this.$currentCommentEditContainer = null),
              this.pageState.filter &&
                0 == _.keys(this.pageState.filter.conditions).length &&
                (this.pageState.filter = null),
              b.Z.requestChild(this.component, "treeContent"),
              b.Z.requestChild(this.component, "listContent"),
              b.Z.requestChild(this.component, "detailsContent"),
              b.Z.requestChild(this.component, "mix", {
                events: {
                  detailshide: this.doMixDetailsHide,
                  resize: this.doMixResize,
                },
              }),
              b.Z.requestChild(this.component, "groups", {
                onConnected: this.doGroupsConnected,
                onAdded: this.doGroupsAdded,
                onRemoved: this.doGroupsRemoved,
                events: { nodeclick: this.doGroupsNodeClick },
              }),
              b.Z.requestChild(this.component, "tests", {
                onConnected: this.doTestsConnected,
                onAdded: this.doTestsAdded,
                onRemoved: this.doTestsRemoved,
                events: {
                  actionclick: this.doTestsActionClick,
                  statechange: this.doTestsStateChange,
                  resizecontent: this.doTestsResizeContent,
                  columnresize: this.doTestsColumnResize,
                },
              }),
              b.Z.requestChild(this.component, "testTabs", {
                events: { tabchange: this.doTestTabsChange },
              }),
              b.Z.requestChild(this.component, "testContextGroups", {
                events: { statechange: this.doTestContextGroupsStateChange },
              }),
              b.Z.requestChild(this.component, "testAddCommentEditor", {
                events: {
                  success: this.doTestAddCommentEditorSuccess,
                  cancel: this.doTestAddCommentEditorCancel,
                },
              }),
              b.Z.requestChild(this.component, "testEditCommentEditor", {
                onRemoved: this.doTestEditCommentEditorRemoved,
                events: {
                  loaded: this.doTestEditCommentEditorLoaded,
                  success: this.doTestEditCommentEditorSuccess,
                  cancel: this.doTestEditCommentEditorCancel,
                },
              }),
              b.Z.requestChild(this.component, "testCommentsPager", {
                events: { statechange: this.doTestCommentsPagerStateChange },
              }),
              b.Z.requestChild(this.component, "testIssueGroups", {
                events: { statechange: this.doTestIssueGroupsStateChange },
              }),
              b.Z.requestChild(this.component, "testSearch", {
                events: {
                  search: this.doTestSearchSearch,
                  selectitem: this.doTestSearchSelectItem,
                  statechange: this.doTestSearchStateChange,
                  focus: this.doTestSearchFocus,
                  blur: this.doTestSearchBlur,
                },
              }),
              o.UI.initialize(this.element),
              (this.fragmentsAfterEdit = ["header"]),
              this.registerBaseFragments(),
              this.fragments.register(
                "treeGroupContainers",
                this.renderTreeGroupContainers,
                { completedCallback: this.afterRenderTreeGroupContainers }
              ),
              this.fragments.register(
                "treeGroupTestContainers",
                this.renderTreeGroupTestContainers,
                { completedCallback: this.afterRenderTreeGroupTestContainers }
              ),
              this.fragments.register(
                "groupContainer",
                this.renderGroupContainer,
                { completedCallback: this.afterRenderGroupContainer }
              ),
              this.fragments.register("groupTests", this.renderGroupTests, {
                completedCallback: this.afterRenderGroupTests,
              }),
              this.fragments.register(
                "testContainer",
                this.renderTestContainer,
                { completedCallback: this.afterRenderTestContainer }
              ),
              this.fragments.register(
                "testTabContent",
                this.renderTestTabContent,
                { completedCallback: this.afterRenderTestTabContent }
              ),
              this.fragments.register(
                "testCommentPage",
                this.renderTestCommentPage,
                { completedCallback: this.afterRenderTestCommentPage }
              ),
              this.fragments.register(
                "testContextPage",
                this.renderTestContextPage,
                { completedCallback: this.afterRenderTestContextPage }
              ),
              this.fragments.register(
                "testIssuePage",
                this.renderTestIssuePage,
                { completedCallback: this.afterRenderTestIssuePage }
              ),
              this.shortcuts.register(l.N.H, this.doShortcutPrevious, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(l.N.J, this.doShortcutListUp, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(l.N.K, this.doShortcutListDown, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(l.N.L, this.doShortcutNext, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(l.N.P, this.doShortcutPassNext, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(l.N.R, this.doShortcutAddResult, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(l.N.Slash, this.doShortcutSearch, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(l.N.P, this.doShortcutPrint, {
                control: !0,
              }),
              (this.navigator = new a.C()),
              this.navigator.events.on(
                "activateitem",
                this.doNavigatorActivateItem
              ),
              this.navigator.events.on("clearitem", this.doNavigatorClearItem),
              this.navigator.events.on("nextgroup", this.doNavigatorNextGroup),
              this.navigator.events.on("nextpage", this.doNavigatorNextPage),
              this.navigator.events.on(
                "previousgroup",
                this.doNavigatorPreviousGroup
              ),
              this.navigator.events.on(
                "previouspage",
                this.doNavigatorPreviousPage
              ),
              !this.params.isRunEmpty)
            ) {
              let e = {};
              this.params.paginationCurrent &&
                (e.paginationCurrent = this.params.paginationCurrent),
                this.params.paginationRows &&
                  (e.paginationRows = this.params.paginationRows),
                this.params.sortColumn &&
                  (e.sortColumn = this.params.sortColumn),
                this.params.sortDirection &&
                  (e.sortDirection = this.params.sortDirection),
                this.loadInitialContent(e);
            }
            this.updateUrl();
          }
          unload() {
            this.navigator.setList(null), this.navigator.setTree(null);
          }
          loadInitialContent(e) {
            this.pageState.testId
              ? this.refreshFragments(["treeGroupTestContainers", e]).then(
                  () => {
                    this.components.treeContent.showContent(
                      r.g.MixContentContent
                    ),
                      this.components.listContent.showContent(
                        r.g.MixContentContent
                      ),
                      this.components.detailsContent.showContent(
                        r.g.MixContentContent
                      ),
                      this.refreshActions(),
                      this.refreshListPaneWidth();
                  }
                )
              : this.refreshFragments(["treeGroupContainers", e]).then(() => {
                  this.components.treeContent.showContent(
                    r.g.MixContentContent
                  ),
                    this.components.listContent.showContent(
                      r.g.MixContentContent
                    ),
                    this.refreshActions(),
                    this.refreshListPaneWidth();
                });
          }
          refreshActions() {
            let e = this.pageState.groupBy == r.g.AutomationRunGroupByFolder;
            o.UI.toggleSelectActionEnabled(
              $(this.showCompactTreeMenuActionTarget),
              e
            ),
              o.UI.toggleSelectActionEnabled(
                $(this.showFolderNameMenuActionTargets),
                !e
              ),
              o.UI.toggleIconActionEnabled(
                $(this.selectColumnsIconTargets),
                !!this.components.tests
              );
          }
          updateUrl(e = null) {
            let t = {},
              s = e;
            this.pageState.groupBy != r.g.AutomationRunGroupByFolder &&
              (t.group_by = this.pageState.groupBy),
              this.pageState.groupId && (t.group_id = this.pageState.groupId),
              !s &&
                this.components.tests &&
                (s = this.components.tests.getState()),
              s &&
                (s.paginationCurrent &&
                  1 != s.paginationCurrent &&
                  (t.pagination_current = s.paginationCurrent),
                s.paginationRows &&
                  s.paginationRows != r.g.PaginationDefaultRows &&
                  (t.pagination_rows = s.paginationRows),
                s.sortColumn && (t.sort_column = s.sortColumn),
                s.sortDirection && (t.sort_direction = s.sortDirection)),
              this.pageState.testId && (t.test_id = this.pageState.testId),
              this.pageState.filter &&
                (t.filter = v.Z.base64EncodeUrlsafe(
                  JSON.stringify(this.pageState.filter)
                ));
            let i = Object.keys(t).map((e) => `${e}=${t[e]}`),
              o = "automation/runs/results/" + this.run.id;
            i.length > 0
              ? b.Z.replaceLocation(n.N.url(o + "?" + i.join("&")))
              : b.Z.replaceLocation(n.N.url(o));
          }
          clearTest() {
            this.components.detailsContent.showContent(
              r.g.MixContentNoSelection
            ),
              this.fragments.empty("testContainer"),
              (this.pageState.testId = null),
              (this.testContextStatuses = null);
          }
          selectGroup(e, t, s = !0) {
            let i = this.components.groups.getActivatedNode();
            return (
              this.components.groups.markActivatedNode(e),
              s &&
                this.components.mix.getDetailsVisible() &&
                this.components.detailsContent.getContentVisible(
                  r.g.MixContentContent
                ) &&
                this.components.detailsContent.markLoading(),
              (this.pageState.testId = null),
              this.refreshFragmentsWithCustomErrorHandling([
                "groupContainer",
                { groupId: t },
              ])
                .then((e) => {
                  this.components.detailsContent.markCompleted(),
                    this.clearTest(),
                    (this.pageState.groupId = t),
                    this.components.mix.getTreeOverlayVisible() &&
                      this.components.mix.hideTreeOverlay(),
                    this.components.listContent.scrollTop(),
                    this.refreshActions(),
                    this.updateUrl();
                })
                .catch((e) => {
                  throw (
                    (this.components.groups.markActivatedNode(i),
                    this.components.detailsContent.markCompleted(),
                    this.clearTest(),
                    this.updateUrl(),
                    this.refreshActions(),
                    e)
                  );
                })
            );
          }
          doNextTest() {
            this.nextTest();
          }
          doPreviousTest() {
            this.previousTest();
          }
          nextTest() {
            if (this.components.groups)
              return (
                this.components.mix.getDetailsVisible() ||
                  (this.components.detailsContent.showContent(
                    r.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
                o.UI.loading($(this.nextTestIconTarget), () =>
                  this.navigator
                    .next()
                    .then(
                      (e) => (
                        b.Z.resetPopupTracker(),
                        this.scrollToActivatedTestOrTop(),
                        e
                      )
                    )
                )
              );
          }
          previousTest() {
            if (this.components.groups)
              return (
                this.components.mix.getDetailsVisible() ||
                  (this.components.detailsContent.showContent(
                    r.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
                o.UI.loading($(this.previousTestIconTarget), () =>
                  this.navigator
                    .previous()
                    .then(
                      (e) => (
                        b.Z.resetPopupTracker(),
                        this.scrollToActivatedTestOrTop(),
                        e
                      )
                    )
                )
              );
          }
          scrollToActivatedTest() {
            if (this.components.tests) {
              let e = this.components.tests.getActivatedRow();
              return (
                e.length > 0 &&
                (o.UI.fixedContainerScrollIntoViewIfNeeded(
                  e,
                  this.components.listContent.getBody()
                ),
                !0)
              );
            }
            return !1;
          }
          scrollToActivatedTestOrTop() {
            this.scrollToActivatedTest() ||
              this.components.listContent.scrollTop();
          }
          updateResponsiveTestContent(e) {
            "automation_run_tests:issues" == e.name &&
              (y.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.issueTags;
                return t ? JSON.parse(t) : [];
              }),
              o.UI.initialize(this.components.tests.$element));
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () => this.selectColumns(t));
          }
          selectColumns(e) {
            let t = { columns: this.pageState.columns, showWidth: !0 };
            return n.N.post(
              "automation/runs/render_test_columns/" + this.projectId,
              n.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new S.D();
                (s.onSubmit = (e) => {
                  let t = { columns: e };
                  return n.N.post(
                    "automation/runs/save_test_columns/" + this.projectId,
                    n.N.toNetworkCase(t)
                  ).then(
                    () => (
                      (this.pageState.columns = e),
                      this.refreshFragments("groupTests")
                    )
                  );
                }),
                  s.show(e, d.Fz.BottomRight, t.data);
              })
              .catch((e) => {
                b.Z.handleError(e);
              });
          }
          activateTest(e, t, s, i) {
            let o = this.components.mix.getDetailsVisible(),
              n = this.components.mix.getMode(),
              a = e.getActivatedRow();
            return (
              o
                ? this.components.detailsContent.markLoading()
                : (this.components.detailsContent.showContent(
                    r.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
              e.loading(
                "actionfield",
                i,
                () => (
                  e.markActivatedRow(s),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "testContainer",
                    { testId: t },
                  ])
                    .then((e) => {
                      (this.pageState.testId = t),
                        this.components.detailsContent.markCompleted(),
                        this.components.detailsContent.showContent(
                          r.g.MixContentContent
                        ),
                        this.components.detailsContent.scrollTop(),
                        this.updateUrl(),
                        this.refreshActions();
                    })
                    .catch((t) => {
                      o
                        ? this.components.detailsContent.markCompleted()
                        : this.components.mix.setMode(n),
                        e.markActivatedRow(a),
                        b.Z.handleError(t);
                    })
                )
              )
            );
          }
          doShowTestCommentMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.action),
              i = s.data("id");
            const n = [];
            n.push({
              type: "action",
              name: "edit",
              title: v.Z.lang("automation_runs.edit_comment"),
              callback: this.doTestCommentMenuClick,
            }),
              n.push({ type: "divider" }),
              n.push({
                type: "action",
                name: "delete",
                title: v.Z.lang("automation_runs.delete_comment"),
                callback: this.doTestCommentMenuClick,
              }),
              new k.x(n, { context: { $menu: t, $comment: s, id: i } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          deleteComment(e) {
            let t;
            (t = new T.A(
              v.Z.lang("automation_runs.delete_comment_title"),
              v.Z.lang("automation_runs.delete_comment_message"),
              v.Z.lang("automation_runs.delete_comment_button")
            )),
              (t.onSuccess = () =>
                n.N.post("automation/runs/delete_test_comment/" + e).then(
                  () => {
                    let e = null;
                    return (
                      this.components.testCommentsPager &&
                        (e = this.components.testCommentsPager.getState()),
                      this.refreshFragments(["testCommentPage", { state: e }])
                    );
                  }
                )),
              t.show();
          }
          editComment(e, t, s) {
            o.UI.loading(s, () =>
              n.N.post("automation/runs/render_update_test_comment/" + e)
                .then((e) => {
                  this.components.testAddCommentEditor.setEnabled(!1),
                    this.components.testCommentsPager &&
                      this.components.testCommentsPager.setVisible(!1),
                    this.endCommentEditing(),
                    setTimeout(() => {
                      t.children().hide();
                      let s = $(this.templates.actionEditorContainer);
                      s.html(e.data),
                        t.append(s),
                        (this.$currentCommentEditContainer = s),
                        o.UI.toggleTextEnabled(
                          $(this.testAddCommentPlaceholderTarget),
                          !1
                        );
                    }, 0);
                })
                .catch((e) => {
                  b.Z.handleError(e), this.endCommentEditing();
                })
            );
          }
          endCommentEditing() {
            if (!this.$currentCommentEditContainer) return;
            let e = this.$currentCommentEditContainer.closest(
              this.selectors.action
            );
            this.$currentCommentEditContainer.remove(),
              e.children().show(),
              (this.$currentCommentEditContainer = null),
              o.UI.toggleTextEnabled(
                $(this.testAddCommentPlaceholderTarget),
                !0
              ),
              this.components.testAddCommentEditor &&
                this.components.testAddCommentEditor.setEnabled(!0),
              this.components.testCommentsPager &&
                this.components.testCommentsPager.setVisible(!0);
          }
          hideTestAddCommentEditor() {
            this.components.testAddCommentEditor.resetForm(),
              $(this.testCommentsContainerTarget).removeClass(
                this.classes.commentsAdding
              );
          }
          doTestCommentPlaceholderFocus(e) {
            this.$currentCommentEditContainer ||
              ($(this.testCommentsContainerTarget).addClass(
                this.classes.commentsAdding
              ),
              this.components.testAddCommentEditor.focus());
          }
          keyDown(e) {
            e.which == l.N.ESC
              ? this.components.testAddCommentEditor &&
                this.components.testAddCommentEditor.getFocused()
                ? this.hideTestAddCommentEditor()
                : this.components.testEditCommentEditor &&
                  this.components.testEditCommentEditor.getFocused()
                ? this.endCommentEditing()
                : this.components.mix.hideDetails()
              : e.which == l.N.S &&
                (e.ctrlKey || e.metaKey) &&
                (this.components.testAddCommentEditor &&
                this.components.testAddCommentEditor.getFocused()
                  ? this.components.testAddCommentEditor.submit()
                  : this.components.testEditCommentEditor &&
                    this.components.testEditCommentEditor.getFocused() &&
                    this.components.testEditCommentEditor.submit());
          }
          updateStickyContent(e) {
            if (!this.components.listContent) return;
            let t = e - 40;
            this.hasGroupPropertyContainerTarget &&
              $(this.groupPropertyContainerTarget).css({ maxWidth: `${t}px` }),
              this.hasGroupEmptyContainerTarget &&
                $(this.groupEmptyContainerTarget).css({ maxWidth: `${t}px` });
          }
          updateTestsToolbar(e = null) {
            if (
              (e || (e = this.components.tests),
              e && this.hasGroupPropertiesTarget)
            ) {
              let t = $(this.groupPropertiesTarget),
                s = e.getToolbarElement();
              t.height() &&
                (s.removeClass(this.classes.hidden),
                s.css("top", `-${t.height() + 18}px`)),
                $(this.groupPropertiesTitleTarget).toggleClass(
                  this.classes.groupPropertiesTitleHasTableToolbar,
                  s.find(this.selectors.tableToolbarPagination).length > 0
                );
            }
          }
          responsiveContainerResize() {
            this.refreshListPaneWidth();
          }
          refreshListPaneWidth() {
            if (!this.components.listContent) return;
            let e = this.components.listContent.getBody();
            if (0 == e.length) return;
            let t = e[0].clientWidth;
            this.updateStickyContent(t),
              this.updateTestsToolbar(),
              this.components.detailsContent &&
                o.UI.dropdownRefreshSizes(
                  this.components.detailsContent.getBody()
                );
          }
          doNomatchCancelFilter(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.saveFilter(p.X.EmptyFilter)
                .then(() => {
                  o.UI.setSelectActionText(
                    $(this.threadFilterMenuIconTarget),
                    v.Z.lang("automation_runs.threads_all")
                  );
                })
                .catch((e) => {
                  b.Z.handleError(e);
                })
            );
          }
          doNomatchShowFolders(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.changeGrouping(
                r.g.AutomationRunGroupByFolder,
                v.Z.lang("automation_runs.folder")
              )
            );
          }
          doMissingCancelFilter(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.saveFilter(p.X.EmptyFilter)
                .then(() => {
                  o.UI.setSelectActionText(
                    $(this.threadFilterMenuIconTarget),
                    v.Z.lang("automation_runs.threads_all")
                  );
                })
                .catch((e) => {
                  b.Z.handleError(e);
                })
            );
          }
          doShowGroupingMenu() {
            let e = $(this.groupingMenuIconTarget);
            o.UI.popupVisible(e) ||
              o.UI.loading(e, () => {
                let t = { groupBy: this.pageState.groupBy };
                return n.N.post(
                  "automation/runs/render_test_grouping/" + this.projectId,
                  n.N.toNetworkCase(t)
                )
                  .then((t) => {
                    const s = new c(this.pageState.groupBy);
                    s.events.on("actionclick", this.doGroupingMenuActionClick),
                      s.show(e, d.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    b.Z.handleError(e);
                  });
              });
          }
          changeGrouping(e, t) {
            (this.pageState.groupBy = e),
              (this.pageState.groupId = null),
              (this.pageState.caseId = null);
            let s = { groupBy: e };
            return n.N.post(
              "automation/runs/save_test_grouping/" + this.projectId,
              n.N.toNetworkCase(s)
            )
              .then((e) =>
                this.refreshFragments("treeGroupContainers").then(() => {
                  let e = $(this.groupingMenuIconTarget);
                  o.UI.setSelectActionText(e, t),
                    this.clearTest(),
                    this.updateUrl(),
                    this.refreshActions();
                })
              )
              .catch((e) => {
                b.Z.handleError(e);
              });
          }
          doCancelFilter() {
            let e = $(this.filterIconTarget);
            o.UI.getIconActionEnabled(e) &&
              (o.UI.popupVisible(e) && o.UI.getVisiblePopup(e).hide(),
              o.UI.loading(e, () =>
                this.saveFilter(p.X.EmptyFilter)
                  .then(() => {
                    o.UI.setSelectActionText(
                      $(this.threadFilterMenuIconTarget),
                      v.Z.lang("automation_runs.threads_all")
                    );
                  })
                  .catch((e) => {
                    b.Z.handleError(e);
                  })
              ));
          }
          doFilter() {
            let e = $(this.filterIconTarget),
              t = $(this.filterIconLabelTarget);
            o.UI.getIconActionEnabled(e) &&
              (o.UI.popupVisible(t) ||
                o.UI.loading(e, () => {
                  let e = this.pageState.filter
                    ? this.pageState.filter
                    : p.X.EmptyFilter;
                  return n.N.post(
                    "automation/runs/render_test_filter/" + this.run.id,
                    n.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const s = new m.y();
                      s.events.on("selectfolders", (e) => {
                        let t = { selected: e.ids };
                        return n.N.post(
                          "automation/runs/render_select_folders/" +
                            this.run.id,
                          n.N.toNetworkCase(t)
                        ).then((t) => {
                          const i = new w();
                          s.addActiveDialog(i),
                            (i.onHidden = () => {
                              s.removeActiveDialog(i);
                            }),
                            (i.onSuccess = (t) => {
                              let s = { selected: t };
                              return n.N.post(
                                "automation/runs/render_test_filter_folders/" +
                                  this.run.id,
                                n.N.toNetworkCase(s)
                              ).then((t) => {
                                e.target.setFolderFilterContent(e.name, t.data);
                              });
                            }),
                            i.show(t.data);
                        });
                      }),
                        (s.onSubmit = (e) =>
                          this.saveFilter(e.filter).then(() => {
                            let t = null;
                            this.pageState.filter &&
                              (t =
                                this.pageState.filter.conditions[
                                  "automation_run_tests:thread_id"
                                ]);
                            let s = v.Z.lang("automation_runs.threads_all");
                            t &&
                              t.values &&
                              (s =
                                1 == t.values.length
                                  ? e.labels[
                                      "automation_run_tests:thread_id"
                                    ][0]
                                  : v.Z.lang("automation_runs.threads_many", {
                                      count: t.values.length,
                                    })),
                              o.UI.setSelectActionText(
                                $(this.threadFilterMenuIconTarget),
                                s
                              );
                          })),
                        s.show(t, d.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      b.Z.handleError(e);
                    });
                }));
          }
          getThreadFilterIds() {
            let e = null;
            return (
              this.pageState.filter &&
                (e =
                  this.pageState.filter.conditions[
                    "automation_run_tests:thread_id"
                  ]),
              e && e.values ? e.values : []
            );
          }
          doShowThreadFilterMenu() {
            let e = $(this.threadFilterMenuIconTarget);
            o.UI.popupVisible(e) ||
              o.UI.loading(e, () =>
                n.N.post(
                  "automation/runs/render_thread_filter/" + this.run.id,
                  n.N.toNetworkCase({})
                )
                  .then((t) => {
                    let s = this.getThreadFilterIds();
                    const i = new g(0 == s.length, 1 == s.length ? s[0] : null);
                    i.events.on(
                      "actionclick",
                      this.doShowThreadFilterMenuActionClick
                    ),
                      i.show(e, d.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    b.Z.handleError(e);
                  })
              );
          }
          saveFilter(e) {
            return n.N.post(
              "automation/runs/save_test_filter/" + this.projectId,
              n.N.toNetworkCase(e)
            ).then((e) => {
              let t = _.keys(e.data.conditions).length;
              return (
                (this.pageState.filter = t > 0 ? e.data : null),
                this.refreshFragments([
                  "treeGroupContainers",
                  { forceGroup: !0 },
                ]).then(() => {
                  let e = $(this.filterIconTarget);
                  o.UI.setSelectActionCount(e, t),
                    this.clearTest(),
                    this.updateUrl(),
                    this.refreshActions(),
                    this.updateEmptyRun();
                })
              );
            });
          }
          updateEmptyRun() {
            this.hasEmptyTreePlaceholderTarget &&
              (this.clearTest(),
              this.components.mix.hideDetails(),
              this.updateUrl());
          }
          doRefresh() {
            o.UI.loading($(this.refreshIconTarget), () =>
              this.refreshFragments("treeGroupContainers").then(() => {
                this.clearTest(),
                  this.updateUrl(),
                  this.refreshActions(),
                  this.updateEmptyRun();
              })
            );
          }
          doShowGroupTitleInfo(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.groupPropertiesTarget),
              i = s.data("link");
            new f.N({
              title: s.data("name"),
              id: s.data("id"),
              link: i,
              url: n.N.url(i),
            }).show(t, d.Fz.BottomLeft);
          }
          doShowTestTitleInfo(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.testPropertiesTarget),
              i = s.data("link");
            new f.N({
              title: s.data("name"),
              id: s.data("id"),
              link: i,
              url: n.N.url(i),
            }).show(t, d.Fz.BottomLeft);
          }
          doTestContextFilter(e) {
            let t = $(this.testContextFilterIconTarget),
              s = $(this.testContextFilterIconLabelTarget);
            o.UI.popupVisible(s) ||
              o.UI.loading(t, () => {
                let e = {};
                return (
                  this.testContextStatuses &&
                    (e.selected = this.testContextStatuses),
                  n.N.post(
                    "automation/runs/render_test_status_filter/" + this.run.id,
                    n.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const i = new x.d();
                      (i.onSubmit = (e) => (
                        e.condition.values && e.condition.values.length > 0
                          ? (this.testContextStatuses = e.condition.values)
                          : (this.testResultsStatuses = null),
                        this.refreshFragments("testContextPage").then(() => {
                          e.condition.values && e.condition.values.length > 0
                            ? o.UI.setSelectActionCount(
                                t,
                                e.condition.values.length
                              )
                            : o.UI.setSelectActionCount(t, 0);
                        })
                      )),
                        i.show(s, d.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      b.Z.handleError(e);
                    })
                );
              });
          }
          doTestContextCancelFilter() {
            let e = $(this.testContextFilterIconTarget);
            o.UI.loading(
              e,
              () => (
                (this.testContextStatuses = null),
                this.refreshFragments("testContextPage").then(() => {
                  o.UI.setSelectActionCount(e, 0);
                })
              )
            );
          }
          refreshTreeCompactNames() {
            let e = o.UI.getByName(
              "groups",
              this.components.treeContent.$element
            );
            $(this.selectors.treeNodeEntry, e).each((e, t) => {
              let s = $(this.selectors.treeNodeEntryTitleFull, t);
              $(this.selectors.treeNodeEntryTitleCompact, t).get(
                0
              ).textContent = s.get(0).textContent.trim();
            });
            let t = $(this.selectors.treeTopLevelNodeEntry, e),
              s = $(this.selectors.treeNodeEntryTitleFull, t)
                .get()
                .map((e) => e.textContent.trim()),
              i = 0;
            if (s.length > 1) {
              let e = v.Z.longestCommonPrefixWithDelimiter(s),
                t = s.reduce((e, t) => Math.min(e, t.length), s[0].length);
              e.length < t && e.length >= 3 && (i = e.length);
            }
            t.each((e, t) => {
              let s = $(this.selectors.treeNodeEntryTitleFull, t);
              $(this.selectors.treeNodeEntryTitleCompact, t).get(
                0
              ).textContent = s.get(0).textContent.trim().substr(i);
            });
          }
          refreshTestsFolderNames() {
            this.hasGroupContentTarget &&
              $(this.groupContentTarget).toggleClass(
                this.classes.groupContentWithFolderNames,
                this.pageState.groupBy != r.g.AutomationRunGroupByFolder &&
                  this.groupFolderNames
              );
          }
          doShowFolderNameMenu() {
            let e = $(this.showFolderNameMenuActionTargets).filter(
              this.selectors.visible
            );
            if (!o.UI.getSelectActionEnabled(e)) return;
            let t = $(this.showFolderNameMenuIconTargets).filter(
              this.selectors.visible
            );
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "show",
              title: v.Z.lang("automation_runs.folder_name_show"),
              callback: this.doFolderNameMenuClick,
              active: this.groupFolderNames,
            }),
              s.push({
                type: "action",
                name: "hide",
                title: v.Z.lang("automation_runs.folder_name_dont_show"),
                callback: this.doFolderNameMenuClick,
                active: !this.groupFolderNames,
              }),
              new k.x(s).show(t, d.Fz.BottomLeft);
          }
          doShowCompactTreeMenu() {
            let e = $(this.showCompactTreeMenuActionTarget);
            if (!o.UI.getSelectActionEnabled(e)) return;
            let t = $(this.showCompactTreeMenuIconTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "full",
              title: v.Z.lang("automation_runs.tree_titles_full"),
              callback: this.doCompactTreeMenuClick,
              active: !this.compactTreeTitles,
            }),
              s.push({
                type: "action",
                name: "compact",
                title: v.Z.lang("automation_runs.tree_titles_compact"),
                callback: this.doCompactTreeMenuClick,
                active: this.compactTreeTitles,
              }),
              new k.x(s).show(t, d.Fz.BottomLeft);
          }
          getCurrentFilters() {
            return this.pageState.filter;
          }
          getCurrentColumns() {
            return this.pageState.columns;
          }
        }
        E(N, "targets", [
          "editButton",
          "editMenuButton",
          "emptyTreePlaceholder",
          "exportButton",
          "filterIcon",
          "filterIconLabel",
          "groupContent",
          "groupEmptyContainer",
          "groupHeaderToolbar",
          "groupingMenuIcon",
          "groupItemCount",
          "groupProperties",
          "groupPropertiesTitle",
          "groupPropertyContainer",
          "groupTestsContainer",
          "nextTestIcon",
          "previousTestIcon",
          "refreshIcon",
          "responsiveContainer",
          "selectColumnsIcon",
          "showCompactTreeMenuAction",
          "showCompactTreeMenuIcon",
          "showFolderNameMenuAction",
          "showFolderNameMenuIcon",
          "showInfoIcon",
          "testAddCommentPlaceholder",
          "testCommentsContainer",
          "testContextFilterIcon",
          "testContextFilterIconLabel",
          "testProperties",
          "threadFilterMenuIcon",
        ]);
      },
      78085: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { AddEditControlMode: () => h, default: () => c });
        var i = s(89432),
          o = s(96622),
          n = s(13814),
          r = s(36649),
          a = s(7042),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class c extends i.d {
          constructor(...e) {
            super(...e),
              d(this, "selectors", {
                controlGroup: ".control-group",
                controlGroupSection: ".control-group__section",
              }),
              d(this, "classes", {
                controlGroupFocused: "control-group--focused",
                commentEditorError: "automation-run-test-comment-editor--error",
              }),
              d(this, "doFocusTrackerChange", (e) => {
                this.$controlGroup.toggleClass(
                  this.classes.controlGroupFocused,
                  e.focused
                ),
                  e.focused || this.events.trigger("blur", { target: this });
              }),
              d(this, "doControlGroupMouseDown", (e) => {
                let t = $(e.target).add($(e.target).parents());
                this.focusTracker.hasElement(t) ||
                  (this.getEnabled() &&
                    (e.preventDefault(), this.components.comment.focus()));
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.mode = this.params.mode),
              (this.testId = this.params.testId),
              (this.commentId = this.params.commentId),
              (this.enabled = !0),
              (this.focusTracker = new r.R(this.$element, !0)),
              this.focusTracker.events.on("change", this.doFocusTrackerChange),
              (this.$controlGroup = $(
                this.selectors.controlGroup,
                this.$element
              )),
              this.$controlGroup.on("mousedown", this.doControlGroupMouseDown),
              (this.$submitButton = $(this.submitButtonTarget)),
              (this.$cancelButton = $(this.cancelButtonTarget)),
              (this.$validationErrors = $(this.validationErrorsTarget)),
              (this.$toolbar = $(this.toolbarTarget)),
              o.UI.initialize(this.$element),
              l.Z.requestChild(this.component, "comment", {
                onAdded: () => {
                  this.components.comment.loadEditor().then(() => {
                    this.focusTracker.refreshElements(this.$element),
                      this.events.trigger("loaded", { target: this });
                  });
                },
              }),
              l.Z.requestChild(this.component, "issues");
          }
          unload() {
            this.$controlGroup.off("mousedown", this.doControlGroupMouseDown);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              let e = {
                  comment: this.components.comment.getData(),
                  issues: this.components.issues.getIssues(),
                },
                t =
                  this.mode == h.Add
                    ? "automation/runs/create_test_comment/" + this.testId
                    : "automation/runs/update_test_comment/" + this.commentId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) =>
                  Promise.all(
                    this.events.trigger("success", {
                      target: this,
                      result: e.data,
                    })
                  )
                    .then(() => {
                      this.hideValidationErrors();
                    })
                    .catch((e) => {
                      l.Z.handleError(e);
                    })
                )
                .catch((e) => {
                  a.l.handleCustomFormError(e, (e, t) => {
                    this.showValidationErrors(t);
                  });
                });
            });
          }
          cancel() {
            this.events.trigger("cancel", { target: this });
          }
          doCancel() {
            this.cancel();
          }
          resetForm() {
            this.hideValidationErrors(),
              this.components.issues.clear(),
              this.components.comment.setData(""),
              this.components.comment.focus();
          }
          focus() {
            this.components.comment.focus(), this.focusTracker.focusChanged();
          }
          setEnabled(e) {
            (this.enabled = e),
              this.components.issues.setEnabled(e),
              this.components.comment.setEnabled(e),
              o.UI.toggleButtonEnabled(this.$submitButton, e),
              o.UI.toggleButtonEnabled(this.$cancelButton, e);
          }
          getEnabled() {
            return this.enabled;
          }
          hideValidationErrors() {
            this.$element.removeClass(this.classes.commentEditorError);
          }
          showValidationErrors(e) {
            this.$element.addClass(this.classes.commentEditorError),
              a.l.showValidationBlockErrors(this.$validationErrors, e);
          }
          getFocused() {
            return this.focusTracker.getFocused();
          }
        }
        d(c, "targets", [
          "submitButton",
          "cancelButton",
          "validationErrors",
          "toolbar",
        ]);
      },
      57566: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => S });
        var i = s(26454),
          o = s(13814),
          n = s(84709),
          r = s(43689),
          a = s(18792),
          l = s(69555),
          d = s(96622),
          h = s(16087),
          c = s(54688),
          u = s(50922),
          g = s(62612),
          p = s(132),
          m = s(73739),
          f = s(50609),
          C = s(7042),
          b = s(5270);
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends f.V {
          constructor(e) {
            super("automation.runs.export_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              I(this, "classes", { hidden: "default-hidden" }),
              (this.runId = e);
          }
          load() {
            b.Z.requestChild(this.component, "columns");
          }
          unload() {}
          doSubmit() {
            d.UI.loading(this.$submitButton, () => {
              C.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.columns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: d.UI.getDropdown(this.$delimiter),
                columns: e,
                showContext: d.UI.getCheckbox(this.$showContext),
              };
              return (
                b.Z.blockUI(),
                o.N.post(
                  "automation/runs/validate_export_csv/" + this.runId,
                  o.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      o.N.formPostDownload(
                        "automation/runs/export_csv/" + this.runId,
                        { data: JSON.stringify(o.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    C.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    b.Z.unblockUI();
                  })
              );
            });
          }
        }
        I(w, "forms", [
          { name: "export", fields: ["delimiter", "showContext"] },
        ]),
          I(w, "targets", ["submitButton", "downloadMessage"]),
          I(w, "actions", ["doSubmit"]);
        var v = s(48995);
        function _(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class S extends i.v {
          constructor(...e) {
            super(...e),
              _(this, "baseSelectors", {
                resourceItem: ".split-resource-list__item",
              }),
              _(this, "baseClasses", {
                itemActionsVisible:
                  "split-resource-list__item--actions-visible",
                popupNoMinWidth: "popup--no-min-width",
              }),
              _(this, "doExportMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "csv":
                    d.UI.loading($(this.exportButtonTarget), () =>
                      o.N.post(
                        "automation/runs/render_export_csv/" + this.run.id
                      )
                        .then((e) => {
                          new w(this.run.id).show(e.data);
                        })
                        .catch((e) => {
                          b.Z.handleError(e);
                        })
                    );
                    break;
                  case "pdf":
                    this.print();
                }
              }),
              _(this, "doEditMenuClick", (e) => {
                let t;
                switch (
                  (e.target.hide(),
                  this.hasEditButtonTarget && (t = $(this.editButtonTarget)),
                  e.actionName)
                ) {
                  case "edit":
                    this.editRun(t);
                    break;
                  case "delete":
                    this.deleteRun();
                }
              }),
              _(this, "doAddLink", (e) => {
                d.UI.loading($(this.addLinkIconTarget), () =>
                  o.N.post("automation/runs/render_create_link")
                    .then((e) => {
                      const t = new m.P(
                        m.G.Add,
                        "automation/runs",
                        this.run.id
                      );
                      (t.onSuccess = () => this.refreshFragments("links")),
                        t.show(e.data);
                    })
                    .catch((e) => {
                      b.Z.handleError(e);
                    })
                );
              }),
              _(this, "renderHeader", () =>
                o.N.post("automation/runs/render_header/" + this.run.id, {
                  page: this.page.name,
                })
              ),
              _(this, "renderLinks", () =>
                o.N.post("automation/runs/render_links/" + this.run.id, {
                  page: this.page.name,
                })
              ),
              _(this, "renderAbout", () =>
                o.N.post("automation/runs/render_about/" + this.run.id, {
                  page: this.page.name,
                })
              );
          }
          registerBaseFragments() {
            this.fragments.register("header", this.renderHeader),
              this.fragments.register("about", this.renderAbout),
              this.fragments.register("links", this.renderLinks);
          }
          print() {
            n.K.openPrintGass(o.N.url("automation/runs/print/" + this.run.id));
          }
          doPrint() {
            this.print();
          }
          doShowArchivedHelp(e) {
            let t = $(e.currentTarget);
            d.UI.popupVisible(t) ||
              new v.u(
                v.Y.Archived,
                r.Z.lang("automation_runs.archived_help_title"),
                r.Z.lang("automation_runs.archived_help_text")
              ).show(t, l.Fz.BottomLeft);
          }
          doShowExportMenu(e) {
            let t = $(this.exportButtonTarget);
            if (d.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: r.Z.lang("automation_runs.export_to_csv"),
              callback: this.doExportMenuClick,
            }),
              s.push({
                type: "action",
                name: "pdf",
                title: r.Z.lang("automation_runs.export_to_pdf"),
                callback: this.doExportMenuClick,
              }),
              new h.x(s, {
                additionalClasses: this.baseClasses.popupNoMinWidth,
              }).show(t, l.Fz.BottomLeft);
          }
          doShowInfo() {
            let e = $(this.showInfoIconTarget);
            if (d.UI.popupVisible(e)) return;
            let t = "/automation/runs/view/" + this.run.id;
            new a.N({
              title: r.Z.lang("automation_runs.info_name", {
                name: this.run.name,
              }),
              id: this.run.id,
              link: t,
              url: o.N.url(t),
            }).show(e, l.Fz.BottomLeft);
          }
          doShowEditMenu() {
            let e = $(this.editMenuButtonTarget);
            if (d.UI.popupVisible(e)) return;
            const t = [];
            this.canAddEdit &&
              t.push({
                type: "action",
                name: "edit",
                title: r.Z.lang("automation_runs.edit"),
                callback: this.doEditMenuClick,
              }),
              this.canDelete &&
                ((this.canAddEdit || this.canClose) &&
                  t.push({ type: "divider" }),
                t.push({
                  type: "action",
                  name: "delete",
                  title: r.Z.lang("automation_runs.delete"),
                  callback: this.doEditMenuClick,
                })),
              new h.x(t).show(e, l.Fz.BottomRight);
          }
          deleteRun() {
            let e = new g.A(
              r.Z.lang("automation_runs.delete_title"),
              r.Z.langEscape("automation_runs.delete_message", {
                name: this.run.name,
              }),
              r.Z.lang("automation_runs.delete_button")
            );
            (e.onSuccess = () =>
              o.N.post("automation/runs/delete/" + this.run.id).then(() =>
                o.N.visit("automation/runs/" + this.projectId)
              )),
              e.show();
          }
          doEditRun() {
            this.editRun($(this.editButtonTarget));
          }
          editRun(e) {
            d.UI.loading(e, () =>
              o.N.post("automation/runs/render_update/" + this.run.id)
                .then((e) => {
                  const t = new c.m(this.projectId, this.run.id);
                  (t.onSuccess = (e) => ((this.run = e), this.afterEdit(e))),
                    t.show(e.data);
                })
                .catch((e) => {
                  b.Z.handleError(e);
                })
            );
          }
          doShowMilestonePopup() {
            let e = $(this.showMilestonePopupIconTarget);
            if (d.UI.popupVisible(e)) return;
            const t = new u.m(),
              s = $(this.aboutSectionTarget).data("hierarchyPopup");
            t.show(e, l.Fz.BottomRight, s);
          }
          doDeleteLink(e) {
            let t = $(e.target),
              s = t.closest(this.baseSelectors.resourceItem),
              i = d.UI.getClosestIconAction(t),
              n = s.data("id");
            if (d.UI.popupVisible(i)) return;
            s.addClass(this.baseClasses.itemActionsVisible);
            const a = new p.l(r.Z.lang("resources.really_delete_link"));
            (a.onSuccess = () => {
              d.UI.markLoading(i),
                o.N.post("automation/runs/delete_link/" + n)
                  .then(() => this.refreshFragments("links"))
                  .catch((e) => {
                    d.UI.markCompleted(i),
                      s.removeClass(this.baseClasses.itemActionsVisible),
                      b.Z.handleError(e);
                  });
            }),
              (a.onHide = (e) => {
                e || s.removeClass(this.baseClasses.itemActionsVisible);
              }),
              a.show(i, l.Fz.BottomLeft);
          }
          doEditLink(e) {
            let t = $(e.target),
              s = t.closest(this.baseSelectors.resourceItem),
              i = d.UI.getClosestIconAction(t),
              n = s.data("id");
            d.UI.loading(
              i,
              () => (
                s.addClass(this.baseClasses.itemActionsVisible),
                o.N.post("automation/runs/render_update_link/" + n)
                  .then((e) => {
                    s.removeClass(this.baseClasses.itemActionsVisible);
                    const t = new m.P(m.G.Edit, "automation/runs", n);
                    (t.onSuccess = () => this.refreshFragments("links")),
                      t.show(e.data);
                  })
                  .catch((e) => {
                    s.removeClass(this.baseClasses.itemActionsVisible),
                      b.Z.handleError(e);
                  })
              )
            );
          }
          afterEdit() {
            return this.refreshFragments(...this.fragmentsAfterEdit);
          }
        }
      },
      86954: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(57566),
          o = s(96622),
          n = s(13814),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.BaseController {
          constructor(...e) {
            super(...e),
              a(this, "doTabsChange", (e) => {
                this.refreshFragments(["tabContent", { tab: e.index }]).then(
                  () => {
                    this.components.runTabs.highlightTab(e.index),
                      this.components.runTabs.setLoading(!1);
                  }
                );
              }),
              a(this, "doThreadTabsChange", (e) => {
                e.target.loadingTab(e.index, () =>
                  this.refreshFragments(["thread", { threadId: e.id }]).then(
                    () => {
                      this.components.threadTabs.updateTabContent(
                        e.index,
                        $(this.threadTarget).data("tab")
                      ),
                        e.target.selectTab(e.index);
                    }
                  )
                );
              }),
              a(this, "renderTabContent", (e = {}) => {
                let t, s;
                return (
                  (t =
                    "tab" in e
                      ? e.tab
                      : this.components.sourceTabs.getCurrentTab()),
                  0 == t
                    ? (s = "automation/runs/render_failures/" + this.run.id)
                    : 1 == t &&
                      (s = "automation/runs/render_slowest/" + this.run.id),
                  n.N.post(s, n.N.toNetworkCase({}))
                );
              }),
              a(this, "renderThread", (e = {}) =>
                n.N.post("automation/runs/render_thread/" + e.threadId)
              );
          }
          load() {
            (this.page = { name: "summary" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              o.UI.initialize(this.element),
              r.Z.requestChild(this.component, "runTabs", {
                events: { tabchange: this.doTabsChange },
              }),
              r.Z.requestChild(this.component, "threadTabs", {
                events: { tabchange: this.doThreadTabsChange },
              }),
              (this.fragmentsAfterEdit = ["about", "header"]),
              this.registerBaseFragments(),
              this.fragments.register("tabContent", this.renderTabContent),
              this.fragments.register("thread", this.renderThread);
          }
        }
        a(l, "targets", [
          "aboutSection",
          "addLinkIcon",
          "editButton",
          "editMenuButton",
          "exportButton",
          "responsiveContainer",
          "showInfoIcon",
          "showMilestonePopupIcon",
          "thread",
        ]);
      },
      85156: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => p });
        var i = s(26454),
          o = s(96622),
          n = s(43689),
          r = s(69555),
          a = s(48995),
          l = s(13814),
          d = s(16087),
          h = s(69339),
          c = s(25275),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends i.v {
          constructor(...e) {
            super(...e),
              g(this, "selectors", { card: ".card" }),
              g(this, "doActiveContextMenuClick", (e) => {
                e.target.hide();
                let t = e.context.$card.data("id");
                switch (e.actionName) {
                  case "edit":
                    this.editActiveSource(t, e.context.$icon, e.context.$card);
                    break;
                  case "delete":
                    this.deleteActiveSource(
                      t,
                      e.context.$icon,
                      e.context.$card
                    );
                }
              }),
              g(this, "doRetiredActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showRetiredContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editRetiredSource(e.target, e.id, e.$field);
                }
              }),
              g(this, "doRetiredContextMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editRetiredSource(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteRetiredSource(
                      e.context.table,
                      e.context.id,
                      e.context.$field,
                      e.context.$row
                    );
                }
              }),
              g(this, "doActiveStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["active", { state: e.state }])
                )
              ),
              g(this, "doRetiredStateChange", (e) => {
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments(["retiredTable", { state: e.state }])
                );
              }),
              g(this, "renderRetiredTable", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.retiredSources.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  l.N.post(
                    "automation/sources/render_retired_table/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              g(this, "renderActive", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.activeSources &&
                      (t = this.components.activeSources.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  l.N.post(
                    "automation/sources/render_active/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              g(this, "renderMetrics", () =>
                l.N.post(
                  "automation/sources/render_index_metrics/" + this.projectId
                )
              );
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canEdit = this.params.canEdit),
              (this.canDelete = this.params.canDelete),
              u.Z.requestChild(this.component, "retiredSources", {
                events: {
                  statechange: this.doRetiredStateChange,
                  actionclick: this.doRetiredActionClick,
                },
              }),
              u.Z.requestChild(this.component, "activeSources", {
                events: { statechange: this.doActiveStateChange },
              }),
              o.UI.initialize(this.element),
              this.fragments.register("retiredTable", this.renderRetiredTable),
              this.fragments.register("active", this.renderActive),
              this.fragments.register("metrics", this.renderMetrics);
          }
          doShowManyWarning(e) {
            let t = $(e.currentTarget);
            o.UI.popupVisible(t) ||
              new a.u(
                a.Y.Warning,
                n.Z.lang("automation_sources.many_active_warning_title"),
                n.Z.lang("automation_sources.many_active_warning_text")
              ).show(t, r.Fz.BottomLeft);
          }
          doShowActiveSourceMenu(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.card);
            if (o.UI.popupVisible(t)) return;
            let i = [];
            this.canEdit &&
              i.push({
                type: "action",
                name: "edit",
                title: n.Z.lang("automation_sources.menu_edit_source"),
                callback: this.doActiveContextMenuClick,
              }),
              this.canEdit && this.canDelete && i.push({ type: "divider" }),
              this.canDelete &&
                i.push({
                  type: "action",
                  name: "delete",
                  title: n.Z.lang("automation_sources.menu_delete_source"),
                  callback: this.doActiveContextMenuClick,
                }),
              new d.x(i, { context: { $icon: t, $card: s } }).show(
                t,
                r.Fz.BottomLeft
              );
          }
          deleteActiveSource(e, t, s) {
            o.UI.loading(t, () =>
              l.N.post("automation/sources/render_delete/" + e)
                .then((t) => {
                  const s = new c.A(this.projectId, e);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("active", "metrics")),
                    s.show(t.data)
                  );
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          editActiveSource(e, t, s) {
            o.UI.loading(t, () =>
              l.N.post("automation/sources/render_update/" + e)
                .then((t) => {
                  const s = new h.m(this.projectId, e);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments(
                        "active",
                        "retiredTable",
                        "metrics"
                      )),
                    s.show(t.data)
                  );
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          showRetiredContextMenu(e, t, s, i, a) {
            if (o.UI.popupVisible(s)) return;
            let l = [];
            this.canEdit &&
              l.push({
                type: "action",
                name: "edit",
                title: n.Z.lang("automation_sources.menu_edit_source"),
                callback: this.doRetiredContextMenuClick,
              }),
              this.canEdit && this.canDelete && l.push({ type: "divider" }),
              this.canDelete &&
                l.push({
                  type: "action",
                  name: "delete",
                  title: n.Z.lang("automation_sources.menu_delete_source"),
                  callback: this.doRetiredContextMenuClick,
                }),
              new d.x(l, {
                context: { table: e, $field: a, $row: i, id: t },
              }).show(s, r.Fz.BottomLeft);
          }
          deleteRetiredSource(e, t, s, i) {
            e.loading("actionfield", s, () =>
              l.N.post("automation/sources/render_delete/" + t)
                .then((e) => {
                  const s = new c.A(this.projectId, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments(
                        "active",
                        "retiredTable",
                        "metrics"
                      )),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          editRetiredSource(e, t, s) {
            e.loading("actionfield", s, () =>
              l.N.post("automation/sources/render_update/" + t)
                .then((e) => {
                  const s = new h.m(this.projectId, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments(
                        "active",
                        "retiredTable",
                        "metrics"
                      )),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
        }
        g(p, "targets", ["responsiveContainer"]);
      },
      74491: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => k });
        var i = s(26454),
          o = s(96622),
          n = s(15612),
          r = s(47914),
          a = s(43689),
          l = s(69555),
          d = s(15331),
          h = s(24850),
          c = s(13814),
          u = s(16087),
          g = s(62612),
          p = s(25275),
          m = s(69339),
          f = s(54688),
          C = s(17637),
          b = s(67694),
          I = s(18792),
          w = s(5960),
          v = s(56542),
          S = s(5270);
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class k extends i.v {
          constructor(...e) {
            super(...e),
              x(this, "selectors", {
                aboutConfig: ".split-about__configs__config",
                avatar: ".avatar",
                row: "tr",
                tag: ".tag",
              }),
              x(this, "classes", { popupNoMinWidth: "popup--no-min-width" }),
              x(this, "doExportMenuClick", (e) => {
                e.target.hide(),
                  "csv" === e.actionName &&
                    o.UI.loading($(this.exportButtonTarget), () => {
                      let e = this.components.runs.getSelectedIds(),
                        t = { ids: e };
                      return c.N.post(
                        "automation/runs/render_export_many_csv/" +
                          this.projectId,
                        c.N.toNetworkCase(t)
                      )
                        .then((t) => {
                          new v.u(this.projectId, e).show(t.data);
                        })
                        .catch((e) => {
                          S.Z.handleError(e);
                        });
                    });
              }),
              x(this, "doSelectionChange", () => {
                this.updateExportButton();
              }),
              x(this, "doTabsChange", (e) => {
                this.refreshFragments(["tabContent", { tab: e.index }]).then(
                  () => {
                    this.components.sourceTabs.highlightTab(e.index),
                      this.components.sourceTabs.setLoading(!1);
                  }
                );
              }),
              x(this, "doRunActivitySelectDate", (e) => {
                this.selectDate(e.selected, e.date, e.label);
              }),
              x(this, "doInlineFilter", (e) => {
                "milestones" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "milestones",
                      "automation/runs/render_milestone_filter/",
                      "automation_runs:milestone_id"
                    )
                  : "sources" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "sources",
                      "automation/runs/render_source_filter/",
                      "automation_runs:source_id"
                    )
                  : "tags" == e.filter.name &&
                    this.showInlineFilter(
                      e.button,
                      "tags",
                      "automation/runs/render_tag_filter/",
                      "automation_runs:tags"
                    );
              }),
              x(this, "doCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                "milestones" == e.filter.name
                  ? delete s.conditions["automation_runs:milestone_id"]
                  : "tags" == e.filter.name &&
                    delete s.conditions["automation_runs:tags"],
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          e.filter.name,
                          []
                        );
                      })
                      .catch((e) => {
                        S.Z.handleError(e);
                      })
                  );
              }),
              x(this, "doFilter", (e) => {
                const t = $(e.button);
                if (o.UI.popupVisible(t)) return;
                let s = _.cloneDeep(this.filter);
                return (
                  (s.canSource = !1),
                  this.components.searchBar.setFilterLoading(!0),
                  c.N.post(
                    "automation/runs/render_filter/" + this.projectId,
                    c.N.toNetworkCase(s)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new h.y();
                      (s.onSubmit = (e) =>
                        this.saveFilter(e.filter).then(() => {
                          this.components.searchBar.setInlineFilter(
                            "milestones",
                            e.labels["automation_runs:milestone_id"]
                              ? e.labels["automation_runs:milestone_id"]
                              : []
                          ),
                            this.components.searchBar.setInlineFilter(
                              "tags",
                              e.labels["automation_runs:tags"]
                                ? e.labels["automation_runs:tags"]
                                : []
                            );
                        })),
                        s.show(t, l.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        S.Z.handleError(e);
                    })
                );
              }),
              x(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          "milestones",
                          []
                        ),
                          this.components.searchBar.setInlineFilter("tags", []);
                      })
                      .catch((e) => {
                        S.Z.handleError(e);
                      })
                  );
              }),
              x(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              x(this, "doSearch", () => {
                this.refreshSearch();
              }),
              x(this, "doRunsStateChange", (e) => {
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments(["runTable", { state: e.state }])
                );
              }),
              x(this, "doTabTableRunsActionClick", (e) => {
                "show" === e.actionName &&
                  this.showCase(e.target, e.id, e.$field, e.$action);
              }),
              x(this, "doRunsActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showRunsContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editRun(e.target, e.id, e.$field);
                }
              }),
              x(this, "doRunsContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                }
              }),
              x(this, "doRunsContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.runs.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteRuns(t);
                    break;
                  case "edit":
                    this.editRuns(e.context.table, t, e.context.$field);
                }
              }),
              x(this, "doEditMenuClick", (e) => {
                let t;
                switch (
                  (e.target.hide(),
                  this.hasEditButtonTarget && (t = $(this.editButtonTarget)),
                  e.actionName)
                ) {
                  case "edit":
                    this.editSource(t);
                    break;
                  case "delete":
                    this.deleteSource(t);
                }
              }),
              x(this, "renderHeader", () =>
                c.N.post("automation/sources/render_header/" + this.source.id)
              ),
              x(this, "renderAbout", () =>
                c.N.post("automation/sources/render_about/" + this.source.id)
              ),
              x(this, "renderRuns", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.runs.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar &&
                    this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  c.N.post(
                    "automation/sources/render_runs/" + this.source.id,
                    c.N.toNetworkCase(t)
                  )
                );
              }),
              x(this, "renderRunTable", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.runs.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar &&
                    this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  c.N.post(
                    "automation/sources/render_run_table/" + this.source.id,
                    c.N.toNetworkCase(t)
                  )
                );
              }),
              x(this, "renderTabContent", (e = {}) => {
                let t, s;
                return (
                  (t =
                    "tab" in e
                      ? e.tab
                      : this.components.sourceTabs.getCurrentTab()),
                  (s =
                    0 == t
                      ? "automation/sources/render_failures/" + this.source.id
                      : 1 == t
                      ? "automation/sources/render_slowest/" + this.source.id
                      : "automation/sources/render_flaky/" + this.source.id),
                  c.N.post(s, c.N.toNetworkCase({}))
                );
              });
          }
          load() {
            (this.source = this.params.source),
              (this.projectId = this.params.projectId),
              (this.canEdit = this.params.canEdit),
              (this.canDelete = this.params.canDelete),
              (this.canRunsAddEdit = this.params.canRunsAddEdit),
              (this.canRunsDelete = this.params.canRunsDelete),
              (this.filter = this.params.filter || r.X.EmptyFilter),
              S.Z.requestChild(this.component, "runs", {
                onAdded: (e) => {
                  this.updateExportButton();
                },
                onRemoved: (e) => {
                  this.updateExportButton();
                },
                events: {
                  statechange: this.doRunsStateChange,
                  actionclick: this.doRunsActionClick,
                  selectionchange: this.doSelectionChange,
                },
              }),
              S.Z.requestChild(this.component, "failures", {
                events: { actionclick: this.doTabTableRunsActionClick },
              }),
              S.Z.requestChild(this.component, "slowest", {
                events: { actionclick: this.doTabTableRunsActionClick },
              }),
              S.Z.requestChild(this.component, "flaky", {
                events: { actionclick: this.doTabTableRunsActionClick },
              }),
              S.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              S.Z.requestChild(this.component, "runActivity", {
                events: { selectdate: this.doRunActivitySelectDate },
              }),
              S.Z.requestChild(this.component, "sourceTabs", {
                events: { tabchange: this.doTabsChange },
              }),
              o.UI.initialize(this.element),
              this.fragments.register("header", this.renderHeader),
              this.fragments.register("about", this.renderAbout),
              this.fragments.register("runs", this.renderRuns),
              this.fragments.register("runTable", this.renderRunTable),
              this.fragments.register("tabContent", this.renderTabContent);
          }
          doShowExportMenu(e) {
            let t = $(this.exportButtonTarget);
            if (!o.UI.getButtonInteractiveEnabled(t)) return;
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: a.Z.lang("automation_runs.export_to_csv"),
              callback: this.doExportMenuClick,
            }),
              new u.x(s, {
                additionalClasses: this.classes.popupNoMinWidth,
              }).show(t, l.Fz.BottomLeft);
          }
          updateExportButton() {
            o.UI.toggleButtonInteractiveEnabled(
              $(this.exportButtonTarget),
              this.components.runs &&
                this.components.runs.getSelectedCount() > 0
            );
          }
          doResetGroupingFilter() {
            this.selectDate(!1);
          }
          selectDate(e, t, s) {
            e
              ? (this.filter.conditions["automation_runs:created_at"] = {
                  type: n.g.FiltersDateCustom,
                  from: t,
                  to: t,
                })
              : delete this.filter.conditions["automation_runs:created_at"],
              S.Z.waitComponentLoaded("runs", () => {
                let t,
                  i = this.components.runs.getParams().runCountFormatted,
                  n = $(this.groupingTitleTarget);
                e
                  ? ((t =
                      1 == i
                        ? a.Z.lang(
                            "automation_sources.grouping_header_filter_singular",
                            { date: s, count: i }
                          )
                        : a.Z.lang(
                            "automation_sources.grouping_header_filter_plural",
                            { date: s, count: i }
                          )),
                    o.UI.show($(this.groupingIconTarget)))
                  : ((t =
                      1 == i
                        ? a.Z.lang(
                            "automation_sources.grouping_header_all_time_singular",
                            { date: s, count: i }
                          )
                        : a.Z.lang(
                            "automation_sources.grouping_header_all_time_plural",
                            { date: s, count: i }
                          )),
                    o.UI.hide($(this.groupingIconTarget)),
                    this.components.runActivity.resetSelection()),
                  n.text(t);
              });
            let i = $(this.selectors.avatar, this.groupingAvatarTarget);
            o.UI.loading(i, () =>
              e
                ? this.refreshFragments(["runTable", { withPagination: !1 }])
                    .then(() => {
                      let e = _.keys(this.filter.conditions).length;
                      this.components.searchBar.setFilterCount(e);
                    })
                    .catch((e) => {
                      S.Z.handleError(e);
                    })
                : this.saveFilter(this.filter, [
                    "runTable",
                    { withPagination: !1 },
                  ]).catch((e) => {
                    S.Z.handleError(e);
                  })
            );
          }
          doFilterConfig(e) {
            let t = $(e.currentTarget),
              s = t.data("id"),
              i = t
                .closest(this.selectors.aboutConfig)
                .find(this.selectors.avatar),
              n = this.filter;
            (n.conditions["automation_runs:config_id"] = { values: [s] }),
              o.UI.loading(i, () =>
                this.saveFilter(n).catch((e) => {
                  S.Z.handleError(e);
                })
              );
          }
          doFilterTag(e) {
            let t = $(e.currentTarget),
              s = t.data("id"),
              i = t.data("tagName"),
              n = t.find(this.selectors.tag),
              r = this.filter;
            (r.conditions["automation_runs:tags"] = { values: [s] }),
              o.UI.loading(n, () =>
                this.saveFilter(r)
                  .then(() => {
                    this.components.searchBar.setInlineFilter("tags", [i]);
                  })
                  .catch((e) => {
                    S.Z.handleError(e);
                  })
              );
          }
          showInlineFilter(e, t, s, i) {
            const r = $(e);
            o.UI.popupVisible(r) ||
              o.UI.loading(r, () =>
                c.N.post(s + this.projectId, c.N.toNetworkCase(this.filter))
                  .then((e) => {
                    let s = this.components.searchBar.getInlineFilter(t);
                    const o = new d.d();
                    (o.onSubmit = (e) => {
                      let s = this.filter;
                      return (
                        (s.conditions[i] = e.condition),
                        (s.mode = n.g.FiltersAll),
                        this.saveFilter(s).then(() => {
                          this.components.searchBar.setInlineFilter(
                            t,
                            e.labels
                          );
                        })
                      );
                    }),
                      (o.onHide = (e) => {
                        e || this.components.searchBar.setInlineFilter(t, s);
                      }),
                      o.events.on("change", (e) => {
                        this.components.searchBar.setInlineFilter(t, e.labels);
                      }),
                      o.show(r, l.Fz.BottomRight, e.data);
                  })
                  .catch((e) => {
                    S.Z.handleError(e);
                  })
              );
          }
          saveFilter(e, t = null) {
            let s = _.cloneDeep(e),
              i = !1;
            return (
              "automation_runs:created_at" in s.conditions &&
                s.conditions["automation_runs:created_at"].type ==
                  n.g.FiltersDateCustom &&
                s.conditions["automation_runs:created_at"].to &&
                s.conditions["automation_runs:created_at"].from &&
                s.conditions["automation_runs:created_at"].to ==
                  s.conditions["automation_runs:created_at"].from &&
                (delete s.conditions["automation_runs:created_at"], (i = !0)),
              c.N.post(
                "automation/sources/save_run_filter/" + this.projectId,
                c.N.toNetworkCase(s)
              ).then((s) => {
                (this.filter = s.data),
                  i &&
                    (this.filter.conditions["automation_runs:created_at"] =
                      e.conditions["automation_runs:created_at"]);
                let o = _.keys(this.filter.conditions).length;
                return (
                  t || (t = ["runs", { withPagination: !1 }]),
                  this.refreshFragments(t).then(() => {
                    this.components.searchBar.setFilterCount(o);
                  })
                );
              })
            );
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["runs", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                c.N.post("automation/runs/render_stats/" + s)
                  .then((e) => {
                    new b._(!0).show(t, l.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    S.Z.handleError(e);
                  })
              );
          }
          showCase(e, t, s, i) {
            o.UI.popupVisible(i) ||
              e.loading("actionfield", s, () =>
                c.N.post("automation/sources/render_case/" + t)
                  .then((e) => {
                    new w.o().show(i, l.Fz.TopLeft, e.data);
                  })
                  .catch((e) => {
                    S.Z.handleError(e);
                  })
              );
          }
          showRunsContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let r = [];
            this.components.runs.getSelectedRows().length <= 1
              ? (this.canRunsAddEdit &&
                  r.push({
                    type: "action",
                    name: "edit",
                    title: a.Z.lang("automation_runs.menu_edit_run"),
                    callback: this.doRunsContextMenuSingleClick,
                  }),
                this.canRunsAddEdit &&
                  this.canRunsDelete &&
                  r.push({ type: "divider" }),
                this.canRunsDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: a.Z.lang("automation_runs.menu_delete_run"),
                    callback: this.doRunsContextMenuSingleClick,
                  }))
              : (this.canRunsAddEdit &&
                  r.push({
                    type: "action",
                    name: "edit",
                    title: a.Z.lang("automation_runs.menu_edit_runs"),
                    callback: this.doRunsContextMenuMultipleClick,
                  }),
                this.canRunsAddEdit &&
                  this.canRunsDelete &&
                  r.push({ type: "divider" }),
                this.canRunsDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: a.Z.lang("automation_runs.menu_delete_runs"),
                    callback: this.doRunsContextMenuMultipleClick,
                  })),
              new u.x(r, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, l.Fz.BottomLeft);
          }
          deleteRun(e, t, s) {
            let i = s.data("name"),
              o = new g.A(
                a.Z.lang("automation_runs.delete_title"),
                a.Z.langEscape("automation_runs.delete_message", { name: i }),
                a.Z.lang("automation_runs.delete_button")
              );
            (o.onSuccess = () =>
              c.N.post("automation/runs/delete/" + t).then(() =>
                this.refreshFragments("about", "runs")
              )),
              o.show();
          }
          deleteRuns(e) {
            let t = new g.A(
              a.Z.lang("automation_runs.delete_many_title"),
              a.Z.lang("automation_runs.delete_many_message"),
              a.Z.lang("automation_runs.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return c.N.post(
                "automation/runs/delete_many/" + this.projectId,
                c.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("about", "runs"));
            }),
              t.show();
          }
          editRun(e, t, s) {
            e.loading("actionfield", s, () =>
              c.N.post("automation/runs/render_update/" + t)
                .then((e) => {
                  const s = new f.m(this.projectId, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("about", "runTable")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  S.Z.handleError(e);
                })
            );
          }
          editRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return c.N.post(
                "automation/runs/render_update_many/" + this.projectId,
                c.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new C.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("about", "runTable")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  S.Z.handleError(e);
                });
            });
          }
          doShowEditMenu() {
            let e = $(this.editMenuButtonTarget);
            if (o.UI.popupVisible(e)) return;
            const t = [];
            this.canEdit &&
              t.push({
                type: "action",
                name: "edit",
                title: a.Z.lang("automation_sources.edit"),
                callback: this.doEditMenuClick,
              }),
              this.canDelete &&
                (this.canEdit && t.push({ type: "divider" }),
                t.push({
                  type: "action",
                  name: "delete",
                  title: a.Z.lang("automation_sources.delete"),
                  callback: this.doEditMenuClick,
                })),
              new u.x(t).show(e, l.Fz.BottomRight);
          }
          doEditSource() {
            this.editSource($(this.editButtonTarget));
          }
          editSource(e) {
            o.UI.loading(e, () =>
              c.N.post("automation/sources/render_update/" + this.source.id)
                .then((e) => {
                  const t = new m.m(this.projectId, this.source.id);
                  return (
                    (t.onSuccess = (e) =>
                      this.refreshFragments("about", "header")),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  S.Z.handleError(e);
                })
            );
          }
          deleteSource(e) {
            o.UI.loading(e, () =>
              c.N.post("automation/sources/render_delete/" + this.source.id)
                .then((e) => {
                  const t = new p.A(this.projectId, this.source.id);
                  return (
                    (t.onSuccess = (e) =>
                      c.N.visit("automation/sources/" + this.projectId)),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  S.Z.handleError(e);
                })
            );
          }
          doShowInfo() {
            let e = $(this.showInfoIconTarget);
            if (o.UI.popupVisible(e)) return;
            let t = "/automation/sources/view/" + this.source.id;
            new I.N({
              title: a.Z.lang("automation_sources.info_name", {
                name: this.source.name,
              }),
              id: this.source.id,
              link: t,
              url: c.N.url(t),
            }).show(e, l.Fz.BottomLeft);
          }
        }
        x(k, "targets", [
          "responsiveContainer",
          "editButton",
          "editMenuButton",
          "groupingTitle",
          "groupingAvatar",
          "resetGroupingFilterIcon",
          "groupingIcon",
          "showInfoIcon",
          "exportButton",
        ]);
      },
      22636: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(24862);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n extends i.Qr {
          constructor(...e) {
            super(...e), o(this, "classes", { selected: "carousel--selected" });
          }
          doSelect(e) {
            this.switcherTargets.forEach((t, s) => {
              if (t == e.target) return this.showItem(s), !1;
            });
          }
          showItem(e) {
            (this.index = e),
              this.itemTargets.forEach((t, s) => {
                $(t).toggleClass(this.classes.selected, e == s);
              }),
              this.switcherTargets.forEach((t, s) => {
                $(t).toggleClass(this.classes.selected, e == s);
              });
          }
        }
        o(n, "targets", ["item", "switcher"]);
      },
      20503: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(24862),
          o = s(69555);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.Qr {
          constructor(...e) {
            super(...e),
              n(this, "doMouseDown", (e) => {
                if (2 != e.which) return;
                o.GI.hideAllPopups(), e.preventDefault();
                let t = $(window),
                  s = this.$element.scrollTop(),
                  i = this.$element.scrollLeft(),
                  n = e.pageX,
                  r = e.pageY,
                  a = (e) => {
                    this.$element.scrollTop(),
                      this.$element.scrollTop(s - (e.pageY - r)),
                      this.$element.scrollLeft(i - (e.pageX - n));
                  },
                  l = (e) => {
                    t.off("mousemove", a), t.off("mouseup", l);
                  };
                t.on("mousemove", a), t.on("mouseup", l);
              });
          }
          connect() {
            (this.$element = $(this.element)),
              this.$element.on("mousedown", this.doMouseDown);
          }
          disconnect() {
            this.$element.off("mousedown", this.doMouseDown);
          }
        }
        n(r, "targets", []);
      },
      18162: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => n });
        var i = s(24862);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n extends i.Qr {
          constructor(...e) {
            super(...e),
              o(this, "selectors", { icon: "i" }),
              o(this, "classes", { iconAnimate: "icon-animation-scale-pulse" });
          }
          connect() {
            this.$content = $(this.contentTarget);
          }
          doCopy(e) {
            const t = $("<textarea></textarea>");
            t.val(this.$content.text()),
              t.css({ position: "absolute", left: "-9999px" }),
              t.attr("readonly", ""),
              $(document.body).append(t),
              t.select(),
              document.execCommand("copy"),
              t.remove();
            let s = $(this.selectors.icon, e.currentTarget);
            s.length > 0 &&
              (s.addClass(this.classes.iconAnimate),
              setTimeout(() => {
                s.removeClass(this.classes.iconAnimate);
              }, 600));
          }
        }
        o(n, "targets", ["content"]);
      },
      1108: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => o });
        var i = s(24862);
        const o = class extends i.Qr {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = (e) => {
                -1 == "0123456789-,.".indexOf(e.key) && e.preventDefault();
              }),
              (t = "doKeyPress") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          connect() {
            (this.$element = $(this.element)),
              this.$element.on("keypress", this.doKeyPress);
          }
          disconnect() {
            this.$element.off("keypress", this.doKeyPress);
          }
        };
      },
      46486: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(24862),
          o = s(96622);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.Qr {
          constructor(...e) {
            super(...e),
              n(this, "doControlChange", (e) => {
                this.updateCounter();
              });
          }
          connect() {
            (this.$control = $(this.controlTarget)),
              (this.$counter = $(this.counterTarget)),
              (this.maxLength = this.$control.attr("maxlength")),
              this.$control.on("change input textInput", this.doControlChange),
              this.updateCounter();
          }
          disconnect() {
            this.$control.off("change input textInput", this.doControlChange);
          }
          updateCounter() {
            this.$counter.text(
              `${o.UI.getText(this.$control).length}/${this.maxLength}`
            );
          }
        }
        n(r, "targets", ["control", "counter"]);
      },
      78130: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => o });
        var i = s(24862);
        const o = class extends i.Qr {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = (e) => {
                -1 == "0123456789-".indexOf(e.key) && e.preventDefault();
              }),
              (t = "doKeyPress") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          connect() {
            (this.$element = $(this.element)),
              this.$element.on("keypress", this.doKeyPress);
          }
          disconnect() {
            this.$element.off("keypress", this.doKeyPress);
          }
        };
      },
      22982: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(89432),
          o = s(43689),
          n = s(13814),
          r = s(47914),
          a = s(55578),
          l = s(5270),
          d = s(78840),
          h = s.n(d),
          c = s(44814);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        s.n(c)()(h()),
          h().AST.allowedTags.push("image"),
          h().AST.allowedAttributes.push("preserveAspectRatio");
        class g extends i.d {
          constructor(...e) {
            super(...e),
              u(this, "classes", {
                chartHasSelection: "chart--has-selection",
                chartInteractive: "chart--interactive",
              }),
              u(this, "chartDefaults", {
                chart: { styledMode: !0 },
                title: { text: void 0 },
                credits: { enabled: !1 },
                legend: { enabled: !1 },
                tooltip: {
                  followPointer: !1,
                  followTouchMove: !1,
                  hideDelay: r.X.ChartTooltipHideDelay,
                  padding: 8,
                  borderRadius: 6,
                },
                plotOptions: { series: { animation: !1 } },
              }),
              u(this, "doSidebarChange", (e) => {
                setTimeout(() => {
                  this.chart.reflow();
                }, 50);
              }),
              u(this, "doPrintMediaChange", (e) => {
                this.refreshSize();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.settings = {}),
              (this.settings.type = this.$element.data("type")),
              (this.settings.data = this.$element.data("data") || []),
              (this.settings.interactive = !!this.$element.data("interactive")),
              (this.settings.synchronous = !!this.$element.data("synchronous")),
              (this.settings.useLinks = !!this.$element.data("useLinks")),
              (this.settings.selected = this.$element.data("selected")),
              (this.settings.tooltipsEnabled =
                !this.element.hasAttribute("data-tooltips-enabled") ||
                this.$element.data("tooltipsEnabled")),
              (this.selected = null),
              (this.printMatchMedia = matchMedia("print")),
              (this.screenMatchMedia = matchMedia("screen")),
              this.settings.synchronous && this.renderChart();
          }
          load() {
            this.settings.synchronous || this.renderChart(),
              l.Z.layout.sidebar &&
                l.Z.layout.sidebar.events.on("change", this.doSidebarChange),
              this.printMatchMedia?.addEventListener &&
                this.printMatchMedia.addEventListener(
                  "change",
                  this.doPrintMediaChange
                ),
              this.screenMatchMedia?.addEventListener &&
                this.screenMatchMedia.addEventListener(
                  "change",
                  this.doPrintMediaChange
                ),
              a.e.markLoaded(this.$element);
          }
          unload() {
            this.printMatchMedia?.removeEventListener &&
              this.printMatchMedia.removeEventListener(
                "change",
                this.doPrintMediaChange
              ),
              this.screenMatchMedia?.removeEventListener &&
                this.screenMatchMedia.removeEventListener(
                  "change",
                  this.doPrintMediaChange
                ),
              l.Z.layout.sidebar &&
                l.Z.layout.sidebar.events.off("change", this.doSidebarChange);
          }
          mapSingleSeriesData(e) {
            return e.map((e) => ({
              name: o.Z.truncateText(e.label, 20),
              y: e.value,
              colorIndex: e.colorIndex || 0,
              className: e.class,
            }));
          }
          buildChartOptions() {
            let e = this.chartDefaults;
            switch (
              ((e.tooltip.enabled = !!this.settings.tooltipsEnabled),
              this.settings.type)
            ) {
              case "full.results.pie":
                e = this.buildFullResultsPieOptions(e);
                break;
              case "full.activity.line":
                e = this.buildFullActivityLineOptions(e);
                break;
              case "key.results.pie":
                e = this.buildKeyResultsPieOptions(e);
                break;
              case "key.results.bubble":
                e = this.buildKeyResultsBubbleOptions(e);
                break;
              case "key.results.donut":
                e = this.buildKeyResultsDonutOptions(e);
                break;
              case "key.activity.area":
                e = this.buildKeyActivityAreaOptions(e);
                break;
              case "full.activity.burndown":
                e = this.buildFullActivityBurndownOptions(e);
                break;
              case "full.success.column":
                e = this.buildFullSuccessColumnOptions(e);
                break;
              case "inline.success.column":
                e = this.buildInlineSuccessColumnOptions(e);
                break;
              case "key.case.growth":
                e = this.buildKeyCaseGrowthOptions(e);
            }
            return e;
          }
          buildKeyCaseGrowthOptions(e) {
            let t = this.settings.data,
              s = t.counts.reduce((e, t) => t > 0 || e, !1),
              i = t.times.reduce((e, t) => t.value > 0 || e, !1),
              o = !s && !i,
              n = {
                chart: {
                  spacing: [0, 0, 0, 0],
                  marginBottom: 1,
                  marginLeft: 10,
                  marginRight: 10,
                  marginTop: 0,
                },
                plotOptions: {
                  series: { pointPadding: 0.1, groupPadding: 0.1 },
                },
                xAxis: {
                  startOnTick: !1,
                  endOnTick: !1,
                  allowDecimals: !1,
                  tickInterval: 6,
                  minorTickInterval: 2,
                  labels: {
                    step: 1,
                    formatter: function () {
                      return t.timeframes[this.value]
                        ? t.timeframes[this.value].label.toString()
                        : null;
                    },
                    enabled: !1,
                  },
                },
                yAxis: [
                  { tickAmount: 6, labels: { enabled: !1 }, title: null },
                  { visible: !1, opposite: !0 },
                ],
              };
            return (
              (this.settings.tooltipsEnabled && !o) ||
                (n = _.defaultsDeep(
                  { plotOptions: { column: { enableMouseTracking: !1 } } },
                  n
                )),
              o &&
                (n = _.defaultsDeep(
                  {
                    yAxis: {
                      max: 12,
                      tickAmount: 6,
                      labels: { enabled: !1 },
                      title: null,
                    },
                  },
                  n
                )),
              (n = _.defaultsDeep(n, e)),
              (n.series = []),
              o
                ? n.series.push({
                    type: "column",
                    data: t.timeframes.map((e) => 0),
                    colorIndex: 0,
                    yAxis: 0,
                  })
                : (n.series.push({
                    type: "column",
                    name: t.labels.countTitle,
                    colorIndex: 1,
                    data: t.counts,
                    yAxis: 0,
                    tooltip: {
                      headerFormat:
                        '<span class="highcharts-header">{series.name}</span><br>',
                      pointFormatter: function () {
                        return `<b>${this.y}</b> (${t.timeframes[
                          this.x
                        ].label.toString()})`;
                      },
                    },
                  }),
                  n.series.push({
                    type: "spline",
                    name: t.labels.timeTitle,
                    colorIndex: 2,
                    data: t.times.map((e) => e.value),
                    marker: { enabled: !1, states: { hover: { enabled: !0 } } },
                    yAxis: 1,
                    tooltip: {
                      headerFormat:
                        '<span class="highcharts-header">{series.name}</span><br>',
                      pointFormatter: function () {
                        return `<b>${t.times[
                          this.x
                        ].label.toString()}</b>\n                            (${t.timeframes[
                          this.x
                        ].label.toString()})`;
                      },
                    },
                  })),
              n
            );
          }
          buildInlineSuccessColumnOptions(e) {
            let t = this.settings.data,
              s = t.successes.reduce((e, t) => t > 0 || e, !1),
              i = t.failures.reduce((e, t) => t > 0 || e, !1),
              n = !s && !i,
              r = {
                chart: {
                  type: "column",
                  spacing: [0, 0, 0, 0],
                  marginBottom: 1,
                  marginLeft: 0,
                  marginRight: 0,
                  marginTop: 0,
                },
                tooltip: {
                  headerFormat:
                    '<span class="highcharts-header">{series.name}</span><br>',
                  pointFormatter: function () {
                    return `<b>${this.y}</b> (${t.days[
                      this.x
                    ].label.toString()})`;
                  },
                  outside: !0,
                  className: "chart--inline-success-column__tooltip",
                },
                plotOptions: {
                  column: { stacking: "normal" },
                  series: { pointPadding: 0.1, groupPadding: 0.15 },
                },
                xAxis: {
                  startOnTick: !1,
                  endOnTick: !1,
                  allowDecimals: !1,
                  tickInterval: 3,
                  minorTickInterval: 1,
                  labels: {
                    enabled: !1,
                    step: 1,
                    formatter: function () {
                      return t.days[this.value]
                        ? t.days[this.value].label.toString()
                        : null;
                    },
                  },
                },
                yAxis: { tickAmount: 5, labels: { enabled: !1 }, title: !1 },
              };
            return (
              (this.settings.tooltipsEnabled && !n) ||
                (r = _.defaultsDeep(
                  { plotOptions: { column: { enableMouseTracking: !1 } } },
                  r
                )),
              n && (r = _.defaultsDeep({ yAxis: { max: 10 } }, r)),
              (r = _.defaultsDeep(r, e)),
              (r.series = []),
              n
                ? r.series.push({ data: t.days.map((e) => 0), colorIndex: 0 })
                : (r.series.push({
                    data: t.failures,
                    name: o.Z.lang(
                      "metrics.chart_inline_success_column_failure"
                    ),
                    colorIndex: 1,
                  }),
                  r.series.push({
                    data: t.successes,
                    name: o.Z.lang(
                      "metrics.chart_inline_success_column_success"
                    ),
                    colorIndex: 2,
                  })),
              r
            );
          }
          buildFullSuccessColumnOptions(e) {
            let t = this.settings.data,
              s = (e) => {
                this.settings.useLinks
                  ? this.events.trigger("selectdate", {
                      target: this,
                      date: t.days[e.x].date,
                    })
                  : this.getHasSelection() && this.selected == e.x
                  ? (this.resetSelection(),
                    this.events.trigger("selectdate", {
                      target: this,
                      selected: !1,
                    }))
                  : (this.setSelected(e.x),
                    this.events.trigger("selectdate", {
                      target: this,
                      selected: !0,
                      date: t.days[e.x].date,
                      label: t.days[e.x].formattedDate,
                    }));
              },
              i = (e) => {
                for (let t of this.chart.series)
                  t.points[e.x].setState("hover");
              },
              n = (e) => {
                for (let t of this.chart.series) t.points[e.x].setState();
              },
              r = t.successes.reduce((e, t) => t > 0 || e, !1),
              a = t.failures.reduce((e, t) => t > 0 || e, !1),
              l = !r && !a,
              d = {
                chart: {
                  type: "column",
                  spacing: [0, 0, 0, 0],
                  marginBottom: 30,
                  marginLeft: 10,
                  marginRight: 10,
                  marginTop: 0,
                },
                tooltip: {
                  headerFormat:
                    '<span class="highcharts-header">{series.name}</span><br>',
                  pointFormatter: function () {
                    return `<b>${this.y}</b> (${t.days[
                      this.x
                    ].label.toString()})`;
                  },
                  outside: !0,
                  className: "chart--full-success-column__tooltip",
                },
                plotOptions: {
                  column: { stacking: "normal" },
                  series: {
                    pointPadding: 0.1,
                    groupPadding: 0.15,
                    point: {
                      events: {
                        click: this.settings.interactive
                          ? function () {
                              s(this);
                            }
                          : null,
                        mouseOver: this.settings.interactive
                          ? function () {
                              i(this);
                            }
                          : null,
                        mouseOut: this.settings.interactive
                          ? function () {
                              n(this);
                            }
                          : null,
                      },
                    },
                  },
                },
                xAxis: {
                  startOnTick: !1,
                  endOnTick: !1,
                  allowDecimals: !1,
                  tickInterval: 3,
                  minorTickInterval: 1,
                  labels: {
                    step: 1,
                    formatter: function () {
                      return t.days[this.value]
                        ? t.days[this.value].label.toString()
                        : null;
                    },
                  },
                },
                yAxis: { tickAmount: 6, labels: { enabled: !1 }, title: !1 },
              };
            return (
              (this.settings.tooltipsEnabled && !l) ||
                (d = _.defaultsDeep(
                  { plotOptions: { column: { enableMouseTracking: !1 } } },
                  d
                )),
              l && (d = _.defaultsDeep({ yAxis: { max: 10 } }, d)),
              (d = _.defaultsDeep(d, e)),
              (d.series = []),
              l
                ? d.series.push({ data: t.days.map((e) => 0), colorIndex: 0 })
                : (d.series.push({
                    data: t.failures,
                    name: o.Z.lang("metrics.chart_full_success_column_failure"),
                    colorIndex: 1,
                  }),
                  d.series.push({
                    data: t.successes,
                    name: o.Z.lang("metrics.chart_full_success_column_success"),
                    colorIndex: 2,
                  })),
              d
            );
          }
          buildFullActivityBurndownOptions(e) {
            let t = this.settings.data,
              s = Math.max(1, Math.floor(t.days.length / 10) + 1),
              i = 1;
            t.days.length > 30 && (i = Math.max(1, Math.round(s / 3)));
            let n = {
              chart: {
                spacing: [0, 0, 0, 0],
                marginBottom: 30,
                marginLeft: 10,
                marginRight: 10,
                marginTop: 0,
              },
              tooltip: {
                headerFormat:
                  '<span class="highcharts-header">{series.name}</span><br>',
                pointFormatter: function () {
                  return `<b>${this.y}</b> (${t.days[
                    this.x
                  ].label.toString()})`;
                },
              },
              plotOptions: { area: { stacking: "normal" } },
              xAxis: {
                tickInterval: s,
                minorTickInterval: i,
                labels: {
                  step: 1,
                  formatter: function () {
                    return t.days[this.value]
                      ? t.days[this.value].label.toString()
                      : null;
                  },
                },
                allowDecimals: !1,
              },
              yAxis: [
                { tickAmount: 8, labels: { enabled: !1 }, title: null },
                {
                  tickAmount: 8,
                  labels: { enabled: !1 },
                  title: null,
                  opposite: !0,
                },
                { visible: !1 },
                { visible: !1, max: 5 * _.max(t.todosCompleted) },
              ],
            };
            return (
              this.settings.tooltipsEnabled ||
                (n = _.defaultsDeep(
                  { plotOptions: { spline: { enableMouseTracking: !1 } } },
                  n
                )),
              t.dueIndex &&
                (n = _.defaultsDeep(
                  {
                    xAxis: {
                      plotLines: [
                        {
                          value: t.dueIndex - 1,
                          zIndex: 5,
                          label: {
                            text: o.Z.lang(
                              "metrics.chart_full_activity_burndown_due"
                            ),
                            align: "center",
                          },
                        },
                      ],
                    },
                  },
                  n
                )),
              (n = _.defaultsDeep(n, e)),
              (n.series = []),
              n.series.push({
                type: "column",
                name: t.labels.todosCompleted,
                colorIndex: 0,
                data: t.todosCompleted,
                yAxis: 3,
              }),
              n.series.push({
                type: "spline",
                name: t.labels.effortRemaining,
                colorIndex: 1,
                data: t.effortRemaining,
                marker: { radius: 2, symbol: "circle" },
                yAxis: 0,
                tooltip: {
                  pointFormatter: function () {
                    let e = o.Z.roundToDecimal(this.y / 36e8, 1);
                    return `<b>${
                      1 == e
                        ? o.Z.lang(
                            "metrics.chart_full_activity_burndown_hours_singular",
                            { count: e }
                          )
                        : o.Z.lang(
                            "metrics.chart_full_activity_burndown_hours_plural",
                            { count: e }
                          )
                    }</b> (${t.days[this.x].label.toString()})`;
                  },
                },
              }),
              n.series.push({
                type: "spline",
                name: t.labels.todosRemaining,
                colorIndex: 2,
                data: t.todosRemaining,
                marker: { radius: 2, symbol: "circle" },
                yAxis: 1,
              }),
              t.showIdeal &&
                n.series.push({
                  type: "spline",
                  name: t.labels.idealProgress,
                  colorIndex: 3,
                  data: [
                    { x: 0, y: _.max(t.todosRemaining) },
                    { x: t.days.length - 1, y: 0 },
                  ],
                  marker: { radius: 2, symbol: "circle" },
                  yAxis: 1,
                  tooltip: {
                    pointFormatter: function () {
                      return `<b>${
                        0 == this.x
                          ? t.labels.idealProgressStart
                          : t.labels.idealProgressEnd
                      }</b>`;
                    },
                  },
                }),
              n
            );
          }
          buildFullResultsPieOptions(e) {
            let t = {
              defs: {
                untestedPatternPieFillLight20: {
                  tagName: "pattern",
                  id: "untested-pattern-pie-fill-light-20",
                  patternUnits: "userSpaceOnUse",
                  width: 60,
                  height: 24,
                  children: [
                    {
                      tagName: "image",
                      preserveAspectRatio: "none",
                      x: "0",
                      y: "0",
                      width: "60",
                      height: "24",
                      href: n.N.assetUrl(
                        "/images/charts/untested-pattern-pie-light-20.svg"
                      ),
                    },
                  ],
                },
              },
              chart: { type: "pie", spacing: [0, 0, 0, 0], margin: 0 },
              tooltip: {
                pointFormat: "<b>{point.y}</b> ({point.percentage:.0f}%)",
              },
              plotOptions: { pie: { dataLabels: { enabled: !1 } } },
            };
            return (
              this.settings.tooltipsEnabled ||
                (t = _.defaultsDeep(
                  { plotOptions: { pie: { enableMouseTracking: !1 } } },
                  t
                )),
              (t = _.defaultsDeep(t, e)),
              (t.series = [
                { data: this.mapSingleSeriesData(this.settings.data) },
              ]),
              t
            );
          }
          buildFullActivityLineOptions(e) {
            let t = this.settings.data,
              s = {
                chart: {
                  type: "spline",
                  spacing: [0, 0, 0, 0],
                  marginBottom: 30,
                  marginLeft: 10,
                  marginRight: 10,
                  marginTop: 0,
                },
                tooltip: {
                  headerFormat:
                    '<span class="highcharts-header">{series.name}</span><br>',
                  pointFormatter: function () {
                    return `<b>${this.y}</b> (${t.days[
                      this.x
                    ].label.toString()})`;
                  },
                },
                plotOptions: { area: { stacking: "normal" } },
                xAxis: {
                  startOnTick: !1,
                  endOnTick: !1,
                  allowDecimals: !1,
                  tickInterval: 2,
                  minorTickInterval: 1,
                  labels: {
                    step: 1,
                    formatter: function () {
                      return t.days[this.value]
                        ? t.days[this.value].label.toString()
                        : null;
                    },
                  },
                },
                yAxis: { tickAmount: 8, labels: { enabled: !1 }, title: !1 },
              };
            return (
              this.settings.tooltipsEnabled ||
                (s = _.defaultsDeep(
                  { plotOptions: { spline: { enableMouseTracking: !1 } } },
                  s
                )),
              (s = _.defaultsDeep(s, e)),
              (s.series = this.settings.data.lines.map((e) => ({
                name: o.Z.truncateText(e.label.toString(), 20),
                colorIndex: e.colorIndex || 0,
                className: e.class,
                data: e.data,
                marker: { radius: 2, symbol: "circle" },
              }))),
              s
            );
          }
          buildKeyResultsPieOptions(e) {
            let t = {
              chart: { type: "pie", spacing: [0, 0, 0, 0], margin: 0 },
              tooltip: {
                pointFormat: "<b>{point.y}</b> ({point.percentage:.0f}%)",
              },
              plotOptions: { pie: { dataLabels: { enabled: !1 } } },
            };
            return (
              this.settings.tooltipsEnabled ||
                (t = _.defaultsDeep(
                  { plotOptions: { pie: { enableMouseTracking: !1 } } },
                  t
                )),
              (t = _.defaultsDeep(t, e)),
              (t.series = [
                { data: this.mapSingleSeriesData(this.settings.data) },
              ]),
              t
            );
          }
          buildKeyResultsDonutOptions(e, t) {
            let s = {
              chart: { type: "pie", spacing: [0, 0, 0, 0], margin: 0 },
              tooltip: {
                pointFormat: "<b>{point.y}</b> ({point.percentage:.0f}%)",
              },
              plotOptions: {
                pie: {
                  dataLabels: { enabled: !1 },
                  startAngle: -130,
                  endAngle: 130,
                  center: ["50%", "50%"],
                },
              },
            };
            return (
              this.settings.tooltipsEnabled ||
                (s = _.defaultsDeep(
                  { plotOptions: { pie: { enableMouseTracking: !1 } } },
                  s
                )),
              (s = _.defaultsDeep(s, e)),
              (s.series = [
                {
                  type: "pie",
                  innerSize: "55%",
                  data: this.settings.data.map((e) => ({
                    name: o.Z.truncateText(e.label, 20),
                    colorIndex: e.colorIndex || 0,
                    colorValue: e.colorIndex || 0,
                    className: e.class,
                    y: e.value,
                  })),
                },
              ]),
              s
            );
          }
          buildKeyResultsBubbleOptions(e, t) {
            let s = {
              chart: { type: "packedbubble", spacing: [0, 0, 0, 0], margin: 0 },
              tooltip: {
                headerFormat: "{series.name}<br>",
                pointFormat: "<b>{point.value}%</b>",
              },
              plotOptions: {
                packedbubble: {
                  draggable: !1,
                  minSize: "10%",
                  maxSize: "250%",
                  zMin: 0,
                  zMax: 1e3,
                  dataLabels: { enabled: !1 },
                  useSimulation: !0,
                  layoutAlgorithm: { enableSimulation: !1, maxIterations: 100 },
                },
                series: { animation: !1 },
              },
            };
            return (
              (s = _.defaultsDeep(s, e)),
              (s.series = this.settings.data.map((e) => ({
                name: o.Z.truncateText(e.label, 20),
                colorIndex: e.colorIndex || 0,
                className: e.class,
                data: [e.value],
              }))),
              s
            );
          }
          buildKeyActivityAreaOptions(e) {
            let t = {
              chart: { type: "areaspline", spacing: [0, 0, 0, 0], margin: 0 },
              tooltip: { pointFormat: "<b>{point.y}</b>" },
              xAxis: { visible: !1 },
              yAxis: { visible: !1 },
              plotOptions: {
                areaspline: {
                  marker: { enabled: !1, states: { hover: { enabled: !0 } } },
                },
              },
            };
            return (
              (t = _.defaultsDeep(t, e)),
              this.settings.tooltipsEnabled ||
                (t = _.defaultsDeep(
                  {
                    plotOptions: {
                      areaspline: {
                        marker: { states: { hover: { enabled: !1 } } },
                      },
                    },
                  },
                  t
                )),
              (t.series = [
                { data: this.mapSingleSeriesData(this.settings.data) },
              ]),
              t
            );
          }
          renderChart() {
            let e = this.buildChartOptions();
            (this.chart = h().chart(this.containerTarget, e)),
              this.chart.renderer.definition({
                tagName: "filter",
                id: "drop-shadow-custom-" + this.chart.index,
                children: [
                  {
                    tagName: "feGaussianBlur",
                    in: "SourceAlpha",
                    stdDeviation: 4,
                  },
                  { tagName: "feOffset", dx: 0, dy: 2 },
                  {
                    tagName: "feComponentTransfer",
                    children: [
                      { tagName: "feFuncA", type: "linear", slope: 0.15 },
                    ],
                  },
                  {
                    tagName: "feMerge",
                    children: [
                      { tagName: "feMergeNode" },
                      { tagName: "feMergeNode", in: "SourceGraphic" },
                    ],
                  },
                ],
              }),
              this.chart.renderer.definition({
                tagName: "style",
                textContent:
                  ".highcharts-tooltip-" +
                  this.chart.index +
                  "{filter:url(#drop-shadow-custom-" +
                  this.chart.index +
                  ") !important}",
              }),
              this.settings.selected &&
                this.setSelected(this.settings.selected);
          }
          refreshSize(e) {
            this.chart.reflow();
          }
          setSelected(e) {
            this.selected = e;
            let t,
              s = this.getHasSelection();
            if (
              (this.$element.toggleClass(this.classes.chartHasSelection, s),
              "full.success.column" === this.settings.type)
            ) {
              t = this.chart.getSelectedPoints();
              for (let e of t) e.select(!1, !1);
              if (s)
                for (let e of this.chart.series)
                  e.points[this.selected].select(!0, !0);
            }
            this.events.trigger("selectionchange", {
              target: this,
              value: this.selected,
              hasSelection: s,
            });
          }
          getHasSelection() {
            return null !== this.selected && void 0 !== this.selected;
          }
          getSelected() {
            return this.selected;
          }
          resetSelection() {
            this.setSelected(null);
          }
        }
        u(g, "targets", ["container"]);
      },
      41780: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => c });
        var i = s(89432),
          o = s(132),
          n = s(69555),
          r = s(96622),
          a = s(43689),
          l = s(22153),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.d {
          constructor(...e) {
            super(...e),
              h(this, "selectors", {
                step: ".case-step-editor__steps__step",
                stepSubField:
                  ".case-step-editor__steps__step__content__subfield",
                stepMenuIndexIcon:
                  ".case-step-editor__steps__step__menu__index__icon",
                stepDragHandle:
                  ".case-step-editor__steps__step__menu__index__drag",
                editor: ".editor",
                editorFocused: ".editor.editor--focused",
                editorNotFocused: ".editor:not(.editor--focused)",
                subfieldEditor:
                  ".case-step-editor__steps__step__content__subfield__editor",
                dialogMainContent: ".dialog__main__content",
              }),
              h(this, "classes", {
                stepDragging: "case-step-editor__steps__step--dragging",
                bodyMoving: "steps-body--moving",
                stepLoaded: "case-step-editor__steps__step--loaded",
                isEmpty: "case-step-editor--empty",
                subfieldEditorFocused:
                  "case-step-editor__steps__step__content__subfield__editor--focused",
              }),
              h(this, "doStepDragMousedown", (e) => {
                1 == e.which && this.stepDragStart(e, !0);
              }),
              h(this, "doStepDragTouchStart", (e) => {
                this.stepDragStart(e, !1);
              }),
              h(this, "doStepContentEditorAdded", (e) => {
                this.initialLoaded &&
                  this.newStepEditorLoadings.push(e.loadEditor());
              }),
              h(this, "doStepContentEditorBlur", () => {
                this.updateStepContentEditorFocus();
              }),
              h(this, "doStepContentEditorFocus", () => {
                this.updateStepContentEditorFocus();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.newStepEditorLoadings = []),
              (this.initialLoaded = !1),
              (this.$window = $(window));
          }
          load() {
            r.UI.initialize(this.$element),
              (this.$stepsSection = $(this.stepsTarget)),
              d.Z.requestChild(this.component, "stepContentEditor", {
                onAdded: this.doStepContentEditorAdded,
                events: {
                  blur: this.doStepContentEditorBlur,
                  focus: this.doStepContentEditorFocus,
                },
              }),
              this.refreshStepIndices(),
              this.initDragDrop();
          }
          unload() {
            this.releaseDragDrop();
          }
          initDragDrop() {
            let e = $(this.selectors.stepDragHandle, this.$element);
            e.on("mousedown", this.doStepDragMousedown),
              e.on("touchstart", this.doStepDragTouchStart);
          }
          releaseDragDrop() {
            let e = $(this.selectors.stepDragHandle, this.$element);
            e.off("mousedown", this.doStepDragMousedown),
              e.off("touchstart", this.doStepDragTouchStart);
          }
          refreshDragDrop() {
            this.releaseDragDrop(), this.initDragDrop();
          }
          stepDragStart(e, t) {
            let s = $(e.target);
            if (0 == s.closest(this.selectors.stepDragHandle).length) return;
            t && (e.preventDefault(), document.activeElement.blur());
            let i = s.closest(this.selectors.step);
            n.GI.hideAllPopups();
            let o,
              r = $("body");
            r.addClass(this.classes.bodyMoving),
              i.addClass(this.classes.stepDragging);
            let d = this.$element.closest(this.selectors.dialogMainContent);
            d.length > 0 && (o = new l.l(d.get(0), !0, !1, !0));
            let h = (e) => {
                let t = a.Z.getEventPagePos(e),
                  s = document.elementFromPoint(t.x, t.y),
                  o = $(s).closest(this.selectors.step);
                if (o.length > 0 && !o.is(i)) {
                  let e = o.offset(),
                    s = o.height(),
                    n = e.top + Math.floor(s / 2);
                  t.y < n
                    ? i.next().is(o) ||
                      (this.stepsTarget.insertBefore(i.get(0), o.get(0)),
                      this.refreshStepIndices())
                    : i.prev().is(o) ||
                      (o.get(0).after(i.get(0)), this.refreshStepIndices());
                }
              },
              c = (e) => {
                e.preventDefault();
              },
              u = (e) => {
                e.preventDefault();
              },
              g = (e) => {
                this.$window.off("mouseup", g),
                  this.$window.off("touchend", g),
                  this.$window.off("touchcancel", g),
                  this.$window.off("mousemove", h),
                  this.$window.off("touchmove", h),
                  this.$window.off("contextmenu", c),
                  window.removeEventListener("touchmove", u, { passive: !1 }),
                  o && o.stop(),
                  r.removeClass(this.classes.bodyMoving),
                  i.removeClass(this.classes.stepDragging);
              };
            this.$window.on("mouseup", g),
              this.$window.on("touchend", g),
              this.$window.on("touchcancel", g),
              this.$window.on("mousemove", h),
              this.$window.on("touchmove", h),
              this.$window.on("contextmenu", c),
              window.addEventListener("touchmove", u, { passive: !1 }),
              o && o.start();
          }
          loadInitialSteps() {
            $(this.selectors.step, this.$element).each((e, t) => {
              $(t)
                .find(this.selectors.editor)
                .each((e, t) => {
                  let s = $(t);
                  r.UI.getEditorController(s).loadEditor();
                });
            }),
              (this.initialLoaded = !0);
          }
          doAddStep() {
            r.UI.loading($(this.addStepIconTarget), () =>
              this.addStep((e) => {
                this.$stepsSection.append(e);
              })
            );
          }
          addAndFocusNewStep() {
            r.UI.loading($(this.addStepIconTarget), () =>
              this.addStep((e) => {
                this.$stepsSection.append(e);
              }).then((e) => {
                r.UI.getEditorController(
                  e.find(this.selectors.editor).first()
                ).focus(),
                  e.get(0).scrollIntoView();
              })
            );
          }
          doEmptyAddStep(e) {
            r.UI.loading($(e.currentTarget), () =>
              this.addStep((e) => {
                this.$stepsSection.append(e);
              })
            );
          }
          addStep(e) {
            return (
              d.Z.blockUI(),
              new Promise((t, s) => {
                let i = $(this.$element.data("step"));
                e(i),
                  r.UI.initialize(i),
                  this.refreshDragDrop(),
                  setTimeout(() => {
                    Promise.all(this.newStepEditorLoadings).then(() => {
                      i.addClass(this.classes.stepLoaded),
                        this.refreshEmpty(),
                        this.refreshStepIndices(),
                        (this.newStepEditorLoadings = []),
                        t(i);
                    });
                  }, 50);
              })
                .catch((e) => {
                  d.Z.handleError(e);
                })
                .then((e) => (d.Z.unblockUI(), e))
            );
          }
          doInsertStep(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.step);
            r.UI.loading(t, () =>
              this.addStep((e) => {
                s.after(e);
              })
            );
          }
          doRemoveStep(e) {
            let t = $(e.currentTarget);
            if (r.UI.popupVisible(t)) return;
            let s = $(e.currentTarget).closest(this.selectors.step);
            const i = new o.l(a.Z.lang("components.steps_really_remove_step"));
            (i.onSuccess = () => {
              s.remove(), this.refreshEmpty(), this.refreshStepIndices();
            }),
              i.show(t, n.Fz.BottomLeft);
          }
          refreshEmpty() {
            let e = $(this.selectors.step, this.$element);
            this.$element.toggleClass(this.classes.isEmpty, 0 == e.length);
          }
          updateStepContentEditorFocus() {
            let e = $(this.selectors.editor, this.$element),
              t = e.filter(this.selectors.editorFocused);
            e.filter(this.selectors.editorNotFocused)
              .closest(this.selectors.subfieldEditor)
              .removeClass(this.classes.subfieldEditorFocused);
            let s = !1,
              i = t.closest(this.selectors.subfieldEditor);
            i.each((e, t) => {
              let i = $(t);
              i.hasClass(this.classes.subfieldEditorFocused) &&
                s &&
                i.removeClass(this.classes.subfieldEditorFocused),
                (s = s || i.hasClass(this.classes.subfieldEditorFocused));
            }),
              s || i.first().addClass(this.classes.subfieldEditorFocused);
          }
          refreshStepIndices() {
            let e = $(this.selectors.step, this.$element),
              t = 1;
            e.each((e, s) => {
              $(s).find(this.selectors.stepMenuIndexIcon).text(t), t++;
            });
          }
          getSteps() {
            let e = $(this.selectors.step, this.$element),
              t = [];
            return (
              e.each((e, s) => {
                let i = $(s),
                  o = {},
                  n = i.data("id");
                n && (o.id = n);
                let a = i.find(this.selectors.stepSubField),
                  l = !1;
                a.each((e, t) => {
                  let s = $(t),
                    i = r.UI.getEditorController(
                      s.find(this.selectors.editor)
                    ).getData();
                  (o[s.data("name")] = i), i && (l = !0);
                }),
                  l && t.push(o);
              }),
              t
            );
          }
        }
        h(c, "targets", ["steps", "addStepIcon"]);
      },
      48507: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(89432),
          o = s(96622),
          n = s(69555),
          r = s(44286);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.d {
          constructor(...e) {
            super(...e),
              a(this, "defaults", { color: "FFFFFF" }),
              a(this, "doInputChange", (e) => {
                this.loadColor(this.getColor());
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$input = $(this.inputTarget)),
              (this.$buttonColor = $(this.buttonColorTarget)),
              (this.$button = $(this.buttonTarget)),
              this.loadColor(this.getColor());
          }
          load() {
            this.$input.on("change input textInput", this.doInputChange);
          }
          unload() {
            this.$input.off("change input textInput", this.doInputChange);
          }
          doSelectColor() {
            if ((this.$button.blur(), o.UI.popupVisible(this.$button))) return;
            const e = new r.L();
            (e.onSuccess = (e) => {
              this.setColor(e);
            }),
              e.show(this.$button, n.Fz.BottomRight);
          }
          setColor(e) {
            (e = e.toUpperCase()),
              o.UI.setText(this.$input, e),
              this.loadColor(e);
          }
          getColor() {
            return o.UI.getText(this.$input).replace(/#/g, "");
          }
          loadColor(e) {
            let t = e.trim();
            t.match(/^[0-9A-F]{6}$/i) || (t = this.defaults.color),
              this.$buttonColor.css({ background: `#${t}` });
          }
        }
        a(l, "targets", ["input", "button", "buttonColor"]);
      },
      53484: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => b });
        var i = s(89432),
          o = s(11802),
          n = s(43689),
          r = s(69555),
          a = s(96622),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h {
          static get PreviousItem() {
            return 1;
          }
          static get NextItem() {
            return 2;
          }
          static get PreviousPage() {
            return 3;
          }
          static get NextPage() {
            return 4;
          }
          static get First() {
            return 5;
          }
          static get Last() {
            return 6;
          }
        }
        class c {
          static get Search() {
            return 1;
          }
          static get Item() {
            return 2;
          }
          static get InlineAdd() {
            return 3;
          }
          static get Action() {
            return 4;
          }
        }
        class u extends r.GI {
          constructor(e, t, s, i, n) {
            let l = {};
            n
              ? (i.push("dropdown__popup--basic"),
                (l.margin = 6),
                (l.showPointer = !0))
              : ((l.showPointer = !1), (l.margin = -1)),
              (l.animations = !1),
              (l.additionalClasses = i),
              (l.allowedPositions = [r.Fz.BottomLeft, r.Fz.TopLeft]),
              super("components.dropdown_menu", l),
              d(this, "templates", {
                multiRow:
                  '\n            <div class="dropdown__items__row dropdown__items__row--item"\n                data-value="$(value)" data-label="$(label)" data-type="item">\n                <div class="dropdown__items__row__selection">\n                    <div class="ui fitted checkbox">\n                        <input type="checkbox" tabindex="0" class="hidden">\n                        <label></label>\n                    </div>\n                </div>\n                <div class="dropdown__item">\n                    $(label)\n                </div>\n            </div>',
              }),
              d(this, "classes", {
                rowSelected: "dropdown__items__row--selected",
                menuSearching: "dropdown__popup__menu--searching",
                rowFocused: "dropdown__items__row--focused",
                actionRowFocused: "dropdown__actions__row--focused",
              }),
              d(this, "selectors", {
                anchor: "a",
                menu: ".dropdown__popup__menu",
                items: ".dropdown__items",
                search: ".dropdown__search",
                searchEmpty: ".dropdown__search-empty",
                row: ".dropdown__items__row",
                rowSelectionCheckbox:
                  ".dropdown__items__row__selection .checkbox",
                rowSelected: ".dropdown__items__row--selected",
                actions: ".dropdown__actions",
                actionRow: ".dropdown__actions__row",
                inlineAdd: ".dropdown__inline-add",
                inlineAddInput: "input",
                inlineAddIcon: ".icon-dropdown-confirm",
              }),
              d(this, "doPopupClick", (e) => {
                e.stopPropagation();
              }),
              d(this, "doActionRowClick", (e) => {
                let t = $(e.currentTarget);
                e.stopPropagation(), this.actionClick(t.data("action"));
              }),
              d(this, "doRowClick", (e) => {
                e.stopPropagation();
                let t = $(e.currentTarget),
                  s = t.attr("data-value");
                "item" == t.data("type") &&
                  ($(e.target).closest(this.selectors.anchor).length > 0 ||
                    (void 0 === s && (s = null),
                    this.isMulti
                      ? null !== s &&
                        (this.toggleMultiValue(s),
                        this.clearRowFocus(),
                        this.$items.focus(),
                        (this.lastSelectedValue = s))
                      : ((this.value = s),
                        this.updateSelection(),
                        this.triggerChange(),
                        this.hide(r.UT.ItemSelected))));
              }),
              d(this, "doDownArrowSearch", () => {
                this.changeFocus(h.NextItem);
              }),
              d(this, "doEscSearch", () => {
                this.components.searchBar.getSearchTerm() ||
                  this.hide(r.UT.ESCPressed);
              }),
              d(this, "doFocusSearch", () => {
                this.clearRowFocus();
              }),
              d(this, "doSearch", (e) => {
                this.refreshSearch();
              }),
              d(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              d(this, "doInlineAddInputFocus", (e) => {
                this.clearRowFocus();
              }),
              d(this, "doInlineAddInputKeyDown", (e) => {
                e.which == o.N.ESC &&
                  a.UI.getText(this.$inlineAddInput).length > 0 &&
                  (a.UI.setText(this.$inlineAddInput, ""), e.stopPropagation()),
                  e.which == o.N.Enter && this.inlineAdd();
              }),
              d(this, "doInlineAddIconClick", (e) => {
                this.inlineAdd();
              }),
              d(this, "setFocusedElement", (e, t, s = !1) => {
                e.hasFocus() || (this.clearRowFocus(), e.focus(t, s));
              }),
              (this.onChange = null),
              (this.content = s),
              (this.isMulti = e),
              (this.value = t),
              (this.lastSelectedValue = null);
          }
          load() {
            (this.$menu = $(this.selectors.menu, this.$popup)),
              this.$menu.html(this.content),
              a.UI.clearInitializedTags(this.$menu),
              a.UI.initialize(this.$popup),
              this.$popup.outerWidth(this.$target.outerWidth()),
              (this.$items = $(this.selectors.items, this.$menu)),
              (this.$rows = $(this.selectors.row, this.$items)),
              this.initRowEvents(this.$rows),
              (this.$actions = $(this.selectors.actions, this.$menu)),
              (this.$actionRows = $(this.selectors.actionRow, this.$actions)),
              this.$actionRows.on("click", this.doActionRowClick),
              (this.$inlineAdd = $(this.selectors.inlineAdd, this.$menu)),
              (this.hasInlineAdd = this.$inlineAdd.length > 0),
              this.hasInlineAdd &&
                ((this.$inlineAddInput = $(
                  this.selectors.inlineAddInput,
                  this.$inlineAdd
                )),
                (this.$inlineAddIcon = $(
                  this.selectors.inlineAddIcon,
                  this.$inlineAdd
                )),
                this.$inlineAddInput.on(
                  "keydown",
                  this.doInlineAddInputKeyDown
                ),
                this.$inlineAddInput.on("focus", this.doInlineAddInputFocus),
                this.$inlineAddIcon.on("click", this.doInlineAddIconClick)),
              this.updateSelection(),
              this.isMulti && this.rearrangeMultiRows(),
              (this.hasSearch =
                $(this.selectors.search, this.$menu).length > 0),
              (this.$searchEmpty = $(this.selectors.searchEmpty, this.$menu)),
              l.Z.requestChild(this.component, "searchBar", {
                onAdded: () => {
                  this.components.searchBar.focus();
                },
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  keydownarrow: this.doDownArrowSearch,
                  keyesc: this.doEscSearch,
                  focus: this.doFocusSearch,
                },
              }),
              this.hasSearch && this.refreshSearch(),
              this.$popup.on("click", this.doPopupClick);
          }
          unload() {
            this.uninitRowEvents(this.$rows),
              this.$actionRows.off("click", this.doActionRowClick),
              this.hasInlineAdd &&
                (this.$inlineAddInput.off(
                  "keydown",
                  this.doInlineAddInputKeyDown
                ),
                this.$inlineAddInput.off("focus", this.doInlineAddInputFocus),
                this.$inlineAddIcon.off("click", this.doInlineAddIconClick)),
              this.$popup.off("click", this.doPopupClick);
          }
          loaded() {
            if (!this.isMulti) {
              let e = $(this.selectors.rowSelected, this.$items).first();
              e.length > 0 &&
                this.$items.scrollTop(
                  e.offset().top -
                    this.$items.offset().top +
                    this.$items.scrollTop()
                );
            }
            this.hasSearch || this.setInitialFocus();
          }
          initRowEvents(e) {
            e.on("click", this.doRowClick);
          }
          uninitRowEvents(e) {
            e.off("click", this.doRowClick);
          }
          addRows(e) {
            a.UI.initialize(e),
              this.initRowEvents(e),
              (this.$rows = this.$rows.add(e));
          }
          rearrangeMultiRows() {
            let e = [],
              t = [];
            this.$rows.each((s, i) => {
              let o = $(i);
              o.attr("data-value")
                ? o.is(this.selectors.rowSelected) && t.push(o)
                : e.push(o);
            }),
              this.$items.prepend(t),
              this.$items.prepend(e);
          }
          actionClick(e) {
            this.hide(r.UT.ItemSelected),
              this.events.trigger("actionclick", {
                target: this,
                actionName: e,
              });
          }
          toggleMultiValue(e) {
            let t = _.indexOf(this.value, e);
            -1 != t ? this.value.splice(t, 1) : this.value.push(e),
              this.updateSelection(),
              this.triggerChange();
          }
          triggerChange() {
            this.events.has("change") &&
              this.events.trigger("change", {
                target: this,
                value: this.value,
              });
          }
          updateSelection() {
            if (this.isMulti)
              this.$rows.each((e, t) => {
                let s = $(t),
                  i = s.attr("data-value"),
                  o = _.reduce(this.value, (e, t) => e || t == i, !1),
                  n = void 0 !== i && o;
                s.toggleClass(this.classes.rowSelected, n);
                let r = $(this.selectors.rowSelectionCheckbox, s);
                a.UI.setCheckbox(r, n);
              });
            else {
              let e = !1;
              this.$rows.each((t, s) => {
                let i = $(s),
                  o = i.attr("data-value"),
                  n =
                    "item" == i.data("type") && void 0 !== o && o == this.value;
                i.toggleClass(this.classes.rowSelected, n && !e), n && (e = !0);
              });
            }
          }
          updateValue(e) {
            (this.value = e), this.updateSelection();
          }
          refreshSearch() {
            let e = this.components.searchBar
                ? this.components.searchBar.getSearchTerm()
                : null,
              t = !1;
            e
              ? (this.$menu.addClass(this.classes.menuSearching),
                this.$rows.each((s, i) => {
                  let o = $(i);
                  if ("header" == o.data("type")) return void o.hide();
                  let r = o.attr("data-label"),
                    a = !!r && n.Z.fuzzySearch(r, e);
                  o.toggle(a), (t = t || a);
                }),
                this.$searchEmpty.toggle(!t))
              : (this.$menu.removeClass(this.classes.menuSearching),
                this.$rows.each((e, t) => {
                  $(t).show();
                }),
                this.$searchEmpty.toggle(0 == this.$rows.length));
          }
          selectValue(e) {
            this.isMulti ? this.value.push(e) : (this.value = e),
              this.updateSelection(),
              this.triggerChange();
          }
          inlineAdd() {
            if ((a.UI.focusText(this.$inlineAddInput), !this.isMulti)) return;
            let e = a.UI.getText(this.$inlineAddInput).trim();
            if (e.length > 0) {
              a.UI.setText(this.$inlineAddInput, "");
              let t = n.Z.getTagForText(e),
                s = !1;
              if (
                (this.$rows.each((e, i) => {
                  let o = $(i).attr("data-value");
                  if (o == t)
                    return (
                      (s = !0),
                      (o && _.includes(this.value, o)) || this.selectValue(t),
                      !1
                    );
                }),
                s)
              )
                return;
              let i = n.Z.template(this.templates.multiRow, {
                  value: t,
                  label: t,
                }),
                o = $(i);
              this.$items.prepend(o),
                this.addRows(o),
                this.$items.scrollTop(0),
                this.$searchEmpty.hide(),
                this.events.trigger("add", {
                  target: this,
                  label: t,
                  value: t,
                  html: i,
                }),
                this.selectValue(t);
            }
          }
          getFocusElements() {
            let e = [];
            return (
              this.hasSearch &&
                e.push({
                  type: c.Search,
                  hasFocus: () => this.components.searchBar.hasFocus(),
                  focus: (e) => this.components.searchBar.focus(),
                }),
              $(this.selectors.row, this.$items).each((t, s) => {
                let i = $(s);
                "item" == i.data("type") &&
                  i.is(":visible") &&
                  e.push({
                    type: c.Item,
                    selected: i.hasClass(this.classes.rowSelected),
                    $row: i,
                    hasFocus: () =>
                      document.activeElement == this.$items.get(0) &&
                      i.hasClass(this.classes.rowFocused),
                    focus: (e, t = !1) => {
                      this.$items.focus(),
                        i.addClass(this.classes.rowFocused),
                        this.isMulti ||
                          t ||
                          this.selectValue(i.attr("data-value"));
                      let s = i.offset(),
                        o = i.outerHeight();
                      s.bottom = s.top + o;
                      let n = this.$items.offset(),
                        r = this.$items.height();
                      if (
                        ((n.bottom = n.top + r),
                        !(s.top >= n.top && s.bottom <= n.bottom))
                      )
                        if (e == h.NextItem || e == h.NextPage || e == h.Last) {
                          let e =
                            s.top - n.top - r + o + this.$items.scrollTop();
                          this.$items.scrollTop(e);
                        } else {
                          let e = s.top - n.top + this.$items.scrollTop();
                          this.$items.scrollTop(e);
                        }
                    },
                  });
              }),
              this.hasInlineAdd &&
                e.push({
                  type: c.InlineAdd,
                  hasFocus: () =>
                    document.activeElement == this.$inlineAddInput.get(0),
                  focus: (e) => {
                    a.UI.focusText(this.$inlineAddInput);
                  },
                }),
              $(this.selectors.actionRow, this.$actions).each((t, s) => {
                let i = $(s);
                e.push({
                  type: c.Action,
                  $row: i,
                  hasFocus: () =>
                    document.activeElement == this.$actions.get(0) &&
                    i.hasClass(this.classes.actionRowFocused),
                  focus: (e) => {
                    this.$actions.focus(),
                      i.addClass(this.classes.actionRowFocused);
                  },
                });
              }),
              e
            );
          }
          getFocusedElement(e) {
            let t = null;
            for (let s = 0; s <= e.length - 1; s++)
              if (e[s].hasFocus()) {
                t = s;
                break;
              }
            return t;
          }
          setInitialFocus() {
            if (0 == this.$rows.length && this.hasInlineAdd && !this.hasSearch)
              a.UI.focusText(this.$inlineAddInput);
            else {
              this.$items.focus();
              let e = this.getFocusElements();
              for (let t = 0; t < e.length; t++)
                if (e[t].type == c.Item && e[t].selected)
                  return void this.setFocusedElement(e[t], h.NextItem, !0);
            }
          }
          changeFocus(e) {
            let t = this.getFocusElements(),
              s = this.getFocusedElement(t);
            if (null === s)
              if (
                document.activeElement == this.$items.get(0) &&
                null !== this.lastSelectedValue
              ) {
                let s = null;
                for (let e = 0; e < t.length; e++) {
                  let i = t[e];
                  if (i.type == c.Item) {
                    let t = i.$row.attr("data-value");
                    if (void 0 !== t && t == this.lastSelectedValue) {
                      s = e;
                      break;
                    }
                  }
                }
                null !== s
                  ? e == h.NextItem || e == h.NextPage
                    ? s < t.length - 1
                      ? this.setFocusedElement(t[s + 1], e)
                      : this.setFocusedElement(t[s], e)
                    : s > 0
                    ? this.setFocusedElement(t[s - 1], e)
                    : this.setFocusedElement(t[s], e)
                  : t.length > 0 && this.setFocusedElement(t[0], e);
              } else t.length > 0 && this.setFocusedElement(t[0], e);
            else if (e == h.NextItem)
              this.setFocusedElement(t[Math.min(s + 1, t.length - 1)], e);
            else if (e == h.PreviousItem)
              this.setFocusedElement(t[Math.max(s - 1, 0)], e);
            else if (e == h.NextPage) {
              let i = this.getLastItemIndex(t);
              null !== i && this.setFocusedElement(t[Math.min(s + 6, i)], e);
            } else if (e == h.PreviousPage) {
              let i = this.getFirstItemIndex(t);
              null !== i && this.setFocusedElement(t[Math.max(s - 6, i)], e);
            } else if (e == h.First) {
              let s = this.getFirstItemIndex(t);
              null !== s && this.setFocusedElement(t[s], e);
            } else if (e == h.Last) {
              let s = this.getLastItemIndex(t);
              null !== s && this.setFocusedElement(t[s], e);
            }
          }
          getFirstItemIndex(e) {
            for (let t = 0; t <= e.length - 1; t++)
              if (e[t].type == c.Item) return t;
            return null;
          }
          getLastItemIndex(e) {
            for (let t = e.length - 1; t >= 0; t--)
              if (e[t].type == c.Item) return t;
            return null;
          }
          keyDown(e) {
            if (e.which == o.N.UpArrow)
              return e.preventDefault(), void this.changeFocus(h.PreviousItem);
            if (e.which == o.N.DownArrow)
              return e.preventDefault(), void this.changeFocus(h.NextItem);
            if (e.which == o.N.PageUp)
              return e.preventDefault(), void this.changeFocus(h.PreviousPage);
            if (e.which == o.N.PageDown)
              return e.preventDefault(), void this.changeFocus(h.NextPage);
            if (e.which == o.N.Home)
              return e.preventDefault(), void this.changeFocus(h.First);
            if (e.which == o.N.End)
              return e.preventDefault(), void this.changeFocus(h.Last);
            if (e.which == o.N.Tab)
              return (
                e.preventDefault(),
                this.changeFocus(e.shiftKey ? h.PreviousItem : h.NextItem),
                !0
              );
            if (e.which == o.N.Enter || e.which == o.N.Space) {
              let t = this.getFocusElements(),
                s = this.getFocusedElement(t);
              if (null !== s) {
                let i = t[s];
                if (i.type == c.Action)
                  e.stopPropagation(),
                    e.preventDefault(),
                    this.actionClick(i.$row.data("action"));
                else if (i.type == c.Item)
                  if ((e.stopPropagation(), e.preventDefault(), this.isMulti)) {
                    let e = i.$row.attr("data-value");
                    void 0 !== e && this.toggleMultiValue(e);
                  } else this.hide(r.UT.ItemSelected);
              }
            }
          }
          clearRowFocus() {
            let e = $(this.selectors.row, this.$items),
              t = $(this.selectors.actionRow, this.$actions);
            e.removeClass(this.classes.rowFocused),
              t.removeClass(this.classes.actionRowFocused);
          }
        }
        var g = s(8338);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m extends g.T {
          static displayMultiItems(e, t, s) {
            let i = this.renderResponsiveList(
              t,
              s,
              this.widths.spaceBetween,
              (e) => this.getMultiWidth(e),
              (e) => this.renderMulti(e),
              (e) => this.getMultiMoreWidth(e),
              (e) => this.renderMultiMore(e),
              (e) => this.renderMultiTotal(e)
            );
            e[0].innerHTML = i;
          }
          static renderMulti(e) {
            return n.Z.template(this.templates.multiItem, { label: e.label });
          }
          static getMultiWidth(e) {
            return this.widths.padding + this.measureText(e.label, g.z.Default);
          }
          static renderMultiMore(e) {
            return n.Z.template(this.templates.multiMore, { count: e });
          }
          static getMultiMoreWidth(e) {
            return (
              this.widths.iconWidth +
              this.widths.padding +
              this.measureText(e.toString(), g.z.Default)
            );
          }
          static renderMultiTotal(e) {
            return n.Z.template(this.templates.multiTotal, {
              text: n.Z.lang("components.dropdown_multi_total", { count: e }),
            });
          }
        }
        p(m, "templates", {
          multiItem:
            '<div class="dropdown__content__multi-items__item">$(label)</div>',
          multiMore:
            '<div class="dropdown__content__multi-items__item dropdown__content__multi-items__item--plus"><i class="far fa-plus icon-plus fa-fw"></i>$(count)</div>',
          multiTotal:
            '<div class="dropdown__content__multi-items__item dropdown__content__multi-items__item--total">$(text)</div>',
        }),
          p(m, "widths", { spaceBetween: 6, iconWidth: 20, padding: 12 });
        var f = s(57407);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const b = class extends i.d {
          constructor(...e) {
            super(...e),
              C(this, "classes", {
                dropdownActive: "dropdown--active",
                dropdownBasic: "dropdown--basic",
                dropdownActiveUpwards: "dropdown--active-upwards",
                dropdownActiveDownwards: "dropdown--active-downwards",
                contentDefaultVisible: "dropdown__content--default-visible",
                dropdownDisabled: "dropdown--disabled",
              }),
              C(this, "selectors", {
                dropdownDisabled: ".dropdown--disabled",
                content: ".dropdown__content",
                contentResetIcon: ".dropdown__content__reset-icon",
                contentSingleItem: ".dropdown__content__single-item",
                contentDefaultItem: ".dropdown__content__default-item",
                contentMultiItems: ".dropdown__content__multi-items",
                container: ".dropdown__container",
                items: ".dropdown__items",
                row: ".dropdown__items__row",
                item: ".dropdown__item",
              }),
              C(this, "templates", {
                multiSingleRow:
                  '\n            <div class="dropdown__items__row dropdown__items__row--item"\n                data-value="$(value)" data-label="$(label)" data-type="item">\n                <div class="dropdown__items__row__selection">\n                    <div class="ui fitted checkbox checked">\n                        <input type="checkbox" tabindex="0" class="hidden">\n                        <label></label>\n                    </div>\n                </div>\n                <div class="dropdown__item">\n                    $(label)\n                </div>\n              </div>',
                singleRow:
                  '\n            <div class="dropdown__items__row dropdown__items__row--item"\n                data-value="$(value)" data-label="$(label)" data-type="item">\n                <div class="dropdown__item">\n                    $(label)\n                </div>\n              </div>',
              }),
              C(this, "doDropdownClick", (e) => {
                this.toggleMenu();
              }),
              C(this, "doDropdownKeyDown", (e) => {
                this.getEnabled() &&
                  ((e.which != o.N.DownArrow && e.which != o.N.Space) ||
                    (this.showMenu(), e.preventDefault(), e.stopPropagation()));
              }),
              C(this, "doResetClick", (e) => {
                if ((e.stopPropagation(), !this.getEnabled())) return;
                let t = this.isMulti ? [] : null;
                this.setValue(t),
                  this.events.trigger("change", { target: this, value: t }),
                  this.menuActive && this.menu.updateValue(t);
              });
          }
          connect() {
            if (
              ((this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.menuActive = !1),
              (this.menu = null),
              (this.hasExternalItems = this.$element.data("externalItems")),
              (this.isMulti = this.$element.data("multi")),
              this.isMulti)
            ) {
              this.value = [];
              let e = this.$element.attr("data-values");
              e &&
                ((this.value = JSON.parse(e)),
                (this.value = this.value.map((e) => e.toString())));
            } else
              (this.value = this.$element.attr("data-value")),
                void 0 === this.value
                  ? (this.value = null)
                  : (this.value = this.value.toString());
            (this.isBasic = this.$element.hasClass(this.classes.dropdownBasic)),
              (this.$content = $(this.selectors.content, this.$element)),
              (this.$contentSingleItem = $(
                this.selectors.contentSingleItem,
                this.$content
              )),
              (this.$contentDefaultItem = $(
                this.selectors.contentDefaultItem,
                this.$content
              )),
              (this.$contentDefaultItemItem = $(
                this.selectors.item,
                this.$contentDefaultItem
              )),
              (this.$contentMultiItems = $(
                this.selectors.contentMultiItems,
                this.$content
              )),
              (this.$contentResetIcon = $(
                this.selectors.contentResetIcon,
                this.$content
              )),
              (this.$container = $(this.selectors.container, this.$element)),
              (this.$items = $(this.selectors.items, this.$element)),
              l.Z.componentConnected(this, this.element, this.name);
          }
          load() {
            this.$element.on("click", this.doDropdownClick),
              this.$element.on("keydown", this.doDropdownKeyDown),
              this.$contentResetIcon.on("click", this.doResetClick);
          }
          unload() {
            this.$element.off("click", this.doDropdownClick),
              this.$element.off("keydown", this.doDropdownKeyDown),
              this.$contentResetIcon.off("click", this.doResetClick);
          }
          getEnabled() {
            return !this.$element.is(this.selectors.dropdownDisabled);
          }
          setEnabled(e) {
            e
              ? (this.$element.removeClass(this.classes.dropdownDisabled),
                this.$element.attr({ tabindex: 0 }))
              : (this.$element.addClass(this.classes.dropdownDisabled),
                this.$element.attr({ tabindex: -1 }));
          }
          showMenu() {
            if (!this.getEnabled()) return;
            if (this.menuActive) return;
            let e = () => {
                for (let e of u.visiblePopups) e instanceof u && e.hide();
                this.menu = new u(
                  this.isMulti,
                  this.value,
                  this.$container.html(),
                  this.$element.data("classes") || [],
                  this.isBasic
                );
                let e = !1,
                  t = null;
                (this.menu.onHide = (s, i) => {
                  this.$element.removeClass(this.classes.dropdownActive),
                    this.$element.removeClass(
                      this.classes.dropdownActiveUpwards
                    ),
                    this.$element.removeClass(
                      this.classes.dropdownActiveDownwards
                    ),
                    (this.menuActive = !1),
                    (this.menu = null);
                  for (let e of u.visiblePopups) e instanceof f.z && e.hide();
                  (i != r.UT.ESCPressed && i != r.UT.ItemSelected) ||
                    this.$element.focus(),
                    e &&
                      this.events.trigger("changehide", {
                        target: this,
                        value: t,
                      });
                }),
                  this.menu.events.on("change", (s) => {
                    (e = !0),
                      (t = s.value),
                      this.setValue(s.value),
                      this.events.trigger("change", {
                        target: this,
                        value: s.value,
                      });
                  }),
                  this.menu.events.on("actionclick", (e) => {
                    this.events.trigger("actionclick", {
                      target: this,
                      actionName: e.actionName,
                    });
                  }),
                  this.menu.events.on("add", (e) => {
                    this.$items.append(e.html), this.sortItems();
                  }),
                  this.menu.show(this.$element).then(() => {
                    this.$element.addClass(this.classes.dropdownActive),
                      this.menu.displayPosition == r.Fz.BottomLeft
                        ? this.$element.addClass(
                            this.classes.dropdownActiveDownwards
                          )
                        : this.$element.addClass(
                            this.classes.dropdownActiveUpwards
                          );
                  }),
                  (this.menuActive = !0);
              },
              t = Promise.resolve();
            this.hasExternalItems
              ? ((t = this.getExternalItems()),
                t.then((t) => {
                  !1 !== t && (this.$items.html(t.join("")), e());
                }))
              : e();
          }
          hideMenu() {
            this.menuActive &&
              (this.$element.removeClass(this.classes.dropdownActive),
              this.menu.hide(),
              (this.menuActive = !1),
              (this.menu = null));
          }
          toggleMenu() {
            this.menuActive ? this.hideMenu() : this.showMenu();
          }
          setValue(e) {
            if (this.isMulti) {
              let t = [],
                s = [];
              (t = Array.isArray(e) ? [...e] : e ? [e] : []),
                $(this.selectors.row, this.$items).each((e, t) => {
                  let i = $(t).attr("data-value");
                  null !== i && s.push(i);
                }),
                (t = _.intersection(t, s)),
                (this.value = t),
                this.$element.attr("data-values", JSON.stringify(t));
            } else {
              let t = $(this.selectors.row, this.$items),
                s = !1;
              t.each((t, i) => {
                if ($(i).attr("data-value") == e) return (s = !0), !1;
              }),
                s || (e = null),
                (this.value = e),
                this.$element.attr("data-value", e);
            }
            this.updateContent();
          }
          getValue() {
            let e = this.getItems();
            return this.isMulti
              ? this.value.filter((t) => void 0 !== e.find((e) => t == e.value))
              : void 0 !== e.find((e) => this.value == e.value)
              ? this.value
              : null;
          }
          refreshSize(e) {
            this.isMulti && this.updateContent(e);
          }
          updateContent(e = null) {
            if (this.isMulti) {
              let t,
                s = [];
              this.value.length > 0 &&
                $(this.selectors.row, this.$items).each((e, t) => {
                  let i = $(t),
                    o = i.attr("data-value");
                  _.includes(this.value, o) && s.push(i);
                }),
                this.$content.hasClass(this.classes.contentDefaultVisible)
                  ? ((t = this.$contentDefaultItem.get(0).clientWidth - 20),
                    this.$contentResetIcon.length > 0 && (t -= 26))
                  : (t = this.$contentMultiItems.get(0).clientWidth - 20);
              let i = () => {
                if (s.length > 0) {
                  this.$content.removeClass(this.classes.contentDefaultVisible);
                  let e = s.map((e) => ({ label: e.attr("data-label") }));
                  m.displayMultiItems(this.$contentMultiItems, t, e);
                } else
                  this.$content.addClass(this.classes.contentDefaultVisible);
              };
              e ? e.push(i) : i();
            } else {
              let e = null;
              if (
                (null !== this.value &&
                  $(this.selectors.row, this.$items).each((t, s) => {
                    let i = $(s),
                      o = i.attr("data-value");
                    if (this.value == o) return (e = i), !1;
                  }),
                e)
              ) {
                let t = $(this.selectors.item, e).first();
                this.$contentSingleItem.html(t.prop("outerHTML")),
                  this.$content.removeClass(this.classes.contentDefaultVisible);
              } else this.$content.addClass(this.classes.contentDefaultVisible);
            }
          }
          getItems() {
            let e = [];
            return (
              $(this.selectors.row, this.$items).each((t, s) => {
                let i = $(s);
                "item" == i.data("type") &&
                  e.push({
                    value: i.attr("data-value"),
                    label: i.attr("data-label"),
                  });
              }),
              e
            );
          }
          setItems(e) {
            let t = this.isMulti ? [] : null;
            this.setValue(t),
              this.menuActive && this.menu.updateValue(t),
              this.$items.empty();
            for (let t of e) {
              let e = { label: t.label, value: t.value },
                s = n.Z.template(
                  this.isMulti
                    ? this.templates.multiSingleRow
                    : this.templates.singleRow,
                  e
                );
              this.$items.append($(s));
            }
          }
          sortItems() {
            let e = $(this.selectors.row, this.$items)
                .toArray()
                .sort((e, t) =>
                  $(e).attr("data-label").localeCompare($(t).attr("data-label"))
                ),
              t = this.$items.get(0);
            for (let s of e) t.appendChild(s);
          }
          showDefaultText(e) {
            this.$contentDefaultItemItem.text(e),
              this.$content.addClass(this.classes.contentDefaultVisible);
          }
          setDefaultText(e) {
            this.$contentDefaultItemItem.text(e);
          }
          focus() {
            this.$element.focus();
          }
          clear() {
            this.setValue([]), this.setItems([]);
          }
          getExternalItems() {
            return (
              a.UI.markLoading(this.$element),
              Promise.all(this.events.trigger("getitems", { target: this }))
                .then((e) => (a.UI.markCompleted(this.$element), e))
                .catch(
                  (e) => (
                    l.Z.handleError(e), a.UI.markCompleted(this.$element), !1
                  )
                )
            );
          }
          getItemsContent() {
            return this.$items.html();
          }
          setItemsContent(e) {
            this.$items.html(e);
          }
          getParams() {
            return this.$element.data("params");
          }
          getItemParams(e) {
            let t = null;
            return (
              $(this.selectors.row, this.$items).each((s, i) => {
                let o = $(i);
                if (o.attr("data-value") == e)
                  return (t = o.data("params")), !1;
              }),
              t
            );
          }
          getItemLabel(e) {
            let t = null;
            return (
              $(this.selectors.row, this.$items).each((s, i) => {
                let o = $(i);
                if (o.attr("data-value") == e) return (t = o.data("label")), !1;
              }),
              t
            );
          }
        };
      },
      88800: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => oe, isCKEditorError: () => ie });
        var i = s(89432),
          o = s(96622),
          n = s(13814),
          r = s(47914),
          a = s(43689),
          l = s(16087),
          d = s(69555);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends d.GI {
          constructor() {
            super("components.editor_emoji_popup", {
              additionalClasses: "popup--editor",
              showPointer: !1,
              margin: 2,
              preventMousedown: !0,
            }),
              h(this, "selectors", { emoji: "li" }),
              h(this, "doEmojiClick", (e) => {
                this.triggerSuccess($(e.currentTarget).text());
              });
          }
          load() {
            (this.$emojis = $(this.selectors.emoji, this.$popup)),
              this.$emojis.on("click", this.doEmojiClick);
          }
          unload() {
            this.$emojis.off("click", this.doEmojiClick);
          }
        }
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends d.GI {
          constructor() {
            super("components.editor_table_popup", {
              additionalClasses: "popup--editor",
              showPointer: !1,
              margin: 2,
              preventMousedown: !0,
            }),
              u(this, "selectors", { box: ".editor-popup__table__grid__box" }),
              u(this, "classes", {
                boxOn: "editor-popup__table__grid__box--on",
              }),
              u(this, "doGridClick", (e) => {
                this.triggerSuccess({ rows: this.row, columns: this.column });
              }),
              u(this, "doBoxMouseEnter", (e) => {
                const t = $(e.currentTarget),
                  s = t.data("row"),
                  i = t.data("column");
                (this.row = s),
                  (this.column = i),
                  this.$caption.text(`${i} x ${s}`),
                  this.$boxes.removeClass(this.classes.boxOn);
                for (let e = 1; e <= s; e++)
                  for (let t = 1; t <= i; t++) {
                    let s = 10 * (e - 1) + t;
                    this.$boxes.eq(s - 1).addClass(this.classes.boxOn);
                  }
              }),
              (this.column = 1),
              (this.row = 1);
          }
          load() {
            (this.$boxes = $(this.selectors.box, this.$popup)),
              this.$boxes.on("mouseenter", this.doBoxMouseEnter),
              this.$grid.on("click", this.doGridClick);
          }
          unload() {
            this.$boxes.off("mouseenter", this.doBoxMouseEnter),
              this.$grid.off("click", this.doGridClick);
          }
        }
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        u(g, "targets", ["caption", "grid"]);
        class m extends d.GI {
          constructor(e) {
            super("components.editor_toolbar_popup", {
              additionalClasses: "popup--editor",
              preventMousedown: !0,
            }),
              p(this, "selectors", {}),
              p(this, "classes", {}),
              (this.$toolbarSections = e);
          }
          load() {
            this.$toolbar.append(this.$toolbarSections);
          }
          unload() {}
        }
        p(m, "targets", ["toolbar"]);
        var f = s(5270),
          C = s(9669),
          b = s.n(C),
          I = s(40685),
          w = s(82314),
          v = s(14526);
        class S extends I.S8 {
          constructor(e, t) {
            super(e), (this.view = t);
          }
          get element() {
            return this.view.editable.element;
          }
          init() {
            const e = this.editor,
              t = this.view,
              s = e.editing.view,
              i = t.editable,
              o = s.document.getRoot();
            (i.name = o.rootName), t.render();
            const n = i.element;
            this.setEditableElement(i.name, n),
              this.focusTracker.add(n),
              i.bind("isFocused").to(this.focusTracker),
              s.attachDomRoot(n),
              this._initPlaceholder(),
              this.fire("ready");
          }
          destroy() {
            const e = this.view;
            this.editor.editing.view.detachDomRoot(e.editable.name),
              e.destroy(),
              super.destroy();
          }
          _initPlaceholder() {
            const e = this.editor,
              t = e.editing.view,
              s = t.document.getRoot(),
              i = e.config.get("placeholder");
            i &&
              (0, v.ID)({
                view: t,
                element: s,
                text: i,
                isDirectHost: !1,
                keepOnFocus: !0,
              });
          }
        }
        var x = s(5671);
        class k extends x.fF {
          constructor(e, t, s, i = {}) {
            super(e), (this.editable = new x.r1(e, t, s));
          }
          render() {
            super.render(), this.registerChild(this.editable);
          }
          destroy() {
            super.destroy();
          }
        }
        class T extends I.ML {
          constructor(e, t) {
            super(t),
              this.model.document.createRoot(),
              (this.sourceElement = e),
              (0, I.Nu)(this);
            const s = new k(this.locale, this.editing.view, this.sourceElement);
            this.ui = new S(this, s);
          }
          destroy() {
            const e = this.getData();
            return (
              this.ui.destroy(),
              super.destroy().then(() => {
                this.sourceElement && (0, w.jS)(this.sourceElement, e);
              })
            );
          }
          static create(e, t = {}) {
            return new Promise((s) => {
              const i = new this(e, t);
              s(
                i
                  .initPlugins()
                  .then(() => {
                    i.ui.init();
                  })
                  .then(() => i.data.init((0, w.yy)(e)))
                  .then(() => i.fire("ready"))
                  .then(() => i)
              );
            });
          }
        }
        (0, w.CD)(T, I.W9), (0, w.CD)(T, I.xK);
        var y = s(99920),
          E = s(39269),
          N = s(48772),
          U = s(83934),
          F = s(29915),
          A = s(88466),
          P = s(81697),
          R = s(88698),
          M = s(32272),
          B = s(75528),
          D = s(92687),
          L = s(98746),
          Z = s(52079),
          j = s(48401),
          z = s(89906),
          V = s(84184),
          O = s(95688),
          W = s(61414),
          H = s(60210),
          G = s(13253),
          q = s(89228),
          X = s(78878),
          K = s(48166),
          J = s(78378),
          Y = s(93379),
          Q = s.n(Y),
          ee = s(91290);
        function te(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        Q()(ee.Z, {
          injectType: "singletonStyleTag",
          insert: "head",
          singleton: !0,
        }),
          ee.Z.locals;
        class se {
          constructor(e, t) {
            (this.loader = e),
              (this.projectId = t),
              (this.axiosCancelSource = b().CancelToken.source());
          }
          upload() {
            return this.loader.file.then((e) => {
              let t = n.N.url("attachments/create/" + this.projectId),
                s = new FormData();
              return (
                s.append("attachment", e),
                b()
                  .post(t, s, {
                    nonBlocking: !0,
                    cancelToken: this.axiosCancelSource.token,
                    onUploadProgress: (e) => {
                      (this.loader.uploadTotal = e.total),
                        (this.loader.uploaded = e.loaded);
                    },
                  })
                  .then((e) => {
                    let t = { attachmentId: e.data.id };
                    return n.N.post(
                      "projects/create_image/" + this.projectId,
                      n.N.toNetworkCase(t)
                    ).then((t) => ({
                      default: n.N.relativeUrl("attachments/view/" + e.data.id),
                    }));
                  })
                  .catch((e) => (f.Z.handleError(e), Promise.reject()))
              );
            });
          }
          abort() {}
        }
        function ie(e) {
          return e && e instanceof J.ZP;
        }
        class oe extends i.d {
          constructor(...e) {
            super(...e),
              te(this, "selectors", {
                container: ".editor-container",
                resizer: ".editor-resizer",
                toolbarSection: ".editor__toolbar__section",
              }),
              te(this, "classes", {
                disabled: "editor--disabled",
                focused: "editor--focused",
                active: "active",
                resizing: "editor--resizing",
                alignBase: "editor__toolbar__button__align--",
                headingBase: "editor__toolbar__button__heading--",
                highlightMenuBase: "editor-highlight-context-",
                codeBlock: "code-block",
                editorHasMore: "editor--has-more",
              }),
              te(this, "icons", {
                alignLeft: "far fa-align-left icon-editor-align-left fa-fw",
                alignRight: "far fa-align-right icon-editor-align-right fa-fw",
                alignCenter:
                  "far fa-align-center icon-editor-align-center fa-fw",
                alignJustify:
                  "far fa-align-justify icon-editor-align-justify fa-fw",
                heading1: "far fa-h1 icon-editor-heading-heading1 fa-fw",
                heading2: "far fa-h2 icon-editor-heading-heading2 fa-fw",
                heading3: "far fa-h3 icon-editor-heading-heading3 fa-fw",
                paragraph:
                  "far fa-paragraph icon-editor-heading-paragraph fa-fw",
                marker: "far fa-highlighter icon-editor-marker fa-fw",
                pen: "far fa-pen-alt icon-editor-pen fa-fw",
                eraser: "far fa-eraser icon-editor-eraser fa-fw",
              }),
              te(this, "codeLanguages", [
                {
                  label: "Plain text",
                  editorLanguage: "plain",
                  highlighterLanguage: "plain",
                },
                {
                  label: "Basic",
                  editorLanguage: "basic",
                  highlighterLanguage: "basic",
                },
                {
                  label: "C#",
                  editorLanguage: "csharp",
                  highlighterLanguage: "csharp",
                },
                { label: "C", editorLanguage: "c", highlighterLanguage: "c" },
                {
                  label: "C++",
                  editorLanguage: "cpp",
                  highlighterLanguage: "cpp",
                },
                {
                  label: "C-like",
                  editorLanguage: "clike",
                  highlighterLanguage: "clike",
                },
                {
                  label: "CSS",
                  editorLanguage: "css",
                  highlighterLanguage: "css",
                },
                {
                  label: "Dart",
                  editorLanguage: "dart",
                  highlighterLanguage: "dart",
                },
                {
                  label: "Gherkin",
                  editorLanguage: "gherkin",
                  highlighterLanguage: "gherkin",
                },
                {
                  label: "Go",
                  editorLanguage: "go",
                  highlighterLanguage: "go",
                },
                {
                  label: "HTML",
                  editorLanguage: "html",
                  highlighterLanguage: "html",
                },
                {
                  label: "Java",
                  editorLanguage: "java",
                  highlighterLanguage: "java",
                },
                {
                  label: "JavaScript",
                  editorLanguage: "javascript",
                  highlighterLanguage: "javascript",
                },
                {
                  label: "JSON",
                  editorLanguage: "json",
                  highlighterLanguage: "json",
                },
                {
                  label: "Kotlin",
                  editorLanguage: "kotlin",
                  highlighterLanguage: "kotlin",
                },
                {
                  label: "Markup",
                  editorLanguage: "markup",
                  highlighterLanguage: "markup",
                },
                {
                  label: "Objective-C",
                  editorLanguage: "objectivec",
                  highlighterLanguage: "objectivec",
                },
                {
                  label: "Pascal",
                  editorLanguage: "pascal",
                  highlighterLanguage: "pascal",
                },
                {
                  label: "Perl",
                  editorLanguage: "perl",
                  highlighterLanguage: "perl",
                },
                {
                  label: "PHP",
                  editorLanguage: "php",
                  highlighterLanguage: "php",
                },
                {
                  label: "Python",
                  editorLanguage: "python",
                  highlighterLanguage: "python",
                },
                { label: "R", editorLanguage: "r", highlighterLanguage: "r" },
                {
                  label: "Ruby",
                  editorLanguage: "ruby",
                  highlighterLanguage: "ruby",
                },
                {
                  label: "Rust",
                  editorLanguage: "rust",
                  highlighterLanguage: "rust",
                },
                {
                  label: "Shell",
                  editorLanguage: "shell",
                  highlighterLanguage: "shell",
                },
                {
                  label: "SQL",
                  editorLanguage: "sql",
                  highlighterLanguage: "sql",
                },
                {
                  label: "Swift",
                  editorLanguage: "swift",
                  highlighterLanguage: "swift",
                },
                {
                  label: "TypeScript",
                  editorLanguage: "typescript",
                  highlighterLanguage: "typescript",
                },
                {
                  label: "XML",
                  editorLanguage: "xml",
                  highlighterLanguage: "markup",
                },
                {
                  label: "YAML",
                  editorLanguage: "yaml",
                  highlighterLanguage: "yaml",
                },
              ]),
              te(
                this,
                "doAppErrorFilter",
                (e) =>
                  e.error &&
                  e.message &&
                  ie(e.error) &&
                  e.message.includes(
                    "Permission denied to access property Symbol.toStringTag"
                  )
              ),
              te(this, "doObserverResize", (e, t) => {
                this.refreshSize();
              }),
              te(this, "doEditorClipboardInput", (e, t) => {
                let s = t.dataTransfer,
                  i = s.getData("text/html");
                i &&
                  /content=Excel\.Sheet/gm.test(i) &&
                  (t.content = this.editor.data.htmlProcessor.toView(
                    s.getData("text/plain") || ""
                  ));
              }),
              te(this, "doAlignmentMenuClick", (e) => {
                e.target.hide(),
                  this.editor.editing.view.focus(),
                  this.editor.execute("alignment", { value: e.actionName });
              }),
              te(this, "doHeadingMenuClick", (e) => {
                e.target.hide(),
                  this.editor.editing.view.focus(),
                  "paragraph" == e.actionName
                    ? this.editor.execute(e.actionName)
                    : this.editor.execute("heading", { value: e.actionName });
              }),
              te(this, "doResizeGripMouseDown", (e) => {
                1 == e.which && (e.preventDefault(), this.resizeStart(e));
              }),
              te(this, "doResizeGripTouchStart", (e) => {
                this.resizeStart(e);
              }),
              te(this, "doResizeEnd", (e) => {
                e.preventDefault(),
                  this.resizing &&
                    ($("body").removeClass(this.classes.resizing),
                    this.$container.removeClass(this.classes.resizing),
                    this.$window.off("mouseup", this.doResizeEnd),
                    this.$window.off("touchend", this.doResizeEnd),
                    this.$window.off("touchcancel", this.doResizeEnd),
                    this.$window.off("mousemove", this.doResizeMove),
                    this.$window.off("touchmove", this.doResizeMove),
                    this.$window.off("contextmenu", this.doResizeContextMenu),
                    (this.resizing = !1));
              }),
              te(this, "doResizeContextMenu", (e) => {
                e.preventDefault();
              }),
              te(this, "doResizeMove", (e) => {
                if (this.resizing) {
                  let t = this.$container.position(),
                    s = a.Z.getEventClientPos(e).y - t.top + this.resizeOffsetY;
                  (s = Math.max(s, r.X.EditorMinHeight)),
                    (s = Math.min(s, r.X.EditorMaxHeight)),
                    this.$container.css({ height: `${s}px` }),
                    this.events.trigger("resize", { target: this, height: s });
                }
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.editorLoading = !1);
          }
          load() {
            f.Z.events.on("errorfilter", this.doAppErrorFilter),
              (this.projectId = this.$element.data("projectId")),
              (this.withImages = this.$element.data("images")),
              (this.morePopup = null),
              (this.$container = this.$element.closest(
                this.selectors.container
              )),
              (this.resizing = !1),
              (this.resizeOffsetY = 0),
              (this.$window = $(window)),
              (this.$resizer = $(this.selectors.resizer, this.$element)),
              this.$resizer.on("mousedown", this.doResizeGripMouseDown),
              this.$resizer.on("touchstart", this.doResizeGripTouchStart),
              (this.$toolbarSections = $(
                this.selectors.toolbarSection,
                this.element
              )),
              (this.resizeObserver = new ResizeObserver(
                _.throttle(this.doObserverResize, 50)
              )),
              this.resizeObserver.observe(this.element),
              this.refreshSize();
          }
          unload() {
            f.Z.events.off("errorfilter", this.doAppErrorFilter),
              this.resizeObserver.disconnect(),
              this.$resizer.off("mousedown", this.doResizeGripMouseDown),
              this.$resizer.off("touchstart", this.doResizeGripTouchStart),
              this.unloadEditor();
          }
          refreshSize() {
            if (this.morePopup) return;
            let e = this.$toolbarSections.get().reduce((e, t) => {
              let s = $(t);
              return e || s.position().top > 0;
            }, !1);
            this.$element.toggleClass(this.classes.editorHasMore, e);
          }
          loadEditor() {
            if (this.editorLoading) return;
            (this.editorLoading = !0), (this.$toolbar = $(this.toolbarTarget));
            let e = this.projectId,
              t = [],
              s = [
                y.Z,
                E.Z,
                N.Z,
                U.Z,
                F.Z,
                A.Z,
                P.Z,
                R.Z,
                M.Z,
                B.Z,
                D.Z,
                L.Z,
                Z.Z,
                j.Z,
                z.Z,
                V.Z,
              ];
            this.withImages &&
              (t.push(function (t) {
                t.plugins.get("FileRepository").createUploadAdapter = (t) =>
                  new se(t, e);
              }),
              s.push(O.Z, W.Z, G.Z, H.Z, q.Z, K.Z));
            let i = {
                extraPlugins: t,
                plugins: s,
                table: {
                  contentToolbar: [
                    "tableColumn",
                    "tableRow",
                    "mergeTableCells",
                  ],
                },
                link: { defaultProtocol: "https://" },
                codeBlock: {
                  languages: this.codeLanguages.map((e) => ({
                    language: e.editorLanguage,
                    label: e.label,
                    class:
                      `editor-${e.editorLanguage} language-${e.highlighterLanguage} ` +
                      this.classes.codeBlock,
                  })),
                },
                image: {
                  toolbar: [
                    "imageStyle:inline",
                    "imageStyle:alignBlockLeft",
                    "imageStyle:block",
                    "imageStyle:alignBlockRight",
                    "|",
                    "resizeImage:original",
                  ],
                  styles: {
                    options: [
                      "inline",
                      "alignBlockLeft",
                      "block",
                      "alignBlockRight",
                    ],
                  },
                },
                heading: {
                  options: [
                    { model: "paragraph" },
                    { model: "heading1", view: "h1" },
                    { model: "heading2", view: "h2" },
                    { model: "heading3", view: "h3" },
                  ],
                },
                highlight: {
                  options: [
                    {
                      model: "yellowMarker",
                      class: "marker-yellow",
                      title: "Yellow marker",
                      color: "var(--ck-highlight-marker-yellow)",
                      type: "marker",
                    },
                    {
                      model: "greenMarker",
                      class: "marker-green",
                      title: "Green marker",
                      color: "var(--ck-highlight-marker-green)",
                      type: "marker",
                    },
                    {
                      model: "pinkMarker",
                      class: "marker-pink",
                      title: "Pink marker",
                      color: "var(--ck-highlight-marker-pink)",
                      type: "marker",
                    },
                    {
                      model: "blueMarker",
                      class: "marker-blue",
                      title: "Blue marker",
                      color: "var(--ck-highlight-marker-blue)",
                      type: "marker",
                    },
                    {
                      model: "redPen",
                      class: "pen-red",
                      title: "Red pen",
                      color: "var(--ck-highlight-pen-red)",
                      type: "pen",
                    },
                    {
                      model: "greenPen",
                      class: "pen-green",
                      title: "Green pen",
                      color: "var(--ck-highlight-pen-green)",
                      type: "pen",
                    },
                  ],
                },
              },
              o = this.$element.data("placeholder");
            return (
              o && (i.placeholder = o),
              T.create(this.controlTarget, i)
                .then((e) => {
                  (this.editor = e),
                    e.keystrokes.set("Ctrl+Enter", (e, t) => {}, {
                      priority: "high",
                    }),
                    e.editing.view.document.on(
                      "clipboardInput",
                      this.doEditorClipboardInput
                    ),
                    this.bindEditor(),
                    this.setEnabled(
                      !this.$element.hasClass(this.classes.disabled)
                    );
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          unloadEditor() {
            this.editor &&
              (this.unbindEditor(),
              this.editor.destroy(),
              (this.editor = null));
          }
          bindStyleToolbarButton(e, t, s, i) {
            const o = this.editor.commands.get(t),
              n = $(e);
            if (
              (n.click(() => {
                this.editor.execute(t);
              }),
              s)
            ) {
              const e = () => {
                n.prop("disabled", !o.isEnabled);
              };
              o.on("change:isEnabled", e), e();
            }
            if (i) {
              const e = () => {
                n.toggleClass(this.classes.active, o.value);
              };
              o.on("change:value", e), e();
            }
          }
          bindCodeBlockToolbarButton(e, t) {
            const s = this.editor.commands.get("codeBlock"),
              i = $(e),
              n = $(t),
              r = (e) => {
                e.target.hide(),
                  this.editor.execute("codeBlock", {
                    language: e.actionValue,
                    forceValue: !0,
                  });
              };
            i.click(() => {
              this.editor.execute("codeBlock");
            }),
              n.click((e) => {
                const t = $(e.currentTarget);
                if (o.UI.popupVisible(t)) return;
                const i = [];
                this.codeLanguages.forEach((e) => {
                  i.push({
                    type: "action",
                    title: e.label,
                    callback: r,
                    enabled: s.isEnabled,
                    value: e.editorLanguage,
                    active: e.editorLanguage == s.value,
                  });
                }),
                  new l.x(i, {
                    additionalClasses: "popup--editor",
                    showPointer: !1,
                    margin: 2,
                    preventMousedown: !0,
                  }).show(t, d.Fz.BottomRight);
              });
            const a = () => {
              i.prop("disabled", !s.isEnabled),
                n.prop("disabled", !s.isEnabled);
            };
            s.on("change:isEnabled", a), a();
            const h = () => {
              i.toggleClass(this.classes.active, !!s.value);
            };
            s.on("change:value", h), h();
          }
          bindImageToolbarButton(e) {
            const t = this.editor.config.get("image.upload.types"),
              s = (0, X.kh)(t),
              i = t.map((e) => `image/${e}`).join(","),
              o = this.editor.commands.get("uploadImage"),
              n = $(e),
              r = $(
                `<input type="file" multiple tabindex="-1" accept="${i}"> `
              );
            r.on("change", (e) => {
              const t = r.get(0).files,
                i = Array.from(t).filter((e) => s.test(e.type));
              this.editor.execute("uploadImage", { file: i });
            }),
              n.click(() => {
                r.trigger("click");
              });
            const a = () => {
              n.prop("disabled", !o.isEnabled);
            };
            o.on("change:isEnabled", a), a();
            const l = () => {
              n.toggleClass(this.classes.active, !!o.value);
            };
            o.on("change:value", l), l();
          }
          bindLinkToolbarButton(e) {
            const t = this.editor.commands.get("link"),
              s = $(e);
            s.click(() => {
              void 0 === t.value
                ? this.editor.plugins.get("LinkUI")._showUI(!0)
                : this.editor.execute("unlink");
            });
            const i = () => {
              s.prop("disabled", !t.isEnabled);
            };
            t.on("change:isEnabled", i), i();
            const o = () => {
              s.toggleClass(this.classes.active, void 0 !== t.value);
            };
            t.on("change:value", o), o();
          }
          bindHorizontalLineToolbarButton(e) {
            const t = this.editor.commands.get("horizontalLine"),
              s = $(e);
            s.click(() => {
              this.editor.execute("horizontalLine");
            });
            const i = () => {
              s.prop("disabled", !t.isEnabled);
            };
            t.on("change:isEnabled", i), i();
          }
          bindInsertTableToolbarButton(e, t, s, i) {
            const n = this.editor.commands.get("insertTable"),
              r = $(e);
            r.click((e) => {
              const t = $(e.currentTarget);
              if (o.UI.popupVisible(t)) return;
              const s = new g();
              (s.onSuccess = (e) => {
                this.editor.execute("insertTable", {
                  rows: e.rows,
                  columns: e.columns,
                });
              }),
                s.show(t, d.Fz.BottomLeft);
            });
            const a = () => {
              r.prop("disabled", !n.isEnabled);
            };
            n.on("change:isEnabled", a), a();
          }
          bindAlignmentToolbarButton(e) {
            const t = this.editor.commands.get("alignment"),
              s = $(e);
            s.click((e) => {
              const s = $(e.currentTarget);
              if (o.UI.popupVisible(s)) return;
              const i = [];
              ["left", "right", "center", "justify"].forEach((e) => {
                i.push({
                  type: "action",
                  icon: this.icons[`align${_.startCase(e)}`],
                  name: e,
                  callback: this.doAlignmentMenuClick,
                  active: t.value == e,
                });
              }),
                new l.x(i, {
                  additionalClasses: "popup--editor",
                  showPointer: !1,
                  margin: 2,
                  preventMousedown: !0,
                }).show(s, d.Fz.BottomCenter);
            });
            const i = () => {
              s.prop("disabled", !t.isEnabled);
            };
            t.on("change:isEnabled", i), i();
            const n = () => {
              ["left", "right", "center", "justify"].forEach((e) => {
                s.removeClass(this.classes.alignBase + e);
              }),
                s.addClass(this.classes.alignBase + t.value);
            };
            t.on("change:value", n), n();
          }
          bindHeadingToolbarButton(e) {
            const t = this.editor.commands.get("paragraph"),
              s = this.editor.commands.get("heading"),
              i = $(e);
            i.click((e) => {
              const i = $(e.currentTarget);
              if (o.UI.popupVisible(i)) return;
              const n = [];
              this.editor.config.get("heading.options").forEach((e) => {
                const i = "paragraph" == e.model,
                  o = i ? t : s;
                n.push({
                  type: "action",
                  icon: this.icons[e.model],
                  title: a.Z.lang(`components.editor_${e.model}`),
                  name: e.model,
                  callback: this.doHeadingMenuClick,
                  enabled: o.isEnabled,
                  active: i ? o.value : o.value == e.model,
                });
              }),
                new l.x(n, {
                  additionalClasses: "popup--editor",
                  showPointer: !1,
                  margin: 2,
                  preventMousedown: !0,
                }).show(i, d.Fz.BottomLeft);
            });
            const n = () => {
              t.value &&
                (this.editor.config.get("heading.options").forEach((e) => {
                  i.removeClass(this.classes.headingBase + e.model);
                }),
                i.addClass(this.classes.headingBase + "paragraph"));
            };
            t.on("change:value", n), n();
            const r = () => {
              t.value ||
                (this.editor.config.get("heading.options").forEach((e) => {
                  i.removeClass(this.classes.headingBase + e.model);
                }),
                s.value
                  ? i.addClass(this.classes.headingBase + s.value)
                  : i.addClass(this.classes.headingBase + "paragraph"));
            };
            s.on("change:value", r), r();
            const h = () => {
              i.prop("disabled", this.editor.isReadOnly);
            };
            this.editor.on("change:isReadOnly", h), h();
          }
          bindEmojiToolbarButton(e) {
            const t = $(e);
            t.click((e) => {
              const t = $(e.currentTarget);
              if (o.UI.popupVisible(t)) return;
              const s = new c();
              (s.onSuccess = (e) => {
                this.insertText(e), this.editor.editing.view.focus();
              }),
                s.show(t, d.Fz.BottomCenter);
            });
            const s = () => {
              t.prop("disabled", this.editor.isReadOnly);
            };
            this.editor.on("change:isReadOnly", s), s();
          }
          bindHighlightToolbarButtons(e, t) {
            const s = this.editor.commands.get("highlight"),
              i = $(e),
              n = $(t);
            let r = { type: "marker", name: "yellowMarker" };
            const h = () => {
              if (
                (i.removeClass(this.classes.active),
                $("i", i).removeClass(),
                s.value)
              ) {
                let e = this.editor.config.get("highlight.options");
                for (let t of e)
                  if (t.model == s.value) {
                    $("i", i).addClass(this.icons[t.type]);
                    break;
                  }
                i.addClass(this.classes.active);
              } else $("i", i).addClass(this.icons[r.type]);
            };
            s.on("change:value", h), h();
            const c = (e) => {
              e.target.hide(),
                this.editor.editing.view.focus(),
                this.editor.execute("highlight", { value: e.actionValue }),
                e.actionValue &&
                  ((r = { name: e.actionValue, type: e.actionName }), h());
            };
            i.click((e) => {
              s.value
                ? this.editor.execute("highlight")
                : this.editor.execute("highlight", { value: r.name });
            }),
              n.click((e) => {
                const t = $(e.currentTarget);
                if (o.UI.popupVisible(t)) return;
                const i = [];
                let n = null;
                this.editor.config.get("highlight.options").forEach((e) => {
                  n && n != e.type && i.push({ type: "divider" }),
                    i.push({
                      type: "action",
                      icon: this.icons[e.type],
                      name: e.type,
                      callback: c,
                      enabled: s.isEnabled,
                      value: e.model,
                      classes: [
                        this.classes.highlightMenuBase + a.Z.dasherize(e.model),
                      ],
                      active: s.value == e.model,
                    }),
                    (n = e.type);
                }),
                  i.push({ type: "divider" }),
                  i.push({
                    type: "action",
                    icon: this.icons.eraser,
                    name: "removeHighlight",
                    callback: c,
                    enabled: s.isEnabled,
                  }),
                  new l.x(i, {
                    additionalClasses: "popup--editor",
                    showPointer: !1,
                    margin: 2,
                    preventMousedown: !0,
                  }).show(t, d.Fz.BottomRight);
              });
            const u = () => {
              i.prop("disabled", !s.isEnabled),
                n.prop("disabled", !s.isEnabled);
            };
            s.on("change:isEnabled", u), u();
            this.editor.on("change:isReadOnly", () => {});
          }
          bindEditor() {
            this.bindStyleToolbarButton(this.boldButtonTarget, "bold", !0, !0),
              this.bindStyleToolbarButton(
                this.italicButtonTarget,
                "italic",
                !0,
                !0
              ),
              this.bindStyleToolbarButton(
                this.underlineButtonTarget,
                "underline",
                !0,
                !0
              ),
              this.bindStyleToolbarButton(
                this.strikethroughButtonTarget,
                "strikethrough",
                !0,
                !0
              ),
              this.bindStyleToolbarButton(
                this.codeButtonTarget,
                "code",
                !0,
                !0
              ),
              this.bindStyleToolbarButton(
                this.bulletedListButtonTarget,
                "bulletedList",
                !0,
                !0
              ),
              this.bindStyleToolbarButton(
                this.numberedListButtonTarget,
                "numberedList",
                !0,
                !0
              ),
              this.bindCodeBlockToolbarButton(
                this.codeBlockButtonTarget,
                this.codeBlockSelectButtonTarget
              ),
              this.bindLinkToolbarButton(this.linkButtonTarget),
              this.bindInsertTableToolbarButton(this.tableButtonTarget),
              this.bindAlignmentToolbarButton(this.alignmentButtonTarget),
              this.bindHeadingToolbarButton(this.headingButtonTarget),
              this.bindEmojiToolbarButton(this.emojiButtonTarget),
              this.bindHorizontalLineToolbarButton(
                this.horizontalLineButtonTarget
              ),
              this.bindHighlightToolbarButtons(
                this.highlightButtonTarget,
                this.highlightSelectButtonTarget
              ),
              this.withImages &&
                this.bindImageToolbarButton(this.imageButtonTarget),
              this.editor.ui.focusTracker.on("change:isFocused", () => {
                this.$element.toggleClass(
                  this.classes.focused,
                  this.editor.ui.focusTracker.isFocused
                ),
                  this.editor.ui.focusTracker.isFocused
                    ? this.events.trigger("focus", { target: this })
                    : this.events.trigger("blur", { target: this });
              }),
              this.$toolbar.on("mousedown", (e) => {
                e.preventDefault(), this.focus();
              });
          }
          unbindToolbarButton(e) {
            $(e).off("click");
          }
          unbindEditor() {
            this.unbindToolbarButton(this.boldButtonTarget),
              this.unbindToolbarButton(this.italicButtonTarget),
              this.unbindToolbarButton(this.underlineButtonTarget),
              this.unbindToolbarButton(this.strikethroughButtonTarget),
              this.unbindToolbarButton(this.codeButtonTarget),
              this.unbindToolbarButton(this.bulletedListButtonTarget),
              this.unbindToolbarButton(this.numberedListButtonTarget),
              this.unbindToolbarButton(this.linkButtonTarget),
              this.unbindToolbarButton(this.codeBlockButtonTarget),
              this.unbindToolbarButton(this.codeBlockSelectButtonTarget),
              this.unbindToolbarButton(this.tableButtonTarget),
              this.unbindToolbarButton(this.alignmentButtonTarget),
              this.unbindToolbarButton(this.headingButtonTarget),
              this.unbindToolbarButton(this.emojiButtonTarget),
              this.unbindToolbarButton(this.highlightButtonTarget),
              this.unbindToolbarButton(this.highlightSelectButtonTarget),
              this.unbindToolbarButton(this.horizontalLineButtonTarget),
              this.withImages &&
                this.unbindToolbarButton(this.imageButtonTarget),
              this.$toolbar.off("mousedown");
          }
          setData(e) {
            this.editor.setData(e);
          }
          getData() {
            let e = this.editor.getData().trim();
            return (e = a.Z.trimHtml(e)), "" === e ? null : e;
          }
          focus() {
            this.editor && this.editor.editing.view.focus();
          }
          setEnabled(e) {
            (this.editor.isReadOnly = !e),
              this.$element.toggleClass(this.classes.disabled, !e);
          }
          resizeStart(e) {
            d.GI.hideAllPopups(),
              (this.resizing = !0),
              this.$window.on("mouseup", this.doResizeEnd),
              this.$window.on("touchend", this.doResizeEnd),
              this.$window.on("touchcancel", this.doResizeEnd),
              this.$window.on("mousemove", this.doResizeMove),
              this.$window.on("touchmove", this.doResizeMove),
              this.$window.on("contextmenu", this.doResizeContextMenu),
              $("body").addClass(this.classes.resizing),
              this.$container.addClass(this.classes.resizing);
            var t = a.Z.getEventClientPos(e);
            this.resizeOffsetY =
              this.$element.position().top + this.$element.outerHeight() - t.y;
          }
          setHeight(e) {
            let t = Math.max(e, r.X.EditorMinHeight);
            (t = Math.min(t, r.X.EditorMaxHeight)),
              this.$container.css({ height: `${t}px` });
          }
          insertText(e) {
            this.editor.model.change((t) => {
              let s = t.createText(e);
              this.editor.model.insertContent(
                s,
                this.editor.model.document.selection
              );
            });
          }
          doShowMore(e) {
            const t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = this.$toolbarSections.filter(
              (e, t) => $(t).position().top > 0
            );
            (this.morePopup = new m(s)),
              (this.morePopup.onHide = (e) => {
                s.insertBefore(this.toolbarMoreTarget),
                  (this.morePopup = null),
                  this.refreshSize();
              }),
              this.morePopup.show(t, d.Fz.TopRight);
          }
          insertImage(e) {
            this.editor.execute("insertImage", { source: [e] });
          }
        }
        te(oe, "targets", [
          "control",
          "boldButton",
          "italicButton",
          "underlineButton",
          "strikethroughButton",
          "codeButton",
          "undoButton",
          "redoButton",
          "bulletedListButton",
          "numberedListButton",
          "indentListButton",
          "outdentListButton",
          "alignmentButton",
          "toolbar",
          "headingButton",
          "tableButton",
          "emojiButton",
          "highlightButton",
          "highlightSelectButton",
          "linkButton",
          "codeBlockButton",
          "codeBlockSelectButton",
          "toolbarMore",
          "imageButton",
          "horizontalLineButton",
        ]);
      },
      12703: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(89432),
          o = s(43689);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.d {
          constructor(...e) {
            super(...e),
              n(this, "classes", { embedLoading: "embed--loading" }),
              n(this, "templates", {
                frame:
                  '<iframe sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox"\n            data-action="load->components--embed#doFrameLoad"\n            src="$(src)">\n            </iframe>',
              }),
              n(this, "doWindowMessage", (e) => {
                e.originalEvent.source == this.$iframe[0].contentWindow &&
                  e.originalEvent.data.type &&
                  "resize" === e.originalEvent.data.type &&
                  this.$frameContainer.css({
                    height: e.originalEvent.data.height + "px",
                  });
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$window = $(window)),
              this.$window.on("message", this.doWindowMessage),
              (this.$frameContainer = $(this.frameContainerTarget)),
              this.$frameContainer.append(
                o.Z.template(this.templates.frame, {
                  src: this.$element.data("src"),
                })
              ),
              (this.$iframe = this.$frameContainer.children().last());
          }
          disconnect() {
            this.$window.off("message", this.doWindowMessage);
          }
          doFrameLoad() {
            this.$element.removeClass(this.classes.embedLoading);
          }
        }
        n(r, "targets", ["frameContainer", "placeholder"]);
      },
      52476: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(89432),
          o = s(96622),
          n = s(15612),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const l = class extends i.d {
          constructor(...e) {
            super(...e),
              a(this, "selectors", {
                condition: ".filter__condition",
                conditionContent: ".filter__condition__content",
                titleCheckbox: ".filter__condition__title .checkbox",
                dropdown: ".dropdown",
                conditionDateRange: ".filter__condition__date__range",
                conditionDateFrom:
                  '.filter__condition__date__range [data-target="from"]',
                conditionDateTo:
                  '.filter__condition__date__range [data-target="to"]',
                conditionValueChecks: ".filter__condition__value__checks",
                conditionValueCheck: ".filter__condition__value__checks__check",
                conditionStringChecks: ".filter__condition__string__checks",
                conditionStringCheck:
                  ".filter__condition__string__checks__check",
              }),
              a(this, "classes", {
                conditionExpanded: "filter__condition--expanded",
                conditionEmpty: "filter__condition--empty",
              }),
              a(this, "filterTypesWithChecks", ["value", "string"]),
              a(this, "doValueAddCheckClick", (e) => {
                let t = $(e.currentTarget).closest(this.selectors.condition),
                  s = $(this.selectors.conditionValueChecks, t),
                  i = $(t.data("check"));
                s.append(i), o.UI.initialize(i), this.updateValueChecks(t);
              }),
              a(this, "doValueDeleteClick", (e) => {
                let t = $(e.currentTarget).closest(this.selectors.condition),
                  s = $(e.currentTarget).closest(
                    this.selectors.conditionValueCheck
                  );
                setTimeout(() => {
                  s.remove(), this.updateValueChecks(t);
                }, 1);
              }),
              a(this, "doValueTypeChange", (e) => {
                let t = e.target.$element.closest(
                    this.selectors.conditionValueCheck
                  ),
                  s = o.UI.getTarget("value", t),
                  i =
                    !!e.value &&
                    e.value != n.g.FiltersCheckNull &&
                    e.value != n.g.FiltersCheckNotNull;
                o.UI.toggleTextEnabled(s, i), i || o.UI.clearText(s);
              }),
              a(this, "doStringAddCheckClick", (e) => {
                let t = $(e.currentTarget).closest(this.selectors.condition),
                  s = $(this.selectors.conditionStringChecks, t),
                  i = $(t.data("check"));
                s.append(i), o.UI.initialize(i), this.updateStringChecks(t);
              }),
              a(this, "doStringDeleteClick", (e) => {
                let t = $(e.currentTarget).closest(this.selectors.condition),
                  s = $(e.currentTarget).closest(
                    this.selectors.conditionStringCheck
                  );
                setTimeout(() => {
                  s.remove(), this.updateStringChecks(t);
                }, 1);
              }),
              a(this, "doStringTypeChange", (e) => {
                let t = e.target.$element.closest(
                    this.selectors.conditionStringCheck
                  ),
                  s = o.UI.getTarget("value", t),
                  i =
                    !!e.value &&
                    e.value != n.g.FiltersCheckNull &&
                    e.value != n.g.FiltersCheckNotNull;
                o.UI.toggleTextEnabled(s, i), i || o.UI.clearText(s);
              }),
              a(this, "doConditionChange", (e) => {
                let t = e.closest(this.selectors.condition),
                  s = t.data("condition");
                s &&
                  (t.removeData("condition"),
                  t.removeAttr("data-condition"),
                  $(this.selectors.conditionContent, t).html(s)),
                  t.toggleClass(
                    this.classes.conditionExpanded,
                    o.UI.getCheckbox(e)
                  );
              }),
              a(this, "doDateDropdownChange", (e) => {
                let t = e.target.$element,
                  s = t.closest(this.selectors.condition),
                  i = o.UI.getDropdownIntOrNull(t) == n.g.FiltersDateCustom;
                $(this.selectors.conditionDateRange, s).toggle(i);
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.$conditions = $(this.selectors.condition, this.element)),
              (this.$titleCheckboxes = $(
                this.selectors.titleCheckbox,
                this.$conditions
              )),
              o.UI.onCheckboxChange(
                this.$titleCheckboxes,
                this.doConditionChange
              ),
              r.Z.requestChild(this.component, "dateType", {
                onAdded: (e) => {
                  let t = e.$element,
                    s = t.closest(this.selectors.condition),
                    i = o.UI.getDropdownIntOrNull(t) == n.g.FiltersDateCustom;
                  $(this.selectors.conditionDateRange, s).toggle(i);
                },
                events: { change: this.doDateDropdownChange },
              }),
              r.Z.requestChild(this.component, "valueType", {
                events: { change: this.doValueTypeChange },
              }),
              r.Z.requestChild(this.component, "stringType", {
                events: { change: this.doStringTypeChange },
              });
          }
          unload() {
            o.UI.offCheckboxChange(
              this.$titleCheckboxes,
              this.doConditionChange
            );
          }
          resetConditions() {
            this.iterateConditions((e) => {
              o.UI.setCheckbox(e.$titleCheckbox, !1),
                e.$condition.removeClass(this.classes.conditionExpanded);
            });
          }
          doSelectFolder(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.condition),
              i = this.getFolderCondition(s);
            o.UI.loading(t, () => {
              let e = this.events
                .trigger("selectfolders", {
                  target: this,
                  name: s.data("name"),
                  ids: i.values,
                })
                .flat();
              return Promise.all(e);
            });
          }
          setFolderFilterContent(e, t) {
            let s = this.$conditions.filter(`[data-name="${e}"]`);
            0 != s.length && o.UI.getTarget("folderList", s.first()).html(t);
          }
          updateValueChecks(e) {
            let t = $(this.selectors.conditionValueCheck, e);
            e.toggleClass(this.classes.conditionEmpty, 0 == t.length);
          }
          updateStringChecks(e) {
            let t = $(this.selectors.conditionStringCheck, e);
            e.toggleClass(this.classes.conditionEmpty, 0 == t.length);
          }
          iterateConditions(e) {
            this.$conditions.each((t, s) => {
              let i = $(s),
                o = $(this.selectors.titleCheckbox, i),
                n = i.data("type"),
                r = i.data("name");
              n &&
                r &&
                e({ $condition: i, $titleCheckbox: o, type: n, name: r });
            });
          }
          getConditions() {
            let e = {};
            return (
              this.iterateConditions((t) => {
                if (o.UI.getCheckbox(t.$titleCheckbox))
                  switch (t.type) {
                    case "select":
                      e[t.name] = this.getSelectCondition(t.$condition);
                      break;
                    case "list":
                      e[t.name] = this.getListCondition(t.$condition);
                      break;
                    case "sectionList":
                      e[t.name] = this.getSectionListCondition(t.$condition);
                      break;
                    case "groupList":
                      e[t.name] = this.getGroupListCondition(t.$condition);
                      break;
                    case "date":
                      e[t.name] = this.getDateCondition(t.$condition);
                      break;
                    case "value":
                      e[t.name] = this.getValueCondition(t.$condition);
                      break;
                    case "string":
                      e[t.name] = this.getStringCondition(t.$condition);
                      break;
                    case "text":
                      e[t.name] = this.getTextCondition(t.$condition);
                      break;
                    case "folder":
                      e[t.name] = this.getFolderCondition(t.$condition);
                  }
              }),
              e
            );
          }
          getLabels() {
            let e = {};
            return (
              this.iterateConditions((t) => {
                if (o.UI.getCheckbox(t.$titleCheckbox))
                  switch (t.type) {
                    case "select":
                      e[t.name] = this.getSelectLabels(t.$condition);
                      break;
                    case "list":
                      e[t.name] = this.getListLabels(t.$condition);
                      break;
                    case "groupList":
                      e[t.name] = this.getGroupListLabels(t.$condition);
                      break;
                    case "sectionList":
                      e[t.name] = this.getSectionListLabels(t.$condition);
                      break;
                    case "date":
                      e[t.name] = this.getDateLabels(t.$condition);
                      break;
                    case "value":
                      e[t.name] = this.getValueLabels(t.$condition);
                      break;
                    case "string":
                      e[t.name] = this.getStringLabels(t.$condition);
                      break;
                    case "text":
                      e[t.name] = this.getTextLabels(t.$condition);
                      break;
                    case "folder":
                      e[t.name] = this.getFolderLabels(t.$condition);
                  }
              }),
              e
            );
          }
          getSelectCondition(e) {
            let t = $(this.selectors.dropdown, e),
              s = parseInt(e.data("format"), 10);
            switch ((s || (s = n.g.FiltersFormatInt), s)) {
              case n.g.FiltersFormatInt:
                return { value: o.UI.getDropdownIntOrNull(t) };
              case n.g.FiltersFormatBool:
                return { value: "1" == o.UI.getDropdown(t) };
              case n.g.FiltersFormatString:
                return { value: o.UI.getDropdown(t) };
            }
          }
          getDateCondition(e) {
            let t = $(this.selectors.dropdown, e),
              s = { type: o.UI.getDropdownIntOrNull(t) };
            return (
              s.type == n.g.FiltersDateCustom &&
                ((s.from = o.UI.getText(
                  $(this.selectors.conditionDateFrom, e)
                )),
                (s.to = o.UI.getText($(this.selectors.conditionDateTo, e)))),
              s
            );
          }
          getListCondition(e) {
            let t = r.Z.findComponent(e, "list");
            if (!t) return { values: [] };
            let s = t.getSelectedIds(),
              i = parseInt(e.data("format"), 10);
            return (
              i || (i = n.g.FiltersFormatInt),
              i == n.g.FiltersFormatInt && (s = s.map((e) => parseInt(e, 10))),
              { values: s }
            );
          }
          getFolderCondition(e) {
            let t = r.Z.findComponent(e, "list");
            return t
              ? {
                  values: t
                    .getRows()
                    .toArray()
                    .map((e) => parseInt($(e).data("id"), 10)),
                }
              : { values: [] };
          }
          getValueCondition(e) {
            let t = parseInt(e.data("format"), 10);
            t || (t = n.g.FiltersFormatInt);
            let s = o.UI.getTarget("valueModeAnd", e),
              i = o.UI.getRadio(s) ? n.g.FiltersAll : n.g.FiltersAny,
              r = [];
            return (
              $(this.selectors.conditionValueCheck, e).each((e, s) => {
                let i = $(s),
                  a = o.UI.getTarget("type", i),
                  l = o.UI.getTarget("value", i),
                  d = o.UI.getDropdownIntOrNull(a),
                  h = !0;
                if (d) {
                  let e = 0;
                  if (d != n.g.FiltersCheckNull && d != n.g.FiltersCheckNotNull)
                    switch (t) {
                      case n.g.FiltersFormatFloat:
                        (e = o.UI.getTextFloatOrNullOrError(l)),
                          (h = null !== e && "NaN" !== e);
                        break;
                      case n.g.FiltersFormatInt:
                        (e = o.UI.getTextIntOrNullOrError(l)),
                          (h = null !== e && "NaN" !== e);
                        break;
                      default:
                        (e = o.UI.getText(l)), (h = l.length > 0);
                    }
                  h && r.push({ type: d, value: e });
                }
              }),
              { mode: i, checks: r }
            );
          }
          getStringCondition(e) {
            let t = o.UI.getTarget("stringModeAnd", e),
              s = o.UI.getRadio(t) ? n.g.FiltersAll : n.g.FiltersAny,
              i = [];
            return (
              $(this.selectors.conditionStringCheck, e).each((e, t) => {
                let s = $(t),
                  r = o.UI.getTarget("type", s),
                  a = o.UI.getTarget("value", s),
                  l = o.UI.getDropdownIntOrNull(r),
                  d = !0;
                if (l) {
                  let e = "-";
                  l != n.g.FiltersCheckNull &&
                    l != n.g.FiltersCheckNotNull &&
                    ((e = o.UI.getText(a)), (d = a.length > 0)),
                    d && i.push({ type: l, value: e });
                }
              }),
              { mode: s, checks: i }
            );
          }
          getTextCondition(e) {
            let t = o.UI.getTarget("value", e),
              s = o.UI.getText(t);
            s = s.replace(/\n/g, ",");
            let i = s
              .split(",")
              .map((e) => e.trim())
              .filter((e) => e.length > 0)
              .map((e) => ({ type: n.g.FiltersCheckEq, value: e }));
            return { mode: n.g.FiltersAny, checks: i };
          }
          getGroupListCondition(e) {
            return this.getMultiListCondition(e);
          }
          getSectionListCondition(e) {
            return this.getMultiListCondition(e);
          }
          getMultiListCondition(e) {
            let t = r.Z.findComponents(e, "list"),
              s = [];
            for (let e of t) s.push(...e.getSelectedIds());
            let i = parseInt(e.data("format"), 10);
            return (
              i || (i = n.g.FiltersFormatInt),
              i == n.g.FiltersFormatInt && (s = s.map((e) => parseInt(e, 10))),
              { values: s }
            );
          }
          getSelectLabels(e) {
            return [];
          }
          getDateLabels(e) {
            return [];
          }
          getValueLabels(e) {
            return [];
          }
          getStringLabels(e) {
            return [];
          }
          getTextLabels(e) {
            return [];
          }
          getFolderLabels(e) {
            return [];
          }
          getListLabels(e) {
            let t = r.Z.findComponent(e, "list");
            if (!t) return [];
            let s = [];
            return (
              t.getSelectedRows().each((e, t) => {
                let i = $(t);
                s.push(i.data("label").trim());
              }),
              s
            );
          }
          getGroupListLabels(e) {
            return this.getMultiListLabels(e);
          }
          getSectionListLabels(e) {
            return this.getMultiListLabels(e);
          }
          getMultiListLabels(e) {
            let t = r.Z.findComponents(e, "list"),
              s = [];
            for (let e of t)
              e.getSelectedRows().each((e, t) => {
                let i = $(t);
                s.push(i.data("label").trim());
              });
            return s;
          }
        };
      },
      80828: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(89432),
          o = s(96622),
          n = s(13814),
          r = s(11802),
          a = s(50609),
          l = s(47914),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends a.V {
          constructor() {
            super("repositories.folders.select_single_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: l.X.BodyMinWidth,
            }),
              h(this, "doFolderActivatedChange", (e) => {
                let t = this.components.folders.getActivatedNode();
                o.UI.toggleButtonEnabled(this.$submitButton, t.length > 0);
              });
          }
          load() {
            d.Z.requestChild(this.component, "folders", {
              onAdded: this.doFolderActivatedChange,
              events: { activatedchange: this.doFolderActivatedChange },
            });
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              let e = { id: null, name: null };
              if (this.components.folders) {
                let t = this.components.folders.getActivatedNode();
                if (t.length > 0) {
                  let s = t.first();
                  e = { id: s.data("id"), name: s.data("name") };
                }
              }
              return this.triggerSuccess(e);
            });
          }
        }
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        h(c, "forms", [{ name: "folder", fields: ["folders"] }]),
          h(c, "targets", ["submitButton"]),
          h(c, "actions", ["doSubmit"]);
        class g extends i.d {
          constructor(...e) {
            super(...e),
              u(this, "selectors", {
                folderInputDisabled: ".folder-input--disabled",
              }),
              u(this, "classes", {
                folderInputDisabled: "folder-input--disabled",
                folderInputHasSelection: "folder-input--has-selection",
              }),
              u(this, "doFolderInputClick", (e) => {
                this.getEnabled() && this.selectFolder();
              }),
              u(this, "doFolderInputKeyDown", (e) => {
                this.getEnabled() &&
                  e.which == r.N.Space &&
                  (this.selectFolder(),
                  e.preventDefault(),
                  e.stopPropagation());
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            this.$element.on("click", this.doFolderInputClick),
              this.$element.on("keydown", this.doFolderInputKeyDown),
              (this.projectId = this.$element.data("projectId"));
          }
          unload() {
            this.$element.off("click", this.doFolderInputClick),
              this.$element.off("keydown", this.doFolderInputKeyDown);
          }
          clear() {
            this.setFolder(null);
          }
          getFolderId() {
            let e = this.$element.attr("data-folder-id");
            if (!e) return null;
            let t = parseInt(e, 10);
            return Number.isNaN(t) ? null : t;
          }
          setFolder(e, t = "") {
            this.$element.attr("data-folder-id", e),
              $(this.folderNameTarget).text(t),
              this.$element.toggleClass(
                this.classes.folderInputHasSelection,
                null !== e
              ),
              this.events.trigger("change", { target: this, id: e, name: t });
          }
          setProjectId(e) {
            this.projectId = e;
          }
          selectFolder() {
            o.UI.loading(this.$element, () => {
              let e = { selected: this.getFolderId() };
              return n.N.post(
                "repositories/render_select_folder/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new c();
                  (t.onSuccess = (e) => {
                    this.setFolder(e.id, e.name);
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  d.Z.handleError(e);
                });
            });
          }
          getEnabled() {
            return !this.$element.is(this.selectors.folderInputDisabled);
          }
          setEnabled(e) {
            e
              ? (this.$element.removeClass(this.classes.folderInputDisabled),
                this.$element.attr({ tabindex: 0 }))
              : (this.$element.addClass(this.classes.folderInputDisabled),
                this.$element.attr({ tabindex: -1 }));
          }
          doResetFolder(e) {
            this.getEnabled() && (e.stopPropagation(), this.clear());
          }
        }
        u(g, "targets", ["folderName"]);
      },
      12145: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(89432),
          o = s(5270);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const r = class extends i.d {
          constructor(...e) {
            super(...e),
              n(this, "doPaginationPreviousPage", (e) => {
                if (this.events.has("statechange")) {
                  let e = this.getState();
                  return (
                    e.paginationCurrent--,
                    this.triggerStateChange(e, "previouspage")
                  );
                }
              }),
              n(this, "doPaginationNextPage", (e) => {
                if (this.events.has("statechange")) {
                  let e = this.getState();
                  return (
                    e.paginationCurrent++,
                    this.triggerStateChange(e, "nextpage")
                  );
                }
              }),
              n(this, "doPaginationSelectPage", (e) => {
                if (this.events.has("statechange")) {
                  let t = this.getState();
                  (t.paginationCurrent = e.page),
                    this.triggerStateChange(t, "paginationmenu");
                }
              }),
              n(this, "doPaginationSelectRows", (e) => {
                if (this.events.has("statechange")) {
                  let t = this.getState();
                  (t.paginationRows = e.rows),
                    (t.paginationCurrent = 1),
                    this.triggerStateChange(t, "paginationmenu");
                }
              }),
              n(this, "doPaginationLastPage", (e) => {
                if (
                  (this.events.trigger("lastpage", { target: this }),
                  this.events.has("statechange"))
                ) {
                  let e = this.getState();
                  (e.paginationCurrent = this.paginationTotal),
                    this.triggerStateChange(e, "paginationmenu");
                }
              }),
              n(this, "doPaginationFirstPage", (e) => {
                if (
                  (this.events.trigger("firstpage", { target: this }),
                  this.events.has("statechange"))
                ) {
                  let e = this.getState();
                  (e.paginationCurrent = 1),
                    this.triggerStateChange(e, "paginationmenu");
                }
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.hasPagination = this.$element.data("pagination")),
              (this.paginationCurrent =
                this.$element.data("pagination-current")),
              (this.paginationTotal = this.$element.data("pagination-total")),
              (this.paginationRows = this.$element.data("pagination-rows")),
              o.Z.requestChild(this.component, "pagination", {
                events: {
                  previouspage: this.doPaginationPreviousPage,
                  nextpage: this.doPaginationNextPage,
                  selectpage: this.doPaginationSelectPage,
                  selectrows: this.doPaginationSelectRows,
                  lastpage: this.doPaginationLastPage,
                  firstpage: this.doPaginationFirstPage,
                },
              });
          }
          unload() {}
          getState() {
            let e = {};
            return (
              this.paginationCurrent &&
                (e.paginationCurrent = this.paginationCurrent),
              this.paginationRows && (e.paginationRows = this.paginationRows),
              e
            );
          }
          triggerStateChange(e, t, s) {
            return Promise.all(
              this.events.trigger("statechange", {
                target: this,
                state: e,
                loading: t,
                location: s,
              })
            );
          }
          setLoading(e, t) {
            switch (e) {
              case "nextpage":
                this.components.pagination.setLoading("nextpage", t);
                break;
              case "previouspage":
                this.components.pagination.setLoading("previouspage", t);
                break;
              case "paginationmenu":
                this.components.pagination.setLoading("menu", t);
            }
          }
          loading(e, t, s) {
            return (
              this.setLoading(e, !0, t),
              (s() || Promise.resolve()).then(() => {
                this.setLoading(e, !1, t);
              })
            );
          }
        };
      },
      70981: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => c });
        var i,
          o,
          n,
          r = s(89432),
          a = s(69555),
          l = s(96622),
          d = s(13814),
          h = s(16087);
        class c extends r.d {
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            this.selection = this.$element.data("selection") || [];
          }
          doShowMenu() {
            const e = $(this.menuLinkTarget);
            if (l.UI.popupVisible(e)) return;
            const t = [];
            for (let e of this.selection)
              t.push({
                type: "link",
                title: e.title,
                url: d.N.url(e.link),
                active: e.active,
              });
            new h.x(t).show(e, a.Fz.BottomRight);
          }
        }
        (n = ["menuLink"]),
          (o = "targets") in (i = c)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      66586: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(89432),
          o = s(96622),
          n = s(43689),
          r = s(15612),
          a = s(69555),
          l = s(44286),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends a.GI {
          constructor() {
            super("common.icon_popup"),
              h(this, "selectors", {
                item: "li",
                searchInput: ".search-bar input",
              }),
              h(this, "doItemClick", (e) => {
                let t = $(e.currentTarget).data("icon");
                this.triggerSuccess(t);
              }),
              h(this, "doCancelSearch", (e) => {
                this.$items.show();
              }),
              h(this, "doSearch", (e) => {
                this.$items.each((t, s) => {
                  let i = $(s),
                    o = i.data("icon").toLowerCase(),
                    n = e.term.trim().toLowerCase();
                  i.toggle(o.includes(n));
                });
              });
          }
          load() {
            d.Z.requestChild(this.component, "searchBar", {
              events: {
                search: this.doSearch,
                cancelsearch: this.doCancelSearch,
              },
            }),
              (this.$items = $(this.selectors.item, this.$popup)),
              this.$items.on("click", this.doItemClick);
          }
          unload() {
            this.$items.off("click", this.doItemClick);
          }
          loaded() {
            $(this.selectors.searchInput, this.$popup).focus();
          }
          doClear() {
            this.triggerSuccess();
          }
        }
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        h(c, "actions", ["doClear"]);
        class g extends i.d {
          constructor(...e) {
            super(...e),
              u(this, "classes", { hidden: "default-hidden" }),
              u(this, "selectors", { iconColor: ".icon-input__color" }),
              u(this, "templates", { icon: "far fa-fw fa-$(name)" });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$input = $(this.inputTarget)),
              (this.hasColorSelection =
                this.$element.data("color-selection") || !1),
              (this.$icon = $(this.iconTarget)),
              (this.$iconButton = $(this.iconButtonTarget)),
              this.hasColorSelection &&
                ((this.$color = $(this.colorTarget)),
                this.loadColor(this.getColor())),
              this.loadIcon(this.getIcon());
          }
          loadIcon(e) {
            e
              ? (this.$icon.attr({
                  class: n.Z.template(this.templates.icon, { name: e }),
                }),
                this.hasColorSelection &&
                  (this.$color.show(),
                  this.$color.removeClass(this.classes.hidden)))
              : (this.$icon.attr({ class: "" }),
                this.hasColorSelection && this.$color.hide());
          }
          getIcon() {
            return this.$element.attr("data-icon");
          }
          setIcon(e) {
            this.$element.attr("data-icon", e), this.loadIcon(e);
          }
          doSelectColor(e) {
            let t = $(e.currentTarget);
            if ((t.blur(), o.UI.popupVisible(t))) return;
            const s = new l.L();
            (s.onSuccess = (e) => {
              this.setColor(e);
            }),
              s.show(t, a.Fz.BottomRight);
          }
          setColor(e) {
            this.$element.attr("data-color", e), this.loadColor(e);
          }
          getColor() {
            return this.getIcon()
              ? this.$element.attr("data-color").toString().replace(/#/g, "")
              : null;
          }
          loadColor(e) {
            let t = r.g.ColorIconDefault;
            e && t.match(/^[0-9A-F]{6}$/i) && (t = e.trim()),
              this.$color.css({ background: `#${t}` }),
              this.$icon.css({ color: `#${t}` });
          }
          doSelectIcon(e) {
            if ($(e.target).closest(this.selectors.iconColor).length > 0)
              return;
            if (o.UI.popupVisible(this.$iconButton)) return;
            const t = new c();
            (t.onSuccess = (e) => {
              this.setIcon(e);
            }),
              t.show(this.$iconButton, a.Fz.BottomRight);
          }
          doFocus(e) {
            e.preventDefault(), this.$input.focus();
          }
        }
        u(g, "targets", ["color", "icon", "input", "iconButton"]);
      },
      39875: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(89432),
          o = s(13814);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const r = class extends i.d {
          constructor(...e) {
            super(...e),
              n(this, "selectors", {
                statusBlock: ".inline-block-chart__blocks__block--status",
              }),
              n(this, "classes", {
                hoveringStatusBlock:
                  "inline-block-chart--hovering-status-block",
              }),
              n(this, "doStatusBlockMouseEnter", (e) => {
                this.statusBlockLeaveTimer &&
                  (clearTimeout(this.statusBlockLeaveTimer),
                  (this.statusBlockLeaveTimer = null)),
                  this.$element.addClass(this.classes.hoveringStatusBlock);
              }),
              n(this, "doStatusBlockMouseLeave", (e) => {
                this.statusBlockLeaveTimer &&
                  clearTimeout(this.statusBlockLeaveTimer),
                  (this.statusBlockLeaveTimer = setTimeout(() => {
                    this.$element.removeClass(this.classes.hoveringStatusBlock),
                      (this.statusBlockLeaveTimer = null);
                  }, 100));
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.statusBlockLeaveTimer = null),
              (this.$statusBlocks = $(
                this.selectors.statusBlock,
                this.$element
              )),
              this.$statusBlocks.on("mouseenter", this.doStatusBlockMouseEnter),
              this.$statusBlocks.on("mouseleave", this.doStatusBlockMouseLeave);
          }
          unload() {
            this.$statusBlocks.off("mouseenter", this.doStatusBlockMouseEnter),
              this.$statusBlocks.off(
                "mouseleave",
                this.doStatusBlockMouseLeave
              );
          }
          doBlockLinkClick(e) {
            o.N.visit($(e.currentTarget).data("link"));
          }
        };
      },
      96742: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(89432),
          o = s(11802),
          n = s(13814);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a {
          static get Inline() {
            return 1;
          }
          static get Link() {
            return 2;
          }
          static get Dynamic() {
            return 3;
          }
        }
        const l = class extends i.d {
          constructor(...e) {
            super(...e),
              r(this, "selectors", {
                selectionLinks: ".inline-tabs__selection ul li a",
                tabs: ".inline-tabs__tab",
              }),
              r(this, "classes", {
                selectionActive: "inline-tabs__selection--active",
                tabActive: "inline-tabs__tab--active",
                loading: "loading",
              }),
              r(this, "doSelect", (e) => {
                e.preventDefault(), this.select(e.currentTarget);
              }),
              r(this, "doKeyDown", (e) => {
                let t;
                switch (e.which) {
                  case o.N.Enter:
                  case o.N.Space:
                    e.preventDefault(), this.select(e.currentTarget);
                    break;
                  case o.N.LeftArrow:
                    if (
                      (e.preventDefault(),
                      (t = this.getFocusedSelector()),
                      null === t)
                    )
                      return;
                    t > 0
                      ? this.focusSelector(t - 1)
                      : this.focusSelector(this.getTabCount() - 1);
                    break;
                  case o.N.RightArrow:
                    if (
                      (e.preventDefault(),
                      (t = this.getFocusedSelector()),
                      null === t)
                    )
                      return;
                    t < this.getTabCount() - 1
                      ? this.focusSelector(t + 1)
                      : this.focusSelector(0);
                }
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.$selectors = $(this.selectors.selectionLinks, this.element)),
              this.$selectors.on("click", this.doSelect),
              this.$selectors.on("keydown", this.doKeyDown),
              (this.$tabs = $(this.selectors.tabs, this.element)),
              (this.autoLoading = this.$element.data("loading"));
          }
          unload() {
            this.$selectors.off("click", this.doSelect),
              this.$selectors.off("keydown", this.doKeyDown);
          }
          select(e) {
            this.$selectors.each((t, s) => {
              if (s == e) return this.showTab(t), !1;
            });
          }
          focusSelector(e) {
            this.$selectors.eq(e).focus();
          }
          getTabCount() {
            return this.$selectors.length;
          }
          getFocusedSelector() {
            var e = null;
            return (
              this.$selectors.each((t, s) => {
                if ($(s).is(":focus")) return (e = t), !1;
              }),
              e
            );
          }
          showTab(e) {
            let t,
              s = a.Inline;
            switch (
              (this.$selectors.each((i, o) => {
                if (i == e) {
                  let e = $(o).data("link");
                  return (
                    e && ((s = a.Link), (t = e)),
                    $(o).data("dynamic") && (s = a.Dynamic),
                    !1
                  );
                }
              }),
              s)
            ) {
              case a.Inline:
                this.highlightTab(e);
                break;
              case a.Link:
                this.autoLoading && this.setLoading(!0), n.N.visit(t);
                break;
              case a.Dynamic:
                this.autoLoading && this.setLoading(!0);
            }
            this.events.trigger("tabchange", {
              target: this,
              index: e,
              isLink: s == a.Link,
              isInline: s == a.Inline,
              isDynamic: s == a.Dynamic,
            });
          }
          highlightTab(e) {
            this.$selectors.each((t, s) => {
              $(s).toggleClass(this.classes.selectionActive, e == t);
            }),
              this.$tabs.each((t, s) => {
                $(s).toggleClass(this.classes.tabActive, e == t);
              });
          }
          getCurrentTab() {
            var e = null;
            return (
              this.$selectors.each((t, s) => {
                if ($(s).hasClass(this.classes.selectionActive))
                  return (e = t), !1;
              }),
              e
            );
          }
          setLoading(e) {
            this.$element.toggleClass(this.classes.loading, e);
          }
        };
      },
      42141: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => v });
        var i = s(89432),
          o = s(96622),
          n = s(69555),
          r = s(15612),
          a = s(13814),
          l = s(7042),
          d = s(43689),
          h = s(61470),
          c = s(24406),
          u = s(67811);
        class g {
          constructor(e, t, s, i, o) {
            (this.projectId = e),
              (this.target = t),
              (this.externalProject = s),
              (this.interopOrigin = d.Z.originFromUrl(i));
          }
          start() {
            return (() => {
              let e = {
                targetId: this.target.id,
                externalProjectId: this.externalProject.external_id,
                externalProjectKey: this.externalProject.external_key,
              };
              return a.N.post(
                "issues/prepare_push/" + this.projectId,
                a.N.toNetworkCase(e)
              ).then((e) => e.data);
            })()
              .then((e) => {
                if (e)
                  return new Promise((t, s) => {
                    let i = new c.VH(
                      r.g.AtlassianLoginPrefix + encodeURIComponent(e.url),
                      {
                        modal: !0,
                        messages: !0,
                        messagesAllowAllWindows: !0,
                        mesasagesOrigin: this.interopOrigin,
                      }
                    );
                    i.events.on("message", (e) => {
                      e.data.messageType == r.g.MessageJiraPushReady
                        ? e.target.messenger.post(
                            e.originalEvent.source,
                            e.originalEvent.origin,
                            {
                              messageType: r.g.MessageJiraPushAdd,
                              issue: {
                                projectId: this.externalProject.external_id,
                              },
                            }
                          )
                        : e.data.messageType == r.g.MessageJiraPushDone &&
                          (t(e.data.issues.map((e) => e.key)), i.close());
                    }),
                      i
                        .openAsync(900, 700)
                        .then(() => {
                          t();
                        })
                        .catch((e) => {
                          s(e);
                        });
                  });
              })
              .catch((e) => {
                if (!(e instanceof c.vq)) throw e;
                new u.s().show();
              });
          }
        }
        class p {
          constructor(e, t, s, i) {
            (this.projectId = e),
              (this.target = t),
              (this.externalProject = s),
              (this.context = i);
          }
          start() {
            let e = new Date(),
              t = () => {
                let e = {
                  targetId: this.target.id,
                  externalProjectId: this.externalProject.external_id,
                  externalProjectKey: this.externalProject.external_key,
                };
                return a.N.post(
                  "issues/prepare_push/" + this.projectId,
                  a.N.toNetworkCase(e)
                ).then((e) => e.data);
              },
              s = () => {
                let t = Math.ceil((new Date() - e) / 1e3),
                  s = {
                    targetId: this.target.id,
                    externalProjectId: this.externalProject.external_id,
                    externalProjectKey: this.externalProject.external_key,
                    created_ago: t,
                  };
                return a.N.post(
                  "issues/finalize_push/" + this.projectId,
                  a.N.toNetworkCase(s)
                ).then((e) => e.data);
              },
              i = () => {
                let e = { targetId: this.target.id };
                return a.N.post(
                  "issues/create_target_oauth_intent",
                  a.N.toNetworkCase(e)
                ).then((e) => e.data);
              };
            return t()
              .catch((e) => {
                if (h.f.isOauthRequiredError(e))
                  return i().then((e) =>
                    new h.f(e.url).start().then((e) => {
                      if (e.isSuccess) return t();
                      if (e.error) throw new h.B(e.error);
                    })
                  );
                throw e;
              })
              .then((e) => {
                if (e) {
                  let t = e.url;
                  return (
                    this.context.sourceUrl &&
                      (t = d.Z.appendUrlParameter(
                        t,
                        "body",
                        d.Z.lang("github.reported_from", {
                          url: this.context.sourceUrl,
                        })
                      )),
                    new c.VH(t, { modal: !0 })
                      .openAsync(900, 700)
                      .then(() => !0)
                  );
                }
              })
              .then((e) => {
                if (e)
                  return s().catch((e) => {
                    if (h.f.isOauthRequiredError(e))
                      return i().then((e) =>
                        new h.f(e.url).start().then((e) => {
                          if (e.isSuccess) return s();
                          if (e.error) throw new h.B(e.error);
                        })
                      );
                    throw e;
                  });
              })
              .catch((e) => {
                if (!(e instanceof c.vq)) throw e;
                new u.s().show();
              });
          }
        }
        class m {
          constructor(e, t, s, i) {
            (this.projectId = e),
              (this.target = t),
              (this.externalProject = s),
              (this.context = i);
          }
          start() {
            let e = new Date(),
              t = () => {
                let e = {
                  targetId: this.target.id,
                  externalProjectId: this.externalProject.external_id,
                  externalProjectKey: this.externalProject.external_key,
                };
                return a.N.post(
                  "issues/prepare_push/" + this.projectId,
                  a.N.toNetworkCase(e)
                ).then((e) => e.data);
              },
              s = () => {
                let t = Math.ceil((new Date() - e) / 1e3),
                  s = {
                    targetId: this.target.id,
                    externalProjectId: this.externalProject.external_id,
                    externalProjectKey: this.externalProject.external_key,
                    created_ago: t,
                  };
                return a.N.post(
                  "issues/finalize_push/" + this.projectId,
                  a.N.toNetworkCase(s)
                ).then((e) => e.data);
              },
              i = () => {
                let e = { targetId: this.target.id };
                return a.N.post(
                  "issues/create_target_oauth_intent",
                  a.N.toNetworkCase(e)
                ).then((e) => e.data);
              };
            return t()
              .catch((e) => {
                if (h.f.isOauthRequiredError(e))
                  return i().then((e) =>
                    new h.f(e.url).start().then((e) => {
                      if (e.isSuccess) return t();
                      if (e.error) throw new h.B(e.error);
                    })
                  );
                throw e;
              })
              .then((e) => {
                if (e) {
                  let t = e.url;
                  return (
                    this.context.sourceUrl &&
                      (t = d.Z.appendUrlParameter(
                        t,
                        "issue[description]",
                        d.Z.lang("gitlab.reported_from", {
                          url: this.context.sourceUrl,
                        })
                      )),
                    new c.VH(t, { modal: !0 })
                      .openAsync(900, 700)
                      .then(() => !0)
                  );
                }
              })
              .then((e) => {
                if (e)
                  return s().catch((e) => {
                    if (h.f.isOauthRequiredError(e))
                      return i().then((e) =>
                        new h.f(e.url).start().then((e) => {
                          if (e.isSuccess) return s();
                          if (e.error) throw new h.B(e.error);
                        })
                      );
                    throw e;
                  });
              })
              .catch((e) => {
                if (!(e instanceof c.vq)) throw e;
                new u.s().show();
              });
          }
        }
        class f {
          constructor(e) {
            this.target = e;
          }
          start() {
            if (this.target.new_url)
              return new c.VH(this.target.new_url)
                .openAsync(1150, 900)
                .catch((e) => {
                  if (!(e instanceof c.vq)) throw e;
                  new u.s().show();
                });
          }
        }
        var C = s(5270);
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class I extends n.GI {
          constructor(e, t) {
            super("issues.add_popup", {
              onSubmitForm: () => this.doSubmit(),
              extraHeight: 50,
            }),
              b(this, "classes", { hidden: "default-hidden" }),
              b(this, "doExternalProjectIdActionClick", (e) => {
                o.UI.loading(this.$externalProjectId, () => {
                  let e = o.UI.getDropdownIntOrNull(this.$externalProjectId);
                  return this.refreshSelectProjectControl(!0).then(() => {
                    o.UI.setDropdown(this.$externalProjectId, e);
                  });
                });
              }),
              b(this, "doTargetIdChange", (e) => {
                let t = this.getTarget(
                  o.UI.getDropdownIntOrNull(this.$targetId)
                );
                o.UI.toggleIconActionEnabled(
                  this.$addIssuesIcon,
                  t && (t.can_push || t.can_add)
                ),
                  o.UI.loading(this.$targetId, () =>
                    this.refreshSelectProjectControl()
                  );
              }),
              b(this, "doExternalProjectIdChange", (e) => {
                this.updateExternalProjectDescription(e.target);
              }),
              b(this, "doExternalProjectIdAdded", (e) => {
                this.updateExternalProjectDescription(e);
              }),
              b(this, "renderSelectProjectControl", (e = {}) => {
                let t = { targetId: e.targetId };
                return (
                  e.forceRefresh && (t.forceRefresh = !0),
                  e.canRestore && (t.canRestore = !0),
                  a.N.post(
                    "issues/render_select_project_control/" + this.projectId,
                    a.N.toNetworkCase(t)
                  )
                );
              }),
              b(this, "afterRenderSelectProjectControl", () => {
                this.rebindAll();
              }),
              (this.projectId = e),
              (this.sourceUrl = t);
          }
          load() {
            if (
              ((this.issueTargets = this.params.targets),
              C.Z.requestChild(this.component, "targetId", {
                events: { change: this.doTargetIdChange },
              }),
              C.Z.requestChild(this.component, "externalProjectId", {
                onAdded: this.doExternalProjectIdAdded,
                events: {
                  actionclick: this.doExternalProjectIdActionClick,
                  change: this.doExternalProjectIdChange,
                },
              }),
              this.fragments.register(
                "selectProjectControl",
                this.renderSelectProjectControl,
                { completedCallback: this.afterRenderSelectProjectControl }
              ),
              this.params.selectedTargetId)
            ) {
              let e = this.getTarget(this.params.selectedTargetId);
              if (
                (e &&
                  (e.can_push || e.can_add) &&
                  o.UI.toggleIconActionEnabled(this.$addIssuesIcon, !0),
                e && e.can_push)
              )
                return this.refreshFragments([
                  "selectProjectControl",
                  { targetId: this.params.selectedTargetId, canRestore: !0 },
                ]);
            }
          }
          unload() {}
          updateExternalProjectDescription(e) {
            this.$externalProjectDescriptionText.empty(),
              this.$externalProjectDescription.addClass(this.classes.hidden);
            let t = e.getValue();
            if (!t) return;
            let s = e.getItemParams(t);
            if (!s) return;
            let i = s.label;
            i &&
              (this.$externalProjectDescriptionText.text(i),
              this.$externalProjectDescription.toggleClass(
                this.classes.hidden,
                i.length <= 36
              ));
          }
          getTarget(e) {
            for (let t of this.issueTargets) if (t.id == e) return t;
            return null;
          }
          getExternalProject(e) {
            if (!this.components.externalProjectId) return null;
            for (let t of this.components.externalProjectId.getParams()
              .externalProjects)
              if (t.external_id == e) return t;
            return null;
          }
          refreshSelectProjectControl(e = !1) {
            let t = this.getTarget(o.UI.getDropdownIntOrNull(this.$targetId));
            if (t) {
              if (t.can_push)
                return this.refreshFragments([
                  "selectProjectControl",
                  { targetId: t.id, forceRefresh: e },
                ]);
              this.emptyFragments("selectProjectControl");
            } else this.emptyFragments("selectProjectControl");
          }
          pushTargetIssues(e) {
            let t,
              s = { sourceUrl: this.sourceUrl };
            switch (e.type) {
              case r.g.IssueTargetsGitHub:
                if (this.components.externalProjectId) {
                  let i = this.getExternalProject(
                    o.UI.getDropdownIntOrNull(this.$externalProjectId)
                  );
                  i
                    ? (t = new p(this.projectId, e, i, s))
                    : l.l.highlightFieldError(
                        this.formViews[0],
                        "externalProjectId"
                      );
                }
                break;
              case r.g.IssueTargetsGitLab:
                if (this.components.externalProjectId) {
                  let i = this.getExternalProject(
                    o.UI.getDropdownIntOrNull(this.$externalProjectId)
                  );
                  i
                    ? (t = new m(this.projectId, e, i, s))
                    : l.l.highlightFieldError(
                        this.formViews[0],
                        "externalProjectId"
                      );
                }
                break;
              case r.g.IssueTargetsJira:
                if (this.components.externalProjectId) {
                  let i = this.getExternalProject(
                    o.UI.getDropdownIntOrNull(this.$externalProjectId)
                  );
                  i
                    ? (t = new g(
                        this.projectId,
                        e,
                        i,
                        this.params.interopUrl,
                        s
                      ))
                    : l.l.highlightFieldError(
                        this.formViews[0],
                        "externalProjectId"
                      );
                }
            }
            t &&
              o.UI.loading(
                this.$addIssuesIcon,
                () => (
                  (this.settings.ignoreWindowResize = !0),
                  t
                    .start()
                    .then((e) => {
                      if (e && e.length > 0) {
                        let t = [...this.getIssueIds(), ...e];
                        (t = _.uniqWith(
                          t,
                          (e, t) => e.toLowerCase() == t.toLowerCase()
                        )),
                          o.UI.setText(this.$issues, t.join(", ")),
                          o.UI.setDropdownDisabled(this.$targetId),
                          o.UI.setDropdownDisabled(this.$externalProjectId);
                      }
                    })
                    .catch((e) => {
                      e instanceof h.B
                        ? l.l.showValidationErrorMessage(
                            this.formViews[0],
                            d.Z.langEscape("issues.tool_auth_failed", {
                              message: e.message,
                            })
                          )
                        : C.Z.handleError(e);
                    })
                    .then(() => {
                      this.settings.ignoreWindowResize = !1;
                    })
                )
              );
          }
          addTargetIssues(e) {
            new f(e).start();
          }
          doAddIssues() {
            if (!o.UI.getIconActionEnabled(this.$addIssuesIcon)) return;
            l.l.hideValidationErrors(this.formViews);
            let e = this.getTarget(o.UI.getDropdownIntOrNull(this.$targetId));
            e
              ? e && e.can_push
                ? this.pushTargetIssues(e)
                : e.can_add && this.addTargetIssues(e)
              : l.l.highlightFieldError(this.formViews[0], "targetId");
          }
          getIssueIds() {
            return o.UI.getText(this.$issues)
              .split(",")
              .map((e) => e.trim())
              .filter((e) => e.length > 0);
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              l.l.hideValidationErrors(this.formViews);
              let e = this.getIssueIds();
              if (0 == e.length)
                return void l.l.highlightFieldError(
                  this.formViews[0],
                  "issues"
                );
              e = _.uniqWith(e, (e, t) => e.toLowerCase() == t.toLowerCase());
              let t = this.getTarget(o.UI.getDropdownIntOrNull(this.$targetId)),
                s = { targetId: t ? t.id : null, issues: e };
              if (t && t.can_push && this.components.externalProjectId) {
                let e = o.UI.getDropdownIntOrNull(this.$externalProjectId),
                  t = this.getExternalProject(e);
                t &&
                  ((s.externalProjectId = t.external_id),
                  (s.externalProjectKey = t.external_key));
              }
              return a.N.post(
                "issues/create_many/" + this.projectId,
                a.N.toNetworkCase(s)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  l.l.handleFormError(e, this.formViews);
                });
            });
          }
        }
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        b(I, "targets", [
          "submitButton",
          "issues",
          "addIssuesIcon",
          "externalProjectDescription",
          "externalProjectDescriptionText",
        ]),
          b(I, "actions", ["doSubmit", "doAddIssues"]),
          b(I, "forms", [
            {
              name: "newIssues",
              fields: [
                "issues",
                "targetId",
                "externalProjectId",
                "addIssuesIcon",
              ],
            },
          ]);
        class v extends i.d {
          constructor(...e) {
            super(...e),
              w(this, "renderSelectControl", (e = {}) => {
                let t = {
                  ids: _.uniq(e.ids),
                  selected: _.uniq(e.selected),
                  isCompact: this.isInline,
                };
                return a.N.post(
                  "issues/render_select_control/" + this.projectId,
                  a.N.toNetworkCase(t)
                );
              }),
              w(this, "afterRenderSelectControl", () => {
                setTimeout(() => {
                  o.UI.dropdownRefreshSizes(this.$element);
                }, 0);
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.enabled = !0),
              (this.projectId = this.$element.data("projectId")),
              (this.isInline = !!this.$element.data("inline")),
              (this.sourceUrl = this.$element.data("sourceUrl")),
              C.Z.requestChild(this.component, "inputIssues", {}),
              (this.$addIssuesIcon = $(this.addIssuesIconTarget)),
              this.fragments.register(
                "selectControl",
                this.renderSelectControl,
                { completedCallback: this.afterRenderSelectControl }
              ),
              o.UI.dropdownRefreshSizes(this.$element);
          }
          unload() {}
          doAddIssues() {
            this.getEnabled() &&
              (o.UI.popupVisible(this.$addIssuesIcon) ||
                o.UI.loading(this.$addIssuesIcon, () =>
                  a.N.post("issues/render_create/" + this.projectId)
                    .then((e) => {
                      const t = new I(this.projectId, this.sourceUrl);
                      (t.onSuccess = (e) => this.addAndRefreshIssues(e)),
                        t.show(this.$addIssuesIcon, n.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      C.Z.handleError(e);
                    })
                ));
          }
          addAndRefreshIssues(e) {
            let t = this.components.inputIssues
                .getItems()
                .map((e) => parseInt(e.value, 10)),
              s = e.map((e) => e.id),
              i = [...t, ...s],
              n = [...s, ...o.UI.getDropdownInts($(this.inputIssuesTarget))];
            return this.refreshFragments([
              "selectControl",
              { ids: i, selected: n },
            ]);
          }
          getIssues() {
            return o.UI.getDropdownInts($(this.inputIssuesTarget));
          }
          focus() {
            o.UI.focusDropdown($(this.inputIssuesTarget));
          }
          clear() {
            o.UI.clearDropdown($(this.inputIssuesTarget));
          }
          setEnabled(e) {
            (this.enabled = e),
              o.UI.toggleIconActionEnabled(this.$addIssuesIcon, e),
              o.UI.toggleDropdownEnabled($(this.inputIssuesTarget), e);
          }
          getEnabled() {
            return this.enabled;
          }
        }
        w(v, "targets", ["addIssuesIcon", "inputIssues"]);
      },
      17418: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(89432),
          o = s(96622),
          n = s(69555),
          r = s(13814),
          a = s(43689),
          l = s(15612),
          d = s(11478);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends n.GI {
          constructor(e, t) {
            super("issues.lookup_popup"),
              h(this, "renderContent", (e = {}) =>
                r.N.post("issues/render_lookup/" + e.issueId)
              ),
              (this.issueId = e),
              (this.issueType = t);
          }
          load() {
            switch (
              (this.$placeholderMark.attr(
                "src",
                r.N.assetUrl(
                  d.d.getThirdpartyMarkByIssueTargetType(this.issueType)
                )
              ),
              this.issueType)
            ) {
              case l.g.IssueTargetsGitHub:
                this.$placeholderText.text(a.Z.lang("github.loading_from"));
                break;
              case l.g.IssueTargetsGitLab:
                this.$placeholderText.text(a.Z.lang("gitlab.loading_from"));
                break;
              case l.g.IssueTargetsJira:
                this.$placeholderText.text(a.Z.lang("jira.loading_from"));
            }
            this.fragments.register("content", this.renderContent),
              this.refreshFragments([
                "content",
                { issueId: this.issueId },
              ]).then(() => {
                this.events.trigger("issueLoaded");
              });
          }
        }
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        h(c, "targets", ["placeholderMark", "placeholderText"]);
        class g extends i.d {
          constructor(...e) {
            super(...e),
              u(this, "selectors", { issueTag: ".issue-tag" }),
              u(this, "classes", {
                issueTagLookingUp: "issue-tag--looking-up",
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {}
          unload() {}
          doLookupIssue(e) {
            e.preventDefault();
            let t = $(e.currentTarget).closest(this.selectors.issueTag);
            if (o.UI.popupVisible(t)) return;
            let s = t.data("id"),
              i = t.data("issueType");
            t.addClass(this.classes.issueTagLookingUp);
            const r = new c(s, i);
            r.events.on("issueLoaded", () => {
              t.removeClass(this.classes.issueTagLookingUp);
            }),
              r.show(t, n.Fz.BottomLeft);
          }
        }
        u(g, "targets", []);
      },
      69882: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(89432),
          o = s(15612);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const r = class extends i.d {
          constructor(...e) {
            super(...e),
              n(this, "classes", { loading: "loading" }),
              n(this, "selectors", { body: ".mix-content__body" }),
              n(this, "contents", {
                [o.g.MixContentInitial]: "mix-content--show-initial",
                [o.g.MixContentNoSelection]: "mix-content--show-noselection",
                [o.g.MixContentNotFound]: "mix-content--show-notfound",
                [o.g.MixContentEmptyFilter]: "mix-content--show-emptyfilter",
                [o.g.MixContentNoData]: "mix-content--show-nodata",
                [o.g.MixContentContent]: "mix-content--show-content",
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {}
          unload() {}
          showContent(e) {
            this.$element.removeClass(Object.values(this.contents)),
              this.$element.addClass(this.contents[e]),
              this.events.trigger("change", { target: this, content: e });
          }
          markLoading() {
            this.$element.addClass(this.classes.loading);
          }
          markCompleted() {
            this.$element.removeClass(this.classes.loading);
          }
          getLoading() {
            return this.$element.hasClass(this.classes.loading);
          }
          getContentVisible(e) {
            return this.$element.hasClass(this.contents[e]);
          }
          loading(e) {
            return (
              this.markLoading(),
              (e() || Promise.resolve()).then(() => {
                this.markCompleted();
              })
            );
          }
          getBody() {
            return $(this.selectors.body, this.$element);
          }
          scrollTop() {
            this.getBody().scrollTop(0);
          }
        };
      },
      73118: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(89432),
          o = s(15612),
          n = s(47914),
          r = s(43689),
          a = s(69555),
          l = s(11802),
          d = s(96622),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.d {
          constructor(...e) {
            super(...e),
              c(this, "classes", {
                resizing: "mix--resizing",
                canToggleTree: "mix--can-toggle-tree",
                treeOverlay: "mix--tree-overlay",
                bodyResizing: "mix-body--resizing",
              }),
              c(this, "selectors", { popup: ".popup" }),
              c(this, "modes", {
                [o.g.MixModeList]: "mix--mode-list",
                [o.g.MixModeDetails]: "mix--mode-details",
                [o.g.MixModeListDetails]: "mix--mode-list-details",
                [o.g.MixModeTreeList]: "mix--mode-tree-list",
                [o.g.MixModeTreeListDetails]: "mix--mode-tree-list-details",
              }),
              c(this, "doTreePlaceholderPaneClick", (e) => {
                this.treeOverlayVisible || this.showTreeOverlay();
              }),
              c(this, "doWindowClick", (e) => {
                if (!this.treeOverlayVisible) return;
                if (h.Z.layers.getActiveDialog()) return;
                let t = $(e.target);
                0 == t.closest(this.$treePlaceholderPane).length &&
                  0 == t.closest(this.$treePlaceholderSplitter).length &&
                  0 == t.closest(this.selectors.popup).length &&
                  (h.Z.getBlockingExceptInitial() ||
                    (0 == t.closest(this.$treePane).length &&
                      this.hideTreeOverlay()));
              }),
              c(this, "doTreeSplitterMouseDown", (e) => {
                1 == e.which && (e.preventDefault(), this.resizeStart(e, !1));
              }),
              c(this, "doTreeSplitterTouchStart", (e) => {
                this.resizeStart(e, !1);
              }),
              c(this, "doDetailsSplitterMouseDown", (e) => {
                1 == e.which && (e.preventDefault(), this.resizeStart(e, !0));
              }),
              c(this, "doDetailsSplitterTouchStart", (e) => {
                this.resizeStart(e, !0);
              }),
              c(this, "doResizeEnd", (e) => {
                e.preventDefault(),
                  this.resizing &&
                    (this.resizingDetailsSplitter
                      ? this.$detailsPane.outerWidth(this.resizeNewWidth)
                      : this.$treePane.outerWidth(this.resizeNewWidth),
                    this.$element.removeClass(this.classes.resizing),
                    $("body").removeClass(this.classes.bodyResizing),
                    this.$window.off("mouseup", this.doResizeEnd),
                    this.$window.off("touchend", this.doResizeEnd),
                    this.$window.off("touchcancel", this.doResizeEnd),
                    this.$window.off("mousemove", this.doResizeMove),
                    this.$window.off("touchmove", this.doResizeMove),
                    this.$window.off("contextmenu", this.doResizeContextMenu),
                    (this.resizing = !1),
                    this.updateSettingsCookie(),
                    h.Z.layout.page &&
                      h.Z.layout.page.refreshResponsiveContainer(),
                    this.events.trigger("resize", { target: this }));
              }),
              c(this, "doResizeContextMenu", (e) => {
                e.preventDefault();
              }),
              c(this, "doResizeMove", (e) => {
                if (this.resizing) {
                  let t = r.Z.getEventClientPos(e);
                  if (this.resizingDetailsSplitter) {
                    let e =
                        t.x -
                        this.resizeStartDetailsSplitterLeft -
                        this.resizeOffsetX,
                      s = this.resizeStartDetailsPaneWidth - e;
                    (this.resizeNewWidth = s),
                      (this.resizeNewWidth = Math.max(
                        this.resizeNewWidth,
                        this.resizeMinNewWidth
                      )),
                      (this.resizeNewWidth = Math.min(
                        this.resizeNewWidth,
                        this.resizeMaxNewWidth
                      )),
                      this.$shadowDetailsPane.outerWidth(this.resizeNewWidth);
                  } else {
                    let e =
                        t.x -
                        this.resizeStartTreeSplitterLeft -
                        this.resizeOffsetX,
                      s = this.resizeStartTreePaneWidth + e;
                    (this.resizeNewWidth = s),
                      (this.resizeNewWidth = Math.max(
                        this.resizeNewWidth,
                        this.resizeMinNewWidth
                      )),
                      (this.resizeNewWidth = Math.min(
                        this.resizeNewWidth,
                        this.resizeMaxNewWidth
                      )),
                      this.$shadowTreePane.outerWidth(this.resizeNewWidth);
                  }
                }
              }),
              c(this, "doPageResponsiveContainerResize", (e) => {}),
              c(this, "doPageResize", (e) => {
                this.refreshSize();
              }),
              c(this, "doPageKeyDown", (e) => {
                e.event.which == l.N.ESC && this.hideTreeOverlay();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              h.Z.layout.page &&
                (h.Z.layout.page.hasResponsiveContainer &&
                  (h.Z.layout.page.events.on(
                    "responsivecontainerresize",
                    this.doPageResponsiveContainerResize
                  ),
                  this.doPageResponsiveContainerResize()),
                h.Z.layout.page.events.on("resize", this.doPageResize),
                h.Z.layout.page.events.on("keydown", this.doPageKeyDown)),
              (this.mode = this.$element.data("initialMode")),
              (this.targetMode = this.mode),
              (this.lastModes = []),
              (this.$window = $(window)),
              (this.$treePane = $(this.treePaneTarget)),
              (this.$listPane = $(this.listPaneTarget)),
              (this.$detailsPane = $(this.detailsPaneTarget)),
              (this.$treeSplitter = $(this.treeSplitterTarget)),
              (this.$treeSplitterBar = $(this.treeSplitterBarTarget)),
              (this.$detailsSplitter = $(this.detailsSplitterTarget)),
              (this.$detailsSplitterBar = $(this.detailsSplitterBarTarget)),
              (this.$treePlaceholderPane = $(this.treePlaceholderPaneTarget)),
              (this.$treePlaceholderSplitter = $(
                this.treePlaceholderSplitterTarget
              )),
              (this.$shadowTreePane = $(this.shadowTreePaneTarget)),
              (this.$shadowListPane = $(this.shadowListPaneTarget)),
              (this.$shadowDetailsPane = $(this.shadowDetailsPaneTarget)),
              (this.$shadowTreeSplitter = $(this.shadowTreeSplitterTarget)),
              (this.$shadowDetailsSplitter = $(
                this.shadowDetailsSplitterTarget
              )),
              (this.$shadowTreePlaceholderPane = $(
                this.shadowTreePlaceholderPaneTarget
              )),
              (this.$shadowTreePlaceholderSplitter = $(
                this.shadowTreePlaceholderSplitterTarget
              )),
              (this.$treeOverlaySplitter = $(this.treeOverlaySplitterTarget)),
              (this.$treeOverlaySplitterBar = $(
                this.treeOverlaySplitterBarTarget
              )),
              (this.treeOverlayVisible = !1),
              (this.resizing = !1),
              (this.resizingDetailsSplitter = !1),
              (this.resizeOffsetX = 0),
              (this.resizeStartElementLeft = 0),
              (this.resizeStartListPaneWidth = 0),
              (this.resizeStartTreePaneWidth = 0),
              (this.resizeStartTreeSplitterLeft = 0),
              (this.resizeStartDetailsPaneWidth = 0),
              (this.resizeStartDetailsSplitterLeft = 0),
              (this.resizeNewWidth = 0),
              (this.resizeMinNewWidth = 0),
              (this.resizeMaxNewWidth = 0),
              this.refreshMode();
          }
          load() {
            this.$treeSplitterBar.on("mousedown", this.doTreeSplitterMouseDown),
              this.$treeSplitterBar.on(
                "touchstart",
                this.doTreeSplitterTouchStart
              ),
              this.$detailsSplitterBar.on(
                "mousedown",
                this.doDetailsSplitterMouseDown
              ),
              this.$detailsSplitterBar.on(
                "touchstart",
                this.doDetailsSplitterTouchStart
              ),
              this.$treePlaceholderPane.on(
                "click",
                this.doTreePlaceholderPaneClick
              ),
              this.$window.on("click", this.doWindowClick),
              h.Z.requestChild(this.component, "treeContent"),
              h.Z.requestChild(this.component, "listContent"),
              h.Z.requestChild(this.component, "detailsContent"),
              this.refreshMode();
          }
          unload() {
            this.$treeSplitterBar.off(
              "mousedown",
              this.doTreeSplitterMouseDown
            ),
              this.$treeSplitterBar.off(
                "touchstart",
                this.doTreeSplitterTouchStart
              ),
              this.$detailsSplitterBar.off(
                "mousedown",
                this.doDetailsSplitterMouseDown
              ),
              this.$detailsSplitterBar.off(
                "touchstart",
                this.doDetailsSplitterTouchStart
              ),
              this.$treePlaceholderPane.off(
                "click",
                this.doTreePlaceholderPaneClick
              ),
              this.$window.off("click", this.doWindowClick);
          }
          disconnect() {
            h.Z.layout.page &&
              (h.Z.layout.page.hasResponsiveContainer &&
                h.Z.layout.page.events.off(
                  "responsivecontainerresize",
                  this.doPageResponsiveContainerResize
                ),
              h.Z.layout.page.events.off("resize", this.doPageResize),
              h.Z.layout.page.events.off("keydown", this.doPageKeyDown)),
              super.disconnect();
          }
          showTreeOverlay() {
            this.treeOverlayVisible ||
              (this.$element.addClass(this.classes.treeOverlay),
              (this.treeOverlayVisible = !0),
              this.events.trigger("treeoverlayshow", { target: this }),
              h.Z.layout.page && h.Z.layout.page.refreshResponsiveContainer());
          }
          hideTreeOverlay() {
            this.treeOverlayVisible &&
              (this.$element.removeClass(this.classes.treeOverlay),
              (this.treeOverlayVisible = !1),
              this.events.trigger("treeoverlayhide", { target: this }));
          }
          getTreeOverlayVisible() {
            return this.treeOverlayVisible;
          }
          resizeStart(e, t) {
            this.hideTreeOverlay(),
              a.GI.hideAllPopups(),
              (this.resizing = !0),
              (this.resizingDetailsSplitter = t),
              this.$window.on("mouseup", this.doResizeEnd),
              this.$window.on("touchend", this.doResizeEnd),
              this.$window.on("touchcancel", this.doResizeEnd),
              this.$window.on("mousemove", this.doResizeMove),
              this.$window.on("touchmove", this.doResizeMove),
              this.$window.on("contextmenu", this.doResizeContextMenu);
            let s = r.Z.getEventClientPos(e),
              i = t
                ? this.$detailsSplitter.offset()
                : this.$treeSplitter.offset();
            (this.resizeOffsetX = s.x - i.left),
              (this.resizeStartElementLeft = this.$element.offset().left),
              (this.resizeStartListPaneWidth = this.$listPane.outerWidth()),
              (this.resizeStartTreePaneWidth = this.$treePane.outerWidth()),
              (this.resizeStartTreeSplitterLeft =
                this.$treeSplitter.offset().left),
              (this.resizeStartDetailsPaneWidth =
                this.$detailsPane.outerWidth()),
              (this.resizeStartDetailsSplitterLeft =
                this.$detailsSplitter.offset().left),
              this.resizingDetailsSplitter
                ? ((this.resizeNewWidth = this.resizeStartDetailsPaneWidth),
                  (this.resizeMinNewWidth = n.X.MixMinDetailsWidth),
                  (this.resizeMaxNewWidth =
                    this.resizeStartDetailsPaneWidth +
                    (this.resizeStartListPaneWidth - n.X.MixMinListWidth)))
                : ((this.resizeNewWidth = this.resizeStartTreePaneWidth),
                  (this.resizeMinNewWidth = n.X.MixMinTreeWidth),
                  (this.resizeMaxNewWidth =
                    this.resizeStartTreePaneWidth +
                    (this.resizeStartListPaneWidth - n.X.MixMinListWidth))),
              this.$shadowTreePane.outerWidth(this.resizeStartTreePaneWidth),
              this.$shadowDetailsPane.outerWidth(
                this.resizeStartDetailsPaneWidth
              ),
              this.$element.addClass(this.classes.resizing),
              $("body").addClass(this.classes.bodyResizing);
          }
          setMode(e) {
            (this.targetMode = e), this.refreshMode();
          }
          getMode() {
            return this.mode;
          }
          refreshSize() {
            this.treeOverlayVisible && this.hideTreeOverlay(),
              this.refreshMode(!0);
          }
          refreshMode(e = !1) {
            let t = this.mode,
              s = this.targetMode,
              i = this.$element.outerWidth();
            if (i < n.X.getMixMinimumModeWidth(s))
              switch (s) {
                case o.g.MixModeListDetails:
                  s = o.g.MixModeDetails;
                  break;
                case o.g.MixModeTreeList:
                  s = o.g.MixModeList;
                  break;
                case o.g.MixModeTreeListDetails:
                  s =
                    i < n.X.getMixMinimumModeWidth(o.g.MixModeListDetails)
                      ? o.g.MixModeDetails
                      : o.g.MixModeListDetails;
              }
            t != s &&
              (this.lastModes.push(t),
              (this.mode = s),
              this.$element.removeClass(Object.values(this.modes)),
              this.$element.addClass(this.modes[this.mode]));
            let r =
                this.mode == o.g.MixModeTreeList ||
                this.mode == o.g.MixModeTreeListDetails,
              a =
                this.mode == o.g.MixModeList ||
                this.mode == o.g.MixModeListDetails ||
                this.mode == o.g.MixModeTreeListDetails ||
                this.mode == o.g.MixModeTreeList,
              l =
                this.mode == o.g.MixModeDetails ||
                this.mode == o.g.MixModeListDetails ||
                this.mode == o.g.MixModeTreeListDetails,
              c = !1;
            for (let e = 1; e <= 5; e++) {
              let e = this.$treePane.outerWidth(),
                t = this.$listPane.outerWidth(),
                s = this.$detailsPane.outerWidth();
              if (
                a &&
                t < n.X.MixMinListWidth &&
                this.mode != o.g.MixModeList
              ) {
                c = !0;
                let i = n.X.MixMinListWidth - t;
                if (r && l) {
                  let t = s - n.X.MixMinDetailsWidth,
                    o = Math.min(i, t),
                    r = i - o;
                  o > 0 && this.$detailsPane.outerWidth(s - o),
                    r > 0 && this.$treePane.outerWidth(e - r);
                } else
                  r
                    ? this.$treePane.outerWidth(e - i)
                    : l && this.$detailsPane.outerWidth(s - i);
              }
            }
            if (
              (r
                ? this.$element.addClass(this.classes.canToggleTree)
                : this.mode == o.g.MixModeList
                ? this.$element.toggleClass(
                    this.classes.canToggleTree,
                    i >= n.X.getMixMinimumModeWidth(o.g.MixModeTreeList)
                  )
                : this.mode == o.g.MixModeListDetails &&
                  this.$element.toggleClass(
                    this.classes.canToggleTree,
                    i >= n.X.getMixMinimumModeWidth(o.g.MixModeTreeListDetails)
                  ),
              this.hasToggleDetailsIconTarget &&
                (this.mode != o.g.MixModeDetails
                  ? d.UI.toggleIconActionEnabled(
                      $(this.toggleDetailsIconTarget),
                      !0
                    )
                  : d.UI.toggleIconActionEnabled(
                      $(this.toggleDetailsIconTarget),
                      i >= n.X.getMixMinimumModeWidth(o.g.MixModeListDetails)
                    )),
              t != s)
            ) {
              this.events.trigger("modechange", {
                target: this,
                mode: this.mode,
                refreshingSize: e,
              });
              let i =
                  t == o.g.MixModeDetails ||
                  t == o.g.MixModeListDetails ||
                  t == o.g.MixModeTreeListDetails,
                n =
                  s == o.g.MixModeDetails ||
                  s == o.g.MixModeListDetails ||
                  s == o.g.MixModeTreeListDetails;
              i &&
                !n &&
                this.events.trigger("detailshide", {
                  target: this,
                  mode: this.mode,
                });
            }
            c &&
              h.Z.layout.page &&
              h.Z.layout.page.refreshResponsiveContainer(),
              c && this.events.trigger("resize", { target: this }),
              (t != s || c) && this.updateSettingsCookie(),
              e ||
                ((c || t != s) &&
                  h.Z.layout.page &&
                  h.Z.layout.page.refreshResponsiveContainer());
          }
          updateSettingsCookie() {
            if (this.mode == o.g.MixModeDetails) return;
            let e = {
              treeVisible: this.getTreeVisible(),
              treeWidth: this.getTreeWidth(),
              detailsWidth: this.getDetailsWidth(),
            };
            h.Z.cookies.setCookieObject("mix", e);
          }
          doHideTree() {
            this.hideTreeOverlay();
          }
          doPinTree() {
            this.hideTreeOverlay(),
              this.$treePane.outerWidth(n.X.MixOverlayTreeWidth),
              this.mode != o.g.MixModeList
                ? this.mode == o.g.MixModeListDetails &&
                  this.setMode(o.g.MixModeTreeListDetails)
                : this.setMode(o.g.MixModeTreeList);
          }
          doExpandTree() {
            this.mode != o.g.MixModeList
              ? this.mode == o.g.MixModeListDetails &&
                this.setMode(o.g.MixModeTreeListDetails)
              : this.setMode(o.g.MixModeTreeList);
          }
          doOverlayTree() {
            this.showTreeOverlay();
          }
          doCollapseTree() {
            this.mode != o.g.MixModeTreeList
              ? this.mode == o.g.MixModeTreeListDetails &&
                this.setMode(o.g.MixModeListDetails)
              : this.setMode(o.g.MixModeList);
          }
          getLastRelevantMode(e, t) {
            for (let t = this.lastModes.length - 1; t >= 0; t--)
              if (_.includes(e, this.lastModes[t])) return this.lastModes[t];
            return t;
          }
          doCloseDetails() {
            this.hideDetails();
          }
          hideDetails() {
            if (this.mode != o.g.MixModeDetails)
              this.mode != o.g.MixModeListDetails
                ? this.mode == o.g.MixModeTreeListDetails &&
                  this.setMode(o.g.MixModeTreeList)
                : this.setMode(o.g.MixModeList);
            else {
              let e = this.getLastRelevantMode(
                [o.g.MixModeList, o.g.MixModeTreeList],
                o.g.MixModeTreeList
              );
              this.setMode(e);
            }
          }
          doToggleDetails() {
            if (this.mode != o.g.MixModeDetails)
              this.setMode(o.g.MixModeDetails);
            else {
              let e = this.getLastRelevantMode(
                [
                  o.g.MixModeList,
                  o.g.MixModeListDetails,
                  o.g.MixModeTreeList,
                  o.g.MixModeTreeListDetails,
                ],
                o.g.MixModeListDetails
              );
              e == o.g.MixModeTreeList
                ? (e = o.g.MixModeTreeListDetails)
                : e == o.g.MixModeList && (e = o.g.MixModeListDetails),
                this.setMode(e);
            }
          }
          showDetails() {
            this.mode != o.g.MixModeDetails &&
              this.mode != o.g.MixModeListDetails &&
              this.mode != o.g.MixModeTreeListDetails &&
              (this.mode != o.g.MixModeTreeList
                ? this.mode == o.g.MixModeList &&
                  (this.$element.outerWidth() <
                  n.X.getMixMinimumModeWidth(o.g.MixModeListDetails)
                    ? this.setMode(o.g.MixModeDetails)
                    : this.setMode(o.g.MixModeListDetails))
                : this.setMode(o.g.MixModeTreeListDetails));
          }
          getDetailsVisible() {
            return (
              this.mode == o.g.MixModeDetails ||
              this.mode == o.g.MixModeListDetails ||
              this.mode == o.g.MixModeTreeListDetails
            );
          }
          getListVisible() {
            return (
              this.mode == o.g.MixModeList ||
              this.mode == o.g.MixModeTreeList ||
              this.mode == o.g.MixModeListDetails ||
              this.mode == o.g.MixModeTreeListDetails
            );
          }
          getTreeVisible() {
            return (
              this.mode == o.g.MixModeTreeList ||
              this.mode == o.g.MixModeTreeListDetails
            );
          }
          getTreeWidth() {
            return this.$treePane.outerWidth();
          }
          getDetailsWidth() {
            return this.$detailsPane.outerWidth();
          }
        }
        c(u, "targets", [
          "treePane",
          "listPane",
          "detailsPane",
          "treeSplitter",
          "detailsSplitter",
          "treeSplitterBar",
          "detailsSplitterBar",
          "treePlaceholderPane",
          "treePlaceholderSplitter",
          "shadowTreePane",
          "shadowListPane",
          "shadowDetailsPane",
          "shadowTreeSplitter",
          "shadowDetailsSplitter",
          "shadowTreePlaceholderPane",
          "shadowTreePlaceholderSplitter",
          "treeOverlaySplitter",
          "treeOverlaySplitterBar",
          "toggleDetailsIcon",
        ]);
      },
      20911: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(89432),
          o = s(5270);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.d {
          constructor(...e) {
            super(...e),
              n(this, "classes", { hidden: "default-hidden" }),
              n(this, "doPaginationPreviousPage", (e) => {
                if (this.events.has("statechange")) {
                  let e = this.getState();
                  return (
                    e.paginationCurrent--,
                    this.triggerStateChange(e, "previouspage")
                  );
                }
              }),
              n(this, "doPaginationNextPage", (e) => {
                if (this.events.has("statechange")) {
                  let e = this.getState();
                  return (
                    e.paginationCurrent++,
                    this.triggerStateChange(e, "nextpage")
                  );
                }
              }),
              n(this, "doPaginationSelectPage", (e) => {
                if (this.events.has("statechange")) {
                  let t = this.getState();
                  (t.paginationCurrent = e.page),
                    this.triggerStateChange(t, "paginationmenu");
                }
              }),
              n(this, "doPaginationSelectRows", (e) => {
                if (this.events.has("statechange")) {
                  let t = this.getState();
                  (t.paginationRows = e.rows),
                    (t.paginationCurrent = 1),
                    this.triggerStateChange(t, "paginationmenu");
                }
              }),
              n(this, "doPaginationLastPage", (e) => {
                if (
                  (this.events.trigger("lastpage", { target: this }),
                  this.events.has("statechange"))
                ) {
                  let e = this.getState();
                  (e.paginationCurrent = this.paginationTotal),
                    this.triggerStateChange(e, "paginationmenu");
                }
              }),
              n(this, "doPaginationFirstPage", (e) => {
                if (
                  (this.events.trigger("firstpage", { target: this }),
                  this.events.has("statechange"))
                ) {
                  let e = this.getState();
                  (e.paginationCurrent = 1),
                    this.triggerStateChange(e, "paginationmenu");
                }
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.hasPagination = this.$element.data("pagination")),
              (this.paginationCurrent =
                this.$element.data("pagination-current")),
              (this.paginationTotal = this.$element.data("pagination-total")),
              (this.paginationRows = this.$element.data("pagination-rows")),
              o.Z.requestChild(this.component, "pagination", {
                events: {
                  previouspage: this.doPaginationPreviousPage,
                  nextpage: this.doPaginationNextPage,
                  selectpage: this.doPaginationSelectPage,
                  selectrows: this.doPaginationSelectRows,
                  lastpage: this.doPaginationLastPage,
                  firstpage: this.doPaginationFirstPage,
                },
              });
          }
          unload() {}
          getState() {
            let e = {};
            return (
              this.paginationCurrent &&
                (e.paginationCurrent = this.paginationCurrent),
              this.paginationRows && (e.paginationRows = this.paginationRows),
              e
            );
          }
          triggerStateChange(e, t, s) {
            return Promise.all(
              this.events.trigger("statechange", {
                target: this,
                state: e,
                loading: t,
                location: s,
              })
            );
          }
          setLoading(e, t) {
            switch (e) {
              case "nextpage":
                this.components.pagination.setLoading("nextpage", t);
                break;
              case "previouspage":
                this.components.pagination.setLoading("previouspage", t);
                break;
              case "paginationmenu":
                this.components.pagination.setLoading("menu", t);
            }
          }
          loading(e, t, s) {
            return (
              this.setLoading(e, !0, t),
              (s() || Promise.resolve()).then(() => {
                this.setLoading(e, !1, t);
              })
            );
          }
          setVisible(e) {
            this.hasPaginationTarget &&
              $(this.paginationTarget).toggleClass(this.classes.hidden, !e);
          }
        }
        n(r, "targets", ["pagination"]);
      },
      97603: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => c });
        var i = s(89432),
          o = s(69555),
          n = s(43689),
          r = s(96622),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends o.GI {
          constructor(e, t, s, i = !0) {
            super("components.pagination_menu"),
              l(this, "doRowsSelectChange", (e) => {
                this.events.trigger("selectrows", {
                  target: this,
                  rows: parseInt(e.value, 10),
                });
              }),
              l(this, "doPageSelectChange", (e) => {
                this.events.trigger("selectpage", {
                  target: this,
                  page: parseInt(e.value, 10),
                });
              }),
              (this.paginationCurrent = e),
              (this.paginationTotal = t),
              (this.paginationRows = s),
              (this.hasRowSelection = i);
          }
          load() {
            a.Z.requestChild(this.component, "pageSelect", {
              onAdded: () => {
                let e = [];
                for (let t = 1; t <= this.paginationTotal; t++)
                  e.push({
                    label: n.Z.lang("components.pagination_gotopage", {
                      page: t,
                    }),
                    value: t,
                  });
                r.UI.setDropdownItems(this.$pageSelect, e),
                  r.UI.setDropdown(this.$pageSelect, this.paginationCurrent),
                  r.UI.showDropdownDefaultText(
                    this.$pageSelect,
                    n.Z.lang("components.pagination_page", {
                      page: this.paginationCurrent,
                    })
                  );
              },
              events: { change: this.doPageSelectChange },
            }),
              a.Z.requestChild(this.component, "rowsSelect", {
                onAdded: () => {
                  r.UI.setDropdown(this.$rowsSelect, this.paginationRows),
                    r.UI.showDropdownDefaultText(
                      this.$rowsSelect,
                      n.Z.lang("components.pagination_rows", {
                        rows: this.paginationRows,
                      })
                    );
                },
                events: { change: this.doRowsSelectChange },
              }),
              1 == this.paginationCurrent &&
                r.UI.setButtonDisabled(this.$firstPageButton),
              this.paginationCurrent == this.paginationTotal &&
                r.UI.setButtonDisabled(this.$lastPageButton),
              this.hasRowSelection || r.UI.hide(this.$rowsSelect);
          }
          unload() {}
          doFirstPage() {
            this.events.trigger("firstpage", { target: this });
          }
          doLastPage() {
            this.events.trigger("lastpage", { target: this });
          }
        }
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        l(d, "targets", [
          "pageSelect",
          "rowsSelect",
          "firstPageButton",
          "lastPageButton",
        ]),
          l(d, "actions", ["doFirstPage", "doLastPage"]);
        class c extends i.d {
          constructor(...e) {
            super(...e),
              h(this, "doSelectPage", (e) => {
                e.target.hide(),
                  this.events.trigger("selectpage", {
                    target: this,
                    page: e.page,
                  });
              }),
              h(this, "doSelectRows", (e) => {
                e.target.hide(),
                  this.events.trigger("selectrows", {
                    target: this,
                    rows: e.rows,
                  });
              }),
              h(this, "doLastPage", (e) => {
                e.target.hide(),
                  this.events.trigger("lastpage", { target: this });
              }),
              h(this, "doFirstPage", (e) => {
                e.target.hide(),
                  this.events.trigger("firstpage", { target: this });
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.paginationCurrent = this.$element.data("current")),
              (this.paginationRows = this.$element.data("rows")),
              (this.paginationTotal = this.$element.data("total")),
              (this.hasRowSelection = !!this.$element.data("rowSelection")),
              r.UI.initialize(this.element);
          }
          unload() {}
          doNextPage() {
            this.events.trigger("nextpage", { target: this });
          }
          doPreviousPage() {
            this.events.trigger("previouspage", { target: this });
          }
          doMenu(e) {
            const t = $(e.currentTarget);
            if (r.UI.popupVisible(t)) return;
            const s = new d(
              this.paginationCurrent,
              this.paginationTotal,
              this.paginationRows,
              this.hasRowSelection
            );
            s.show(t, o.Fz.BottomRight),
              s.events.on("firstpage", this.doFirstPage),
              s.events.on("lastpage", this.doLastPage),
              s.events.on("selectpage", this.doSelectPage),
              s.events.on("selectrows", this.doSelectRows);
          }
          setLoading(e, t) {
            switch (e) {
              case "nextpage":
                t
                  ? r.UI.markLoading($(this.nextPageButtonTarget))
                  : r.UI.markCompleted($(this.nextPageButtonTarget));
                break;
              case "previouspage":
                t
                  ? r.UI.markLoading($(this.previousPageButtonTarget))
                  : r.UI.markCompleted($(this.previousPageButtonTarget));
                break;
              case "menu":
                t
                  ? r.UI.markLoading($(this.menuButtonTarget))
                  : r.UI.markCompleted($(this.menuButtonTarget));
            }
          }
        }
        h(c, "targets", ["previousPageButton", "nextPageButton", "menuButton"]);
      },
      56377: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => a });
        var i = s(89432),
          o = s(96622),
          n = s(43689);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.d {
          constructor(...e) {
            super(...e),
              r(this, "doInputChange", (e) => {
                this.updateStrength();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$input = $(this.inputTarget)),
              (this.$strengthLabel = $(this.strengthLabelTarget));
          }
          load() {
            this.$input.on("change input textInput", this.doInputChange);
          }
          unload() {
            this.$input.off("change input textInput", this.doInputChange);
          }
          updateStrength() {
            let e = o.UI.getText(this.$input);
            if (0 == e.length)
              return (
                this.$strengthLabel.text("-"),
                void this.$element.attr("data-strength", "none")
              );
            if (e.length < 12)
              return (
                this.$strengthLabel.text(
                  n.Z.lang("password_input.strength_weak")
                ),
                void this.$element.attr("data-strength", "weak")
              );
            let t = n.Z.scorePassword(e);
            t < 60
              ? (this.$strengthLabel.text(
                  n.Z.lang("password_input.strength_weak")
                ),
                this.$element.attr("data-strength", "weak"))
              : t < 80
              ? (this.$strengthLabel.text(
                  n.Z.lang("password_input.strength_better")
                ),
                this.$element.attr("data-strength", "better"))
              : (this.$strengthLabel.text(
                  n.Z.lang("password_input.strength_good")
                ),
                this.$element.attr("data-strength", "good"));
          }
        }
        r(a, "targets", ["input", "strengthLabel"]);
      },
      5563: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(89432),
          o = s(96622),
          n = s(43689),
          r = s(69555),
          a = s(13814),
          l = s(17746);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends l.a {
          constructor() {
            super("components.print_frame_overlay", { animations: !1 });
          }
          load() {}
          setRemainingImageCount(e) {
            this.$remainingImageCount.text(e);
          }
        }
        d(h, "actions", []),
          d(h, "targets", ["remainingImageCount", "cancelLink", "printLink"]);
        var c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends i.d {
          constructor(...e) {
            super(...e),
              u(this, "selectors", {}),
              u(this, "classes", {}),
              u(this, "templates", {
                frame:
                  '<iframe\n            sandbox="\n                allow-modals\n                allow-popups\n                allow-popups-to-escape-sandbox\n                allow-same-origin\n                allow-scripts\n                allow-top-navigation\n            "\n            data-action="load->components--print-frame#doFrameLoad"\n            name="$(name)">\n            </iframe>',
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            this.clear();
          }
          unload() {}
          print() {
            if (0 == this.$iframe.length) return;
            let e = this.$iframe.get(0).contentWindow;
            if (!e) return;
            if (!e.report || !e.report.layout || !e.report.layout.page) return;
            let t = new h(),
              s = !1,
              i = !1;
            return (
              t.show(),
              Promise.resolve()
                .then(
                  () => (
                    (t.onHide = () => {
                      s = !0;
                    }),
                    t.$cancelLink.on("click", () => {
                      (s = !0),
                        t.$cancelLink.attr("disabled", !0),
                        t.$printLink.attr("disabled", !0);
                    }),
                    t.$printLink.on("click", () => {
                      (i = !0),
                        t.$cancelLink.attr("disabled", !0),
                        t.$printLink.attr("disabled", !0);
                    }),
                    e.report.layout.page
                      .loadLazyImages(
                        (e, o) => (
                          s || i || t.setRemainingImageCount(o - e), s || i
                        )
                      )
                      .then(() => {
                        s ||
                          (t.hide(),
                          setTimeout(() => {
                            e.report.layout.page.print();
                          }, 50));
                      })
                  )
                )
                .catch((e) => {
                  c.Z.handleError(e);
                })
                .then((e) => {
                  t.hide();
                })
            );
          }
          clear() {
            (this.$iframe = null), (this.doFrameLoad = () => {});
          }
          loadPost(e, t = {}) {
            return (
              this.clear(),
              o.UI.loading(this.$element, () =>
                new Promise((s, i) => {
                  c.Z.blockUI(),
                    (this.doFrameLoad = () => {
                      let e = this.$iframe.get(0).contentWindow;
                      e && (e.printFrame = this), s();
                    });
                  let o = `print-frame-${n.Z.generateUuidV4()}`;
                  (this.$content = $(this.contentTarget)),
                    this.$content.empty(),
                    this.$content.append(
                      n.Z.template(this.templates.frame, { name: o })
                    ),
                    (this.$iframe = this.$content.children().last()),
                    a.N.formPostTarget(e, o, { data: JSON.stringify(t) });
                })
                  .catch((e) => {
                    c.Z.handleError(e);
                  })
                  .then(() => {
                    c.Z.unblockUI(), (this.doFrameLoad = () => {});
                  })
              )
            );
          }
          doFrameKeyDown(e) {
            c.Z.layers.doKeyDown(e);
          }
          doFrameWindowClick(e) {
            r.GI.windowClickAllPopups(e);
          }
        }
        u(g, "targets", ["content"]);
      },
      5045: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => a });
        var i,
          o,
          n,
          r = s(89432);
        class a extends r.d {
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$complete = $(this.completeTarget)),
              (this.$label = $(this.labelTarget));
            let e = this.$element.data("count"),
              t = this.$element.data("total");
            t && this.setProgress(e || 0, t, this.$element.data("caption"));
          }
          load() {}
          unload() {}
          setProgress(e, t, s = "") {
            let i = 0,
              o = this.$element.outerWidth();
            e >= t ? (i = o) : e > 0 && (i = Math.round(o * (e / t))),
              this.$complete.css({ width: i + "px" }),
              this.$label.text(s);
          }
        }
        (n = ["complete", "label"]),
          (o = "targets") in (i = a)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      92264: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(89432),
          o = s(96622),
          n = s(15612),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const l = class extends i.d {
          constructor(...e) {
            super(...e),
              a(this, "selectors", {
                step: ".result-step-editor__steps__step",
                editor: ".editor",
                editorFocused: ".editor.editor--focused",
                editorNotFocused: ".editor:not(.editor--focused)",
                dropdown: ".dropdown",
                stepComment:
                  ".result-step-editor__steps__step__result__content__comment",
              }),
              a(this, "classes", {
                stepCommentFocused:
                  "result-step-editor__steps__step__result__content__comment--focused",
                stepCommentVisible:
                  "result-step-editor__steps__step__result__content__comment--visible",
              }),
              a(this, "doStepCommentAdded", (e) => {
                this.initialLoaded &&
                  (this.newStepCommentEditor = e.loadEditor());
              }),
              a(this, "doStepCommentBlur", () => {
                this.updateStepCommentFocus();
              }),
              a(this, "doStepCommentFocus", () => {
                this.updateStepCommentFocus();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.newStepCommentEditor = null),
              (this.initialLoaded = !1);
          }
          load() {
            o.UI.initialize(this.$element),
              r.Z.requestChild(this.component, "stepComment", {
                onAdded: this.doStepCommentAdded,
                events: {
                  blur: this.doStepCommentBlur,
                  focus: this.doStepCommentFocus,
                },
              });
          }
          unload() {}
          loadInitialSteps() {
            $(this.selectors.step, this.$element).each((e, t) => {
              $(t)
                .find(this.selectors.editor)
                .each((e, t) => {
                  let s = $(t);
                  o.UI.getEditorController(s).loadEditor();
                });
            }),
              (this.initialLoaded = !0);
          }
          doAddNote(e) {
            let t = $(e.currentTarget),
              s = t
                .closest(this.selectors.step)
                .find(this.selectors.stepComment);
            o.UI.loading(
              t,
              () => (
                r.Z.blockUI(),
                new Promise((e, t) => {
                  let i = $(this.$element.data("commentEditor"));
                  s.append(i),
                    setTimeout(() => {
                      this.newStepCommentEditor
                        ? this.newStepCommentEditor.then(() => {
                            e(), (this.newStepCommentEditor = null);
                          })
                        : (e(), (this.newStepCommentEditor = null));
                    }, 50);
                })
                  .then(() => {
                    t.remove(), s.addClass(this.classes.stepCommentVisible);
                    let e = s.find(this.selectors.editor),
                      i = o.UI.getEditorController(e);
                    i && i.focus();
                  })
                  .catch((e) => {
                    r.Z.handleError(e);
                  })
                  .then(() => {
                    r.Z.unblockUI();
                  })
              )
            );
          }
          updateStepCommentFocus() {
            let e = $(this.selectors.editor, this.$element),
              t = e.filter(this.selectors.editorFocused);
            e.filter(this.selectors.editorNotFocused)
              .closest(this.selectors.stepComment)
              .removeClass(this.classes.stepCommentFocused);
            let s = !1,
              i = t.closest(this.selectors.stepComment);
            i.each((e, t) => {
              let i = $(t);
              i.hasClass(this.classes.stepCommentFocused) &&
                s &&
                i.removeClass(this.classes.stepCommentFocused),
                (s = s || i.hasClass(this.classes.stepCommentFocused));
            }),
              s || i.first().addClass(this.classes.stepCommentFocused);
          }
          getSteps() {
            let e = $(this.selectors.step, this.$element),
              t = [];
            return (
              e.each((e, s) => {
                let i = $(s),
                  r = i.data("step"),
                  a = i.find(this.selectors.dropdown);
                (r.status_id = o.UI.getDropdownIntOrNull(a)),
                  r.status_id == n.g.StatusesUntestedId && (r.status_id = null);
                let l = i.find(this.selectors.editor);
                l.length > 0 &&
                  (r.comment = o.UI.getEditorController(l).getData()),
                  t.push(r);
              }),
              t
            );
          }
        };
      },
      17147: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(89432),
          o = s(13814),
          n = s(96622),
          r = s(15612),
          a = s(92405),
          l = s(28325),
          d = s.n(l),
          h =
            (s(94446),
            s(35433),
            s(4279),
            s(2731),
            s(79016),
            s(24335),
            s(15251),
            s(57065),
            s(49472),
            s(27046),
            s(52503),
            s(39980),
            s(74277),
            s(32334),
            s(11426),
            s(13210),
            s(20288),
            s(96854),
            s(99945),
            s(80366),
            s(54803),
            s(59385),
            s(70767),
            s(70726),
            s(35266),
            s(90874),
            s(73358),
            s(96836),
            s(5270));
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const u = class extends i.d {
          constructor(...e) {
            super(...e),
              c(this, "selectors", {
                anchor: "a",
                codeBlock: ".code-block",
                image: "img",
              }),
              c(this, "classes", {});
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            this.updateLinks(),
              this.enableSyntaxHighlighting(),
              this.enableImagePreview();
          }
          enableSyntaxHighlighting() {
            $(this.selectors.codeBlock, this.$element).each((e, t) => {
              d().highlightElement(t);
            });
          }
          updateLinks() {
            $(this.selectors.anchor, this.$element).each((e, t) => {
              let s = $(t),
                i = s.attr("href"),
                o = _.startsWith(i, h.Z.context.appUrl);
              /^(https?:)?\/\//.test(i) &&
                !o &&
                (s.attr("target", "_blank"),
                s.attr("rel", "noopener noreferrer"),
                s.attr("data-turbolinks", "false"));
            });
          }
          enableImagePreview() {
            const e = (e) => {
              let t = e.attr("src").trim();
              return (
                t.startsWith(r.g.RichTextAttachmentPreviewStart) &&
                  (t =
                    r.g.RichTextAttachmentViewStart +
                    t.slice(r.g.RichTextAttachmentPreviewStart.length)),
                t.startsWith("/attachments/view/") ||
                t.startsWith("/images/placeholders/") ||
                t.startsWith("http://") ||
                t.startsWith("https://")
                  ? t
                  : null
              );
            };
            let t = $(this.selectors.image, this.$element);
            t.on("click", (s) => {
              let i = $(s.currentTarget),
                r = i.position(),
                l = e(i);
              if (null === l) return;
              let d = ((t) =>
                t
                  .toArray()
                  .map((t) => e($(t)))
                  .filter((e) => null !== e))(t);
              0 != d.length &&
                n.UI.loading(i, () => {
                  let e = $('<div class="image-loading-overlay">');
                  e.css({
                    top: r.top,
                    left: r.left,
                    width: i.width(),
                    height: i.height(),
                  }),
                    e.insertAfter(i);
                  let t = { urls: d };
                  return o.N.post(
                    "attachments/render_gallery_custom_dialog",
                    o.N.toNetworkCase(t)
                  )
                    .then((e) => {
                      new a.b(!0, l).show(e.data);
                    })
                    .catch((e) => {
                      h.Z.handleError(e);
                    })
                    .then(() => {
                      e.remove();
                    });
                });
            });
          }
          setHtmlContent(e) {
            this.$element.html(e),
              this.enableSyntaxHighlighting(),
              this.updateLinks();
          }
          getHtmlContent(e) {
            return this.$element.html();
          }
        };
      },
      50532: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(89432),
          o = s(11802),
          n = s(96622),
          r = s(47914),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.d {
          constructor(...e) {
            super(...e),
              l(this, "defaults", { cancelSearchIconMargin: 8 }),
              l(this, "selectors", {
                inlineFilter: ".search-bar__inline-filter",
                inlineFilterCancelIcon:
                  ".search-bar__inline-filter__cancel-icon",
                button: ".button",
                inlineFilterText: ".text",
              }),
              l(this, "classes", {
                hasCount: "search-bar__filter--has-count",
                canCancel: "search-bar--can-cancel",
                disabled: "disabled",
                firstVisibleButton: "search-bar__button--first-visible",
                inlineFilterHasFilter: "search-bar__inline-filter--has-filter",
              }),
              l(this, "doResponsiveContainerResize", (e) => {
                this.resizeResponsiveInlineFilters();
              }),
              l(this, "doCancelSearchIconClick", () => {
                this.cancelSearch();
              }),
              l(this, "doSearchInputFocus", (e) => {
                this.events.trigger("focus", { target: this });
              }),
              l(this, "doSearchInputKeyDown", (e) => {
                e.which == o.N.ESC &&
                  (e.stopPropagation(),
                  this.events.trigger("keyesc", { target: this }),
                  this.cancelSearch()),
                  e.which == o.N.Enter &&
                    (e.stopPropagation(), this.processSearch()),
                  this.events.has("keyuparrow") &&
                    e.which == o.N.UpArrow &&
                    (e.stopPropagation(),
                    e.preventDefault(),
                    this.events.trigger("keyuparrow", { target: this })),
                  this.events.has("keydownarrow") &&
                    e.which == o.N.DownArrow &&
                    (e.stopPropagation(),
                    e.preventDefault(),
                    this.events.trigger("keydownarrow", { target: this }));
              }),
              l(this, "doSearchInputChange", () => {
                this.updateCancelSearchIcon(),
                  this.searchOnType && this.processSearch();
              }),
              l(this, "doFilterButtonClick", (e) => {
                e.currentTarget.blur(),
                  this.events.trigger("filter", {
                    target: this,
                    button: this.filterButtonTarget,
                  });
              }),
              l(this, "doCancelFilterIconClick", (e) => {
                this.$filterButton.blur(),
                  e.stopPropagation(),
                  this.events.trigger("cancelfilter", {
                    target: this,
                    button: this.filterButtonTarget,
                  });
              }),
              l(this, "doInlineFilterButtonClick", (e) => {
                e.currentTarget.blur();
                for (let t of this.inlineFilters)
                  if (e.currentTarget == t.$element.get(0)) {
                    this.events.trigger("inlinefilter", {
                      target: this,
                      filter: t,
                      button: e.currentTarget,
                    });
                    break;
                  }
              }),
              l(this, "doInlineFilterCancelIconClick", (e) => {
                e.stopPropagation();
                for (let t of this.inlineFilters)
                  if (e.currentTarget == t.$cancelIcon.get(0)) {
                    t.$element.blur(),
                      this.events.trigger("cancelinlinefilter", {
                        target: this,
                        filter: t,
                        button: t.$element,
                      });
                    break;
                  }
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.inlineFilters = []),
              $(this.selectors.inlineFilter, this.$element).each((e, t) => {
                let s = $(t),
                  i = $(this.selectors.inlineFilterCancelIcon, s),
                  o = s.data("responsive"),
                  n = o ? o.split("|") : [];
                this.inlineFilters.push({
                  $element: s,
                  $cancelIcon: i,
                  name: s.data("filter"),
                  defaultText: s.data("defaultText"),
                  values: s.data("values"),
                  maxWidth: s.data("maxWidth"),
                  responsive: n,
                }),
                  s.on("click", this.doInlineFilterButtonClick),
                  i.on("click", this.doInlineFilterCancelIconClick);
              }),
              (this.hasResponsiveInlineFilters = this.inlineFilters.reduce(
                (e, t) => e || t.responsive.length > 0,
                !1
              )),
              a.Z.layout.page &&
              a.Z.layout.page.hasResponsiveContainer &&
              this.hasResponsiveInlineFilters
                ? this.resizeResponsiveInlineFilters(!0)
                : this.refreshFirstVisibleButton();
          }
          disconnect() {
            for (let e of this.inlineFilters)
              e.$element.off("click", this.doInlineFilterButtonClick),
                e.$cancelIcon.off("click", this.doInlineFilterCancelIconClick);
            a.Z.layout.page &&
              a.Z.layout.page.hasResponsiveContainer &&
              this.hasResponsiveInlineFilters &&
              a.Z.layout.page.events.off(
                "responsivecontainerresize",
                this.doResponsiveContainerResize
              ),
              super.disconnect();
          }
          load() {
            (this.searchOnType = this.$element.data("search-on-type")),
              (this.$inputContainer = $(this.inputContainerTarget)),
              (this.$searchInput = $(this.searchInputTarget)),
              (this.$cancelSearchIcon = $(this.cancelSearchIconTarget)),
              (this.$filterButton = null),
              (this.$filterCounter = null),
              (this.hasFilter = !1),
              this.hasFilterButtonTarget &&
                ((this.$filterCounter = $(this.filterCounterTarget)),
                (this.$filterButton = $(this.filterButtonTarget)),
                (this.$filterCancelIcon = $(this.filterCancelIconTarget)),
                this.$filterButton.on("click", this.doFilterButtonClick),
                this.$filterCancelIcon.on(
                  "click",
                  this.doCancelFilterIconClick
                ),
                (this.hasFilter = !0)),
              this.$searchInput.on("keydown", this.doSearchInputKeyDown),
              this.$searchInput.on(
                "change input textInput",
                this.doSearchInputChange
              ),
              this.$searchInput.on("focus", this.doSearchInputFocus),
              this.$cancelSearchIcon.on("click", this.doCancelSearchIconClick),
              (this.hasSearched = !1),
              (this.searchTerm = null);
            let e = n.UI.getText(this.$searchInput);
            e && ((this.hasSearched = !0), (this.searchTerm = e)),
              this.refreshCancelSearchIconPosition(),
              this.updateCancelSearchIcon(),
              a.Z.layout.page &&
                a.Z.layout.page.hasResponsiveContainer &&
                this.hasResponsiveInlineFilters &&
                a.Z.layout.page.events.on(
                  "responsivecontainerresize",
                  this.doResponsiveContainerResize
                );
          }
          unload() {
            this.hasFilterButtonTarget &&
              (this.$filterButton.off("click", this.doFilterButtonClick),
              this.$filterCancelIcon.off(
                "click",
                this.doCancelFilterIconClick
              )),
              this.$cancelSearchIcon.off("click", this.doCancelSearchIconClick),
              this.$searchInput.off("keydown", this.doSearchInputKeyDown),
              this.$searchInput.off(
                "change input textInput",
                this.doSearchInputChange
              ),
              this.$searchInput.off("focus", this.doSearchInputFocus);
          }
          resizeResponsiveInlineFilters(e = !1) {
            let t = a.Z.layout.page.getResponsiveContainerWidth(this.element),
              s = r.X.SearchBarBreakpoints,
              i = s.length;
            for (let e = 0; e < s.length; e++)
              if (t < s[e]) {
                i = e;
                break;
              }
            for (let e of this.inlineFilters) {
              let t;
              (t =
                e.responsive.length <= i
                  ? e.responsive[e.responsive.length - 1]
                  : e.responsive[i]),
                e.width != t &&
                  (0 == e.width && e.$element.show(),
                  0 == t ? e.$element.hide() : e.$element.css("max-width", t),
                  (e.width = t));
            }
            this.refreshFirstVisibleButton(),
              e || this.refreshCancelSearchIconPosition();
          }
          refreshFirstVisibleButton() {
            let e = $(this.selectors.button, this.$element),
              t = e.filter(":visible").first();
            e.removeClass(this.classes.firstVisibleButton),
              t.addClass(this.classes.firstVisibleButton);
          }
          refreshCancelSearchIconPosition() {
            this.$cancelSearchIcon.css({
              right:
                this.defaults.cancelSearchIconMargin +
                (this.$element.outerWidth() - this.$searchInput.outerWidth()),
            });
          }
          refreshElements() {
            this.refreshCancelSearchIconPosition();
          }
          cancelSearch() {
            n.UI.setText(this.$searchInput, ""),
              this.hasSearched &&
                ((this.hasSearched = !1),
                (this.searchTerm = null),
                this.events.trigger("cancelsearch", { target: this })),
              this.updateCancelSearchIcon();
          }
          processSearch() {
            if (a.Z.getBlocking()) return;
            let e = n.UI.getText(this.$searchInput);
            e
              ? ((this.hasSearched = !0),
                (this.searchTerm = e),
                this.events.trigger("search", {
                  target: this,
                  term: n.UI.getText(this.$searchInput),
                }))
              : this.cancelSearch();
          }
          updateCancelSearchIcon() {
            n.UI.getText(this.$searchInput) || this.hasSearched
              ? (this.$element.addClass(this.classes.canCancel),
                this.refreshCancelSearchIconPosition())
              : this.$element.removeClass(this.classes.canCancel);
          }
          getHasSearched() {
            return this.hasSearched;
          }
          getSearchTerm() {
            return this.hasSearched ? this.searchTerm : null;
          }
          setInputLoading(e) {
            e
              ? n.UI.markLoading(this.$inputContainer)
              : n.UI.markCompleted(this.$inputContainer);
          }
          setFilterLoading(e) {
            e
              ? n.UI.markLoading(this.$filterButton)
              : n.UI.markCompleted(this.$filterButton);
          }
          setFilterCount(e) {
            this.hasFilter &&
              (this.$filterCounter.text(e),
              e > 0
                ? this.$filterButton.addClass(this.classes.hasCount)
                : this.$filterButton.removeClass(this.classes.hasCount),
              this.refreshCancelSearchIconPosition());
          }
          setEnabled(e) {
            if (e) {
              this.hasFilter &&
                this.$filterButton.removeClass(this.classes.disabled);
              for (let e of this.inlineFilters)
                e.$element.removeClass(this.classes.disabled);
            } else {
              this.hasFilter &&
                this.$filterButton.addClass(this.classes.disabled);
              for (let e of this.inlineFilters)
                e.$element.addClass(this.classes.disabled);
            }
            n.UI.toggleTextEnabled(this.$searchInput, e);
          }
          focus() {
            this.$searchInput.focus();
          }
          hasFocus() {
            return document.activeElement == this.$searchInput.get(0);
          }
          setInlineFilter(e, t) {
            for (let s of this.inlineFilters)
              if (s.name == e) {
                let e = $(this.selectors.inlineFilterText, s.$element);
                t.length > 0
                  ? (e.text(t.join(", ")),
                    s.$element.addClass(this.classes.inlineFilterHasFilter))
                  : (e.text(s.defaultText),
                    s.$element.removeClass(this.classes.inlineFilterHasFilter)),
                  (s.values = t);
                break;
              }
            this.refreshCancelSearchIconPosition();
          }
          getInlineFilter(e) {
            for (let t of this.inlineFilters) if (t.name == e) return t.values;
            return [];
          }
        }
        l(d, "targets", [
          "searchInput",
          "inputContainer",
          "filterButton",
          "filterCounter",
          "filterCancelIcon",
          "cancelSearchIcon",
        ]);
      },
      33395: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(89432),
          o = s(11802),
          n = s(96622),
          r = s(69555),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends r.GI {
          constructor(e, t, s) {
            let i = { animations: !1 };
            (i.allowedPositions = [
              r.Fz.BottomLeft,
              r.Fz.BottomCenter,
              r.Fz.BottomRight,
            ]),
              super("components.search_input_popup", i),
              l(this, "classes", {
                contentHasResult: "search-input-popup__content--has-result",
              }),
              l(this, "selectors", {
                tableFieldAvatarText: "td.table__field__avatar-text",
                paginationMenu: ".pagination-menu",
              }),
              l(this, "doContentContainerKeyDown", (e) => {
                if (
                  e.which == o.N.UpArrow ||
                  (e.which == o.N.Tab && e.shiftKey)
                ) {
                  e.stopPropagation(), e.preventDefault();
                  let t = !1,
                    s = null;
                  if (this.components.searchResult) {
                    let e = this.components.searchResult.getActivatedRow();
                    e.length > 0 &&
                      ((s = this.components.searchResult.getPreviousRow(e)),
                      (t = s.length > 0));
                  }
                  t
                    ? (this.components.searchResult.markActivatedRow(s),
                      n.UI.fixedContainerScrollIntoViewIfNeeded(
                        s,
                        this.$contentContainer
                      ))
                    : (this.components.searchResult &&
                        this.components.searchResult.markActivatedRow(),
                      this.$contentContainer.scrollTop(0),
                      this.events.trigger("activateup", { target: this }));
                } else if (
                  e.which == o.N.DownArrow ||
                  (e.which == o.N.Tab && !e.shiftKey)
                ) {
                  if (
                    (e.stopPropagation(),
                    e.preventDefault(),
                    this.components.searchResult)
                  ) {
                    let e = this.components.searchResult.getActivatedRow();
                    if (e.length > 0) {
                      let t = null;
                      (t = this.components.searchResult.getNextRow(e)),
                        t.length > 0 &&
                          (this.components.searchResult.markActivatedRow(t),
                          n.UI.fixedContainerScrollIntoViewIfNeeded(
                            t,
                            this.$contentContainer
                          ));
                    } else {
                      let e = this.components.searchResult.getRows().first();
                      e.length > 0 &&
                        (this.components.searchResult.markActivatedRow(e),
                        n.UI.fixedContainerScrollIntoViewIfNeeded(
                          e,
                          this.$contentContainer
                        ));
                    }
                  }
                } else if (
                  (e.which == o.N.Enter || e.which == o.N.Space) &&
                  (e.stopPropagation(),
                  e.preventDefault(),
                  this.components.searchResult)
                ) {
                  let t = this.components.searchResult.getActivatedRow();
                  t.length > 0 && this.selectRow(t, e.ctrlKey || e.metaKey);
                }
              }),
              l(this, "doSearchResultActionClick", (e) => {
                "select" === e.actionName && this.selectRow(e.$row);
              }),
              l(this, "doSearchResultStateChange", (e) => {
                this.events.trigger("statechange", {
                  target: this,
                  table: e.target,
                  state: e.state,
                  loading: e.loading,
                  column: e.column,
                });
              }),
              l(this, "doSearchResultRemoved", (e) => {
                this.$statusText.text("");
              }),
              l(this, "doSearchResultAdded", (e) => {
                this.$statusText.text(e.getParams().statusText);
              }),
              (this.placeholderText = t),
              (this.tipText = s),
              (this.$searchInputElement = e);
          }
          load() {
            this.$placeholderText.text(this.placeholderText),
              this.$tipText.text(this.tipText),
              a.Z.requestChild(this.component, "searchResult", {
                onAdded: this.doSearchResultAdded,
                onRemoved: this.doSearchResultRemoved,
                events: {
                  actionclick: this.doSearchResultActionClick,
                  statechange: this.doSearchResultStateChange,
                },
              }),
              this.$contentContainer.on(
                "keydown",
                this.doContentContainerKeyDown
              );
          }
          clickHideFilter(e) {
            return (
              e.closest(this.$searchInputElement).length > 0 ||
              $(":focus").closest(this.$searchInputElement).length > 0 ||
              e.closest(this.selectors.paginationMenu).length > 0
            );
          }
          unload() {}
          markLoading() {
            n.UI.markLoading(this.$contentContainer);
          }
          markCompleted() {
            n.UI.markCompleted(this.$contentContainer);
          }
          showResult(e) {
            this.$result.html(e),
              this.$contentContainer.addClass(this.classes.contentHasResult);
          }
          clearResult() {
            this.$result.html("");
          }
          showPlaceholder() {
            this.$contentContainer.removeClass(this.classes.contentHasResult);
          }
          focusAndActivateFirst() {
            if (this.components.searchResult) {
              let e = this.components.searchResult.getRows().first();
              e.length > 0 &&
                (this.$contentContainer.focus(),
                this.components.searchResult.markActivatedRow(e));
            }
          }
          selectRow(e, t = !1) {
            this.components.searchResult.loading(
              "actionfield",
              e.find(this.selectors.tableFieldAvatarText),
              () =>
                Promise.all(
                  this.events.trigger("selectitem", {
                    target: this,
                    $row: e,
                    tab: t,
                  })
                ).then(() => {
                  t || this.hide(r.UT.ItemSelected);
                })
            );
          }
        }
        l(d, "targets", [
          "placeholderText",
          "contentContainer",
          "result",
          "tipText",
          "statusText",
        ]);
        var h = s(57407);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.d {
          constructor(...e) {
            super(...e),
              c(this, "defaults", { cancelSearchIconMargin: 8 }),
              c(this, "selectors", {}),
              c(this, "classes", {
                canCancel: "search-input--can-cancel",
                disabled: "disabled",
                searchInputActive: "search-input--active",
              }),
              c(this, "doCancelSearchIconClick", () => {
                this.cancelSearch();
              }),
              c(this, "doSearchInputFocus", (e) => {
                this.showPopup();
              }),
              c(this, "doSearchInputClick", (e) => {
                this.showPopup();
              }),
              c(this, "doSearchInputBlur", (e) => {
                this.popup &&
                  setTimeout(() => {
                    this.popup &&
                      0 == $(":focus").closest(this.popup.$popup).length &&
                      this.hidePopup();
                  }, 1);
              }),
              c(this, "doSearchInputKeyDown", (e) => {
                e.which == o.N.ESC &&
                  (e.stopPropagation(), this.cancelSearch()),
                  e.which == o.N.Enter &&
                    (e.stopPropagation(), this.processSearch()),
                  (e.which == o.N.DownArrow ||
                    (e.which == o.N.Tab && !e.shiftKey)) &&
                    (e.stopPropagation(),
                    e.preventDefault(),
                    this.popup && this.popup.focusAndActivateFirst());
              }),
              c(this, "doSearchInputChange", () => {
                this.updateCancelSearchIcon();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.popup = null);
          }
          load() {
            (this.$inputContainer = $(this.inputContainerTarget)),
              (this.$searchInput = $(this.searchInputTarget)),
              (this.$cancelSearchIcon = $(this.cancelSearchIconTarget)),
              this.$searchInput.on("keydown", this.doSearchInputKeyDown),
              this.$searchInput.on(
                "change input textInput",
                this.doSearchInputChange
              ),
              this.$searchInput.on("focus", this.doSearchInputFocus),
              this.$searchInput.on("blur", this.doSearchInputBlur),
              this.$searchInput.on("click", this.doSearchInputClick),
              this.$cancelSearchIcon.on(
                "mousedown",
                this.doCancelSearchIconClick
              );
          }
          unload() {
            this.$cancelSearchIcon.off(
              "mousedown",
              this.doCancelSearchIconClick
            ),
              this.$searchInput.off("keydown", this.doSearchInputKeyDown),
              this.$searchInput.off(
                "change input textInput",
                this.doSearchInputChange
              ),
              this.$searchInput.off("focus", this.doSearchInputFocus),
              this.$searchInput.off("blur", this.doSearchInputBlur),
              this.$searchInput.off("click", this.doSearchInputClick);
          }
          cancelSearch() {
            n.UI.clearText(this.$searchInput),
              n.UI.blurText(this.$searchInput),
              this.updateCancelSearchIcon(),
              this.hidePopup();
          }
          processSearch() {
            if (a.Z.getBlocking()) return;
            let e = this.showPopup();
            e &&
              e.then(() => {
                if (!this.popup) return;
                let e = n.UI.getText(this.$searchInput).trim();
                if (e) {
                  let t = this.events.trigger("search", {
                    target: this,
                    term: e,
                  });
                  this.popup.markLoading(),
                    Promise.all(t)
                      .then((e) => {
                        e.length > 0
                          ? this.popup.showResult(e[0])
                          : this.clearSearch();
                      })
                      .catch((e) => {
                        a.Z.handleError(e);
                      })
                      .then(() => {
                        this.popup.markCompleted();
                      });
                } else this.clearSearch();
              });
          }
          clearSearch() {
            this.popup &&
              (this.popup.clearResult(), this.popup.showPlaceholder());
          }
          updateCancelSearchIcon() {
            let e = n.UI.getText(this.$searchInput);
            this.$element.toggleClass(this.classes.canCancel, !!e);
          }
          getEnabled() {
            return n.UI.getTextEnabled(this.$searchInput);
          }
          setEnabled(e) {
            n.UI.toggleTextEnabled(this.$searchInput, e);
          }
          focus() {
            this.$searchInput.focus();
          }
          hasFocus() {
            return document.activeElement == this.$searchInput.get(0);
          }
          showPopup() {
            if (this.getEnabled())
              return this.popup
                ? Promise.resolve()
                : (() => (
                    (this.popup = new d(
                      this.$element,
                      this.$element.data("popupPlaceholder"),
                      this.$element.data("popupTip")
                    )),
                    (this.popup.onHide = (e, t) => {
                      this.$element.removeClass(this.classes.searchInputActive),
                        (this.popup = null),
                        this.events.trigger("blur", { target: this }),
                        n.UI.blurText(this.$searchInput);
                      for (let e of d.visiblePopups)
                        e instanceof h.z && e.hide();
                      t == r.UT.ESCPressed && this.cancelSearch();
                    }),
                    this.popup.events.on("activateup", () => {
                      this.$searchInput.focus();
                    }),
                    this.popup.events.on("statechange", (e) => {
                      e.target = this;
                      let t = this.events.trigger("statechange", e);
                      e.table.loading(e.loading, e.column, () =>
                        Promise.all(t)
                          .then((e) => {
                            e.length > 0 &&
                              this.popup &&
                              this.popup.showResult(e[0]);
                          })
                          .catch((e) => {
                            a.Z.handleError(e);
                          })
                      );
                    }),
                    this.popup.events.on("selectitem", (e) =>
                      Promise.all(
                        this.events.trigger("selectitem", {
                          target: this,
                          $row: e.$row,
                          tab: e.tab,
                        })
                      )
                    ),
                    this.popup
                      .show(this.$element, r.Fz.BottomCenter)
                      .then(() => {
                        this.$element.addClass(this.classes.searchInputActive),
                          this.events.trigger("focus", { target: this });
                      })
                  ))();
          }
          hidePopup() {
            this.popup &&
              (this.$element.removeClass(this.classes.dropdownActive),
              this.popup.hide(),
              (this.popup = null));
          }
          getSearchTerm() {
            return n.UI.getText(this.$searchInput).trim();
          }
        }
        c(u, "targets", ["searchInput", "inputContainer", "cancelSearchIcon"]);
      },
      49506: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(89432),
          o = s(16087),
          n = s(69555),
          r = s(96622);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.d {
          constructor(...e) {
            super(...e),
              a(this, "doMenuClick", (e) => {
                e.target.hide(),
                  this.setValue(e.actionValue),
                  this.events.trigger("change", {
                    target: this,
                    value: e.actionValue,
                  });
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$label = $(this.labelTarget)),
              (this.items = JSON.parse(this.$element.attr("data-items"))),
              this.setValue(this.$element.data("value"));
          }
          doSelect() {
            if (r.UI.popupVisible(this.$element)) return;
            const e = [];
            for (let t of this.items)
              e.push({
                type: "action",
                value: t.value,
                callback: this.doMenuClick,
                title: t.label,
              });
            new o.x(e, { showPointer: !1, margin: 4 }).show(
              this.$element,
              n.Fz.BottomLeft
            );
          }
          getValue() {
            return this.value;
          }
          setValue(e) {
            this.value = e;
            for (let t of this.items)
              if (t.value == e) {
                this.$label.text(t.label);
                break;
              }
          }
        }
        a(l, "targets", ["label"]);
      },
      99892: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i = s(89432),
          o = s(96622),
          n = s(69555);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends n.GI {
          constructor(e) {
            super("components.select_tabs_menu"),
              r(this, "selectors", {
                menu: ".popup__menu",
                tab: ".select-tabs__tabs__tab",
              }),
              r(this, "doTabClick", (e) => {
                let t = $(e.currentTarget);
                this.events.trigger("tabclick", {
                  target: this,
                  index: t.data("index"),
                  $menuTab: t,
                });
              }),
              (this.selectTabs = e);
          }
          load() {
            const e = $(this.selectors.menu, this.$popup);
            this.selectTabs.$tabs.each((t, s) => {
              let i = $(s);
              if (!this.selectTabs.getIsTabVisible(i)) {
                let s = i.clone();
                s.data("index", t), e.append(s);
              }
            }),
              (this.$menuTabs = $(this.selectors.tab, this.$popup)),
              this.$menuTabs.on("click", this.doTabClick);
          }
          unload() {
            this.$menuTabs.off("click", this.doTabClick);
          }
        }
        var l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends i.d {
          constructor(...e) {
            super(...e),
              d(this, "selectors", { tab: ".select-tabs__tabs__tab" }),
              d(this, "classes", {
                hasMore: "select-tabs--has-more",
                hasPointer: "select-tabs--has-pointer",
                tabActive: "select-tabs__tabs__tab--active",
                loading: "loading",
              }),
              d(this, "doResponsiveContainerResize", (e) => {
                this.resize();
              }),
              d(this, "doTabClick", (e) => {
                let t = $(e.currentTarget);
                this.events.trigger("tabchange", {
                  target: this,
                  index: t.index(),
                  id: t.data("id"),
                });
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.$menuLabelCount = $(this.menuLabelCountTarget)),
              (this.$menu = $(this.menuTarget)),
              (this.$pointer = $(this.pointerTarget)),
              (this.$tabs = $(this.selectors.tab, this.$element)),
              this.resize();
          }
          load() {
            l.Z.layout.page &&
              l.Z.layout.page.hasResponsiveContainer &&
              l.Z.layout.page.events.on(
                "responsivecontainerresize",
                this.doResponsiveContainerResize
              ),
              this.$tabs.on("click", this.doTabClick);
          }
          unload() {
            this.$tabs.off("click", this.doTabClick),
              l.Z.layout.page &&
                l.Z.layout.page.hasResponsiveContainer &&
                l.Z.layout.page.events.off(
                  "responsivecontainerresize",
                  this.doResponsiveContainerResize
                );
          }
          refreshTabs() {
            this.$tabs.off("click", this.doTabClick),
              (this.$tabs = $(this.selectors.tab, this.$element)),
              this.$tabs.on("click", this.doTabClick);
          }
          resize() {
            let e = 0;
            this.$tabs.each((t, s) => {
              this.getIsTabVisible($(s)) || e++;
            }),
              e > 0 && this.$menuLabelCount.text(e),
              this.$element.toggleClass(this.classes.hasMore, e > 0),
              this.refreshPointer();
          }
          refreshPointer() {
            let e = this.getSelectedTabIndex();
            if (void 0 === e)
              return void this.$element.removeClass(this.classes.hasPointer);
            let t = this.$tabs.eq(e);
            this.getIsTabVisible(t)
              ? (this.$element.addClass(this.classes.hasPointer),
                this.$pointer.css({
                  left: t.position().left + t.outerWidth() / 2 - 8 + "px",
                }))
              : this.$element.removeClass(this.classes.hasPointer);
          }
          doShowMenu() {
            if (o.UI.popupVisible(this.$menu)) return;
            const e = new a(this);
            e.events.on("tabclick", (e) => {
              e.target.hide(),
                this.events.trigger("tabchange", {
                  target: this,
                  index: e.index,
                  id: e.$menuTab.data("id"),
                });
            }),
              e.show(this.$menu, n.Fz.BottomRight);
          }
          selectTab(e) {
            this.$tabs.each((t, s) => {
              $(s).toggleClass(this.classes.tabActive, e == t);
            }),
              this.refreshPointer();
          }
          getIsTabVisible(e) {
            return 0 == e.position().top;
          }
          getSelectedTabIndex() {
            let e;
            return (
              this.$tabs.each((t, s) => {
                if ($(s).hasClass(this.classes.tabActive)) return (e = t), !1;
              }),
              e
            );
          }
          updateTabContent(e, t) {
            this.$tabs.eq(e).replaceWith(t), this.refreshTabs();
          }
          getHasMore() {
            return this.$element.hasClass(this.classes.hasMore);
          }
          setLoadingTab(e, t) {
            let s,
              i = this.$tabs.eq(e);
            (s = this.getIsTabVisible(i) ? i : this.$menu),
              s.toggleClass(this.classes.loading, t);
          }
          loadingTab(e, t) {
            return (
              this.setLoadingTab(e, !0),
              (t() || Promise.resolve()).then(() => {
                this.setLoadingTab(e, !1);
              })
            );
          }
        }
        d(h, "targets", ["menu", "menuLabelCount", "pointer"]);
      },
      9967: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(89432),
          o = s(5270);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.d {
          constructor(...e) {
            super(...e),
              n(this, "selectors", {
                step: ".steps__step",
                stepCaseContentScroll: ".steps__step__case__content__scroll",
                stepCaseContentInner: ".steps__step__case__content__inner",
              }),
              n(this, "classes", {
                stepCollapsed: "steps__step--collapsed",
                stepExpanded: "steps__step--expanded",
              }),
              n(this, "doResponsiveContainerResize", (e) => {
                this.withCollapsed && this.refreshCollapsed();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.withCollapsed = !!this.$element.data("collapsed")),
              o.Z.layout.page &&
                o.Z.layout.page.hasResponsiveContainer &&
                o.Z.layout.page.events.on(
                  "responsivecontainerresize",
                  this.doResponsiveContainerResize
                ),
              this.withCollapsed && this.refreshCollapsed();
          }
          unload() {}
          refreshCollapsed() {
            $(this.selectors.step, this.$element).each((e, t) => {
              let s = $(t),
                i = s.find(this.selectors.stepCaseContentScroll),
                o = s.find(this.selectors.stepCaseContentInner),
                n = parseInt(getComputedStyle(i.get(0)).maxHeight, 10),
                r = o.outerHeight();
              s.toggleClass(this.classes.stepCollapsed, r > n);
            });
          }
          doStepCaseExpand(e) {
            $(e.currentTarget)
              .closest(this.selectors.step)
              .addClass(this.classes.stepExpanded);
          }
        }
        n(r, "targets", []);
      },
      11529: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { TableManager: () => b, default: () => I });
        var i = s(89432),
          o = s(69555),
          n = s(96622);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends o.GI {
          constructor(e) {
            super("components.table_resize_popup", { margin: 16 }),
              r(this, "doRangeChange", () => {
                this.updateWidthLabel();
              }),
              (this.initialWidth = e);
          }
          prepare() {
            n.UI.setRange(this.$width, this.initialWidth),
              this.updateWidthLabel();
          }
          updateWidthLabel() {
            let e = n.UI.getRange(this.$width);
            this.$widthLabel.text(`(${e})`);
          }
          load() {
            n.UI.onRangeChange(this.$width, this.doRangeChange),
              n.UI.onRangeInput(this.$width, this.doRangeChange);
          }
          unload() {
            n.UI.offRangeChange(this.$width, this.doRangeChange),
              n.UI.offRangeInput(this.$width, this.doRangeChange);
          }
          doApply() {
            n.UI.loading(this.$applyButton, () => {
              let e = n.UI.getRange(this.$width);
              this.triggerSuccess(e);
            });
          }
        }
        r(a, "targets", ["applyButton", "width", "widthLabel"]),
          r(a, "actions", ["doApply"]);
        var l,
          d,
          h,
          c = s(84320);
        class u {
          static initTableSorting(e) {
            if (e.draggable) return;
            let t = c.Draggable.Plugins;
            c.Draggable.Plugins = {};
            let s = $(this.selectors.tableBody, e.$element).get(0);
            (e.draggable = new c.Sortable(s, {
              draggable: this.selectors.sortableRows,
              handle: this.selectors.sortHandles,
              plugins: [t.Scrollable],
              delay: 0,
              classes: { "source:dragging": "table__row--is-dragging" },
            })),
              e.draggable.on("drag:stop", (t) => {
                setTimeout(() => {
                  e.refreshRows();
                }, 0);
              }),
              e.draggable.on("sortable:stop", (t) => {
                setTimeout(() => {
                  e.events.trigger("sorting", {
                    target: e,
                    $row: $(t.data.dragEvent.data.originalSource),
                    oldIndex: t.data.oldIndex,
                    newIndex: t.data.newIndex,
                  });
                }, 0);
              }),
              (c.Draggable.Plugins = t);
          }
          static releaseTableSorting(e) {
            e.draggable && (e.draggable.destroy(), (e.draggable = null));
          }
        }
        (h = {
          tableBody: "tbody",
          sortableRows: 'tr[data-sortable="true"]',
          sortHandles:
            "td.table__field__action--moveable [data-action],\n            td.table__field__avatar-text--moveable .avatar",
        }),
          (d = "selectors") in (l = u)
            ? Object.defineProperty(l, d, {
                value: h,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (l[d] = h);
        var g = s(47914),
          p = s(11802),
          m = s(58771),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b {
          constructor() {
            C(this, "doTableSelectionChange", (e) => {
              this.refreshSelection(e.target);
            }),
              (this.tables = []),
              (this.events = new m.U());
          }
          add(e) {
            (e.manager = this),
              e.events.on("selectionchange", this.doTableSelectionChange),
              this.tables.push(e),
              this.refreshSelection();
          }
          remove(e) {
            e.events.off("selectionchange", this.doTableSelectionChange),
              (e.manager = null);
            let t = this.tables.indexOf(e);
            -1 != t && this.tables.splice(t, 1), this.refreshSelection();
          }
          getSelectedRows() {
            let e = $();
            for (let t of this.tables) e = e.add(t.getSelectedRows());
            return e;
          }
          getSelectedIds() {
            return this.tables.flatMap((e) => e.getSelectedIds());
          }
          getSelectedCount() {
            return this.tables.reduce((e, t) => e + t.getSelectedCount(), 0);
          }
          refreshSelection(e) {
            let t = this.getSelectedCount();
            for (let s of this.tables) s != e && s.refreshSelection(!0, t);
            this.events.trigger("selectionchange", { target: this });
          }
        }
        class I extends i.d {
          constructor(...e) {
            super(...e),
              C(this, "selectors", {
                cols: "colgroup col",
                headers: "th",
                fieldContentNoClick:
                  "a[data-action], a[href], label,\n            .table__field__menu__select, [data-action], .ui.checkbox,\n            .table__field--editing, .table__field__action,\n            .avatar--moveable",
                fieldMenuDisabled: ".table__field__menu--disabled",
                actions: "[data-action]",
                toggles: "[data-toggle]",
                checkboxes: "[data-checkbox]",
                checkboxControl: ".checkbox",
                fieldTextSelect: ".table__field--select",
                fieldSelect: ".table__field__select",
                fieldSelectCheckbox: ".table__field__select .checkbox",
                fieldEditing: ".table__field--editing",
                fieldEditingText: ".table__field--editing--text",
                headerSelectCheckbox: ".table__header__select .checkbox",
                headerSortable: ".table__header--sortable",
                headerSelectable: ".table__header--selectable",
                headerClickable: ".table__header--clickable",
                headerColumn: ".table__header__column",
                headerContent: ".table__header__content",
                menuLabel: ".table__field__menu__label",
                tableBody: "tbody",
                input: "input",
                button: "button",
                buttonDeny: "button.deny",
                buttonConfirm: "button.confirm",
                rowNotHeader: "tr:not('.table__header')",
                fieldResponsiveContent: ".table__field__responsive__content",
                fieldResponsiveList: ".table__field__responsive__list",
                fieldResponsiveListItems:
                  ".table__field__responsive__list > ul > li",
                fieldResponsiveListMore:
                  ".table__field__responsive__list__more",
                fieldResponsiveListMoreCount:
                  '.table__field__responsive__list__more [data-placeholder="count"]',
                fieldResponsiveListTotal:
                  ".table__field__responsive__list__total",
                fieldResponsiveListTotalCount:
                  '.table__field__responsive__list__total [data-placeholder="count"]',
                fieldColspanEditing: ".table__field--colspan-editing",
                containerFieldResponsiveListItems: "ul > li",
                visible: ":visible",
                rowEmpty: ".table__row--empty",
                rowActivated: ".table__row--activated",
                rowSelected: ".table__row--selected",
                rowVisible: ":not(table__row--hidden)",
                toolbar: ".table__toolbar",
                dialog: ".dialog",
              }),
              C(this, "classes", {
                hidden: "default-hidden",
                hasSelected: "data-table--has-selected",
                rowHidden: "table__row--hidden",
                rowSelected: "table__row--selected",
                rowActivated: "table__row--activated",
                fieldEditing: "table__field--editing",
                fieldEditingText: "table__field--editing--text",
                fieldResponsiveOverflowing:
                  "table__field__responsive--overflowing",
              }),
              C(this, "templates", {
                emptyContainer:
                  '<div style="display: none; visibility: hidden"></div>',
              }),
              C(this, "doResponsiveContainerResize", (e) => {
                this.resizeResponsiveCols();
              }),
              C(this, "doFieldSelectClick", (e) => {
                let t = $(e.target),
                  s = t.closest(this.selectors.fieldSelectCheckbox);
                s.length > 0 ||
                  ((s = $(this.selectors.checkboxControl, t)),
                  n.UI.toggleCheckboxWithEvents(s));
              }),
              C(this, "doRowSelectChange", (e) => {
                var t = $(e),
                  s = t.closest(this.selectors.fieldSelectCheckbox);
                this.hasMultiSelection && f.Z.keys.isShiftPressed
                  ? this.shiftSelect(t.closest("tr"))
                  : n.UI.getCheckbox(s) &&
                    (this.$lastSelectedRow = t.closest("tr")),
                  this.refreshSelection(),
                  this.events.trigger("selectionchange", { target: this });
              }),
              C(this, "doHeaderSelectChange", (e) => {
                let t = $(this.selectors.fieldSelectCheckbox, this.$rows);
                n.UI.setCheckbox(t, n.UI.getCheckbox(this.$headerCheckbox)),
                  this.refreshSelection(!1),
                  this.events.trigger("selectionchange", { target: this });
              }),
              C(this, "doActionClick", (e) => {
                if (e.which && 2 == e.which) return;
                if (this.disableActionLinksDefault && (e.ctrlKey || e.metaKey))
                  return;
                const t = $(e.currentTarget),
                  s = t.closest("tr"),
                  i = t.closest("td"),
                  n = $(this.selectors.actions, i);
                return i.is(this.selectors.fieldMenuDisabled)
                  ? void 0
                  : (this.events.trigger("actionclick", {
                      target: this,
                      actionName: t.data("action"),
                      $row: s,
                      $field: i,
                      $action: n,
                      id: s.data("id") || null,
                    }),
                    this.disableActionLinksDefault
                      ? (o.GI.windowClickAllPopups(e), !1)
                      : void 0);
              }),
              C(this, "doToggleChange", (e) => {
                this.triggerToggleEvent(e, "togglechange");
              }),
              C(this, "doToggleChecked", (e) => {
                this.triggerToggleEvent(e, "togglechecked");
              }),
              C(this, "doToggleBeforeUnchecked", (e) => {
                if (this.events.has("togglebeforeunchecked"))
                  return this.triggerToggleEvent(e, "togglebeforeunchecked");
              }),
              C(this, "doToggleBeforeChecked", (e) => {
                if (this.events.has("togglebeforechecked"))
                  return this.triggerToggleEvent(e, "togglebeforechecked");
              }),
              C(this, "doTableDataClick", (e) => {
                var t = $(e.currentTarget),
                  s = t.closest("tr");
                if (
                  !(
                    $(e.target).closest(this.selectors.fieldContentNoClick)
                      .length > 0
                  )
                )
                  if (this.hasActivation) this.setActivatedRow(s);
                  else if (this.hasSelection)
                    if (this.hasMultiSelection && f.Z.keys.isShiftPressed)
                      this.shiftSelect(s),
                        this.refreshSelection(),
                        this.events.trigger("selectionchange", {
                          target: this,
                        });
                    else if (
                      f.Z.keys.isControlPressed ||
                      f.Z.keys.isCommandPressed ||
                      t.is(this.selectors.fieldTextSelect)
                    ) {
                      let e = $(this.selectors.fieldSelectCheckbox, s);
                      n.UI.getCheckbox(e)
                        ? n.UI.setCheckbox(e, !1)
                        : (n.UI.setCheckbox(e, !0),
                          (this.$lastSelectedRow = s)),
                        this.refreshSelection(),
                        this.events.trigger("selectionchange", {
                          target: this,
                        });
                    }
              }),
              C(this, "doPaginationPreviousPage", (e) => {
                this.previousPage();
              }),
              C(this, "doPaginationNextPage", (e) => {
                this.nextPage();
              }),
              C(this, "doPaginationSelectPage", (e) => {
                if (
                  (this.events.trigger("selectpage", {
                    target: this,
                    page: e.page,
                  }),
                  this.events.has("statechange"))
                ) {
                  let t = this.getState();
                  (t.paginationCurrent = e.page),
                    this.triggerStateChange(t, "paginationmenu");
                }
              }),
              C(this, "doPaginationSelectRows", (e) => {
                if (
                  (this.events.trigger("selectrows", {
                    target: this,
                    rows: e.rows,
                  }),
                  this.events.has("statechange"))
                ) {
                  let t = this.getState();
                  (t.paginationRows = e.rows),
                    (t.paginationCurrent = 1),
                    this.triggerStateChange(t, "paginationmenu");
                }
              }),
              C(this, "doPaginationLastPage", (e) => {
                if (
                  (this.events.trigger("lastpage", { target: this }),
                  this.events.has("statechange"))
                ) {
                  let e = this.getState();
                  (e.paginationCurrent = this.paginationTotal),
                    this.triggerStateChange(e, "paginationmenu");
                }
              }),
              C(this, "doPaginationFirstPage", (e) => {
                if (
                  (this.events.trigger("firstpage", { target: this }),
                  this.events.has("statechange"))
                ) {
                  let e = this.getState();
                  (e.paginationCurrent = 1),
                    this.triggerStateChange(e, "paginationmenu");
                }
              }),
              C(this, "doHeaderClick", (e) => {
                $(e.target)
                  .closest(this.selectors.headerClickable)
                  .is(this.selectors.headerSelectable) &&
                  this.headerSelectableClick(e);
              }),
              C(this, "doAppStartInlineEditing", (e) => {
                e.target != this && this.stopEditingFields();
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.manager = null),
              (this.$table = $(this.tableTarget)),
              (this.hasHeader = this.hasHeaderTarget),
              this.hasHeader &&
                ((this.$header = $(this.headerTarget)),
                (this.$headers = $(this.selectors.headers, this.element))),
              this.refreshRows(),
              (this.$cols = $(this.selectors.cols, this.element)),
              (this.responsiveCols = []),
              (this.responsiveContentCols = []),
              this.$cols.each((e, t) => {
                let s = $(t),
                  i = s.data("responsive"),
                  o = s.data("responsiveContent") || !1;
                if (i) {
                  let e = i.split("|");
                  e.length > 0 &&
                    this.responsiveCols.push({
                      $element: s,
                      name: s.data("column"),
                      responsiveContent: o,
                      responsive: e,
                      index: s.index(),
                      width: s.data("width"),
                    });
                }
                o &&
                  this.responsiveContentCols.push({
                    $element: s,
                    name: s.data("column"),
                    index: s.index(),
                  });
              }),
              (this.hasMinWidth = this.$element.data("minWidth")),
              this.refreshMinWidth(),
              (this.$dialog = this.$element.closest(this.selectors.dialog)),
              (this.isInDialog = this.$dialog.length > 0),
              this.isInDialog
                ? this.resizeResponsiveCols(null, !0)
                : f.Z.layout.page &&
                  f.Z.layout.page.hasResponsiveContainer &&
                  (f.Z.layout.page.events.on(
                    "responsivecontainerresize",
                    this.doResponsiveContainerResize
                  ),
                  this.resizeResponsiveCols(null, !0)),
              this.hasHeader &&
                (this.$headerCheckbox = $(
                  this.selectors.headerSelectCheckbox,
                  this.$header
                )),
              (this.hasSelection = this.$element.data("selection")),
              (this.hasMultiSelection = this.$element.data("multi-selection")),
              this.hasSelection && this.refreshSelection(),
              (this.disableActionLinksDefault = this.$element.data(
                "disableActionLinksDefault"
              )),
              f.Z.componentConnected(this, this.element, this.name);
          }
          disconnect() {
            !this.isInDialog &&
              f.Z.layout.page &&
              f.Z.layout.page.hasResponsiveContainer &&
              f.Z.layout.page.events.off(
                "responsivecontainerresize",
                this.doResponsiveContainerResize
              ),
              super.disconnect();
          }
          load() {
            n.UI.initialize(this.element),
              (this.$lastSelectedRow = null),
              this.hasHeader &&
                $(this.selectors.headerClickable, this.$headers).on(
                  "click",
                  this.doHeaderClick
                ),
              (this.$tableBody = $(this.selectors.tableBody, this.$element)),
              (this.hasActivation = this.$element.data("activation")),
              (this.hasPagination = this.$element.data("pagination")),
              (this.hasSorting = this.$element.data("sorting")),
              (this.paginationCurrent =
                this.$element.data("pagination-current")),
              (this.paginationTotal = this.$element.data("pagination-total")),
              (this.paginationRows = this.$element.data("pagination-rows")),
              this.initRowEvents(this.$rows),
              this.hasSelection &&
                this.hasHeader &&
                n.UI.onCheckboxChange(
                  this.$headerCheckbox,
                  this.doHeaderSelectChange
                ),
              this.hasSorting && u.initTableSorting(this),
              f.Z.events.on("startinlineediting", this.doAppStartInlineEditing),
              f.Z.requestChild(this.component, "pagination", {
                events: {
                  previouspage: this.doPaginationPreviousPage,
                  nextpage: this.doPaginationNextPage,
                  selectpage: this.doPaginationSelectPage,
                  selectrows: this.doPaginationSelectRows,
                  lastpage: this.doPaginationLastPage,
                  firstpage: this.doPaginationFirstPage,
                },
              });
          }
          unload() {
            this.hasHeader &&
              $(this.selectors.headerClickable, this.$headers).off(
                "click",
                this.doHeaderClick
              ),
              this.uninitRowEvents(this.$rows),
              this.hasSelection &&
                this.hasHeader &&
                n.UI.offCheckboxChange(
                  this.$headerCheckbox,
                  this.doHeaderSelectChange
                ),
              this.hasSorting && u.releaseTableSorting(this),
              f.Z.events.off(
                "startinlineediting",
                this.doAppStartInlineEditing
              );
          }
          refreshMinWidth() {
            if (this.hasMinWidth) {
              let e = 0;
              this.$cols.each((t, s) => {
                let i = $(s),
                  o = i.data("width") || i.css("width");
                if ("auto" == o) {
                  let t = i.data("minWidth") || "150px";
                  e += parseInt(t, 10);
                } else e += parseInt(o, 10);
              }),
                this.$element.css({ minWidth: `${e}px` });
            }
          }
          initRowEvents(e) {
            let t = $("td", e),
              s = $(this.selectors.actions, e),
              i = $(this.selectors.toggles, e),
              o = $(this.selectors.fieldSelectCheckbox, e),
              r = $(this.selectors.fieldSelect, e);
            s.on("click", this.doActionClick),
              n.UI.onCheckboxChange(i, this.doToggleChange),
              n.UI.onCheckboxChecked(i, this.doToggleChecked),
              n.UI.onCheckboxBeforeUnchecked(i, this.doToggleBeforeUnchecked),
              n.UI.onCheckboxBeforeChecked(i, this.doToggleBeforeChecked),
              (this.hasSelection || this.hasActivation) &&
                t.on("click", this.doTableDataClick),
              this.hasSelection &&
                (n.UI.onCheckboxChange(o, this.doRowSelectChange),
                r.on("click", this.doFieldSelectClick));
          }
          uninitRowEvents(e) {
            let t = $("td", e),
              s = $(this.selectors.actions, e),
              i = $(this.selectors.toggles, e),
              o = $(this.selectors.fieldSelectCheckbox, e),
              r = $(this.selectors.fieldSelect, e);
            s.off("click", this.doActionClick),
              n.UI.offCheckboxChange(i, this.doToggleChange),
              n.UI.offCheckboxChecked(i, this.doToggleChecked),
              n.UI.offCheckboxBeforeUnchecked(i, this.doToggleBeforeUnchecked),
              n.UI.offCheckboxBeforeChecked(i, this.doToggleBeforeChecked),
              (this.hasSelection || this.hasActivation) &&
                t.off("click", this.doTableDataClick),
              this.hasSelection &&
                (n.UI.offCheckboxChange(o, this.doRowSelectChange),
                r.off("click", this.doFieldSelectClick));
          }
          addRows(e) {
            (e = e.filter("tr")),
              this.initRowEvents(e),
              (this.$rows = this.$rows.add(e));
          }
          removeRows(e) {
            this.uninitRowEvents(e), (this.$rows = this.$rows.not(e));
          }
          insertRows(e, t = !1) {
            t
              ? this.$tableBody.append(e)
              : this.hasHeader
              ? this.$header.after(e)
              : this.$tableBody.prepend(e),
              this.addRows(e);
          }
          getRows() {
            return this.$rows;
          }
          getVisibleRows() {
            return this.getRows().filter(this.selectors.visible);
          }
          getVisibleRowCount() {
            return this.getVisibleRows().length;
          }
          getIsRowHidden(e) {
            return e.hasClass(this.classes.rowHidden);
          }
          getRowById(e) {
            return $(`tr[data-id="${e}"]`, this.$table);
          }
          getRowIdByElement(e) {
            return $(e).closest("tr").data("id");
          }
          getRowCount() {
            return this.$rows.length;
          }
          refreshRows() {
            this.hasHeader
              ? (this.$rows = $("tr", this.$table)
                  .not(this.$header)
                  .not(this.selectors.rowEmpty))
              : (this.$rows = $("tr", this.$table).not(
                  this.selectors.rowEmpty
                ));
          }
          resizeResponsiveCols(e = null, t = !1) {
            if (0 == this.responsiveCols.length) return;
            e ||
              (e = this.isInDialog
                ? this.$dialog.outerWidth()
                : f.Z.layout.page.getResponsiveContainerWidth(this.element));
            let s = g.X.TableBreakpoints,
              i = s.length;
            for (let t = 0; t < s.length; t++)
              if (e < s[t]) {
                i = t;
                break;
              }
            for (let e of this.responsiveCols) {
              let s;
              if (
                ((s =
                  e.responsive.length <= i
                    ? e.responsive[e.responsive.length - 1]
                    : e.responsive[i]),
                (t || e.width != s) &&
                  (0 == e.width &&
                    (e.$element.show(),
                    $(`td:nth-child(${e.index + 1})`, this.$rows).show(),
                    this.hasHeader &&
                      $(`th:nth-child(${e.index + 1})`, this.$header).show()),
                  0 == s
                    ? (e.$element.hide(),
                      $(`td:nth-child(${e.index + 1})`, this.$rows).hide(),
                      this.hasHeader &&
                        $(`th:nth-child(${e.index + 1})`, this.$header).hide())
                    : e.$element.css("width", s),
                  (e.width = s),
                  0 != s && e.responsiveContent))
              ) {
                let t = $(`td:nth-child(${e.index + 1})`, this.$rows);
                if (t.length > 0) {
                  let s = t.first().width();
                  this.events.trigger("resizecontent", {
                    target: this,
                    name: e.name,
                    $fields: t,
                    width: s,
                  });
                }
              }
            }
          }
          setActivatedRow(e = null) {
            this.markActivatedRow(e),
              this.events.trigger("activatedchange", {
                target: this,
                $row: e,
                id: (e && e.data("id")) || null,
              });
          }
          getActivatedRow() {
            return this.$rows.filter(this.selectors.rowActivated).first();
          }
          clearActivatedRow() {
            this.$rows.removeClass(this.classes.rowActivated);
          }
          markActivatedRow(e) {
            e
              ? (this.$rows.not(e).removeClass(this.classes.rowActivated),
                e.addClass(this.classes.rowActivated))
              : this.$rows.removeClass(this.classes.rowActivated);
          }
          markSelectedRows(e) {
            this.$rows.not(e).removeClass(this.classes.rowSelected),
              e.addClass(this.classes.rowSelected);
          }
          markHeaderSelection(e) {
            e.length == this.$rows.length && this.$rows.length > 0
              ? n.UI.setCheckbox(this.$headerCheckbox, !0)
              : e.length > 0
              ? n.UI.setCheckboxIndeterminate(this.$headerCheckbox)
              : n.UI.setCheckbox(this.$headerCheckbox, !1);
          }
          refreshSelection(e = !0, t = null) {
            let s = this.getSelectionCheckedRows();
            this.hasHeader && e && this.markHeaderSelection(s),
              this.markSelectedRows(s);
            let i = t;
            null === i &&
              (i = this.manager ? this.manager.getSelectedCount() : s.length),
              this.$element.toggleClass(this.classes.hasSelected, i > 0);
          }
          shiftSelect(e) {
            if (
              this.$lastSelectedRow &&
              n.UI.getCheckbox(
                $(this.selectors.fieldSelectCheckbox, this.$lastSelectedRow)
              )
            ) {
              let i = this.$lastSelectedRow.index(),
                o = e.index();
              var t = $();
              i > o
                ? (t = this.$lastSelectedRow.prevUntil(e))
                : i < o && (t = this.$lastSelectedRow.nextUntil(e));
              var s = t.add(e).add(this.$lastSelectedRow);
              n.UI.setCheckbox($(this.selectors.fieldSelectCheckbox, s), !0),
                n.UI.setCheckbox(
                  $(this.selectors.fieldSelectCheckbox, this.$rows.not(s)),
                  !1
                );
            } else
              n.UI.setCheckbox($(this.selectors.fieldSelectCheckbox, e), !0),
                (this.$lastSelectedRow = e);
          }
          triggerToggleEvent(e, t) {
            const s = e.closest("tr"),
              i = e.closest("td");
            return this.events
              .trigger(t, {
                target: this,
                $toggle: e,
                toggleName: e.data("toggle"),
                $row: s,
                $field: i,
                id: s.data("id") || null,
              })
              .reduce((e, t) => e && !1 !== t, !0);
          }
          triggerStateChange(e, t, s = null) {
            return Promise.all(
              this.events.trigger("statechange", {
                target: this,
                state: e,
                loading: t,
                column: s,
              })
            );
          }
          nextPage() {
            if (
              (this.events.trigger("nextpage", { target: this }),
              this.events.has("statechange"))
            ) {
              let e = this.getState();
              return (
                e.paginationCurrent++, this.triggerStateChange(e, "nextpage")
              );
            }
          }
          previousPage() {
            if (
              (this.events.trigger("previouspage", { target: this }),
              this.events.has("statechange"))
            ) {
              let e = this.getState();
              return (
                e.paginationCurrent--,
                this.triggerStateChange(e, "previouspage")
              );
            }
          }
          doSelectColumns() {
            this.events.trigger("selectcolumns", {
              target: this,
              $button: $(this.selectColumnsButtonTarget),
            });
          }
          doColumnHeaderSortClick(e) {
            let t = $(e.target).closest("th").data("column");
            if (
              (this.events.trigger("sortableclick", {
                target: this,
                column: t,
              }),
              this.events.has("statechange"))
            ) {
              let e = this.getState();
              e.sortColumn == t
                ? e.sortDirection
                  ? "asc" == e.sortDirection
                    ? (e.sortDirection = "desc")
                    : (delete e.sortColumn, delete e.sortDirection)
                  : (e.sortDirection = "asc")
                : ((e.sortColumn = t), (e.sortDirection = "asc")),
                this.hasPagination && (e.paginationCurrent = 1),
                this.triggerStateChange(e, "column", t);
            }
          }
          headerSelectableClick(e) {
            let t = n.UI.getCheckbox(this.$headerCheckbox);
            n.UI.setCheckboxWithEvents(this.$headerCheckbox, !t);
          }
          getSelectionCheckedRows() {
            let e = $(this.selectors.fieldSelectCheckbox, this.$rows);
            return $("input:checked", e).closest("tr");
          }
          getSelectedRows() {
            return this.$rows.filter(this.selectors.rowSelected);
          }
          getSelectedCount() {
            return this.getSelectedRows().length;
          }
          getUnselectedRows() {
            let e = $(this.selectors.fieldSelectCheckbox, this.$rows);
            return $("input:not(:checked)", e).closest("tr");
          }
          getSelectedIds() {
            return this.getRowIds(this.getSelectedRows());
          }
          getAllIds() {
            return this.getRowIds(this.getRows());
          }
          setSelectedIds(e) {
            this.getRows().each((t, s) => {
              let i = $(s),
                o = i.data("id");
              n.UI.setCheckbox(
                $(this.selectors.fieldSelectCheckbox, i),
                _.includes(e, o)
              );
            }),
              this.refreshSelection();
          }
          getUnselectedIds() {
            return this.getRowIds(this.getUnselectedRows());
          }
          getRowIds(e) {
            let t = [];
            return (
              e.each((e, s) => {
                let i = $(s).data("id");
                i && t.push(i);
              }),
              t
            );
          }
          getPaginationTotal() {
            return this.paginationTotal ? this.paginationTotal : 1;
          }
          getPaginationCurrent() {
            return this.paginationCurrent ? this.paginationCurrent : 1;
          }
          getPaginationRows() {
            return this.paginationRows ? this.paginationRows : null;
          }
          getState() {
            var e = {};
            this.paginationCurrent &&
              (e.paginationCurrent = this.paginationCurrent),
              this.paginationRows && (e.paginationRows = this.paginationRows),
              this.hasSelection && (e.selected = this.getSelectedIds());
            var t = this.$element.data("sort-column"),
              s = this.$element.data("sort-direction");
            return t && s && ((e.sortColumn = t), (e.sortDirection = s)), e;
          }
          setLoading(e, t, s = null) {
            const i = $(s);
            switch (e) {
              case "nextpage":
                this.components.pagination.setLoading("nextpage", t);
                break;
              case "previouspage":
                this.components.pagination.setLoading("previouspage", t);
                break;
              case "paginationmenu":
                this.components.pagination.setLoading("menu", t);
                break;
              case "selectcolumns":
                t
                  ? n.UI.markLoading($(this.selectColumnsButtonTarget))
                  : n.UI.markCompleted($(this.selectColumnsButtonTarget));
                break;
              case "column":
                t
                  ? n.UI.markLoading($(`[data-column="${s}"]`, this.$header))
                  : n.UI.markCompleted($(`[data-column="${s}"]`, this.$header));
                break;
              case "actionfield":
                i.hasClass("table__field__avatar-text")
                  ? t
                    ? (n.UI.markLoading(i.closest("tr")),
                      n.UI.markLoading($(".avatar", i)))
                    : (n.UI.markCompleted($(".avatar", i)),
                      n.UI.markCompleted(i.closest("tr")))
                  : i.hasClass("table__field__action") &&
                    (t
                      ? (n.UI.markLoading(i.closest("tr")), n.UI.markLoading(i))
                      : (n.UI.markCompleted(i.closest("tr")),
                        n.UI.markCompleted(i)));
                break;
              case "field":
                t
                  ? (n.UI.markLoading(i.closest("tr")), n.UI.markLoading(i))
                  : (n.UI.markCompleted(i.closest("tr")),
                    n.UI.markCompleted(i));
            }
          }
          loading(e, t, s) {
            return (
              this.setLoading(e, !0, t),
              (s() || Promise.resolve()).then(() => {
                this.setLoading(e, !1, t);
              })
            );
          }
          setManyLoading(e, t, s, i = null) {
            switch (t) {
              case "actionfield":
                for (let t of e) {
                  let e = $(
                    `tr[data-id="${t}"] [data-action="${i}"]`,
                    this.$table
                  ).parent();
                  s
                    ? (n.UI.markLoading(e.closest("tr")), n.UI.markLoading(e))
                    : (n.UI.markCompleted(e.closest("tr")),
                      n.UI.markCompleted(e));
                }
                break;
              case "avatarfield":
                for (let t of e) {
                  let e = $(
                    `tr[data-id="${t}"] td.table__field__avatar-text`,
                    this.$table
                  );
                  s
                    ? (n.UI.markLoading(e.closest("tr")),
                      n.UI.markLoading($(".avatar", e)))
                    : (n.UI.markCompleted($(".avatar", e)),
                      n.UI.markCompleted(e.closest("tr")));
                }
            }
          }
          loadingMany(e, t, s, i) {
            return (
              this.setManyLoading(e, t, !0, s),
              (i() || Promise.resolve()).then(() => {
                this.setManyLoading(e, t, !1, s);
              })
            );
          }
          toggleActionVisible(e, t, s) {
            let i = $(`[data-action="${t}"]`, e);
            s
              ? i.removeClass(this.classes.hidden)
              : i.addClass(this.classes.hidden);
          }
          setMenuLabel(e, t, s) {
            let i = $(`tr[data-id="${e}"] td[data-column="${t}"]`, this.$table);
            $(this.selectors.menuLabel, i).text(s);
          }
          getToggles(e, t) {
            return t
              ? $(`.checked[data-toggle="${e}"]`, this.$rows)
              : $(`:not(.checked)[data-toggle="${e}"]`, this.$rows);
          }
          getToggleCheckbox(e, t) {
            return $(`tr[data-id="${e}"] [data-toggle="${t}"]`, this.$table);
          }
          getToggleForRow(e, t) {
            return $(`[data-toggle="${t}"]`, e);
          }
          getTarget(e, t) {
            return $(`tr[data-id="${e}"] [data-target="${t}"]`, this.$table);
          }
          getField(e, t) {
            return $(`tr[data-id="${e}"] [data-field="${t}"]`, this.$table);
          }
          getActionField(e, t) {
            return $(`tr[data-id="${e}"] [data-action="${t}"]`, this.$table)
              .first()
              .closest("td");
          }
          getManyToggleCheckboxes(e, t) {
            let s = null;
            for (let i of e) {
              let e = this.getToggleCheckbox(i, t);
              s = s ? s.add(e) : e;
            }
            return s;
          }
          getCheckboxes(e, t) {
            return t
              ? $(`.checked[data-checkbox="${e}"]`, this.$rows)
              : $(`:not(.checked)[data-checkbox="${e}"]`, this.$rows);
          }
          getParams() {
            return this.$element.data("params");
          }
          stopEditingFields() {
            $(this.selectors.fieldEditing, this.$table).each((e, t) => {
              this.stopEditingField($(t));
            });
          }
          stopEditingField(e) {
            e.is(this.selectors.fieldEditingText) &&
              ($(this.selectors.input, e).off("keydown"),
              $(this.selectors.button, e).off("click"),
              e.removeClass(this.classes.fieldEditingText),
              e.is(this.selectors.fieldColspanEditing) &&
                e.attr({ colspan: 0 })),
              e.removeClass(this.classes.fieldEditing);
          }
          setTextFieldContent(e, t, s) {
            $(`[data-field="${t}"]`, e).text(s);
          }
          startEditingTextField(e, t, s, i) {
            let o = $(`tr[data-id="${e}"] [data-field="${t}"]`, this.$table);
            if (o.is(this.selectors.fieldEditing)) return;
            this.stopEditingFields(),
              f.Z.events.trigger("startinlineediting", { target: this });
            let r = $(this.selectors.input, o),
              a = $(this.selectors.buttonDeny, o),
              l = $(this.selectors.buttonConfirm, o);
            n.UI.setText(r, s),
              o.addClass(this.classes.fieldEditing),
              o.addClass(this.classes.fieldEditingText),
              o.is(this.selectors.fieldColspanEditing) &&
                o.attr({ colspan: o.siblings().length + 1 }),
              n.UI.focusText(r);
            const d = (e) => {
                if ((e && e.stopPropagation(), !i))
                  return void this.stopEditingField(o);
                let t = n.UI.getText(r);
                0 != t.trim().length &&
                  (
                    i({ target: this, value: t, $button: l }) ||
                    Promise.resolve(!0)
                  ).then((e) => {
                    e && this.stopEditingField(o);
                  });
              },
              h = (e) => {
                e && e.stopPropagation(), this.stopEditingField(o);
              };
            l.on("click", d),
              a.on("click", h),
              r.on("keydown", (e) => {
                switch (e.which) {
                  case p.N.Enter:
                    d();
                    break;
                  case p.N.ESC:
                    h();
                }
              });
          }
          getPreviousRow(e) {
            return e.prev(this.selectors.rowNotHeader);
          }
          getNextRow(e) {
            return e.next(this.selectors.rowNotHeader);
          }
          getResponsiveContentColumns() {
            let e = [];
            for (let t of this.responsiveContentCols) {
              let s = $(`td:nth-child(${t.index + 1})`, this.$rows);
              if (s.length > 0) {
                let i = s.first().width();
                e.push({ name: t.name, $fields: s, width: i });
              }
            }
            return e;
          }
          refreshSize(e, t = !1) {
            this.resizeResponsiveCols(e, t);
          }
          toggleEmptyRow(e) {
            $(this.selectors.rowEmpty, this.$element).toggle(e);
          }
          isRowSelected(e) {
            return e.is(this.selectors.rowSelected);
          }
          replaceRow(e, t) {
            let s = this.getRowById(e);
            0 != s.length &&
              (this.removeRows(s),
              s.after(t),
              s.remove(),
              this.addRows(t),
              this.refreshRowSizesAndResponsiveContent(t));
          }
          hideRows(e) {
            e.addClass(this.classes.rowHidden);
          }
          showRows(e) {
            e.removeClass(this.classes.rowHidden);
          }
          doColumnHeaderResizeClick(e) {
            let t = $(e.currentTarget).closest(this.selectors.headerColumn),
              s = t.find(this.selectors.headerContent);
            if (n.UI.popupVisible(s)) return;
            const i = new a(t.outerWidth());
            (i.onSuccess = (e) =>
              Promise.all(
                this.events.trigger("columnresize", {
                  target: this,
                  name: t.data("column"),
                  width: e,
                })
              )),
              i.show(s, o.Fz.BottomLeft);
          }
          refreshRowSizesAndResponsiveContent(e) {
            for (let t of this.responsiveCols)
              0 == t.width
                ? $(`td:nth-child(${t.index + 1})`, e).hide()
                : $(`td:nth-child(${t.index + 1})`, e).show();
            for (let t of this.responsiveContentCols) {
              let s = $(`td:nth-child(${t.index + 1})`, e);
              if (s.length > 0) {
                let e = s.first().width();
                this.events.trigger("resizecontent", {
                  target: this,
                  name: t.name,
                  $fields: s,
                  width: e,
                });
              }
            }
          }
          resizeNonResponsiveColumn(e, t) {
            let s = this.$cols.filter(`[data-column="${e}"]`);
            s.data("width", t), s.css("width", t), this.refreshMinWidth();
            let i = _.find(this.responsiveContentCols, ["name", e]);
            if (i) {
              let e = $(`td:nth-child(${i.index + 1})`, this.$rows);
              e.length > 0 &&
                this.events.trigger("resizecontent", {
                  target: this,
                  name: i.name,
                  $fields: e,
                  width: t,
                });
            }
          }
          moveRowAfterLastVisible(e) {
            let t = this.getVisibleRows();
            t.length > 0 && (t.last().after(e), this.refreshRows());
          }
          getToolbarElement() {
            return $(this.selectors.toolbar, this.$element);
          }
        }
        C(I, "targets", ["table", "header", "selectColumnsButton"]);
      },
      18746: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => c });
        var i = s(89432),
          o = s(96622),
          n = s(11802),
          r = s(43689),
          a = s(7042),
          l = s(48995),
          d = s(69555);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.d {
          constructor(...e) {
            super(...e),
              h(this, "classes", {
                active: "timer-input--active",
                disabled: "timer-input--disabled",
                iconActionDisabled: "icon-action--disabled",
              }),
              h(this, "doInputKeyDown", (e) => {
                e.which == n.N.Enter &&
                  (e.stopPropagation(),
                  this.events.trigger("enterkey", { target: this }));
              }),
              h(this, "doActionIconMouseDown", (e) => {
                e.preventDefault();
              }),
              h(this, "doInterval", () => {
                this.getEnabled() &&
                  (this.seconds++,
                  this.updateTimerInput(),
                  this.events.trigger("timer", { target: this }));
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.started = !1),
              (this.startTime = null),
              (this.enabled = !this.$element.hasClass(this.classes.disabled)),
              (this.timer = null),
              (this.previousSeconds = 0);
          }
          load() {
            (this.$input = $(this.inputTarget)),
              (this.$startIcon = $(this.startIconTarget)),
              (this.$pauseIcon = $(this.pauseIconTarget)),
              this.$startIcon.on("mousedown", this.doActionIconMouseDown),
              this.$pauseIcon.on("mousedown", this.doActionIconMouseDown),
              this.$input.on("keydown", this.doInputKeyDown);
          }
          unload() {
            this.$startIcon.off("mousedown", this.doActionIconMouseDown),
              this.$pauseIcon.off("mousedown", this.doActionIconMouseDown),
              this.$input.off("keydown", this.doInputKeyDown),
              this.timer && (clearInterval(this.timer), (this.timer = null));
          }
          doStart() {
            this.start();
          }
          doPause() {
            this.pause();
          }
          start() {
            if (this.started) return;
            if (!this.getEnabled()) return;
            let e = o.UI.getText(this.$input) || "0",
              t = Promise.resolve();
            if (this.events.has("convertinput")) {
              let s = this.events.trigger("convertinput", {
                target: this,
                timespan: e,
              });
              t = Promise.all(s);
            }
            o.UI.loading(this.$startIcon, () =>
              t
                .then((e) => {
                  (this.previousSeconds = e && e.length > 0 ? e[0] : 0),
                    (this.startTime = new Date()),
                    (this.started = !0),
                    this.$element.addClass(this.classes.active),
                    o.UI.toggleTextReadonly(this.$input, !0),
                    o.UI.focusText(this.$input),
                    this.updateTimerInput(),
                    (this.timer = setInterval(this.doInterval, 1e3)),
                    this.events.trigger("timer", { target: this });
                })
                .catch((e) => {
                  a.l.handleCustomFormError(e, (e, t) => {
                    new l.u(
                      l.Y.Negative,
                      r.Z.lang("components.timer_input_convert_error_title"),
                      r.Z.htmlEscape(t.join(" ")),
                      { compact: !0 }
                    ).show(this.$startIcon, d.Fz.BottomRight);
                  });
                })
            );
          }
          pause() {
            this.started &&
              this.getEnabled() &&
              (clearInterval(this.timer),
              (this.timer = null),
              (this.started = !1),
              (this.startTime = null),
              (this.previousSeconds = 0),
              this.$element.removeClass(this.classes.active),
              o.UI.toggleTextReadonly(this.$input, !1),
              o.UI.focusText(this.$input),
              this.events.trigger("timer", { target: this }));
          }
          restart() {
            this.started
              ? (o.UI.setText(this.$input, 0),
                (this.started = !0),
                (this.startTime = new Date()),
                (this.previousSeconds = 0),
                clearInterval(this.timer),
                this.updateTimerInput(),
                (this.timer = setInterval(this.doInterval, 1e3)),
                this.events.trigger("timer", { target: this }))
              : this.start();
          }
          updateTimerInput() {
            o.UI.setText(this.$input, r.Z.formatSecondsFormal(this.getTimer()));
          }
          getValue() {
            return o.UI.getText(this.$input);
          }
          getEnabled() {
            return this.enabled;
          }
          getStarted() {
            return this.started;
          }
          getTimer() {
            if (!this.getStarted()) return 0;
            let e = this.previousSeconds;
            return (
              this.startTime &&
                (e += Math.trunc(
                  (Date.now() - this.startTime.getTime()) / 1e3
                )),
              e
            );
          }
          setEnabled(e) {
            (this.enabled = e),
              e
                ? (o.UI.toggleTextEnabled(this.$input, !0),
                  this.$element.removeClass(this.classes.disabled),
                  this.$startIcon.removeClass(this.classes.iconActionDisabled),
                  this.$pauseIcon.removeClass(this.classes.iconActionDisabled),
                  (this.startTime = new Date()))
                : (o.UI.toggleTextEnabled(this.$input, !1),
                  this.$element.addClass(this.classes.disabled),
                  this.$startIcon.addClass(this.classes.iconActionDisabled),
                  this.$pauseIcon.addClass(this.classes.iconActionDisabled),
                  this.getStarted() &&
                    ((this.previousSeconds = this.getTimer()),
                    (this.startTime = null)));
          }
          clear() {
            this.started && this.pause(),
              o.UI.clearText(this.$input),
              (this.seconds = 0);
          }
        }
        h(c, "targets", ["input", "startIcon", "pauseIcon"]);
      },
      56475: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(89432),
          o = s(96622),
          n = s(43689),
          r = s(69555),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.d {
          constructor(...e) {
            super(...e),
              l(this, "selectors", {
                node: ".tree__node",
                nodeEntry: ".tree__node__entry",
                nodeEntryLabel: ".tree__node__entry__label",
                nodeEntryContentSelect: ".tree__node__entry__content--select",
                nodeEntryContentActivate:
                  ".tree__node__entry__content--activate",
                nodeEntrySelectionCheckbox:
                  ".tree__node__entry__selection .ui.checkbox",
                nodeSubs: ".tree__node__subs",
                firstChildNode: "> .tree__node__subs > .tree__node:first-child",
                nodeTitle: ".tree__node__entry__title",
                nodeTitleSecondary: ".tree__node__entry__title .secondary-text",
                anchor: "a",
                nodeExpansion: ".tree__node__entry__expansion",
                nodeActivated: ".tree__node--activated",
                nodeExpandable: ".tree__node--expandable",
                nodeExpanded: ".tree__node--expanded",
                nodeExpandedExpandable:
                  ".tree__node--expanded.tree__node--expandable",
                avatar: ".avatar",
              }),
              l(this, "classes", {
                nodeActivated: "tree__node--activated",
                nodeExpanded: "tree__node--expanded",
                nodeExpandable: "tree__node--expandable",
                nodeShowMenu: "tree__node--show-menu",
                loading: "loading",
                compactTitles: "tree--compact-titles",
              }),
              l(this, "templates", {}),
              l(this, "doNodeSelectChange", (e) => {
                if ("tree" == this.selectionMode) {
                  let t = o.UI.getCheckbox(e),
                    s = e
                      .closest(this.selectors.node)
                      .children(this.selectors.nodeSubs);
                  if (t) {
                    let e = $(this.selectors.nodeEntrySelectionCheckbox, s);
                    o.UI.setCheckbox(e, !0);
                  } else {
                    let e = $(this.selectors.nodeEntrySelectionCheckbox, s);
                    o.UI.setCheckbox(e, !1);
                  }
                } else if ("manual" == this.selectionMode) {
                  let t = o.UI.getCheckbox(e),
                    s = e.closest(this.selectors.node);
                  this.events.trigger("selectionchange", {
                    target: this,
                    checked: t,
                    $node: s,
                    id: s.data("id"),
                  });
                }
              }),
              l(this, "doNodeContentSelectClick", (e) => {
                if (this.hasSelection && "tree" == this.selectionMode) {
                  let t = $(e.currentTarget)
                    .closest(this.selectors.node)
                    .children(this.selectors.nodeEntry)
                    .find(this.selectors.nodeEntrySelectionCheckbox);
                  o.UI.toggleCheckboxWithEvents(t);
                }
              }),
              l(this, "doNodeTitleClick", (e) => {
                let t = $(e.currentTarget).closest(this.selectors.node);
                this.hasActivation && this.setActivatedNode(t),
                  this.events.trigger("nodeclick", {
                    target: this,
                    $node: t,
                    id: t.data("id") || null,
                  });
              }),
              l(this, "doNodeExpansionClick", (e) => {
                let t = $(e.currentTarget).closest(this.selectors.node);
                this.getNodeExpanded(t)
                  ? this.collapseNode(t)
                  : t.data("loaded")
                  ? this.expandNode(t)
                  : this.events.trigger("loadnode", {
                      target: this,
                      $node: t,
                      id: (t && t.data("id")) || null,
                    });
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name),
              (this.hasSelection = this.$element.data("selection")),
              this.hasSelection &&
                (this.selectionMode = this.$element.data("selectionMode")),
              a.Z.componentConnected(this, this.element, this.name);
          }
          load() {
            o.UI.initialize(this.element),
              (this.hasActivation = this.$element.data("activation")),
              this.initNodeEvents(this.getNodes());
          }
          unload() {
            this.uninitNodeEvents(this.getNodes());
          }
          initNodeEvents(e) {
            e.find(this.selectors.node)
              .addBack(this.selectors.node)
              .each((e, t) => {
                let s = $(t).children(this.selectors.nodeEntry),
                  i = s.children(this.selectors.nodeEntryLabel),
                  n = i.children(this.selectors.nodeEntryContentSelect),
                  r = i.children(this.selectors.nodeEntryContentActivate),
                  a = $(this.selectors.nodeTitle, s).find(
                    this.selectors.anchor
                  ),
                  l = $(this.selectors.nodeExpansion, s);
                if (
                  (r.length > 0
                    ? r.on("click", this.doNodeTitleClick)
                    : a.on("click", this.doNodeTitleClick),
                  l.on("click", this.doNodeExpansionClick),
                  n.on("click", this.doNodeContentSelectClick),
                  this.hasSelection)
                ) {
                  let e = s.find(this.selectors.nodeEntrySelectionCheckbox);
                  o.UI.onCheckboxChange(e, this.doNodeSelectChange);
                }
              });
          }
          uninitNodeEvents(e) {
            e.find(this.selectors.node)
              .addBack(this.selectors.node)
              .each((e, t) => {
                let s = $(t).children(this.selectors.nodeEntry),
                  i = s.children(this.selectors.nodeEntryLabel),
                  n = i.children(this.selectors.nodeEntryContentSelect),
                  r = i.children(this.selectors.nodeEntryContentActivate),
                  a = $(this.selectors.nodeTitle, s).find(
                    this.selectors.anchor
                  ),
                  l = $(this.selectors.nodeExpansion, s);
                if (
                  (r.length > 0
                    ? r.off("click", this.doNodeTitleClick)
                    : a.off("click", this.doNodeTitleClick),
                  l.off("click", this.doNodeExpansionClick),
                  n.off("click", this.doNodeContentSelectClick),
                  this.hasSelection)
                ) {
                  let e = s.find(this.selectors.nodeEntrySelectionCheckbox);
                  o.UI.offCheckboxChange(e, this.doNodeSelectChange);
                }
              });
          }
          setActivatedNode(e = null) {
            this.markActivatedNode(e),
              this.events.trigger("activatedchange", {
                target: this,
                $node: e,
                id: (e && e.data("id")) || null,
              });
          }
          markActivatedNode(e) {
            e
              ? (this.getNodes().not(e).removeClass(this.classes.nodeActivated),
                e.addClass(this.classes.nodeActivated))
              : this.getNodes().removeClass(this.classes.nodeActivated);
          }
          clearActivatedNode() {
            this.getNodes().removeClass(this.classes.nodeActivated);
          }
          getActivatedNode() {
            return this.getNodes().filter(this.selectors.nodeActivated).first();
          }
          getActivatedNodeEntry() {
            return this.getActivatedNode().children(this.selectors.nodeEntry);
          }
          getNodeExpanded(e) {
            return e.hasClass(this.classes.nodeExpanded);
          }
          getNodeExpandable(e) {
            return e.hasClass(this.classes.nodeExpandable);
          }
          setNodeExpandable(e, t) {
            return e.toggleClass(this.classes.nodeExpandable, t);
          }
          expandNode(e) {
            e.hasClass(this.classes.nodeExpandable) &&
              e.addClass(this.classes.nodeExpanded);
          }
          collapseNode(e) {
            e.removeClass(this.classes.nodeExpanded);
          }
          getNodes() {
            return $(this.selectors.node, this.$element);
          }
          getNodeCount() {
            return this.getNodes().length;
          }
          nodeLoading(e, t) {
            return (
              this.markLoading(e),
              (t() || Promise.resolve()).then(() => {
                this.markCompleted(e);
              })
            );
          }
          markLoading(e) {
            let t = e.children(this.selectors.nodeEntry);
            $(this.selectors.avatar, t).addClass(this.classes.loading);
          }
          markCompleted(e) {
            let t = e.children(this.selectors.nodeEntry);
            $(this.selectors.avatar, t).removeClass(this.classes.loading);
          }
          addLoadedNodes(e, t) {
            this.addSubNodes(e, t);
            let s = t.length > 0;
            e.toggleClass(this.classes.nodeExpandable, s),
              s || e.removeClass(this.classes.nodeExpanded),
              e.data("loaded", !0);
          }
          addSubNodes(e, t) {
            e
              ? e.children(this.selectors.nodeSubs).append(t)
              : this.$element.append(t),
              this.initNodeEvents(t),
              o.UI.initialize(t);
          }
          insertBefore(e, t) {
            e.before(t), this.initNodeEvents(t), o.UI.initialize(t);
          }
          insertAfter(e, t) {
            e.after(t), this.initNodeEvents(t), o.UI.initialize(t);
          }
          moveBefore(e, t) {
            let s = this.getParentNode(t);
            e.before(t), this.updateNodeExpandable(s);
          }
          moveAfter(e, t) {
            let s = this.getParentNode(t);
            e.after(t), this.updateNodeExpandable(s);
          }
          moveEnd(e, t) {
            let s = this.getParentNode(t);
            e.children(this.selectors.nodeSubs).append(t),
              this.updateNodeExpandable(s);
          }
          removeNode(e) {
            let t = this.getParentNode(e);
            this.uninitNodeEvents(e), e.remove(), this.updateNodeExpandable(t);
          }
          updateNodeExpandable(e) {
            if (!e.data("loaded")) return;
            let t = e.children(this.selectors.nodeSubs).children().length > 0;
            e.toggleClass(this.classes.nodeExpandable, t),
              t || e.removeClass(this.classes.nodeExpanded);
          }
          getParentNode(e) {
            return e.parent().closest(this.selectors.node);
          }
          getPreviousNode(e) {
            let t = e.prev(this.selectors.node);
            if (t.length > 0) {
              let e = t
                .children(this.selectors.nodeSubs)
                .find(this.selectors.node);
              return e.length > 0 ? e.last() : t;
            }
            return this.getParentNode(e);
          }
          getNextSibling(e) {
            return e.prev(this.selectors.node);
          }
          getAndLoadNextNode(e) {
            if (e.is(this.selectors.nodeExpandedExpandable))
              return Promise.resolve(e.find(this.selectors.firstChildNode));
            if (e.hasClass(this.classes.nodeExpandable))
              return e.data("loaded")
                ? (this.expandNode(e),
                  Promise.resolve(e.find(this.selectors.firstChildNode)))
                : Promise.all(
                    this.events.trigger("loadnode", {
                      target: this,
                      $node: e,
                      id: (e && e.data("id")) || null,
                    })
                  ).then(() => {
                    let t = e.find(this.selectors.firstChildNode);
                    return t.length > 0 ? t : e.next(this.selectors.node);
                  });
            let t = e.next(this.selectors.node);
            for (; 0 == t.length && 0 != (e = this.getParentNode(e)).length; )
              t = e.next(this.selectors.node);
            return Promise.resolve(t);
          }
          getLastNode() {
            return this.getNodes().last();
          }
          getFirstNode() {
            return this.getNodes().first();
          }
          getIsLastNode(e) {
            if (e.hasClass(this.classes.nodeExpandable)) return !1;
            for (; e.length > 0; ) {
              if (e.next(this.selectors.node).length > 0) return !1;
              e = this.getParentNode(e);
            }
            return !0;
          }
          getIsFirstNode(e) {
            return 0 == this.getPreviousNode(e).length;
          }
          doShowMenu(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.node),
              i = this.events.trigger("nodemenu", {
                target: this,
                $menuIcon: t,
                $node: s,
                id: s.data("id") || null,
              });
            s.addClass(this.classes.nodeShowMenu),
              Promise.all(i).then(() => {
                s.removeClass(this.classes.nodeShowMenu);
              });
          }
          doContextMenu(e) {
            e.preventDefault(), r.GI.windowClickAllPopups(e);
            let t = $(e.currentTarget).closest(this.selectors.node);
            this.events.trigger("contextmenu", {
              target: this,
              $node: t,
              id: t.data("id") || null,
              mouseEvent: e,
            });
          }
          setNodeLabel(e, t) {
            e.attr("data-name", t),
              e
                .children(this.selectors.nodeEntry)
                .find(this.selectors.nodeTitle)
                .find(this.selectors.anchor)
                .text(t);
          }
          getIsParentNode(e, t) {
            return n.Z.isParentNode(e.get(0), t.get(0));
          }
          getSelectedNodes() {
            return this.getNodes().filter((e, t) => {
              let s = $(t)
                .children(this.selectors.nodeEntry)
                .find(this.selectors.nodeEntrySelectionCheckbox);
              return o.UI.getCheckbox(s);
            });
          }
          getSelectedIds() {
            return this.getSelectedNodes()
              .toArray()
              .map((e) => $(e).data("id"));
          }
          updateNodeSecondaryText(e, t) {
            let s = e.children(this.selectors.nodeEntry);
            $(this.selectors.nodeTitleSecondary, s).text(t);
          }
          setNodeSelected(e) {
            let t = e
              .children(this.selectors.nodeEntry)
              .find(this.selectors.nodeEntrySelectionCheckbox);
            o.UI.setCheckbox(t, !0);
          }
          setNodeUnselected(e) {
            let t = e
              .children(this.selectors.nodeEntry)
              .find(this.selectors.nodeEntrySelectionCheckbox);
            o.UI.setCheckbox(t, !1);
          }
          setNodeIndeterminate(e) {
            let t = e
              .children(this.selectors.nodeEntry)
              .find(this.selectors.nodeEntrySelectionCheckbox);
            o.UI.setCheckboxIndeterminate(t);
          }
          setCompactTitlesVisible(e) {
            this.$element.toggleClass(this.classes.compactTitles, e);
          }
        }
        l(d, "targets", []);
      },
      14826: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(43689),
          n = s(96622),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.v {
          constructor(...e) {
            super(...e),
              a(this, "templates", { logEntry: "<li>$(entry)</li>" }),
              a(this, "doFullSuccessColumnChartSelectionChange", (e) => {
                e.hasSelection
                  ? this.addFullSuccessColumnLog(
                      `Selection change: selected value ${e.value}`
                    )
                  : this.addFullSuccessColumnLog(
                      "Selection change: no selection"
                    );
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$fullSuccessColumnLog = $(this.fullSuccessColumnLogTarget)),
              r.Z.requestChild(this.component, "fullSuccessColumnChart", {
                events: {
                  selectionchange: this.doFullSuccessColumnChartSelectionChange,
                },
              });
          }
          addFullSuccessColumnLog(e) {
            this.$fullSuccessColumnLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
        }
        a(l, "targets", ["fullSuccessColumnLog"]);
      },
      10037: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(26454),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(69555),
          l = s(16087),
          d = s(24850),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.v {
          constructor(...e) {
            super(...e),
              c(this, "templates", { logEntry: "<li>$(entry)</li>" }),
              c(this, "doFilterScrollBoxScroll", (e) => {
                n.UI.dropdownHideInContext(this.$scrollBox);
              }),
              c(this, "doDynamicTabChange", (e) => {
                e.isDynamic &&
                  (e.target.setLoading(!0),
                  r.N.post("dev/components/delay")
                    .then(() => {
                      e.target.setLoading(!1),
                        this.$dynamicTab1.hide(),
                        this.$dynamicTab2.hide(),
                        this.$dynamicTab3.hide(),
                        this["$dynamicTab" + (e.index + 1)].show(),
                        e.target.highlightTab(e.index);
                    })
                    .catch((t) => {
                      e.target.setLoading(!1), h.Z.handleError(t);
                    }));
              }),
              c(this, "doCancelSearch", (e) => {
                this.addSearchLog(`${e.target.name}: Cancel search`);
              }),
              c(this, "doSearch", (e) => {
                this.addSearchLog(`${e.target.name}: Search: ${e.term}`);
              }),
              c(this, "doCustomSearchButtonClick", (e) => {
                e.currentTarget.blur(),
                  this.addSearchLog(
                    "searchBarCustomFilter: Custom button click"
                  );
              }),
              c(this, "doInlineFilter", (e) => {
                this.addSearchLog(`${e.target.name}: Filter: ${e.filter.name}`);
                let t = e.target.name;
                this.filterCount[t] || (this.filterCount[t] = 0),
                  this.inlineFilters[e.filter.name] ||
                    (this.inlineFilters[e.filter.name] = !1),
                  this.inlineFilters[e.filter.name]
                    ? (e.target.setInlineFilter(e.filter.name, []),
                      (this.filterCount[t] = 0))
                    : (e.target.setInlineFilter(
                        e.filter.name,
                        "milestones" == e.filter.name
                          ? ["Version 1.1", "Version 1.2", "Version 2.0"]
                          : ["usability", "smoke"]
                      ),
                      (this.filterCount[t] = 1)),
                  (this.inlineFilters[e.filter.name] =
                    !this.inlineFilters[e.filter.name]),
                  e.target.setFilterCount(this.filterCount[t]);
              }),
              c(this, "doCancelInlineFilter", (e) => {
                this.addSearchLog(
                  `${e.target.name}: Cancel filter: ${e.filter.name}`
                );
                let t = e.target.name;
                (this.inlineFilters[e.filter.name] = !1),
                  (this.filterCount[t] = 0),
                  e.target.setInlineFilter(e.filter.name, []),
                  e.target.setFilterCount(this.filterCount[t]);
              }),
              c(this, "doFilterMenuClick", (e) => {
                e.target.hide();
                let t = e.context.searchBar.name;
                switch (
                  (this.filterCount[t] || (this.filterCount[t] = 0),
                  e.actionName)
                ) {
                  case "okay":
                    (this.filterCount[t] += 1),
                      e.context.searchBar.setFilterCount(this.filterCount[t]);
                    break;
                  case "reset":
                    (this.filterCount[t] = 0),
                      e.context.searchBar.setFilterCount(this.filterCount[t]);
                }
              }),
              c(this, "doFilter", (e) => {
                const t = $(e.button);
                if (n.UI.popupVisible(t)) return;
                this.addSearchLog(`${e.target.name}: Filter`);
                const s = [];
                s.push({
                  type: "action",
                  title: "Okay",
                  name: "okay",
                  callback: this.doFilterMenuClick,
                }),
                  s.push({
                    type: "action",
                    title: "Cancel",
                    name: "cancel",
                    callback: this.doFilterMenuClick,
                  }),
                  s.push({ type: "divider" }),
                  s.push({
                    type: "action",
                    title: "Reset",
                    name: "reset",
                    callback: this.doFilterMenuClick,
                  }),
                  new l.x(s, { context: { searchBar: e.target } }).show(
                    e.button,
                    a.Fz.BottomRight
                  );
              }),
              c(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                n.UI.popupVisible(t) ||
                  (this.addSearchLog(`${e.target.name}: Cancel filter`),
                  (this.filterCount[e.target.name] = 0),
                  e.target.setFilterCount(0));
              }),
              c(this, "doSelectTabsChange", (e) => {
                e.target.loadingTab(
                  e.index,
                  () =>
                    new Promise((t, s) => {
                      setTimeout(() => {
                        e.target.selectTab(e.index), t();
                      }, 200);
                    })
                );
              }),
              c(this, "doSearchInputBasicSearch", (e) =>
                r.N.post("dev/components/render_basic_input_search").then(
                  (e) => e.data
                )
              ),
              c(this, "doSearchInputBasicStateChange", (e) =>
                r.N.post("dev/components/render_basic_input_search").then(
                  (e) => e.data
                )
              ),
              c(
                this,
                "doSearchInputBasicSelectItem",
                (e) =>
                  new Promise((e, t) => {
                    setTimeout(() => {
                      e();
                    }, 300);
                  })
              );
          }
          prepare() {
            (this.$dynamicTab1 = $(this.dynamicTab1Target)),
              (this.$dynamicTab2 = $(this.dynamicTab2Target)),
              (this.$dynamicTab3 = $(this.dynamicTab3Target)),
              this.$dynamicTab2.hide(),
              this.$dynamicTab3.hide();
          }
          load() {
            n.UI.initialize(this.element),
              (this.$filterScrollBox = $(this.filterScrollBoxTarget)),
              this.$filterScrollBox.on("scroll", this.doFilterScrollBoxScroll),
              (this.$searchLog = $(this.searchLogTarget)),
              (this.$filterLog = $(this.filterLogTarget)),
              (this.filterCount = { searchBarInlineFilter: 1 }),
              (this.inlineFilters = { milestones: !0, tags: !1 }),
              h.Z.requestChild(this.component, "searchBarBasic", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                },
              }),
              h.Z.requestChild(this.component, "searchBarFilter", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                },
              }),
              h.Z.requestChild(this.component, "searchBarCustomFilter", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                },
              }),
              h.Z.requestChild(this.component, "searchBarInlineFilter", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              h.Z.requestChild(this.component, "searchInputBasic", {
                events: {
                  search: this.doSearchInputBasicSearch,
                  selectitem: this.doSearchInputBasicSelectItem,
                  statechange: this.doSearchInputBasicStateChange,
                },
              }),
              h.Z.requestChild(this.component, "dynamicTabs", {
                events: { tabchange: this.doDynamicTabChange },
              }),
              h.Z.requestChild(this.component, "selectTabs", {
                events: { tabchange: this.doSelectTabsChange },
              }),
              h.Z.requestChild(this.component, "progress");
          }
          unload() {
            this.$filterScrollBox.off("scroll", this.doFilterScrollBoxScroll);
          }
          addSearchLog(e) {
            this.$searchLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doOpenFilter(e) {
            const t = $(e.target);
            if (n.UI.popupVisible(t)) return;
            const s = new d.y();
            (s.onSubmit = (e) => (
              this.$filterLog.prepend(
                o.Z.template(this.templates.logEntry, {
                  entry: JSON.stringify(e),
                })
              ),
              r.N.post("dev/components/validate_filter", e.filter)
            )),
              s.show(
                this.openFilterButtonTarget,
                a.Fz.BottomLeft,
                h.Z.views.get("dev.components.filter_popup")
              );
          }
          doUpdateProgress(e) {
            let t = o.Z.random(1, 100);
            this.components.progress.setProgress(t, 100, `${t}/100`);
          }
        }
        c(u, "targets", [
          "responsiveContainer",
          "searchLog",
          "filterLog",
          "openFilterButton",
          "filterScrollBox",
          "dynamicTab1",
          "dynamicTab2",
          "dynamicTab3",
        ]);
      },
      8443: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => o });
        var i = s(26454);
        const o = class extends i.v {};
      },
      93571: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => N });
        var i,
          o,
          n,
          r = s(26454),
          a = s(13814),
          l = s(43689),
          d = s(96622),
          h = s(24406),
          c = s(50609);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends c.V {
          constructor(e = 1) {
            super("dev.dialogs.stacking_dialog", {
              width: l.Z.random(400, 900),
            }),
              (this.counter = e);
          }
          load() {
            this.$dialog.attr("dusk-counter", this.counter),
              this.$colorBox.css({ "background-color": l.Z.randomColor() }),
              this.$colorBox.css({ height: l.Z.random(100, 300) + "px" });
          }
          doOpen() {
            new g(this.counter + 1).show();
          }
        }
        u(g, "targets", ["colorBox"]), u(g, "actions", ["doOpen"]);
        class p extends c.V {
          constructor() {
            super("dev.dialogs.chained1_dialog", { width: 500 });
          }
          doNext() {
            this.triggerSuccess();
          }
        }
        (n = ["doNext"]),
          (o = "actions") in (i = p)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
        class m extends c.V {
          constructor() {
            super("dev.dialogs.chained2_dialog", { width: 700 });
          }
        }
        class f extends c.V {
          constructor() {
            super("dev.dialogs.resizable_dialog", {
              width: 700,
              height: 500,
              resizable: !0,
            });
          }
          load() {
            $("img", this.$container).one("load", () => this.refreshPosition());
          }
        }
        class C extends c.V {
          constructor() {
            super("dev.dialogs.dynamic_dialog", { width: 700 });
          }
        }
        class b extends c.V {
          constructor() {
            super("dev.dialogs.fixed_dialog", { width: 700 });
          }
          load() {
            $("img", this.$container).one("load", () => this.refreshPosition());
          }
        }
        var I = s(5270);
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class v extends c.V {
          constructor() {
            super("dev.dialogs.delayed_dialog", { width: 700 });
          }
          prepare() {
            return a.N.post("dev/dialogs/delay");
          }
          doSubmit() {
            d.UI.markLoading(this.$submit),
              a.N.post("dev/dialogs/delay")
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  d.UI.markCompleted(this.$submit), I.Z.handleError(e);
                });
          }
        }
        function _(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        w(v, "actions", ["doSubmit"]), w(v, "targets", ["submit"]);
        class S extends c.V {
          constructor() {
            super("dev.dialogs.component_dialog", { width: 800 });
          }
          load() {}
          prepare() {
            return this.getUsers();
          }
          doRefreshUsers() {
            d.UI.markLoading(this.$refreshUsersButton),
              this.getUsers().then(() => {
                d.UI.markCompleted(this.$refreshUsersButton),
                  this.refreshPosition();
              });
          }
          getUsers() {
            return a.N.postReplace(
              "dev/tables/get_users_table",
              this.$usersContainer
            );
          }
        }
        _(S, "actions", ["doRefreshUsers"]),
          _(S, "targets", ["usersContainer", "refreshUsersButton"]);
        var x = s(33908),
          k = s(71258),
          T = s(62612),
          y = s(67811);
        function E(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class N extends r.v {
          constructor(...e) {
            super(...e),
              E(this, "templates", { logEntry: "<li>$(entry)</li>" });
          }
          load() {
            (this.$content = $(this.contentTarget)),
              (this.$openDelayedDialogButton = $(
                this.openDelayedDialogButtonTarget
              )),
              (this.$openDynamicDialogButton = $(
                this.openDynamicDialogButtonTarget
              )),
              (this.$openComponentDialogButton = $(
                this.openComponentDialogButtonTarget
              )),
              (this.$glassLog = $(this.glassLogTarget)),
              (this.glass = null);
          }
          doOpenDynamicDialog() {
            d.UI.markLoading(this.$openDynamicDialogButton),
              a.N.post("dev/dialogs/get_dynamic_dialog")
                .then((e) => {
                  d.UI.markCompleted(this.$openDynamicDialogButton),
                    new C().show(e.data);
                })
                .catch((e) => {
                  d.UI.markCompleted(this.$openDynamicDialogButton),
                    I.Z.handleError(e);
                });
          }
          doOpenStackingDialog() {
            new g().show();
          }
          doOpenChainedDialog() {
            let e = new p();
            (e.onSuccess = () => {
              new m().show();
            }),
              e.show();
          }
          doOpenMessageDialog() {
            new x.n(
              "Message title",
              "This is a test message for the development area of the application.\n            Hopefully everything looks as epxected!"
            ).show();
          }
          doOpenErrorDialog() {
            new k.w({
              title: "Oops, there was a problem",
              message:
                "Uh oh! An unexpected error ocurred while processing this\n                request. You can close this dialog to try again or refresh the\n                entire page to reload the application.",
              details: "GET http://local.test/favicon.ico 404 (Not Found)",
              allowRefresh: !0,
            }).show();
          }
          doOpenResizableDialog() {
            new f().show();
          }
          doOpenComponentDialog() {
            var e = new S();
            d.UI.markLoading(this.$openComponentDialogButton),
              e
                .show()
                .then(() => {
                  d.UI.markCompleted(this.$openComponentDialogButton);
                })
                .catch((e) => {
                  d.UI.markCompleted(this.$openComponentDialogButton),
                    I.Z.handleError(e);
                });
          }
          doOpenFixedDialog() {
            new b().show();
          }
          doOpenDelayedDialog() {
            var e = new v();
            (e.onSuccess = (e) =>
              a.N.post("dev/dialogs/delay").then((e) => {
                new x.n("Success", "Successfully sent the request.").show();
              })),
              d.UI.markLoading(this.$openDelayedDialogButton),
              e
                .show()
                .then(() => {
                  d.UI.markCompleted(this.$openDelayedDialogButton);
                })
                .catch((e) => {
                  d.UI.markCompleted(this.$openDelayedDialogButton),
                    I.Z.handleError(e);
                });
          }
          doOpenDeleteDialog() {
            var e = new T.A(
              "Delete project",
              "Really delete project <strong>Spotlight</strong>?\n                Deleting this project cannot be undone.",
              "Delete project",
              "Yes, permanently delete <strong>Spotlight</strong>"
            );
            (e.onSuccess = (e) => a.N.post("dev/dialogs/delay")), e.show();
          }
          doOpenGlassBlockedDialog() {
            new y.s().show();
          }
          doResetResizableSize() {
            I.Z.storage.removeItem(
              "dialogs.dev.dialogs.resizable_dialog.height"
            ),
              I.Z.storage.removeItem(
                "dialogs.dev.dialogs.resizable_dialog.width"
              );
          }
          doTogglePageContent() {
            this.$content.toggle();
          }
          addGlassLog(e) {
            this.$glassLog.prepend(
              l.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doOpenGlass() {
            this.glass && (this.glass.close(), (this.glass = null)),
              this.addGlassLog("Opening new glass"),
              (this.glass = new h.VH("https://www.testmo.com/")),
              this.glass.events.on("close", () => {
                this.addGlassLog("Glass was closed");
              }),
              this.glass.open(600, 700);
          }
          doOpenModalGlass() {
            this.glass && (this.glass.close(), (this.glass = null)),
              this.addGlassLog("Opening new modal glass"),
              (this.glass = new h.VH("https://www.testmo.com/", { modal: !0 })),
              this.glass.events.on("close", () => {
                this.addGlassLog("Glass was closed");
              }),
              this.glass.open(600, 700);
          }
          doNavigateGlass() {
            this.glass &&
              (this.addGlassLog("Navigating active glass to different URL"),
              this.glass.navigate("https://www.testmo.com/about/"));
          }
        }
        E(N, "targets", [
          "content",
          "openDelayedDialogButton",
          "openDynamicDialogButton",
          "openComponentDialogButton",
          "glassLog",
        ]);
      },
      90885: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i,
          o,
          n,
          r = s(26454),
          a = s(96622),
          l = s(84320);
        class d extends r.v {
          load() {
            a.UI.initialize(this.element);
            let e = l.Draggable.Plugins;
            (l.Draggable.Plugins = {}),
              (this.draggableCards = new l.Sortable(this.draggableCardsTarget, {
                draggable: ".card",
                handle: ".avatar",
                mirror: { constrainDimensions: !0 },
              })),
              (l.Draggable.Plugins = e);
          }
          unload() {
            this.draggableCards.destroy();
          }
        }
        (n = ["draggableCards"]),
          (o = "targets") in (i = d)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      84167: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i,
          o,
          n,
          r = s(26454),
          a = s(96622),
          l = s(5270);
        class d extends r.v {
          prepare() {
            (this.$content = $(this.contentTarget)),
              (this.$editorContainer = $(this.editorContainerTarget)),
              (this.$editButton = $(this.editButtonTarget)),
              (this.$saveButton = $(this.saveButtonTarget)),
              (this.$cancelButton = $(this.cancelButtonTarget)),
              this.updateView(!1);
          }
          load() {
            a.UI.initialize(this.element),
              l.Z.requestChild(this.component, "editor"),
              l.Z.requestChild(this.component, "richText");
          }
          doEdit() {
            this.components.editor.loadEditor().then(() => {
              this.components.editor.setData(
                this.components.richText.getHtmlContent()
              ),
                this.updateView(!0),
                this.components.editor.focus();
            });
          }
          doCancel() {
            this.updateView(!1), this.components.editor.unloadEditor();
          }
          doSave() {
            this.components.richText.setHtmlContent(
              this.components.editor.getData()
            ),
              this.updateView(!1),
              this.components.editor.unloadEditor();
          }
          updateView(e) {
            e
              ? (this.$content.hide(),
                this.$editorContainer.show(),
                this.$editButton.hide(),
                this.$saveButton.show(),
                this.$cancelButton.show())
              : (this.$content.show(),
                this.$editorContainer.hide(),
                this.$editButton.show(),
                this.$saveButton.hide(),
                this.$cancelButton.hide());
          }
        }
        (n = [
          "content",
          "editorContainer",
          "saveButton",
          "cancelButton",
          "editButton",
        ]),
          (o = "targets") in (i = d)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      72548: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => o });
        var i = s(26454);
        const o = class extends i.v {};
      },
      15917: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i,
          o,
          n,
          r = s(26454),
          a = s(13814),
          l = s(5270);
        class d extends r.v {
          load() {}
          doRaiseErrorHandleError() {
            l.Z.handleError(new Error("App handle error"));
          }
          doRaiseErrorUnhandledStimulusError() {
            throw new Error("Exception in Stimulus event");
          }
          doRaiseErrorUnhandledRejectionError() {
            return new Promise((e, t) => {
              throw new Error("Error in promise");
            });
          }
          doRaiseErrorUnhandledRejectionMessage() {
            return new Promise((e, t) => {
              t("Rejection message");
            });
          }
          doRaiseErrorNetworkError403() {
            a.N.post("dev/errors/raise_error_403").catch((e) => {
              l.Z.handleError(e);
            });
          }
          doRaiseErrorNetworkError404() {
            a.N.post("dev/errors/raise_error_404").catch((e) => {
              l.Z.handleError(e);
            });
          }
          doRaiseErrorNetworkError413() {
            a.N.post("dev/errors/raise_error_413");
          }
          doRaiseErrorNetworkError419() {
            a.N.post("dev/errors/raise_error_419");
          }
          doRaiseErrorNetworkError422() {
            a.N.post("dev/errors/raise_error_422");
          }
          doRaiseErrorNetworkError500() {
            a.N.post("dev/errors/raise_error_500");
          }
        }
        (n = []),
          (o = "targets") in (i = d)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      5935: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(26454);
        class o {
          static supportsScreenshots() {
            return (
              "mediaDevices" in navigator &&
              "getDisplayMedia" in navigator.mediaDevices
            );
          }
          static takeScreenshot() {
            if (!this.supportsScreenshots())
              throw new Error(
                "Browser does not support screenshot capabilities."
              );
            return navigator.mediaDevices
              .getDisplayMedia({ audio: !1, video: !0 })
              .then((e) => {
                let t = e.getVideoTracks()[0];
                return new ImageCapture(t)
                  .grabFrame()
                  .then((e) => (t.stop(), e));
              });
          }
          static isNotAllowedError(e) {
            return "name" in e && "NotAllowedError" == e.name;
          }
        }
        var n,
          r,
          a,
          l = s(96622),
          d = s(89701),
          h = s(37914),
          c = s(5270);
        class u extends i.v {
          load() {
            l.UI.initialize(this.element);
          }
          unload() {}
          drawImageToCanvas(e, t) {
            (e.width = getComputedStyle(e).width.split("px")[0]),
              (e.height = getComputedStyle(e).height.split("px")[0]);
            let s = Math.min(e.width / t.width, e.height / t.height),
              i = (e.width - t.width * s) / 2,
              o = (e.height - t.height * s) / 2;
            e.getContext("2d").clearRect(0, 0, e.width, e.height),
              e
                .getContext("2d")
                .drawImage(
                  t,
                  0,
                  0,
                  t.width,
                  t.height,
                  i,
                  o,
                  t.width * s,
                  t.height * s
                );
          }
          doTakeScreenshot() {
            o.supportsScreenshots() &&
              o
                .takeScreenshot()
                .then((e) => {
                  this.drawImageToCanvas(this.canvasTarget, e);
                })
                .catch((e) => {
                  o.isNotAllowedError(e) || c.Z.handleError(e);
                });
          }
          getCsvParse() {
            return s
              .e(262)
              .then(s.bind(s, 86068))
              .then((e) => e.parse);
          }
          readFileAsText(e) {
            return new Promise((t, s) => {
              let i = new FileReader();
              (i.onload = () => {
                t(i.result);
              }),
                (i.onerror = s),
                i.readAsText(e);
            });
          }
          readFileAsArrayBuffer(e) {
            return new Promise((t, s) => {
              let i = new FileReader();
              (i.onload = () => {
                t(i.result);
              }),
                (i.onerror = s),
                i.readAsArrayBuffer(e);
            });
          }
          doParseCsv() {
            this.parseCsvFileInputTarget &&
              0 != this.parseCsvFileInputTarget.files.length &&
              l.UI.loading(
                $(this.parseCsvFileButtonTarget),
                () => (
                  c.Z.blockUI(),
                  this.getCsvParse()
                    .then((e) => {
                      let t = this.parseCsvFileInputTarget.files[0];
                      return this.readFileAsArrayBuffer(t).then((t) => {
                        let s = new d.T(e);
                        console.time("Parsing CSV");
                        let i = s.parseFromBinary(t);
                        console.log(i),
                          console.log(i.length),
                          console.timeEnd("Parsing CSV");
                      });
                    })
                    .catch((e) => {
                      c.Z.handleError(e);
                    })
                    .then(() => {
                      c.Z.unblockUI(),
                        (this.parseCsvFileInputTarget.value = "");
                    })
                )
              );
          }
          doImportCsv() {
            this.importCsvFileInputTarget &&
              0 != this.importCsvFileInputTarget.files.length &&
              l.UI.loading(
                $(this.importCsvFileButtonTarget),
                () => (
                  c.Z.blockUI(),
                  this.getCsvParse()
                    .then((e) => {
                      let t = this.importCsvFileInputTarget.files[0];
                      return this.readFileAsArrayBuffer(t).then((t) => {
                        let s = new h.L0(e);
                        console.time("Importing CSV"),
                          s.loadFromBinary(t, { hasHeader: !0 }),
                          console.log(s.getColumns()),
                          console.log(s.getValues(1, 2)),
                          console.log(s.getRecordsSingle(2)),
                          console.timeEnd("Importing CSV");
                      });
                    })
                    .catch((e) => {
                      c.Z.handleError(e);
                    })
                    .then(() => {
                      c.Z.unblockUI(),
                        (this.importCsvFileInputTarget.value = "");
                    })
                )
              );
          }
        }
        (a = [
          "canvas",
          "parseCsvFileInput",
          "parseCsvFileButton",
          "importCsvFileInput",
          "importCsvFileButton",
        ]),
          (r = "targets") in (n = u)
            ? Object.defineProperty(n, r, {
                value: a,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (n[r] = a);
      },
      4227: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => E });
        var i = s(96622),
          o = s(43689),
          n = s(13814),
          r = s(26454),
          a = s(47914),
          l = s(50609),
          d = s(7042);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends l.V {
          constructor() {
            super("dev.forms.split_form_dialog", {
              onSubmitForm: () => {
                this.doAdd();
              },
              width: a.X.SplitDialogWidth,
            });
          }
          doAdd() {
            d.l.hideValidationErrors(this.formViews),
              i.UI.markLoading(this.$addButton),
              n.N.post("dev/forms/validate_split_form_dialog", {
                name: i.UI.getText(this.$name),
                provider: i.UI.getDropdown(this.$provider),
                address: i.UI.getText(this.$address),
                access_user: i.UI.getText(this.$accessUser),
                access_key: i.UI.getText(this.$accessKey),
                is_active: i.UI.getCheckbox(this.$isActive),
              })
                .then((e) => {
                  this.triggerSuccess(e.data);
                })
                .catch((e) => {
                  i.UI.markCompleted(this.$addButton),
                    d.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
          }
        }
        h(c, "forms", [
          {
            name: "form",
            fields: [
              "name",
              "provider",
              "address",
              "accessUser",
              "accessKey",
              "isActive",
            ],
          },
        ]),
          h(c, "targets", ["addButton"]),
          h(c, "actions", ["doAdd"]);
        var u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends l.V {
          constructor() {
            super("dev.forms.tabbed_form_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: a.X.DialogWidth,
            }),
              g(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              });
          }
          load() {
            u.Z.requestChild(this.component, "tabs", {
              events: { tabchange: this.doTabChanged },
            });
          }
          doSave() {
            d.l.hideValidationErrors(this.formViews),
              i.UI.markLoading(this.$saveButton),
              n.N.post("dev/forms/validate_tabbed_form_dialog", {
                name: i.UI.getText(this.$name),
                system_name: i.UI.getText(this.$systemName),
                color: i.UI.getText(this.$color),
                is_active: i.UI.getCheckbox(this.$isActive),
                is_passed: i.UI.getCheckbox(this.$isPassed),
                is_failed: i.UI.getCheckbox(this.$isFailed),
                is_final: i.UI.getCheckbox(this.$isFinal),
                projects: i.UI.getRadio(this.$projectsAll) ? "all" : "selected",
              })
                .then((e) => {
                  this.triggerSuccess(e.data);
                })
                .catch((e) => {
                  i.UI.markCompleted(this.$saveButton),
                    d.l.handleTabbedFormError(
                      e,
                      this.formViews,
                      this.components.tabs
                    ),
                    this.refreshPositionIfNeeded();
                });
          }
        }
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        g(p, "forms", [
          {
            name: "statusForm",
            fields: [
              "name",
              "systemName",
              "color",
              "isActive",
              "isPassed",
              "isFailed",
              "isFinal",
            ],
          },
          {
            name: "projectForm",
            fields: ["projectsAll", "projectsSelected", "projects"],
          },
        ]),
          g(p, "targets", ["saveButton"]),
          g(p, "actions", ["doSave"]);
        class f extends l.V {
          constructor() {
            super("dev.forms.scroll_form_dialog", {
              onSubmitForm: () => {
                this.doAdd();
              },
              width: a.X.BodyMinWidth,
            }),
              m(this, "doScrollBoxScroll", (e) => {
                i.UI.dropdownHideInContext(this.$scrollBox);
              });
          }
          load() {
            u.Z.requestChild(this.component, "items"),
              this.$scrollBox.on("scroll", this.doScrollBoxScroll);
          }
          unload() {
            this.$scrollBox.off("scroll", this.doScrollBoxScroll);
          }
          doSave() {
            let e = [],
              t = this.components.items.getRows(),
              s = !1;
            t.each((t, o) => {
              let n = $(o),
                r = i.UI.getTarget("item", n);
              if (!r.length) return void (s = !0);
              let a = i.UI.getDropdown(r);
              a && ((a = parseInt(a, 10)), e.push(a));
            }),
              s ||
                (i.UI.markLoading(this.$saveButton),
                d.l.hideValidationErrors(this.formViews),
                n.N.post("dev/forms/validate_scroll_form_dialog", { items: e })
                  .then((e) =>
                    this.triggerSuccess(e.data).then(() => {
                      i.UI.markCompleted(this.$saveButton);
                    })
                  )
                  .catch((e) => {
                    i.UI.markCompleted(this.$saveButton),
                      d.l.handleFormError(e, this.formViews),
                      this.refreshPositionIfNeeded();
                  }));
          }
        }
        m(f, "forms", [{ name: "items", fields: [] }]),
          m(f, "targets", ["saveButton", "scrollBox"]),
          m(f, "actions", ["doSave"]);
        var C = s(33908);
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class I extends l.V {
          constructor() {
            super("dev.forms.basic_dropdown_dialog", { width: 700 });
          }
        }
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        b(I, "targets", []), b(I, "actions", []);
        class v extends l.V {
          constructor() {
            super("dev.forms.split_dropdown_dialog", {
              width: a.X.SplitDialogWidth,
            });
          }
        }
        function S(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        w(v, "targets", []), w(v, "actions", []);
        class x extends l.V {
          constructor() {
            super("dev.forms.resizable_dropdown_dialog", {
              width: 700,
              height: 500,
              minWidth: 400,
              resizable: !0,
            });
          }
        }
        function k(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        S(x, "targets", []), S(x, "actions", []);
        class T extends l.V {
          constructor() {
            super("dev.forms.split_resizable_dropdown_dialog", {
              width: a.X.SplitDialogWidth,
              height: 500,
              resizable: !0,
            });
          }
        }
        function y(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        k(T, "targets", []), k(T, "actions", []);
        class E extends r.v {
          constructor(...e) {
            super(...e),
              y(this, "doActionDropdownActionClick", (e) => {
                if ("random" == e.actionName) {
                  let e = i.UI.getDropdownItems(this.$actionDropdown);
                  i.UI.setDropdown(this.$actionDropdown, _.sample(e).value);
                } else
                  "add" == e.actionName &&
                    new C.n("Add milestone", "Add new milestone.").show();
              }),
              y(this, "doTimerInputConvertInput", (e) => {
                let t = { timespan: e.timespan };
                return n.N.post(
                  "common/parse_timespan",
                  n.N.toNetworkCase(t)
                ).then((e) => Math.trunc(e.data.microseconds / 1e6));
              }),
              y(this, "doServerDropdownGetItems", (e) =>
                n.N.post("dev/forms/render_server_dropdown_items").then(
                  (e) => e.data
                )
              );
          }
          load() {
            i.UI.initialize(this.element),
              (this.$content = $(this.contentTarget)),
              (this.$numberInput = $(this.numberInputTarget)),
              (this.$floatInput = $(this.floatInputTarget)),
              (this.$setValueDropdown = $(this.setValueDropdownTarget)),
              (this.$loadingDropdown = $(this.loadingDropdownTarget)),
              (this.$resizeMultiDropdown = $(this.resizeMultiDropdownTarget)),
              (this.$resizeMultiDropdownContainer = $(
                this.resizeMultiDropdownContainerTarget
              )),
              (this.$actionDropdown = $(this.actionDropdownTarget)),
              u.Z.requestChild(this.component, "serverDropdown", {
                events: { getitems: this.doServerDropdownGetItems },
              }),
              u.Z.requestChild(this.component, "timerInput", {
                events: { convertinput: this.doTimerInputConvertInput },
              }),
              i.UI.onDropdownActionClick(
                this.$actionDropdown,
                this.doActionDropdownActionClick
              );
          }
          unload() {
            i.UI.offDropdownActionClick(
              this.$actionDropdown,
              this.doActionDropdownActionClick
            );
          }
          prepare() {
            u.Z.requestChild(this.component, "rich1", {
              onAdded: (e) => {
                e.loadEditor().then(() => {});
              },
            });
          }
          doOpenSplitFormDialog() {
            new c().show();
          }
          doOpenTabbedFormDialog() {
            new p().show();
          }
          doOpenScrollFormDialog() {
            new f().show();
          }
          doTogglePageContent() {
            this.$content.toggle();
          }
          doLogNumberValue() {
            console.log(
              "Value: ",
              i.UI.getTextIntOrNullOrError(this.$numberInput)
            );
          }
          doLogFloatValue() {
            console.log(
              "Value: ",
              i.UI.getTextFloatOrNullOrError(this.$floatInput)
            );
          }
          doSetDropdownValue(e) {
            let t = $(e.currentTarget);
            i.UI.setDropdown(this.$setValueDropdown, t.data("value"));
          }
          doLoadingDropdownChange(e) {
            $(e.currentTarget).data("loading")
              ? i.UI.markLoading(this.$loadingDropdown)
              : i.UI.markCompleted(this.$loadingDropdown);
          }
          doResizeMultiDropdown(e) {
            this.$resizeMultiDropdownContainer.css({
              width: `${o.Z.random(200, 400)}px`,
            }),
              i.UI.dropdownRefreshSize(this.$resizeMultiDropdown);
          }
          doOpenBasicDropdownDialog() {
            new I().show();
          }
          doOpenSplitDropdownDialog() {
            new v().show();
          }
          doOpenResizableDropdownDialog() {
            new x().show();
          }
          doOpenSplitResizableDropdownDialog() {
            new T().show();
          }
          doShowServerDropdownValue() {
            new C.n(
              "Dropdown value",
              "Value: " + this.components.serverDropdown.getValue()
            ).show();
          }
        }
        y(E, "targets", [
          "content",
          "numberInput",
          "floatInput",
          "setValueDropdown",
          "loadingDropdown",
          "resizeMultiDropdown",
          "resizeMultiDropdownContainer",
          "actionDropdown",
        ]);
      },
      32840: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(69555),
          n = s(96622),
          r = s(16087);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.v {
          constructor(...e) {
            super(...e),
              a(this, "doMenuClick", (e) => {
                e.target.hide();
              });
          }
          load() {
            n.UI.initialize();
          }
          doShowMenu(e) {
            const t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              title: "Edit",
              callback: this.doMenuClick,
            }),
              s.push({
                type: "action",
                title: "Complete",
                callback: this.doMenuClick,
              }),
              s.push({ type: "divider" }),
              s.push({
                type: "action",
                title: "Delete",
                callback: this.doMenuClick,
              }),
              new r.x(s).show(t, o.Fz.BottomRight);
          }
        }
        a(l, "targets", ["responsiveContainer"]);
      },
      8357: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(26454),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.v {
          constructor(...e) {
            super(...e),
              l(this, "templates", { logEntry: "<li>$(entry)</li>" });
          }
          load() {
            (this.$listInstallationsButton = $(
              this.listInstallationsButtonTarget
            )),
              (this.$listInstallationsLog = $(this.listInstallationsLogTarget)),
              (this.$dispatchWorkflowInstallation = $(
                this.dispatchWorkflowInstallationTarget
              )),
              (this.$dispatchWorkflowRepo = $(this.dispatchWorkflowRepoTarget)),
              (this.$dispatchWorkflowWorkflow = $(
                this.dispatchWorkflowWorkflowTarget
              )),
              (this.$dispatchWorkflowButton = $(
                this.dispatchWorkflowButtonTarget
              )),
              (this.$dispatchWorkflowLog = $(this.dispatchWorkflowLogTarget)),
              (this.$accessInstallation = $(this.accessInstallationTarget)),
              (this.$accessButton = $(this.accessButtonTarget)),
              (this.$addIssueInstallation = $(this.addIssueInstallationTarget)),
              (this.$addIssueRepo = $(this.addIssueRepoTarget)),
              (this.$addIssueButton = $(this.addIssueButtonTarget)),
              (this.$addIssueLog = $(this.addIssueLogTarget)),
              (this.$lookupIssueInstallation = $(
                this.lookupIssueInstallationTarget
              )),
              (this.$lookupIssueRepo = $(this.lookupIssueRepoTarget)),
              (this.$lookupIssueButton = $(this.lookupIssueButtonTarget)),
              (this.$lookupIssueLog = $(this.lookupIssueLogTarget)),
              (this.$lookupIssueNumber = $(this.lookupIssueNumberTarget)),
              (this.addIssueWindow = null),
              (this.addIssueWindowCloseTimer = null),
              (this.addIssueWindowStartTime = null),
              n.UI.initialize(this.element);
          }
          unload() {}
          addListInstallationsLog(e) {
            this.$listInstallationsLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doListInstallations() {
            n.UI.loading(this.$listInstallationsButton, () =>
              r.N.post("dev/integrations/github/get_installations")
                .then((e) => {
                  for (let t of e.data.installations)
                    this.addListInstallationsLog(
                      `Found installation: ${t.account.login} (${t.account.type})`
                    );
                })
                .catch((e) => {
                  a.Z.handleError(e);
                })
            );
          }
          doIdentifyAccess() {
            n.UI.loading(this.$accessButton, () => {
              let e = n.UI.getDropdownIntOrNull(this.$accessInstallation);
              if (!e) return;
              let t = { installationId: e };
              return r.N.post(
                "dev/integrations/github/get_access",
                r.N.toNetworkCase(t)
              )
                .then((e) => {
                  e.data.access && this.addListInstallationsLog(e.data.access);
                })
                .catch((e) => {
                  a.Z.handleError(e);
                });
            });
          }
          addDispatchWorkflowLog(e) {
            this.$dispatchWorkflowLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doDispatchWorkflow() {
            n.UI.loading(this.$dispatchWorkflowButton, () => {
              let e = n.UI.getDropdownIntOrNull(
                this.$dispatchWorkflowInstallation
              );
              if (!e) return;
              let t = n.UI.getText(this.$dispatchWorkflowRepo).trim();
              if (0 == t.length) return;
              let s = n.UI.getText(this.$dispatchWorkflowWorkflow).trim();
              if (0 == s.length) return;
              let i = { installationId: e, repository: t, workflow: s };
              return r.N.post(
                "dev/integrations/github/dispatch_workflow",
                r.N.toNetworkCase(i)
              )
                .then((e) => {
                  this.addDispatchWorkflowLog("Successfully started action");
                })
                .catch((e) => {
                  a.Z.handleError(e);
                });
            });
          }
          addAddIssueLog(e) {
            this.$addIssueLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          calculateWindowPosition(e, t) {
            let s =
                void 0 !== window.screenLeft
                  ? window.screenLeft
                  : window.screenX,
              i =
                void 0 !== window.screenTop ? window.screenTop : window.screenY;
            return {
              width: e,
              height: t,
              left:
                s +
                ((window.innerWidth
                  ? window.innerWidth
                  : document.documentElement.clientWidth
                  ? document.documentElement.clientWidth
                  : window.screen.width) -
                  e) /
                  2,
              top:
                i +
                ((window.innerHeight
                  ? window.innerHeight
                  : document.documentElement.clientHeight
                  ? document.documentElement.clientHeight
                  : window.screen.height) -
                  t) /
                  2,
            };
          }
          openEmptyAddIssueWindow() {
            let e = this.calculateWindowPosition(850, 735);
            return (
              (this.addIssueWindowStartTime = new Date()),
              (this.addIssueWindow = window.open(
                "",
                "issue",
                `scrollbars=yes,\n            width=${e.width},\n            height=${e.height},\n            top=${e.top},\n            left=${e.left}`
              )),
              (this.addIssueWindowCloseTimer = setInterval(() => {
                if (!this.addIssueWindow)
                  return (
                    clearInterval(this.addIssueWindowCloseTimer),
                    void (this.addIssueWindowCloseTimer = null)
                  );
                this.addIssueWindow &&
                  this.addIssueWindow.closed &&
                  this.doAddIssueWindowClosed();
              }, 250)),
              this.addIssueWindow
            );
          }
          navigateAddIssueWindow(e) {
            this.addIssueWindow && (this.addIssueWindow.location = e);
          }
          closeAddIssueWindow() {
            this.addIssueWindow.close(), this.doAddIssueWindowClosed();
          }
          getNewIssues(e) {
            let t = n.UI.getDropdownIntOrNull(this.$addIssueInstallation);
            if (!t) return;
            let s = n.UI.getText(this.$addIssueRepo).trim();
            if (0 == s.length) return;
            let i = {
              installationId: t,
              repository: s,
              createdIn: Math.round((new Date() - e) / 1e3),
            };
            return r.N.post(
              "dev/integrations/github/get_new_issues",
              r.N.toNetworkCase(i)
            )
              .then((e) => {
                this.addAddIssueLog(
                  `New issues created:\n                    ${e.data.items
                    .map((e) => e.number)
                    .join(", ")}`
                );
              })
              .catch((e) => {
                a.Z.handleError(e);
              });
          }
          doAddIssueWindowClosed() {
            let e = this.addIssueWindowStartTime;
            clearInterval(this.addIssueWindowCloseTimer),
              (this.addIssueWindowCloseTimer = null),
              (this.addIssueWindow = null),
              (this.addIssueWindowStartTime = null),
              this.addAddIssueLog("Closed add issue window"),
              this.getNewIssues(e);
          }
          doAddIssue() {
            this.addIssueWindow && this.closeAddIssueWindow();
            let e = n.UI.getDropdownIntOrNull(this.$addIssueInstallation);
            if (!e) return;
            let t = n.UI.getText(this.$addIssueRepo).trim();
            if (0 == t.length) return;
            let s = { installationId: e, repository: t };
            this.openEmptyAddIssueWindow(),
              n.UI.loading(this.$addIssueButton, () =>
                r.N.post(
                  "dev/integrations/github/prepare_add_issue",
                  r.N.toNetworkCase(s)
                )
                  .then((e) => {
                    this.addAddIssueLog(
                      "Verified access to installation and repository"
                    ),
                      this.navigateAddIssueWindow(
                        `https://github.com/${t}/issues/new?title=From Omtset`
                      ),
                      this.addAddIssueLog("Opened new issue window");
                  })
                  .catch((e) => {
                    a.Z.handleError(e);
                  })
              );
          }
          addLookupIssueLog(e) {
            this.$lookupIssueLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doLookupIssue() {
            let e = n.UI.getDropdownIntOrNull(this.$lookupIssueInstallation);
            if (!e) return;
            let t = n.UI.getText(this.$lookupIssueRepo).trim();
            if (0 == t.length) return;
            let s = n.UI.getTextIntOrNullOrError(this.$lookupIssueNumber);
            if (!s) return;
            let i = { installationId: e, repository: t, number: s };
            n.UI.loading(this.$lookupIssueButton, () =>
              r.N.post(
                "dev/integrations/github/get_issue",
                r.N.toNetworkCase(i)
              )
                .then((e) => {
                  this.addLookupIssueLog(`Issue title: ${e.data.title}`);
                })
                .catch((e) => {
                  a.Z.handleError(e);
                })
            );
          }
        }
        l(d, "targets", [
          "dispatchWorkflowWorkflow",
          "dispatchWorkflowRepo",
          "dispatchWorkflowButton",
          "dispatchWorkflowLog",
          "dispatchWorkflowInstallation",
          "addIssueLog",
          "addIssueRepo",
          "addIssueInstallation",
          "addIssueButton",
          "listInstallationsButton",
          "listInstallationsLog",
          "accessButton",
          "accessInstallation",
          "lookupIssueLog",
          "lookupIssueRepo",
          "lookupIssueInstallation",
          "lookupIssueButton",
          "lookupIssueNumber",
        ]);
      },
      42221: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(26454),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.v {
          constructor(...e) {
            super(...e),
              l(this, "templates", {
                logEntry: "<li>$(entry)</li>",
                pipelineLogEntry:
                  '<li>$(entry) (<a href="$(url)" ref="noopener" data-turbolinks="false" target="_blank">open</a>)</li>',
              });
          }
          load() {
            (this.$addIssueProject = $(this.addIssueProjectTarget)),
              (this.$addIssueButton = $(this.addIssueButtonTarget)),
              (this.$addIssueLog = $(this.addIssueLogTarget)),
              (this.$lookupIssueProject = $(this.lookupIssueProjectTarget)),
              (this.$lookupIssueId = $(this.lookupIssueIdTarget)),
              (this.$lookupIssueButton = $(this.lookupIssueButtonTarget)),
              (this.$lookupIssueLog = $(this.lookupIssueLogTarget)),
              (this.$pipelineProject = $(this.pipelineProjectTarget)),
              (this.$pipelineReference = $(this.pipelineReferenceTarget)),
              (this.$pipelineButton = $(this.pipelineButtonTarget)),
              (this.$pipelineLog = $(this.pipelineLogTarget)),
              (this.addIssueWindow = null),
              (this.addIssueWindowCloseTimer = null),
              (this.addIssueWindowStartTime = null),
              n.UI.initialize(this.element);
          }
          unload() {}
          addAddIssueLog(e) {
            this.$addIssueLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          calculateWindowPosition(e, t) {
            let s =
                void 0 !== window.screenLeft
                  ? window.screenLeft
                  : window.screenX,
              i =
                void 0 !== window.screenTop ? window.screenTop : window.screenY;
            return {
              width: e,
              height: t,
              left:
                s +
                ((window.innerWidth
                  ? window.innerWidth
                  : document.documentElement.clientWidth
                  ? document.documentElement.clientWidth
                  : window.screen.width) -
                  e) /
                  2,
              top:
                i +
                ((window.innerHeight
                  ? window.innerHeight
                  : document.documentElement.clientHeight
                  ? document.documentElement.clientHeight
                  : window.screen.height) -
                  t) /
                  2,
            };
          }
          openEmptyAddIssueWindow() {
            let e = this.calculateWindowPosition(850, 800);
            return (
              (this.addIssueWindowStartTime = new Date()),
              (this.addIssueWindow = window.open(
                "",
                "issue",
                `scrollbars=yes,\n            width=${e.width},\n            height=${e.height},\n            top=${e.top},\n            left=${e.left}`
              )),
              (this.addIssueWindowCloseTimer = setInterval(() => {
                if (!this.addIssueWindow)
                  return (
                    clearInterval(this.addIssueWindowCloseTimer),
                    void (this.addIssueWindowCloseTimer = null)
                  );
                this.addIssueWindow &&
                  this.addIssueWindow.closed &&
                  this.doAddIssueWindowClosed();
              }, 250)),
              this.addIssueWindow
            );
          }
          navigateAddIssueWindow(e) {
            this.addIssueWindow && (this.addIssueWindow.location = e);
          }
          closeAddIssueWindow() {
            this.addIssueWindow.close(), this.doAddIssueWindowClosed();
          }
          getNewIssues(e) {
            let t = n.UI.getText(this.$addIssueProject).trim();
            if (0 == t.length) return;
            let s = {
              project: t,
              createdIn: Math.round((new Date() - e) / 1e3),
            };
            return r.N.post(
              "dev/integrations/gitlab/get_new_issues",
              r.N.toNetworkCase(s)
            )
              .then((e) => {
                this.addAddIssueLog(
                  `New issues created:\n                    ${e.data
                    .map((e) => e.iid)
                    .join(", ")}`
                );
              })
              .catch((e) => {
                a.Z.handleError(e);
              });
          }
          doAddIssueWindowClosed() {
            let e = this.addIssueWindowStartTime;
            clearInterval(this.addIssueWindowCloseTimer),
              (this.addIssueWindowCloseTimer = null),
              (this.addIssueWindow = null),
              (this.addIssueWindowStartTime = null),
              this.addAddIssueLog("Closed add issue window"),
              this.getNewIssues(e);
          }
          doAddIssue() {
            this.addIssueWindow && this.closeAddIssueWindow();
            let e = n.UI.getText(this.$addIssueProject).trim();
            if (0 == e.length) return;
            let t = { project: e };
            this.openEmptyAddIssueWindow(),
              n.UI.loading(this.$addIssueButton, () =>
                r.N.post(
                  "dev/integrations/gitlab/prepare_add_issue",
                  r.N.toNetworkCase(t)
                )
                  .then((t) => {
                    this.addAddIssueLog("Verified access to project"),
                      this.navigateAddIssueWindow(
                        `https://gitlab.com/${e}/issues/new?issue[title]=From Omtset`
                      ),
                      this.addAddIssueLog("Opened new issue window");
                  })
                  .catch((e) => {
                    a.Z.handleError(e);
                  })
              );
          }
          addLookupIssueLog(e) {
            this.$lookupIssueLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doLookupIssue() {
            let e = n.UI.getText(this.$lookupIssueProject).trim();
            if (0 == e.length) return;
            let t = n.UI.getTextIntOrNullOrError(this.$lookupIssueId);
            if (!t) return;
            let s = { project: e, id: t };
            n.UI.loading(this.$lookupIssueButton, () =>
              r.N.post(
                "dev/integrations/gitlab/get_issue",
                r.N.toNetworkCase(s)
              )
                .then((e) => {
                  this.addLookupIssueLog(`Issue title: ${e.data.title}`);
                })
                .catch((e) => {
                  a.Z.handleError(e);
                })
            );
          }
          addPipelineLog(e, t) {
            this.$pipelineLog.prepend(
              o.Z.template(this.templates.pipelineLogEntry, {
                entry: e,
                url: t,
              })
            );
          }
          doRunPipeline() {
            let e = n.UI.getText(this.$pipelineProject).trim();
            if (0 == e.length) return;
            let t = n.UI.getText(this.$pipelineReference).trim();
            if (0 == t.length) return;
            let s = { project: e, reference: t };
            n.UI.loading(this.$pipelineButton, () =>
              r.N.post(
                "dev/integrations/gitlab/run_pipeline",
                r.N.toNetworkCase(s)
              )
                .then((e) => {
                  this.addPipelineLog(
                    `Pipeline started: ${e.data.id}`,
                    e.data.web_url
                  );
                })
                .catch((e) => {
                  a.Z.handleError(e);
                })
            );
          }
        }
        l(d, "targets", [
          "addIssueLog",
          "addIssueProject",
          "addIssueButton",
          "lookupIssueProject",
          "lookupIssueId",
          "lookupIssueButton",
          "lookupIssueLog",
          "pipelineProject",
          "pipelineReference",
          "pipelineButton",
          "pipelineLog",
        ]);
      },
      92641: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(26454),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.v {
          constructor(...e) {
            super(...e),
              l(this, "templates", { logEntry: "<li>$(entry)</li>" }),
              l(this, "doWindowMessage", (e) => {
                let t = e.originalEvent,
                  s = e.originalEvent.data;
                if (s.event)
                  switch (s.event) {
                    case "newIssueReady":
                      this.addAddIssueLog("New issue frame ready"),
                        t.source.postMessage(
                          {
                            event: "openNewIssue",
                            issue: {
                              projectId: 1e4,
                              summary: "This title is coming from the app!",
                              description: "The test details will go here",
                            },
                          },
                          "*"
                        );
                      break;
                    case "newIssue":
                      this.closeAddIssueWindow(),
                        this.addAddIssueLog(
                          `New issues created:\n                    ${s.issues
                            .map((e) => e.key)
                            .join(", ")}`
                        );
                      break;
                    case "getUser":
                      this.closeGetUserWindow(),
                        this.addInstallationLog(`User: ${s.user.displayName}`);
                  }
              });
          }
          load() {
            (this.$addIssueLog = $(this.addIssueLogTarget)),
              (this.$addIssueInstallation = $(this.addIssueInstallationTarget)),
              (this.$lookupIssueLog = $(this.lookupIssueLogTarget)),
              (this.$lookupIssueInstallation = $(
                this.lookupIssueInstallationTarget
              )),
              (this.$lookupIssueInput = $(this.lookupIssueInputTarget)),
              (this.$lookupIssueButton = $(this.lookupIssueButtonTarget)),
              (this.$installationLog = $(this.installationLogTarget)),
              (this.$getUserInstallation = $(this.getUserInstallationTarget)),
              (this.$window = $(window)),
              this.$window.on("message", this.doWindowMessage),
              (this.addIssueWindow = null),
              (this.addIssueWindowCloseTimer = null),
              (this.getUserWindow = null),
              (this.getUserWindowCloseTimer = null),
              n.UI.initialize(this.element);
          }
          unload() {
            this.$window.off("message", this.doWindowMessage);
          }
          addAddIssueLog(e) {
            this.$addIssueLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          addLookupIssueLog(e) {
            this.$lookupIssueLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doAddIssueWindowClosed() {
            clearInterval(this.addIssueWindowCloseTimer),
              (this.addIssueWindowCloseTimer = null),
              (this.addIssueWindow = null),
              this.addAddIssueLog("Closed add issue window");
          }
          closeAddIssueWindow() {
            this.addIssueWindow.close(), this.doAddIssueWindowClosed();
          }
          doAddIssue() {
            this.addIssueWindow && this.closeAddIssueWindow();
            let e = n.UI.getDropdown(this.$addIssueInstallation);
            e &&
              (this.openAddIssueWindow(
                `${e}/plugins/servlet/ac/omtset-jira-cloud/new-issue`
              ),
              this.addAddIssueLog("Opened new issue window"));
          }
          calculateWindowPosition(e, t) {
            let s =
                void 0 !== window.screenLeft
                  ? window.screenLeft
                  : window.screenX,
              i =
                void 0 !== window.screenTop ? window.screenTop : window.screenY;
            return {
              width: e,
              height: t,
              left:
                s +
                ((window.innerWidth
                  ? window.innerWidth
                  : document.documentElement.clientWidth
                  ? document.documentElement.clientWidth
                  : window.screen.width) -
                  e) /
                  2,
              top:
                i +
                ((window.innerHeight
                  ? window.innerHeight
                  : document.documentElement.clientHeight
                  ? document.documentElement.clientHeight
                  : window.screen.height) -
                  t) /
                  2,
            };
          }
          openAddIssueWindow(e) {
            let t = this.calculateWindowPosition(850, 800);
            return (
              (this.addIssueWindow = window.open(
                e,
                "issue",
                `scrollbars=yes,\n            width=${t.width},\n            height=${t.height},\n            top=${t.top},\n            left=${t.left}`
              )),
              (this.addIssueWindowCloseTimer = setInterval(() => {
                if (!this.addIssueWindow)
                  return (
                    clearInterval(this.addIssueWindowCloseTimer),
                    void (this.addIssueWindowCloseTimer = null)
                  );
                this.addIssueWindow &&
                  this.addIssueWindow.closed &&
                  this.doAddIssueWindowClosed();
              }, 250)),
              this.addIssueWindow
            );
          }
          doLookupIssue() {
            n.UI.loading(this.$lookupIssueButton, () => {
              let e = n.UI.getDropdownIntOrNull(this.$lookupIssueInstallation);
              if (!e) return;
              let t = n.UI.getText(this.$lookupIssueInput).trim();
              if (0 == t.length) return;
              let s = { installationId: e, issueKey: t };
              return r.N.post(
                "dev/integrations/jira-cloud/get_issue",
                r.N.toNetworkCase(s)
              )
                .then((e) => {
                  this.addLookupIssueLog(
                    `Issue title: ${e.data.fields.summary}`
                  );
                })
                .catch((e) => {
                  a.Z.handleError(e);
                });
            });
          }
          addInstallationLog(e) {
            this.$installationLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doGetUserWindowClosed() {
            clearInterval(this.addIssueWindowCloseTimer),
              (this.getUserWindowCloseTimer = null),
              (this.getUserWindow = null),
              this.addInstallationLog("Closed add issue window");
          }
          closeGetUserWindow() {
            this.getUserWindow.close(), this.doGetUserWindowClosed();
          }
          openGetUserWindow(e) {
            let t = this.calculateWindowPosition(550, 500);
            return (
              (this.getUserWindow = window.open(
                e,
                "user",
                `scrollbars=yes,\n            width=${t.width},\n            height=${t.height},\n            top=${t.top},\n            left=${t.left}`
              )),
              (this.getUserWindowCloseTimer = setInterval(() => {
                if (!this.getUserWindow)
                  return (
                    clearInterval(this.getUserWindowCloseTimer),
                    void (this.getUserWindowCloseTimer = null)
                  );
                this.getUserWindow &&
                  this.getUserWindow.closed &&
                  this.doGetUserWindowClosed();
              }, 250)),
              this.getUserWindow
            );
          }
          doGetUser() {
            this.getUserWindow && this.closeGetUserWindow();
            let e = n.UI.getDropdown(this.$getUserInstallation);
            e &&
              (this.openGetUserWindow(
                `${e}/plugins/servlet/ac/omtset-jira-cloud/get-user`
              ),
              this.addInstallationLog("Opened get user window"));
          }
        }
        l(d, "targets", [
          "addIssueLog",
          "addIssueInstallation",
          "lookupIssueLog",
          "lookupIssueButton",
          "lookupIssueInput",
          "lookupIssueInstallation",
          "installationLog",
          "getUserInstallation",
        ]);
      },
      14397: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(26454),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.v {
          constructor(...e) {
            super(...e),
              l(this, "templates", { logEntry: "<li>$(entry)</li>" });
          }
          load() {
            (this.$listChannelsButton = $(this.listChannelsButtonTarget)),
              (this.$listChannelsLog = $(this.listChannelsLogTarget)),
              (this.$postMessageButton = $(this.postMessageButtonTarget)),
              (this.$postMessageChannel = $(this.postMessageChannelTarget)),
              (this.$postMessageMessage = $(this.postMessageMessageTarget)),
              (this.$postMessageLog = $(this.postMessageLogTarget)),
              n.UI.initialize(this.element);
          }
          unload() {}
          addListChannelsLog(e) {
            this.$listChannelsLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doListChannels() {
            n.UI.loading(this.$listChannelsButton, () =>
              r.N.post("dev/integrations/slack/get_channels")
                .then((e) => {
                  for (let t of e.data)
                    this.addListChannelsLog(
                      `Found channel: ${t.name} (ID: ${t.id})`
                    );
                })
                .catch((e) => {
                  a.Z.handleError(e);
                })
            );
          }
          addPostMessageLog(e) {
            this.$postMessageLog.prepend(
              o.Z.template(this.templates.logEntry, { entry: e })
            );
          }
          doPostMessage() {
            n.UI.loading(this.$postMessageButton, () => {
              let e = n.UI.getText(this.$postMessageChannel).trim();
              if (0 == e.length) return;
              let t = n.UI.getText(this.$postMessageMessage).trim();
              if (0 == t.length) return;
              let s = { channel: e, message: t };
              return r.N.post(
                "dev/integrations/slack/post_message",
                r.N.toNetworkCase(s)
              )
                .then((e) => {
                  this.addPostMessageLog(
                    "Successfully posted message to channel"
                  );
                })
                .catch((e) => {
                  a.Z.handleError(e);
                });
            });
          }
        }
        l(d, "targets", [
          "listChannelsButton",
          "listChannelsLog",
          "postMessageButton",
          "postMessageLog",
          "postMessageMessage",
          "postMessageChannel",
        ]);
      },
      3279: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => a });
        var i = s(26454),
          o = s(96622),
          n = s(5270);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.v {
          constructor(...e) {
            super(...e),
              r(this, "doMilestoneFullActivityBurndownTabChanged", (e) => {
                o.UI.chartRefreshSizes(e.target.$element);
              }),
              r(this, "doAutomationFullSuccessColumnTabChanged", (e) => {
                o.UI.chartRefreshSizes(e.target.$element);
              });
          }
          load() {
            o.UI.initialize(this.element),
              n.Z.requestChild(
                this.component,
                "milestoneFullActivityBurndownTabs",
                {
                  events: {
                    tabchange: this.doMilestoneFullActivityBurndownTabChanged,
                  },
                }
              ),
              n.Z.requestChild(
                this.component,
                "automationFullSuccessColumnTabs",
                {
                  events: {
                    tabchange: this.doAutomationFullSuccessColumnTabChanged,
                  },
                }
              );
          }
        }
        r(a, "targets", ["responsiveContainer"]);
      },
      83550: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => c });
        var i = s(26454),
          o = s(11802),
          n = s(15612),
          r = s(69555),
          a = s(16087),
          l = s(96622),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.v {
          constructor(...e) {
            super(...e),
              h(this, "listTitles", [
                "Verify external authentication (OAuth)",
                "Two factore authentication with Google",
                "File export and printing",
                "Responsive window resizing and scrolling",
                "Mobile client connecting testing",
                "Custom user profile settings dialog",
                "Temlate export setting customizations",
              ]),
              h(this, "detailsTitles", [
                "Export PDF files to shared server",
                "Login with two factors",
                "Initial responsive content resizing",
                "Login with Google from register page",
                "Update user settings with Android",
                "List notifications from settings menu",
                "Replacing PDF logo in template settings",
              ]),
              h(this, "classes", {
                simOverlayVisible: "dev-sim-overlay--visible",
              }),
              h(this, "doTreeContentChange", (e) => {
                this.components.treeContentSelect.setValue(e.content);
              }),
              h(this, "doListContentChange", (e) => {
                this.components.listContentSelect.setValue(e.content);
              }),
              h(this, "doDetailsContentChange", (e) => {
                this.components.detailsContentSelect.setValue(e.content);
              }),
              h(this, "doTreeContentSelectChange", (e) => {
                this.components.treeContent.showContent(e.value);
              }),
              h(this, "doListContentSelectChange", (e) => {
                this.components.listContent.showContent(e.value);
              }),
              h(this, "doDetailsContentSelectChange", (e) => {
                this.components.detailsContent.showContent(e.value);
              }),
              h(this, "doMixModeChange", (e) => {
                e.refreshingSize || this.refreshResponsiveContainer();
              }),
              h(this, "doMixTreeOverlayShow", (e) => {
                this.refreshResponsiveContainer();
              }),
              h(this, "doMixResize", (e) => {
                this.refreshResponsiveContainer();
              }),
              h(this, "doSimReset", (e) => {
                e.target.hide(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentContent
                  );
              }),
              h(this, "doSimInit", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeList),
                  this.components.treeContent.showContent(
                    n.g.MixContentInitial
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentInitial
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentNoSelection
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.treeContent.showContent(
                        n.g.MixContentContent
                      ),
                        this.components.listContent.showContent(
                          n.g.MixContentContent
                        ),
                        d.Z.unblockUI();
                    }, 800);
                  });
              }),
              h(this, "doSimInitCase", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentInitial
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentInitial
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentInitial
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.treeContent.showContent(
                        n.g.MixContentContent
                      ),
                        this.components.listContent.showContent(
                          n.g.MixContentContent
                        ),
                        this.components.detailsContent.showContent(
                          n.g.MixContentContent
                        ),
                        d.Z.unblockUI();
                    }, 800);
                  });
              }),
              h(this, "doSimNoData", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.showSimOverlay().then(() => {
                    this.components.mix.setMode(n.g.MixModeTreeList),
                      this.components.treeContent.showContent(
                        n.g.MixContentNoData
                      ),
                      this.components.listContent.showContent(
                        n.g.MixContentNoData
                      ),
                      d.Z.unblockUI();
                  });
              }),
              h(this, "doSimSelectCaseNoSelection", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentNoSelection
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.detailsContent.markLoading(),
                        setTimeout(() => {
                          this.setRandomDetailsTitle(),
                            this.components.detailsContent.showContent(
                              n.g.MixContentContent
                            ),
                            this.components.detailsContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimSelectCaseReplace", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.detailsContent.markLoading(),
                        setTimeout(() => {
                          this.setRandomDetailsTitle(),
                            this.components.detailsContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimSelectCaseInit", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeList),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.mix.setMode(n.g.MixModeTreeListDetails),
                        this.components.detailsContent.showContent(
                          n.g.MixContentInitial
                        ),
                        setTimeout(() => {
                          this.setRandomDetailsTitle(),
                            this.components.detailsContent.showContent(
                              n.g.MixContentContent
                            ),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimEmptyFilter", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeList),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.treeContent.showContent(
                        n.g.MixContentEmptyFilter
                      ),
                        this.components.listContent.showContent(
                          n.g.MixContentEmptyFilter
                        ),
                        d.Z.unblockUI();
                    }, 800);
                  });
              }),
              h(this, "doSimEmptyFilterCase", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.treeContent.showContent(
                        n.g.MixContentEmptyFilter
                      ),
                        this.components.listContent.showContent(
                          n.g.MixContentEmptyFilter
                        ),
                        this.components.detailsContent.showContent(
                          n.g.MixContentNoSelection
                        ),
                        d.Z.unblockUI();
                    }, 800);
                  });
              }),
              h(this, "doSimSelectFolderNoSelection", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeList),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentNoSelection
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.listContent.markLoading(),
                        setTimeout(() => {
                          this.setRandomListTitle(),
                            this.components.listContent.showContent(
                              n.g.MixContentContent
                            ),
                            this.components.listContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimSelectFolderReplace", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeList),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.listContent.markLoading(),
                        setTimeout(() => {
                          this.setRandomListTitle(),
                            this.components.listContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimSelectFolderReplaceNoCase", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentNoSelection
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.listContent.markLoading(),
                        setTimeout(() => {
                          this.setRandomListTitle(),
                            this.components.listContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimSelectFolderReplaceCase", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.listContent.markLoading(),
                        this.components.detailsContent.markLoading(),
                        setTimeout(() => {
                          this.setRandomListTitle(),
                            this.components.detailsContent.showContent(
                              n.g.MixContentNoSelection
                            ),
                            this.components.listContent.markCompleted(),
                            this.components.detailsContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimCaseNotFound", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeListDetails),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.detailsContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.detailsContent.markLoading(),
                        setTimeout(() => {
                          this.components.detailsContent.showContent(
                            n.g.MixContentNotFound
                          ),
                            this.components.detailsContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              }),
              h(this, "doSimFolderNotFound", (e) => {
                e.target.hide(),
                  d.Z.blockUI(),
                  this.components.mix.setMode(n.g.MixModeTreeList),
                  this.components.treeContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.components.listContent.showContent(
                    n.g.MixContentContent
                  ),
                  this.showSimOverlay().then(() => {
                    setTimeout(() => {
                      this.components.listContent.markLoading(),
                        setTimeout(() => {
                          this.components.listContent.showContent(
                            n.g.MixContentNotFound
                          ),
                            this.components.listContent.markCompleted(),
                            d.Z.unblockUI();
                        }, 800);
                    }, 800);
                  });
              });
          }
          load() {
            d.Z.requestChild(this.component, "mix", {
              events: {
                modechange: this.doMixModeChange,
                resize: this.doMixResize,
                treeoverlayshow: this.doMixTreeOverlayShow,
              },
            }),
              d.Z.requestChild(this.component, "treeContent", {
                events: { change: this.doTreeContentChange },
              }),
              d.Z.requestChild(this.component, "listContent", {
                events: { change: this.doListContentChange },
              }),
              d.Z.requestChild(this.component, "detailsContent", {
                events: { change: this.doDetailsContentChange },
              }),
              d.Z.requestChild(this.component, "treeContentSelect", {
                events: { change: this.doTreeContentSelectChange },
              }),
              d.Z.requestChild(this.component, "listContentSelect", {
                events: { change: this.doListContentSelectChange },
              }),
              d.Z.requestChild(this.component, "detailsContentSelect", {
                events: { change: this.doDetailsContentSelectChange },
              }),
              (this.$simOverlay = $(this.simOverlayTarget)),
              (this.$simOverlayCounter = $(this.simOverlayCounterTarget)),
              (this.$listTitle = $(this.listTitleTarget)),
              (this.$detailsTitle = $(this.detailsTitleTarget)),
              l.UI.initialize(this.$element);
          }
          doShowDetails() {
            this.components.detailsContent.showContent(n.g.MixContentContent),
              this.components.mix.showDetails();
          }
          resize() {
            this.components.mix && this.components.mix.refreshSize();
          }
          keyDown(e) {
            e.which == o.N.ESC && this.components.mix.hideTreeOverlay();
          }
          doShowSimulationsMenu(e) {
            let t = $(e.currentTarget);
            if (l.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              title: "Reset",
              callback: this.doSimReset,
            }),
              s.push({ type: "divider" }),
              s.push({
                type: "action",
                title: "Init",
                callback: this.doSimInit,
              }),
              s.push({
                type: "action",
                title: "Init with case",
                callback: this.doSimInitCase,
              }),
              s.push({ type: "divider" }),
              s.push({
                type: "action",
                title: "Select folder (none)",
                callback: this.doSimSelectFolderNoSelection,
              }),
              s.push({
                type: "action",
                title: "Select folder (replace)",
                callback: this.doSimSelectFolderReplace,
              }),
              s.push({
                type: "action",
                title: "Select folder (replace, no case)",
                callback: this.doSimSelectFolderReplaceNoCase,
              }),
              s.push({
                type: "action",
                title: "Select folder (replace, with case)",
                callback: this.doSimSelectFolderReplaceCase,
              }),
              s.push({ type: "divider" }),
              s.push({
                type: "action",
                title: "Select case (init)",
                callback: this.doSimSelectCaseInit,
              }),
              s.push({
                type: "action",
                title: "Select case (none)",
                callback: this.doSimSelectCaseNoSelection,
              }),
              s.push({
                type: "action",
                title: "Select case (replace)",
                callback: this.doSimSelectCaseReplace,
              }),
              s.push({ type: "divider" }),
              s.push({
                type: "action",
                title: "Empty repo",
                callback: this.doSimNoData,
              }),
              s.push({
                type: "action",
                title: "Empty filter",
                callback: this.doSimEmptyFilter,
              }),
              s.push({
                type: "action",
                title: "Empty filter with case",
                callback: this.doSimEmptyFilterCase,
              }),
              s.push({ type: "divider" }),
              s.push({
                type: "action",
                title: "Folder not found",
                callback: this.doSimFolderNotFound,
              }),
              s.push({
                type: "action",
                title: "Case not found",
                callback: this.doSimCaseNotFound,
              }),
              new a.x(s).show(t, r.Fz.BottomLeft);
          }
          showSimOverlay() {
            return new Promise((e, t) => {
              this.$simOverlay.addClass(this.classes.simOverlayVisible),
                this.$simOverlayCounter.text("3"),
                setTimeout(() => {
                  this.$simOverlayCounter.text("2");
                }, 800),
                setTimeout(() => {
                  this.$simOverlayCounter.text("1");
                }, 1600),
                setTimeout(() => {
                  this.$simOverlay.removeClass(this.classes.simOverlayVisible),
                    e();
                }, 2400);
            });
          }
          doLoadingTree() {
            this.components.treeContent.getLoading()
              ? this.components.treeContent.markCompleted()
              : this.components.treeContent.markLoading();
          }
          doLoadingList() {
            this.components.listContent.getLoading()
              ? this.components.listContent.markCompleted()
              : this.components.listContent.markLoading();
          }
          doLoadingDetails() {
            this.components.detailsContent.getLoading()
              ? this.components.detailsContent.markCompleted()
              : this.components.detailsContent.markLoading();
          }
          setRandomDetailsTitle() {
            this.$detailsTitle.text(_.sample(this.detailsTitles));
          }
          setRandomListTitle() {
            this.$listTitle.text(_.sample(this.listTitles));
          }
        }
        h(c, "targets", [
          "responsiveContainer",
          "simOverlay",
          "simOverlayCounter",
          "listTitle",
          "detailsTitle",
        ]);
      },
      63541: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(11802),
          n = s(96622),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.v {
          constructor(...e) {
            super(...e),
              a(this, "selectors", {
                modeButton: ".dev-mix-panes-mode-buttons button",
              }),
              a(this, "classes", { buttonActive: "active" }),
              a(this, "doMixModeChange", (e) => {
                let t = $(this.selectors.modeButton);
                t.removeClass(this.classes.buttonActive),
                  t
                    .filter(`[data-mode=${e.mode}]`)
                    .addClass(this.classes.buttonActive),
                  e.refreshingSize || this.refreshResponsiveContainer();
              }),
              a(this, "doMixTreeOverlayShow", (e) => {
                this.refreshResponsiveContainer();
              }),
              a(this, "doMixResize", (e) => {
                this.refreshResponsiveContainer();
              });
          }
          load() {
            r.Z.requestChild(this.component, "mix", {
              events: {
                modechange: this.doMixModeChange,
                resize: this.doMixResize,
                treeoverlayshow: this.doMixTreeOverlayShow,
              },
            }),
              n.UI.initialize(this.$element);
          }
          doSelectMode(e) {
            let t = $(e.currentTarget).data("mode");
            this.components.mix.setMode(t);
          }
          doShowDetails() {
            this.components.mix.showDetails();
          }
          resize() {
            this.components.mix && this.components.mix.refreshSize();
          }
          keyDown(e) {
            e.which == o.N.ESC && this.components.mix.hideTreeOverlay();
          }
        }
        a(l, "targets", ["responsiveContainer"]);
      },
      30408: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => w });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(69555);
        class a extends r.GI {
          constructor() {
            super("dev.popups.dynamic_popup", {});
          }
        }
        class l extends r.GI {
          constructor() {
            super("dev.popups.basic_popup", {});
          }
        }
        class d extends r.GI {
          constructor() {
            super("dev.popups.extended_popup", { width: 400 });
          }
        }
        class h extends r.GI {
          constructor() {
            super("dev.popups.basic_menu", {});
          }
        }
        class c extends r.GI {
          constructor() {
            super("dev.popups.extended_menu", {});
          }
        }
        class u extends r.GI {
          constructor() {
            super("dev.popups.scrolling_menu", { maxHeight: 250 });
          }
        }
        var g = s(16087),
          p = s(18341),
          m = s(33908),
          f = s(50609);
        class C extends f.V {
          constructor() {
            super("dev.popups.boundary_dialog", { width: 700 });
          }
        }
        var b = s(5270);
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends i.v {
          constructor(...e) {
            super(...e),
              I(this, "doExtendedMenuActionClick", (e) => {
                e.target.hide(),
                  new m.n(
                    "Action clicked",
                    "The following action was clicked: " + e.actionName
                  ).show();
              }),
              I(this, "doDynamicMenuLogoutClick", (e) => {
                e.target.hide(),
                  new m.n(
                    "Logout user",
                    "The following action was clicked: " + e.actionName
                  ).show();
              }),
              I(this, "doDynamicMenuEditClick", (e) => {
                e.target.hide(),
                  new m.n(
                    "Edit user",
                    "The following action was clicked: " + e.actionName
                  ).show();
              }),
              I(this, "doDynamicMenuDisableClick", (e) => {
                e.target.hide(),
                  new m.n(
                    "Disable user",
                    "The following action was clicked: " + e.actionName
                  ).show();
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$content = $(this.contentTarget)),
              (this.$openDynamicPopupButton = $(
                this.openDynamicPopupButtonTarget
              )),
              (this.basicPopupClick = new l()),
              this.basicPopupClick.attach(
                this.openBasicPopupClickButtonTarget,
                r.Fz.BottomLeft,
                r.ec.Click
              ),
              (this.basicPopupHover = new l()),
              this.basicPopupHover.attach(
                this.openBasicPopupHoverButtonTarget,
                r.Fz.BottomLeft,
                r.ec.Hover
              ),
              (this.basicPopupHover = new l()),
              this.basicPopupHover.attach(
                this.openBasicPopupClickHoverButtonTarget,
                r.Fz.BottomLeft,
                r.ec.ClickHover
              ),
              (this.extendedPopup = new d()),
              this.extendedPopup.attach(
                this.openExtendedPopupButtonTarget,
                r.Fz.BottomLeft,
                r.ec.Click
              ),
              (this.basicMenu = new h()),
              this.basicMenu.attach(
                this.openBasicMenuButtonTarget,
                r.Fz.RightTop,
                r.ec.Click
              ),
              (this.scrollingMenu = new u()),
              this.scrollingMenu.attach(
                this.openScrollingMenuButtonTarget,
                r.Fz.RightTop,
                r.ec.Click
              ),
              (this.extendedcMenu = new c()),
              this.extendedcMenu.events.on(
                "actionclick",
                this.doExtendedMenuActionClick
              ),
              this.extendedcMenu.attach(
                this.openExtendedMenuButtonTarget,
                r.Fz.RightTop,
                r.ec.Click
              );
          }
          unload() {
            this.basicPopupClick.detach(),
              this.basicPopupHover.detach(),
              this.extendedPopup.detach(),
              this.basicMenu.detach(),
              this.scrollingMenu.detach(),
              this.extendedcMenu.events.off(
                "actionclick",
                this.doExtendedMenuActionClick
              ),
              this.extendedcMenu.detach();
          }
          doOpenDynamicPopup(e) {
            const t = $(e.target);
            n.UI.popupVisible(t) ||
              (n.UI.markLoading(this.$openDynamicPopupButton),
              o.N.post("dev/popups/get_dynamic_popup")
                .then((e) => {
                  n.UI.markCompleted(this.$openDynamicPopupButton),
                    new a().show(
                      this.openDynamicPopupButtonTarget,
                      r.Fz.BottomLeft,
                      e.data
                    );
                })
                .catch((e) => {
                  n.UI.markCompleted(this.$openDynamicPopupButton),
                    b.Z.handleError(e);
                }));
          }
          doOpenDynamicMenu(e) {
            const t = $(e.target);
            if (n.UI.popupVisible(t)) return;
            const s = t.data("rows"),
              i = [];
            i.push({ type: "header", title: "Popular links" }),
              i.push({
                type: "link",
                title: "Google Search",
                url: "http://www.google.com/",
                icon: "far fa-browser icon-navbar-web fa-fw",
              }),
              i.push({
                type: "link",
                title: "YouTube Videos",
                url: "http://www.youtube.com/",
                icon: "far fa-browser icon-navbar-web fa-fw",
              }),
              i.push({
                type: "link",
                title: "Facebook",
                url: "http://www.facebook.com/",
                icon: "far fa-browser icon-navbar-web fa-fw",
              }),
              s > 0 &&
                (i.push({ type: "divider" }),
                i.push({ type: "header", title: "Context actions" }),
                s > 1
                  ? (i.push({
                      type: "action",
                      title: "Disable users",
                      name: "disable",
                      callback: this.doDynamicMenuDisableClick,
                    }),
                    i.push({
                      type: "action",
                      title: "Log out users",
                      name: "logout",
                      callback: this.doDynamicMenuLogoutClick,
                    }))
                  : (i.push({
                      type: "action",
                      title: "Edit user",
                      name: "edit",
                      callback: this.doDynamicMenuEditClick,
                    }),
                    i.push({
                      type: "action",
                      title: "Disable user",
                      name: "disable",
                      callback: this.doDynamicMenuDisableClick,
                    }),
                    i.push({ type: "divider" }),
                    i.push({
                      type: "action",
                      title: "Log out user",
                      name: "logout",
                      callback: this.doDynamicMenuLogoutClick,
                    }))),
              new g.x(i).show(e.target, r.Fz.TopLeft);
          }
          doOpenSelectionMenu(e) {
            const t = $(e.target);
            n.UI.popupVisible(t) ||
              new p.P().show(
                e.target,
                r.Fz.RightTop,
                b.Z.views.get("dev.popups.selection_menu")
              );
          }
          doOpenTooltipBoundaryDialog(e) {
            new C().show();
          }
          doTogglePageContent() {
            this.$content.toggle();
          }
        }
        I(w, "targets", [
          "content",
          "openBasicPopupClickButton",
          "openBasicPopupHoverButton",
          "openBasicPopupClickHoverButton",
          "openBasicMenuButton",
          "openExtendedMenuButton",
          "openDynamicPopupButton",
          "openScrollingMenuButton",
          "openExtendedPopupButton",
        ]);
      },
      73022: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => a });
        var i = s(26454),
          o = s(43689),
          n = s(5270);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.v {
          constructor(...e) {
            super(...e),
              r(this, "templates", { logEntry: "<li>$(entry)</li>" }),
              r(this, "doTimer", () => {
                let e = n.Z.presence.getLastInteraction(),
                  t = n.Z.presence.getSecondsSinceLastInteraction();
                this.$secondsSinceLastInteraction.text(
                  null !== t ? o.Z.formatSecondsFormal(t) : "-"
                ),
                  this.$lastInteraction.text(
                    null !== e ? e.toLocaleTimeString() : "-"
                  ),
                  this.$idle.text(n.Z.presence.getIsIdle(30) ? "Yes" : "No"),
                  this.$lastPageLoad.text(
                    n.Z.presence.getLastPageLoad().toLocaleTimeString()
                  ),
                  this.$visibilityLog.prepend(
                    o.Z.template(this.templates.logEntry, {
                      entry: `${new Date().toLocaleTimeString()}:\n                    ${
                        n.Z.presence.getPageVisible() ? "Yes" : "No"
                      }`,
                    })
                  );
              });
          }
          load() {
            (this.$secondsSinceLastInteraction = $(
              this.secondsSinceLastInteractionTarget
            )),
              (this.$lastInteraction = $(this.lastInteractionTarget)),
              (this.$lastPageLoad = $(this.lastPageLoadTarget)),
              (this.$idle = $(this.idleTarget)),
              (this.$visibilityLog = $(this.visibilityLogTarget)),
              (this.timer = setInterval(this.doTimer, 1e3)),
              this.doTimer();
          }
          unload() {
            clearInterval(this.timer);
          }
        }
        r(a, "targets", [
          "secondsSinceLastInteraction",
          "lastInteraction",
          "idle",
          "lastPageLoad",
          "visibilityLog",
        ]);
      },
      69672: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => a });
        var i = s(26454),
          o = s(96622),
          n = s(5270);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.v {
          constructor(...e) {
            super(...e),
              r(this, "classes", { hidden: "default-hidden" }),
              r(this, "selectors", { sectionHeaderBar: ".section-header-bar" });
          }
          load() {
            o.UI.initialize(this.element),
              n.Z.requestChild(this.component, "elementsPrintFrame", {
                onAdded: () => {
                  this.refreshElementsPrintFrame();
                },
              }),
              n.Z.requestChild(this.component, "longPrintFrame", {
                onAdded: () => {
                  this.refreshLongPrintFrame();
                },
              }),
              n.Z.requestChild(this.component, "errorPrintFrame", {
                onAdded: () => {
                  this.refreshErrorPrintFrame();
                },
              }),
              n.Z.requestChild(this.component, "metricsPrintFrame", {
                onAdded: () => {
                  this.refreshMetricsPrintFrame();
                },
              });
          }
          doToggleFrame(e) {
            $(e.target)
              .closest(this.selectors.sectionHeaderBar)
              .next()
              .toggleClass(this.classes.hidden);
          }
          doRefreshElements() {
            this.refreshElementsPrintFrame();
          }
          doPrintElements() {
            this.components.elementsPrintFrame.print();
          }
          refreshElementsPrintFrame() {
            this.components.elementsPrintFrame.loadPost(
              "dev/print/render_elements_frame"
            );
          }
          doRefreshLong() {
            this.refreshLongPrintFrame();
          }
          doPrintLong() {
            this.components.longPrintFrame.print();
          }
          refreshLongPrintFrame() {
            this.components.longPrintFrame.loadPost(
              "dev/print/render_long_frame"
            );
          }
          doRefreshError() {
            this.refreshErrorPrintFrame();
          }
          doPrintError() {
            this.components.errorPrintFrame.print();
          }
          refreshErrorPrintFrame() {
            this.components.errorPrintFrame.loadPost(
              "dev/print/render_error_frame"
            );
          }
          doRefreshMetrics() {
            this.refreshMetricsPrintFrame();
          }
          doPrintMetrics() {
            this.components.metricsPrintFrame.print();
          }
          refreshMetricsPrintFrame() {
            this.components.metricsPrintFrame.loadPost(
              "dev/print/render_metrics_frame"
            );
          }
        }
        r(a, "targets", []);
      },
      46205: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => I });
        var i = s(26454),
          o = s(11802),
          n = s(15612),
          r = s(69555),
          a = s(16087),
          l = s(96622),
          d = s(13814),
          h = s(19968),
          c = s(80714),
          u = s(24371),
          g = s(62612);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m extends r.GI {
          constructor(e) {
            super("dev.repositories.cases.grouping_menu", {}),
              p(this, "selectors", { actionItem: ".popup__menu__action-item" }),
              p(this, "classes", { itemActive: "popup__menu__item--active" }),
              (this.groupBy = e);
          }
          load() {
            this.groupBy &&
              $(this.selectors.actionItem, this.$popup).each((e, t) => {
                let s = $(t);
                s.toggleClass(
                  this.classes.itemActive,
                  s.data("value") == this.groupBy
                );
              });
          }
        }
        var f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b {
          static get All() {
            return 1;
          }
          static get Subset() {
            return 2;
          }
          static get None() {
            return 3;
          }
        }
        class I extends i.v {
          constructor(...e) {
            super(...e),
              C(this, "doShortcutNext", (e) => {
                this.nextCase();
              }),
              C(this, "doShortcutPrevious", (e) => {
                this.previousCase();
              }),
              C(this, "doShortcutListUp", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.up(),
                  this.components.cases &&
                    l.UI.fixedContainerScrollIntoViewIfNeeded(
                      this.components.cases.getActivatedRow(),
                      this.components.listContent.getBody()
                    ));
              }),
              C(this, "doShortcutListDown", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.down(),
                  this.components.cases &&
                    l.UI.fixedContainerScrollIntoViewIfNeeded(
                      this.components.cases.getActivatedRow(),
                      this.components.listContent.getBody()
                    ));
              }),
              C(this, "doNavigatorClearItem", (e) => {
                this.clearCase(), this.refreshActions(), this.updateUrl();
              }),
              C(this, "doNavigatorActivateItem", (e) =>
                this.activateCase(
                  this.components.cases,
                  e.id,
                  e.$row,
                  this.components.cases.getField(e.id, "case")
                )
              ),
              C(this, "doNavigatorNextPage", (e) =>
                this.components.cases.nextPage()
              ),
              C(this, "doNavigatorPreviousPage", (e) =>
                this.components.cases.previousPage()
              ),
              C(this, "doNavigatorNextGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                return (
                  (t =
                    s.length > 0
                      ? this.components.groups.getAndLoadNextNode(s)
                      : Promise.resolve(this.components.groups.getFirstNode())),
                  t
                    .then((e) => {
                      if (!e || 0 == e.length) return Promise.resolve();
                      let t = e.data("id");
                      return (
                        (this.pageState.caseId = null),
                        this.components.groups.markActivatedNode(e),
                        this.components.groups.markLoading(e),
                        this.refreshFragmentsWithCustomErrorHandling([
                          "groupContainer",
                          { groupId: t },
                        ])
                          .then((s) => {
                            this.components.groups.markCompleted(e),
                              (this.pageState.caseId = null),
                              (this.pageState.groupId = t),
                              this.components.listContent.scrollTop(),
                              l.UI.fixedContainerScrollIntoViewIfNeeded(
                                this.components.groups.getActivatedNodeEntry(),
                                this.components.treeContent.getBody()
                              );
                          })
                          .catch((t) => {
                            this.components.groups.markCompleted(e),
                              f.Z.handleError(t);
                          })
                      );
                    })
                    .catch((e) => {
                      f.Z.handleError(e);
                    })
                );
              }),
              C(this, "doNavigatorPreviousGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                if (
                  ((t =
                    s.length > 0
                      ? this.components.groups.getPreviousNode(s)
                      : this.components.groups.getLastNode()),
                  0 == t.length)
                )
                  return Promise.resolve();
                let i = t.data("id");
                return (
                  (this.pageState.caseId = null),
                  this.components.groups.markActivatedNode(t),
                  this.components.groups.markLoading(t),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "groupContainer",
                    { groupId: i, paginationCurrent: n.g.PaginationCurrentMax },
                  ])
                    .then((e) => {
                      this.components.groups.markCompleted(t),
                        (this.pageState.caseId = null),
                        (this.pageState.groupId = i),
                        this.components.listContent.scrollTop(),
                        l.UI.fixedContainerScrollIntoViewIfNeeded(
                          this.components.groups.getActivatedNodeEntry(),
                          this.components.treeContent.getBody()
                        );
                    })
                    .catch((e) => {
                      this.components.groups.markCompleted(t),
                        f.Z.handleError(e);
                    })
                );
              }),
              C(this, "doMoverListDrop", (e) => {
                let t = (e) => {
                    let t = [];
                    e.each((e, s) => {
                      t.push($(s).data("id"));
                    }),
                      this.components.cases.setManyLoading(
                        t,
                        "avatarfield",
                        !0
                      ),
                      this.refreshFragments("groupCases");
                  },
                  s = (s) => {
                    s.target.hide(), "cancel" != s.actionName && t(e.$dragRows);
                  };
                if (e.dropAction == c.SJ.Choice) {
                  const t = [];
                  t.push({
                    type: "action",
                    name: "copy",
                    title: "Copy cases",
                    callback: s,
                  }),
                    t.push({
                      type: "action",
                      name: "move",
                      title: "Move cases",
                      callback: s,
                    }),
                    t.push({ type: "divider" }),
                    t.push({
                      type: "action",
                      name: "cancel",
                      title: "Cancel",
                      callback: s,
                    }),
                    new a.x(t, {
                      animations: !1,
                      showPointer: !1,
                      margin: 0,
                    }).show(null, r.Fz.BottomLeft, null, {
                      x: e.cursorX - 5,
                      y: e.cursorY - 5,
                    });
                } else t(e.$dragRows);
              }),
              C(this, "doMoverTreeDrop", (e) => {
                if (e.$dropNode.get(0) == e.$dragNode.get(0)) return;
                let t = this.components.groups.getIsParentNode(
                    e.$dropNode,
                    e.$dragNode
                  ),
                  s = (e) => {
                    this.components.groups.nodeLoading(e, () =>
                      this.remoteDelay()
                    );
                  },
                  i = (t) => {
                    t.target.hide(), "cancel" != t.actionName && s(e.$dragNode);
                  };
                if (e.dropAction == c.SJ.Choice) {
                  const s = [];
                  s.push({
                    type: "action",
                    name: "copy",
                    title: "Copy folder",
                    callback: i,
                  }),
                    s.push({
                      type: "action",
                      name: "move",
                      title: "Move folder",
                      callback: i,
                      enabled: !t,
                    }),
                    s.push({ type: "divider" }),
                    s.push({
                      type: "action",
                      name: "cancel",
                      title: "Cancel",
                      callback: i,
                    }),
                    new a.x(s, {
                      animations: !1,
                      showPointer: !1,
                      margin: 0,
                    }).show(null, r.Fz.BottomLeft, null, {
                      x: e.cursorX - 5,
                      y: e.cursorY - 5,
                    });
                } else s(e.$dragNode);
              }),
              C(this, "doCasesSelectionChange", (e) => {
                this.refreshActions();
              }),
              C(
                this,
                "doCasesStateChange",
                (e) => (
                  e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "groupCases",
                    { state: e.state },
                  ])
                    .then(() => {
                      e.target.setLoading(e.loading, !1, e.column),
                        this.updateUrl(e.state);
                    })
                    .catch((t) => {
                      e.target.setLoading(e.loading, !1, e.column),
                        f.Z.handleError(t);
                    })
                )
              ),
              C(this, "doCasesSelectColumns", (e) => {
                e.target.setLoading("selectcolumns", !0),
                  this.selectColumns().then(() => {
                    e.target.setLoading("selectcolumns", !1);
                  });
              }),
              C(this, "doMixAdded", (e, t) => {
                this.mover.setMix(e);
              }),
              C(this, "doMixRemoved", (e, t) => {
                this.mover.setMix(null);
              }),
              C(this, "doGroupsAdded", (e, t) => {
                this.pageState.groupId = null;
                let s = this.components.groups.getActivatedNode();
                s.length > 0 && (this.pageState.groupId = s.data("id")),
                  this.navigator.setTree(e),
                  this.mover.setTree(e);
              }),
              C(this, "doGroupsRemoved", (e, t) => {
                this.navigator.setTree(null), this.mover.setTree(null);
              }),
              C(this, "doGroupsLoadNode", (e) =>
                this.components.groups.nodeLoading(e.$node, () =>
                  d.N.post("dev/repositories/render_folder_subtree")
                    .then((t) => {
                      this.components.groups.addLoadedNodes(e.$node, $(t.data)),
                        this.components.groups.expandNode(e.$node);
                    })
                    .catch((e) => {
                      f.Z.handleError(e);
                    })
                )
              ),
              C(this, "doGroupsNodeClick", (e) => {
                this.components.groups.nodeLoading(e.$node, () =>
                  this.components.listContent.loading(() => {
                    let t = this.components.groups.getActivatedNode();
                    this.components.groups.markActivatedNode(e.$node),
                      this.components.mix.getDetailsVisible() &&
                        this.components.detailsContent.getContentVisible(
                          n.g.MixContentContent
                        ) &&
                        this.components.detailsContent.markLoading();
                    let s = e.id;
                    return (
                      (this.pageState.caseId = null),
                      this.refreshFragmentsWithCustomErrorHandling([
                        "groupContainer",
                        { groupId: s },
                      ])
                        .then((e) => {
                          this.components.detailsContent.markCompleted(),
                            this.clearCase(),
                            (this.pageState.groupId = s),
                            this.components.mix.getTreeOverlayVisible() &&
                              this.components.mix.hideTreeOverlay(),
                            this.components.listContent.scrollTop(),
                            this.refreshActions(),
                            this.updateUrl(),
                            this.updateStickyContent();
                        })
                        .catch((e) => {
                          this.components.groups.markActivatedNode(t),
                            this.components.detailsContent.markCompleted(),
                            this.clearCase(),
                            this.updateUrl(),
                            this.refreshActions(),
                            f.Z.handleError(e);
                        })
                    );
                  })
                );
              }),
              C(this, "doCasesAdded", (e, t) => {
                this.refreshActions(),
                  this.navigator.setList(e),
                  this.mover.setList(e);
              }),
              C(this, "doCasesRemoved", (e, t) => {
                this.navigator.setList(null), this.mover.setList(null);
              }),
              C(this, "doCasesActionClick", (e) => {
                "activate" === e.actionName &&
                  this.activateCase(e.target, e.id, e.$row, e.$field);
              }),
              C(this, "doMixDetailsHide", (e) => {
                this.clearCase(),
                  this.components.cases &&
                    this.components.cases.clearActivatedRow(),
                  this.updateUrl(),
                  this.refreshActions();
              }),
              C(this, "doGroupingMenuActionClick", (e) => {
                if ((e.target.hide(), "select" == e.actionName)) {
                  (this.pageState.groupBy = e.actionValue),
                    (this.pageState.groupId = null),
                    (this.pageState.caseId = null);
                  let t = $(this.groupingMenuIconTarget);
                  l.UI.loading(
                    t,
                    () => (
                      l.UI.setSelectActionText(t, $(e.actionItem).text()),
                      this.refreshFragmentsWithCustomErrorHandling(
                        "treeGroupContainers"
                      )
                        .then(() => {
                          (this.pageState.groupId = null),
                            this.clearCase(),
                            this.updateUrl(),
                            this.components.detailsContent.scrollTop(),
                            this.refreshActions(),
                            this.updateStickyContent();
                        })
                        .catch((e) => {
                          f.Z.handleError(e);
                        })
                    )
                  );
                }
              }),
              C(this, "doFilterMenuClick", (e) => {
                e.target.hide();
                let t = $(this.filterIconTarget);
                l.UI.loading(t, () => {
                  switch (((this.pageState.caseId = null), e.actionName)) {
                    case "all":
                      this.pageState.filter = b.All;
                      break;
                    case "subset":
                      this.pageState.filter = b.Subset;
                      break;
                    case "none":
                      this.pageState.filter = b.None;
                  }
                  return this.refreshFragmentsWithCustomErrorHandling(
                    "treeGroupContainers"
                  ).then(() => {
                    l.UI.setSelectActionCount(t, this.pageState.filter - 1),
                      this.clearCase(),
                      this.updateUrl(),
                      this.components.listContent.scrollTop(),
                      this.refreshActions();
                  });
                });
              }),
              C(this, "renderTreeGroupContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  d.N.post(
                    "dev/repositories/render_tree_group_containers",
                    d.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: ["treeContainer", "groupContainer"],
                  }))
                );
              }),
              C(this, "renderTreeGroupCaseContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  d.N.post(
                    "dev/repositories/render_tree_group_case_containers",
                    d.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: [
                      "treeContainer",
                      "groupContainer",
                      "caseContainer",
                    ],
                  }))
                );
              }),
              C(this, "renderGroupContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.groupId && (t.groupId = e.groupId),
                  e.paginationCurrent &&
                    (t.paginationCurrent = e.paginationCurrent),
                  d.N.post(
                    "dev/repositories/render_group_container",
                    d.N.toNetworkCase(t)
                  )
                );
              }),
              C(this, "renderCaseContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.caseId && (t.caseId = e.caseId),
                  d.N.post(
                    "dev/repositories/render_case_container",
                    d.N.toNetworkCase(t)
                  )
                );
              }),
              C(this, "renderGroupCases", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = e.state ? e.state : this.components.cases.getState();
                return (
                  _.defaults(t, this.pageState),
                  e.withPagination || delete t.paginationCurrent,
                  d.N.post(
                    "dev/repositories/render_group_cases",
                    d.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.pageState = {
              caseId: this.params.caseId,
              groupBy: this.params.groupBy,
              groupId: this.params.groupId,
              filter: this.params.filter,
            }),
              f.Z.requestChild(this.component, "mix", {
                onAdded: this.doMixAdded,
                onRemoved: this.doMixRemoved,
                events: { detailshide: this.doMixDetailsHide },
              }),
              f.Z.requestChild(this.component, "treeContent"),
              f.Z.requestChild(this.component, "listContent"),
              f.Z.requestChild(this.component, "detailsContent"),
              f.Z.requestChild(this.component, "groups", {
                onAdded: this.doGroupsAdded,
                onRemoved: this.doGroupsRemoved,
                events: {
                  loadnode: this.doGroupsLoadNode,
                  nodeclick: this.doGroupsNodeClick,
                },
              }),
              f.Z.requestChild(this.component, "cases", {
                onAdded: this.doCasesAdded,
                onRemoved: this.doCasesRemoved,
                events: {
                  actionclick: this.doCasesActionClick,
                  statechange: this.doCasesStateChange,
                  selectcolumns: this.doCasesSelectColumns,
                  selectionchange: this.doCasesSelectionChange,
                },
              }),
              l.UI.initialize(this.$element),
              this.fragments.register(
                "treeGroupContainers",
                this.renderTreeGroupContainers
              ),
              this.fragments.register(
                "treeGroupCaseContainers",
                this.renderTreeGroupCaseContainers
              ),
              this.fragments.register(
                "groupContainer",
                this.renderGroupContainer
              ),
              this.fragments.register(
                "caseContainer",
                this.renderCaseContainer
              ),
              this.fragments.register("groupCases", this.renderGroupCases),
              this.shortcuts.register(o.N.H, this.doShortcutPrevious, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(o.N.J, this.doShortcutListUp, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(o.N.K, this.doShortcutListDown, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(o.N.L, this.doShortcutNext, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              (this.navigator = new h.C()),
              this.navigator.events.on(
                "activateitem",
                this.doNavigatorActivateItem
              ),
              this.navigator.events.on("clearitem", this.doNavigatorClearItem),
              this.navigator.events.on("nextgroup", this.doNavigatorNextGroup),
              this.navigator.events.on("nextpage", this.doNavigatorNextPage),
              this.navigator.events.on(
                "previousgroup",
                this.doNavigatorPreviousGroup
              ),
              this.navigator.events.on(
                "previouspage",
                this.doNavigatorPreviousPage
              ),
              (this.mover = new c.FX()),
              this.mover.events.on("listdrop", this.doMoverListDrop),
              this.mover.events.on("treedrop", this.doMoverTreeDrop),
              this.params.isRepositoryEmpty ||
                this.loadInitialContent({
                  paginationCurrent: this.params.paginationCurrent,
                  paginationRows: this.params.paginationRows,
                });
          }
          unload() {
            this.navigator.setList(null),
              this.navigator.setTree(null),
              this.mover.setList(null),
              this.mover.setTree(null);
          }
          loadInitialContent(e) {
            this.pageState.caseId
              ? this.refreshFragmentsWithCustomErrorHandling([
                  "treeGroupCaseContainers",
                  e,
                ])
                  .then(() => {
                    this.components.treeContent.showContent(
                      n.g.MixContentContent
                    ),
                      this.components.listContent.showContent(
                        n.g.MixContentContent
                      ),
                      this.components.detailsContent.showContent(
                        n.g.MixContentContent
                      ),
                      this.refreshActions(),
                      this.updateStickyContent();
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              : this.refreshFragmentsWithCustomErrorHandling([
                  "treeGroupContainers",
                  e,
                ])
                  .then(() => {
                    this.components.treeContent.showContent(
                      n.g.MixContentContent
                    ),
                      this.components.listContent.showContent(
                        n.g.MixContentContent
                      ),
                      this.refreshActions(),
                      this.updateStickyContent();
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  });
          }
          doNextCase() {
            this.nextCase();
          }
          doPreviousCase() {
            this.previousCase();
          }
          nextCase() {
            this.components.groups &&
              (this.components.mix.getDetailsVisible() ||
                (this.components.detailsContent.showContent(
                  n.g.MixContentInitial
                ),
                this.components.mix.showDetails()),
              l.UI.loading($(this.nextCaseIconTarget), () =>
                this.navigator.next().then(() => {
                  this.components.cases &&
                    l.UI.fixedContainerScrollIntoViewIfNeeded(
                      this.components.cases.getActivatedRow(),
                      this.components.listContent.getBody()
                    );
                })
              ));
          }
          previousCase() {
            this.components.groups &&
              (this.components.mix.getDetailsVisible() ||
                (this.components.detailsContent.showContent(
                  n.g.MixContentInitial
                ),
                this.components.mix.showDetails()),
              l.UI.loading($(this.previousCaseIconTarget), () =>
                this.navigator.previous().then(() => {
                  this.components.cases &&
                    l.UI.fixedContainerScrollIntoViewIfNeeded(
                      this.components.cases.getActivatedRow(),
                      this.components.listContent.getBody()
                    );
                })
              ));
          }
          updateUrl(e = null) {
            let t = {};
            this.pageState.filter != b.All &&
              (t.filter = this.pageState.filter),
              this.pageState.groupBy != n.g.RepositoryGroupByFolder &&
                (t.group_by = this.pageState.groupBy),
              this.pageState.groupId && (t.group_id = this.pageState.groupId),
              e ||
                (this.components.cases &&
                  (e = this.components.cases.getState())),
              e &&
                (1 != e.paginationCurrent &&
                  (t.pagination_current = e.paginationCurrent),
                25 != e.paginationRows &&
                  (t.pagination_rows = e.paginationRows)),
              this.pageState.caseId && (t.case_id = this.pageState.caseId);
            let s = Object.keys(t).map((e) => `${e}=${t[e]}`);
            f.Z.replaceLocation("?" + s.join("&"));
          }
          refreshActions() {
            let e = this.pageState.groupBy == n.g.RepositoryGroupByFolder;
            l.UI.toggleIconActionEnabled(
              $(this.addFolderIconTarget),
              e && this.components.groups
            );
            let t = 0;
            this.components.cases &&
              (t = this.components.cases.getSelectedCount()),
              l.UI.toggleIconActionEnabled(
                $(this.addCaseIconTargets),
                e && this.components.cases
              ),
              l.UI.toggleIconActionEnabled($(this.editCasesIconTargets), t > 0),
              l.UI.toggleIconActionEnabled(
                $(this.deleteCasesIconTargets),
                t > 0
              ),
              l.UI.toggleIconActionEnabled(
                $(this.selectColumnsIconTargets),
                !!this.components.cases
              );
            let s = this.components.detailsContent.getContentVisible(
                n.g.MixContentContent
              ),
              i = this.hasCaseTitleTarget;
            l.UI.toggleIconActionEnabled($(this.editCaseIconTarget), s && i);
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTargets);
            l.UI.getIconActionEnabled(e) &&
              l.UI.loading(e, () => this.selectColumns());
          }
          selectColumns() {
            return this.remoteDelay().then(() => {
              let e = new u.U(
                "Select columns",
                "Make the column and size selection here.",
                "Save columns",
                null,
                "primary"
              );
              (e.onSuccess = () => this.refreshFragments("groupCases")),
                e.show();
            });
          }
          activateCase(e, t, s, i) {
            let o = this.components.mix.getDetailsVisible(),
              r = this.components.mix.getMode(),
              a = e.getActivatedRow();
            return (
              o
                ? this.components.detailsContent.markLoading()
                : (this.components.detailsContent.showContent(
                    n.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
              e.setLoading("actionfield", !0, i),
              e.markActivatedRow(s),
              this.refreshFragmentsWithCustomErrorHandling([
                "caseContainer",
                { caseId: t },
              ])
                .then((s) => {
                  e.setLoading("actionfield", !1, i),
                    (this.pageState.caseId = t),
                    this.components.detailsContent.markCompleted(),
                    this.components.detailsContent.showContent(
                      n.g.MixContentContent
                    ),
                    this.components.detailsContent.scrollTop(),
                    this.updateUrl(),
                    this.refreshActions();
                })
                .catch((t) => {
                  o
                    ? this.components.detailsContent.markCompleted()
                    : this.components.mix.setMode(r),
                    e.setLoading("actionfield", !1, i),
                    e.markActivatedRow(a),
                    f.Z.handleError(t);
                })
            );
          }
          doAddFolder() {
            let e = $(this.addFolderIconTarget);
            l.UI.getIconActionEnabled(e) &&
              l.UI.loading(e, () =>
                this.remoteDelay().then(() => {
                  let e = new u.U(
                    "Add folder",
                    "Really add a new folder?",
                    "Add folder",
                    null,
                    "primary"
                  );
                  (e.onSuccess = () => this.remoteDelay()), e.show();
                })
              );
          }
          doAddCase() {
            let e = $(this.addCaseIconTargets);
            l.UI.getIconActionEnabled(e) &&
              l.UI.loading(e, () =>
                this.remoteDelay().then(() => {
                  let e = new u.U(
                    "Add case",
                    "Really add a new case?",
                    "Add case",
                    null,
                    "primary"
                  );
                  (e.onSuccess = () => this.refreshFragments("groupCases")),
                    e.show();
                })
              );
          }
          doEditCase() {
            let e = $(this.editCaseIconTarget);
            l.UI.getIconActionEnabled(e) &&
              l.UI.loading(e, () =>
                this.remoteDelay().then(() => {
                  let e = new u.U(
                    "Edit case",
                    "Really edit this case?",
                    "Save case",
                    null,
                    "primary"
                  );
                  (e.onSuccess = () => this.remoteDelay()), e.show();
                })
              );
          }
          doEditCases() {
            let e = $(this.editCasesIconTargets);
            l.UI.getIconActionEnabled(e) &&
              l.UI.loading(e, () =>
                this.remoteDelay().then(() => {
                  let e = new u.U(
                    "Edit cases",
                    "Really edit the selected cases?",
                    "Save cases",
                    null,
                    "primary"
                  );
                  (e.onSuccess = () => this.refreshFragments("groupCases")),
                    e.show();
                })
              );
          }
          doDeleteCases() {
            let e = $(this.deleteCasesIconTargets);
            l.UI.getIconActionEnabled(e) &&
              l.UI.loading(e, () =>
                this.remoteDelay().then(() => {
                  let e = new g.A(
                    "Delete cases",
                    "Really delete the selected cases? Deleting the cases cannot be undone.",
                    "Delete cases"
                  );
                  (e.onSuccess = () => this.refreshFragments("groupCases")),
                    e.show();
                })
              );
          }
          doShowGroupingMenu() {
            let e = $(this.groupingMenuIconTarget);
            l.UI.popupVisible(e) ||
              l.UI.loading(e, () =>
                d.N.post("dev/repositories/render_case_grouping")
                  .then((t) => {
                    const s = new m(this.pageState.groupBy);
                    s.events.on("actionclick", this.doGroupingMenuActionClick),
                      s.show(e, r.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              );
          }
          clearCase() {
            this.components.detailsContent.showContent(
              n.g.MixContentNoSelection
            ),
              this.fragments.empty("caseContainer"),
              (this.pageState.caseId = null);
          }
          doResetFilter(e) {
            let t = $(this.filterIconTarget);
            l.UI.loading(
              t,
              () => (
                (this.pageState.filter = b.All),
                this.refreshFragmentsWithCustomErrorHandling(
                  "treeGroupContainers"
                )
                  .then(() => {
                    l.UI.setSelectActionCount(t, 0),
                      this.clearCase(),
                      this.updateUrl(),
                      this.components.detailsContent.scrollTop(),
                      this.refreshActions(),
                      this.updateStickyContent();
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              )
            );
          }
          doContentResetFilter(e) {
            let t = $(e.currentTarget),
              s = $(this.filterIconTarget);
            l.UI.loading(
              t,
              () => (
                (this.pageState.filter = b.All),
                this.refreshFragmentsWithCustomErrorHandling(
                  "treeGroupContainers"
                )
                  .then(() => {
                    l.UI.setSelectActionCount(s, 0),
                      this.clearCase(),
                      this.updateUrl(),
                      this.components.detailsContent.scrollTop(),
                      this.refreshActions(),
                      this.updateStickyContent();
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              )
            );
          }
          doRefreshFilter(e) {
            let t = $(this.refreshFilterIconTarget);
            l.UI.loading(
              t,
              () => (
                (this.pageState.caseId = null),
                this.refreshFragmentsWithCustomErrorHandling(
                  "treeGroupContainers"
                )
                  .then(() => {
                    this.clearCase(),
                      this.updateUrl(),
                      this.components.listContent.scrollTop(),
                      this.refreshActions(),
                      this.updateStickyContent();
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              )
            );
          }
          doFilter() {
            let e = $(this.filterIconTarget);
            l.UI.popupVisible(e) ||
              l.UI.loading(e, () =>
                this.remoteDelay().then(() => {
                  const t = [];
                  t.push({
                    type: "action",
                    name: "subset",
                    title: "Find some",
                    callback: this.doFilterMenuClick,
                  }),
                    t.push({
                      type: "action",
                      name: "none",
                      title: "Find none",
                      callback: this.doFilterMenuClick,
                    }),
                    t.push({ type: "divider" }),
                    t.push({
                      type: "action",
                      name: "all",
                      title: "Reset",
                      callback: this.doFilterMenuClick,
                    }),
                    new a.x(t).show(e, r.Fz.BottomLeft);
                })
              );
          }
          doNodataAddFolder(e) {
            let t = $(e.currentTarget);
            l.UI.loading(t, () => this.refreshFragments("treeGroupContainers"));
          }
          doNodataAddCase(e) {
            let t = $(e.currentTarget);
            l.UI.loading(t, () => this.refreshFragments("treeGroupContainers"));
          }
          remoteDelay() {
            return d.N.post("dev/repositories/delay");
          }
          responsiveContainerResize() {
            this.updateStickyContent();
          }
          updateStickyContent() {
            if (!this.components.listContent) return;
            let e = this.components.listContent.getBody();
            if (0 == e.length) return;
            let t = e[0].clientWidth - 40;
            this.hasGroupPropertyContainerTarget &&
              $(this.groupPropertyContainerTarget).css({ maxWidth: `${t}px` }),
              this.hasGroupAddCaseContainerTarget &&
                $(this.groupAddCaseContainerTarget).css({ maxWidth: `${t}px` });
          }
          keyDown(e) {
            e.which == o.N.ESC && this.components.mix.hideDetails();
          }
        }
        C(I, "targets", [
          "responsiveContainer",
          "addFolderIcon",
          "editCaseIcon",
          "addCaseIcon",
          "editCasesIcon",
          "deleteCasesIcon",
          "groupingMenuIcon",
          "filterIcon",
          "refreshFilterIcon",
          "caseTitle",
          "nextCaseIcon",
          "previousCaseIcon",
          "groupPropertyContainer",
          "groupAddCaseContainer",
          "groupCasesContainer",
          "selectColumnsIcon",
        ]);
      },
      17909: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => a });
        var i = s(26454),
          o = s(96622),
          n = s(5270);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.v {
          constructor(...e) {
            super(...e),
              r(this, "doCaseStepEditorAdded", (e) => {
                e.loadInitialSteps();
              }),
              r(this, "doResultStepEditorAdded", (e) => {
                e.loadInitialSteps();
              });
          }
          load() {
            o.UI.initialize(this.element),
              n.Z.requestChild(this.component, "caseStepEditor", {
                onAdded: this.doCaseStepEditorAdded,
              }),
              n.Z.requestChild(this.component, "resultStepEditor", {
                onAdded: this.doResultStepEditorAdded,
              });
          }
          unload() {}
        }
        r(a, "targets", []);
      },
      46146: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => d });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(26734),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.v {
          constructor(...e) {
            super(...e),
              l(this, "doUsersSelectionChange", (e) => {
                this.$usersSelectionCount.text(
                  this.components.users.getSelectedRows().length
                );
              }),
              l(this, "doUsersStateChange", (e) => {
                this.components.users.setLoading(e.loading, !0, e.column),
                  o.N.postReplace(
                    "dev/tables/get_users_table",
                    this.usersContainerTarget,
                    o.N.toNetworkCase(e.state)
                  ).catch((t) => {
                    this.components.users.setLoading(e.loading, !1, e.column),
                      a.Z.handleError(t);
                  });
              }),
              l(this, "doResponsiveTextResizeContent", (e) => {
                this.updateResponsiveTextContent(e);
              }),
              l(this, "doResponsiveListResizeContent", (e) => {
                this.updateResponsiveListContent(e);
              }),
              l(this, "doControlActionClick", (e) => {
                if ("edit" == e.actionName) {
                  let t = e.$row.data("name");
                  e.target.startEditingTextField(e.id, "name", t, (e) => {});
                }
              });
          }
          load() {
            n.UI.initialize(this.element),
              (this.$refreshUsersButton = $(this.refreshUsersButtonTarget)),
              (this.$usersSelectionCount = $(this.usersSelectionCountTarget)),
              a.Z.requestChild(this.component, "users", {
                onAdded: (e) => {
                  this.doUsersSelectionChange();
                },
                events: {
                  selectionchange: this.doUsersSelectionChange,
                  statechange: this.doUsersStateChange,
                },
              }),
              a.Z.requestChild(this.component, "responsiveTextTable", {
                onAdded: (e) => {
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveTextContent(e);
                },
                events: { resizecontent: this.doResponsiveTextResizeContent },
              }),
              a.Z.requestChild(this.component, "responsiveListTable", {
                onAdded: (e) => {
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveListContent(e);
                },
                events: { resizecontent: this.doResponsiveListResizeContent },
              }),
              a.Z.requestChild(this.component, "controlTable", {
                events: { actionclick: this.doControlActionClick },
              });
          }
          doRefreshUsers() {
            if (this.components.users) {
              var e = this.getUsersState();
              n.UI.markLoading(this.$refreshUsersButton),
                o.N.postReplace(
                  "dev/tables/get_users_table",
                  this.usersContainerTarget,
                  o.N.toNetworkCase(e)
                )
                  .then(() => {
                    n.UI.markCompleted(this.$refreshUsersButton),
                      n.UI.initialize(this.element);
                  })
                  .catch((e) => {
                    n.UI.markCompleted(this.$refreshUsersButton),
                      a.Z.handleError(e);
                  });
            }
          }
          getUsersState() {
            return this.components.users.getState();
          }
          updateResponsiveTextContent(e) {
            let t = document.createElement("canvas").getContext("2d");
            (t.font = "normal 15px Lato"),
              e.$fields.each((s, i) => {
                let o = $(i),
                  n = o.data("content");
                t.measureText(n).width > e.width
                  ? o.text("More ..")
                  : o.text(n);
              });
          }
          updateResponsiveListContent(e) {
            r.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
              let t = e.dataset.tags;
              return t ? JSON.parse(t) : [];
            });
          }
        }
        l(d, "targets", [
          "responsiveContainer",
          "usersContainer",
          "refreshUsersButton",
          "usersSelectionCount",
        ]);
      },
      4221: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.v {
          constructor(...e) {
            super(...e),
              a(this, "doInteractiveNodeClick", (e) => {
                this.components.interactive.nodeLoading(e.$node, () => {
                  let t = this.components.interactive.getActivatedNode();
                  return (
                    this.components.interactive.markActivatedNode(e.$node),
                    this.remoteDelay().catch((e) => {
                      this.components.interactive.markActivatedNode(t),
                        r.Z.handleError(e);
                    })
                  );
                });
              }),
              a(this, "doInteractiveLoadNode", (e) => {
                this.components.interactive.nodeLoading(e.$node, () =>
                  o.N.post("dev/trees/render_sub_nodes")
                    .then((t) => {
                      this.components.interactive.addLoadedNodes(
                        e.$node,
                        $(t.data)
                      ),
                        this.components.interactive.expandNode(e.$node);
                    })
                    .catch((e) => {
                      r.Z.handleError(e);
                    })
                );
              });
          }
          load() {
            n.UI.initialize(this.element),
              r.Z.requestChild(this.component, "interactive", {
                events: {
                  loadnode: this.doInteractiveLoadNode,
                  nodeclick: this.doInteractiveNodeClick,
                },
              });
          }
          remoteDelay() {
            return o.N.post("dev/trees/delay");
          }
        }
        a(l, "targets", ["responsiveContainer"]);
      },
      27031: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(26454),
          o = s(13814),
          n = s(16559),
          r = s(96622),
          a = s(15192),
          l = s(67694),
          d = s(69555),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.v {
          constructor(...e) {
            super(...e),
              c(this, "selectors", {
                starrable: ".starrable",
                headerAction: ".card__header__action",
                card: ".card",
                row: "tr",
              }),
              c(this, "classes", { starred: "starrable--starred" }),
              c(this, "doCancelSearch", (e) => {
                this.refreshContent(!1, !0);
              }),
              c(this, "doSearch", () => {
                this.refreshContent(!0, !0);
              }),
              c(this, "doTableActionClick", (e) => {
                "star" === e.actionName &&
                  this.toggleTableStarred(e.id, e.target, e.$field, e.$row);
              }),
              c(this, "doActiveProjectsStateChange", (e) => {
                this.stateChanged(
                  e,
                  this.components.activeProjects,
                  this.activeProjectsContainerTarget,
                  !1
                );
              }),
              c(this, "doCompletedProjectsStateChange", (e) => {
                this.stateChanged(
                  e,
                  this.components.completedProjects,
                  this.completedProjectsContainerTarget,
                  !0
                );
              });
          }
          load() {
            r.UI.initialize(this.element),
              this.hasAddButtonTarget &&
                (this.$addButton = $(this.addButtonTarget)),
              h.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                },
              }),
              h.Z.requestChild(this.component, "activeProjects", {
                events: {
                  statechange: this.doActiveProjectsStateChange,
                  actionclick: this.doTableActionClick,
                },
              }),
              h.Z.requestChild(this.component, "completedProjects", {
                events: {
                  statechange: this.doCompletedProjectsStateChange,
                  actionclick: this.doTableActionClick,
                },
              }),
              this.params.notification &&
                n.T.showPageNotification(this.params.notification)
                  .then(() => h.Z.layout.navbar.refreshNotifications())
                  .catch((e) => {
                    h.Z.handleError(e);
                  }),
              !this.params.notification &&
                this.params.showTour &&
                setTimeout(() => {
                  this.loaded &&
                    h.Z.layout.navbar &&
                    0 == d.GI.visiblePopups.length &&
                    h.Z.layout.navbar.doShowTour();
                }, 700);
          }
          addProject() {
            return o.N.post("admin/projects/render_create")
              .then((e) => {
                r.UI.markCompleted(this.$addButton);
                const t = new a.q(a.G.Add);
                (t.onSuccess = (e) => o.N.visit("projects/view/" + e.id)),
                  t.show(e.data);
              })
              .catch((e) => {
                h.Z.handleError(e);
              });
          }
          doTourAddProject() {
            return this.addProject();
          }
          doAddProject() {
            r.UI.loading(this.$addButton, () => this.addProject());
          }
          toggleTableStarred(e, t, s, i) {
            t.setLoading("actionfield", !0, s);
            let n,
              r = i.data("starred");
            (n = i.data("starred")
              ? "projects/unstar/" + e
              : "projects/star/" + e),
              o.N.post(n)
                .then((e) => {
                  t.setLoading("actionfield", !1, s),
                    i.data("starred", !r),
                    $(this.selectors.starrable, s).toggleClass(
                      this.classes.starred,
                      !r
                    ),
                    h.Z.resetPopupTracker();
                })
                .catch((e) => {
                  t.setLoading("actionfield", !1, s), h.Z.handleError(e);
                });
          }
          doToggleCardStarred(e) {
            let t,
              s = $(e.target),
              i = s.closest(this.selectors.headerAction),
              n = s.closest(this.selectors.card),
              a = n.data("id"),
              l = n.data("starred");
            r.UI.markLoading(i),
              (t = l ? "projects/unstar/" + a : "projects/star/" + a),
              o.N.post(t)
                .then((e) => {
                  r.UI.markCompleted(i),
                    n.data("starred", !l),
                    $(this.selectors.starrable, i).toggleClass(
                      this.classes.starred,
                      !l
                    ),
                    h.Z.resetPopupTracker();
                })
                .catch((e) => {
                  r.UI.markCompleted(i), h.Z.handleError(e);
                });
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget);
            if (r.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.row).data("id");
            r.UI.loading(t, () =>
              o.N.post("projects/render_stats/" + s)
                .then((e) => {
                  new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                })
                .catch((e) => {
                  h.Z.handleError(e);
                })
            );
          }
          refreshContent(e = !1, t = !1) {
            let s = {
              forceActive: "activeProjects" in this.components || e,
              forceCompleted: "completedProjects" in this.components,
              allowEmpty: !this.hasFavoriteHeaderTarget,
            };
            if ("activeProjects" in this.components) {
              let e = o.N.toNetworkCase(
                this.components.activeProjects.getState()
              );
              t && delete e.pagination_current,
                this.components.searchBar.getHasSearched() &&
                  (e.search = this.components.searchBar.getSearchTerm()),
                (s.active = e);
            }
            if ("completedProjects" in this.components) {
              let e = o.N.toNetworkCase(
                this.components.completedProjects.getState()
              );
              t && delete e.pagination_current,
                this.components.searchBar.getHasSearched() &&
                  (e.search = this.components.searchBar.getSearchTerm()),
                (s.completed = e);
            }
            return (
              this.components.searchBar.setInputLoading(!0),
              o.N.postReplace(
                "home/render_tables",
                this.contentContainerTarget,
                o.N.toNetworkCase(s)
              )
                .then(() => {
                  this.components.searchBar.setInputLoading(!1);
                })
                .catch((e) => {
                  this.components.searchBar.setInputLoading(!1),
                    h.Z.handleError(e);
                })
            );
          }
          stateChanged(e, t, s, i) {
            t.setLoading(e.loading, !0, e.column);
            let n = e.state;
            (n.isCompleted = i),
              this.components.searchBar.getHasSearched() &&
                (n.search = this.components.searchBar.getSearchTerm()),
              o.N.postReplace(
                "home/render_table",
                s,
                o.N.toNetworkCase(n)
              ).catch((s) => {
                t.setLoading(e.loading, !1, e.column), h.Z.handleError(s);
              });
          }
        }
        c(u, "targets", [
          "responsiveContainer",
          "activeProjectsContainer",
          "completedProjectsContainer",
          "contentContainer",
          "addButton",
          "favoriteHeader",
        ]);
      },
      6015: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i,
          o,
          n,
          r = s(26454),
          a = s(10380),
          l = s(43689),
          d = s(15612),
          h = s(13814),
          c = s(5270);
        class u extends r.v {
          load() {
            (this.messenger = new a.P()),
              (this.interopOrigin = l.Z.originFromUrl(this.params.interopUrl)),
              this.refreshParentSize();
          }
          refreshParentSize() {
            this.messenger.post(window.parent, this.interopOrigin, {
              messageType: d.g.MessageJiraResizeFrame,
              height: $(this.element).outerHeight(),
            });
          }
          doShowLoginTip() {
            $(this.loginMessageTarget).show(), this.refreshParentSize();
          }
          doCheckLogin() {
            this.checkLoginAttempt(1);
          }
          checkLoginAttempt(e) {
            h.N.post("interop/jira-connect/auth/check")
              .then((t) => {
                let s = null;
                switch (
                  (t && t.data && void 0 !== t.data.code && (s = t.data.code),
                  s)
                ) {
                  case 1:
                    1 == e
                      ? this.checkLoginAttempt(e + 1)
                      : this.showLoginError();
                    break;
                  case 2:
                    this.showLoginLink();
                    break;
                  default:
                    this.showLoginError();
                }
              })
              .catch((e) => {
                c.Z.handleError(e);
              });
          }
          showLoginError() {
            $(this.checkLoginLinkTarget).hide(),
              $(this.loginWarningTarget).show(),
              this.refreshParentSize();
          }
          showLoginLink() {
            $(this.checkLoginLinkTarget).hide(),
              $(this.loginLinkTarget).removeClass("default-hidden"),
              $(this.loginLinkTarget)
                .find("a")
                .addClass("highlight-background-strong");
          }
        }
        (n = ["loginMessage", "loginWarning", "checkLoginLink", "loginLink"]),
          (o = "targets") in (i = u)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      13287: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i = s(26454),
          o = s(10380),
          n = s(43689),
          r = s(15612),
          a = s(13814),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends i.v {
          constructor(...e) {
            super(...e),
              d(this, "classes", {
                hidden: "default-hidden",
                sectionCollapsed:
                  "interop-jira-connect-issues-view-section--collapsed",
                expandablePrimaryRowExpanded:
                  "interop-jira-connect-issues-expandable__primary-row--expanded",
              }),
              d(this, "selectors", {
                expandableSecondaryRow:
                  ".interop-jira-connect-issues-expandable__secondary-row",
                td: "td",
              }),
              d(this, "doTableConnected", (e, t) => {
                this.updateTableToolbar(e);
              }),
              d(this, "doTableAdded", (e, t) => {
                this.updateTableToolbar(e);
              }),
              d(this, "doTableStateChange", (e) => {
                e.target.loading(e.loading, e.column, () => {
                  let t = e.state;
                  return (
                    (t.issue = this.issueKey),
                    a.N.postReplace(
                      "interop/jira-connect/ui/issues/" +
                        e.target.getParams().renderMethod,
                      e.target.$element.parent(),
                      a.N.toNetworkCase(t)
                    )
                      .then(() => {
                        this.refreshParentSize();
                      })
                      .catch((e) => {
                        l.Z.handleError(e);
                      })
                  );
                });
              }),
              d(this, "doRepositoryCasesActionClick", (e) => {
                "expand" === e.actionName &&
                  this.toggleRepositoryCaseResults(e);
              });
          }
          load() {
            (this.issueKey = this.params.issueKey),
              (this.messenger = new o.P()),
              (this.interopOrigin = n.Z.originFromUrl(this.params.interopUrl)),
              this.refreshParentSize();
            let e = [
              "automationRunTestComments",
              "milestones",
              "runResults",
              "runs",
              "sessionResults",
              "sessions",
            ];
            for (let t of e)
              l.Z.requestChild(this.component, t, {
                onConnected: this.doTableConnected,
                onAdded: this.doTableAdded,
                events: { statechange: this.doTableStateChange },
              });
            l.Z.requestChild(this.component, "repositoryCases", {
              onConnected: this.doTableConnected,
              onAdded: this.doTableAdded,
              events: {
                statechange: this.doTableStateChange,
                actionclick: this.doRepositoryCasesActionClick,
              },
            });
          }
          refreshParentSize() {
            this.messenger.post(window.parent, this.interopOrigin, {
              messageType: r.g.MessageJiraResizeFrame,
              height: $(this.element).outerHeight(),
            });
          }
          doToggleSection(e) {
            $(e.currentTarget)
              .parent()
              .toggleClass(this.classes.sectionCollapsed),
              this.refreshParentSize();
          }
          updateTableToolbar(e) {
            if (e) {
              let t = e.getToolbarElement();
              t.removeClass(this.classes.hidden),
                t.css({ top: "-52px", right: "30px" });
            }
          }
          toggleRepositoryCaseResults(e) {
            e.$row.hasClass(this.classes.expandablePrimaryRowExpanded)
              ? (e.$row.removeClass(this.classes.expandablePrimaryRowExpanded),
                e.$row
                  .next(this.selectors.expandableSecondaryRow)
                  .find(this.selectors.td)
                  .empty(),
                this.refreshParentSize())
              : e.target.loading("field", e.$field, () => {
                  let t = e.$row
                    .next(this.selectors.expandableSecondaryRow)
                    .find(this.selectors.td);
                  return a.N.postReplace(
                    "interop/jira-connect/ui/issues/render_repository_case_results/" +
                      e.$row.data("id"),
                    t
                  )
                    .then(() => {
                      e.$row.addClass(
                        this.classes.expandablePrimaryRowExpanded
                      ),
                        this.refreshParentSize();
                    })
                    .catch((e) => {
                      l.Z.handleError(e);
                    });
                });
          }
        }
        d(h, "targets", ["responsiveContainer"]);
      },
      15538: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => w });
        var i = s(24862),
          o = s(13814),
          n = s(16559),
          r = s(69555);
        class a extends r.GI {
          constructor() {
            super("layout.help_menu", { margin: 8, hideOtherPopupsOnShow: !0 });
          }
        }
        class l extends r.GI {
          constructor() {
            super("layout.user_menu", { margin: 8, hideOtherPopupsOnShow: !0 });
          }
        }
        var d = s(96622),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends r.GI {
          constructor() {
            super("layout.notification_menu", {
              margin: 8,
              hideOtherPopupsOnShow: !0,
              horizontalOffset: 40,
            }),
              c(this, "classes", { hidden: "default-hidden" });
          }
          load() {
            o.N.postReplace(
              "users/profile/render_notification_menu",
              this.$contentContainer
            )
              .then(() => {
                this.rebindAll(), d.UI.initialize(this.$popup);
              })
              .catch((e) => {
                h.Z.handleError(e);
              });
          }
        }
        c(u, "targets", ["contentContainer"]);
        var g = s(47914),
          p = s(58947),
          m = s(11802);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends r.GI {
          constructor() {
            super("tour.popup", { horizontalOffset: -20 }),
              f(this, "selectors", { step: ".tour-popup__step" });
          }
          load() {}
          unload() {}
          doShowStep(e) {
            let t = $(e.currentTarget).closest(this.selectors.step);
            this.$steps.attr("data-expanded", t.data("step"));
          }
          doAddProject(e) {
            h.Z.layout.page && h.Z.layout.page.doTourAddProject
              ? d.UI.loading($(e.currentTarget), () =>
                  h.Z.layout.page.doTourAddProject().then(() => {
                    this.hide();
                  })
                )
              : o.N.visit("admin/projects");
          }
          doCompleteTour(e) {
            d.UI.loading($(e.currentTarget), () =>
              o.N.post("tour/complete")
                .then(() => {
                  h.Z.layout.navbar && h.Z.layout.navbar.increaseTourCounter(),
                    this.hide();
                })
                .catch((e) => {
                  h.Z.handleError(e);
                })
            );
          }
        }
        f(C, "targets", ["steps"]),
          f(C, "actions", ["doShowStep", "doAddProject", "doCompleteTour"]);
        class b extends r.GI {
          constructor() {
            super("layout.trial_popup", {});
          }
          load() {}
          unload() {}
        }
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends i.Qr {
          constructor(...e) {
            super(...e),
              I(this, "selectors", {
                menuLinks: ".navbar__menu ul li a",
                menuLinkIcons: ".navbar__menu ul li a i",
                menuItem: ".navbar__menu ul li",
                avatar: ".avatar",
              }),
              I(this, "classes", {
                search: "navbar--search",
                hasNotifications: "navbar__user__icon__link--has-notifications",
                menuItemSelected: "navbar__menu__item--selected",
              }),
              I(this, "doUserMenuActionClick", (e) => {
                "logout" == e.actionName && o.N.formPost("auth/logout");
              }),
              I(this, "doNotificationMenuActionClick", (e) => {
                if ("notification" == e.actionName) {
                  let t = $(e.actionItem);
                  d.UI.markLoading($(this.selectors.avatar, t));
                  let s = t.data("notification");
                  n.T.open(s).then(() => {
                    e.target.hide(), this.refreshNotifications();
                  });
                }
              }),
              I(this, "doMenuLinkClick", (e) => {
                let t = $(e.currentTarget);
                e.shiftKey || e.metaKey || e.ctrlKey || e.altKey
                  ? t.blur()
                  : (this.$menuLinks
                      .closest(this.selectors.menuItem)
                      .removeClass(this.classes.menuItemSelected),
                    t
                      .closest(this.selectors.menuItem)
                      .addClass(this.classes.menuItemSelected));
              });
          }
          connect() {
            h.Z.registerLayout("navbar", this),
              (this.$navbar = $(this.element));
            let e = this.$navbar.attr("data-views");
            if (e) {
              let t = JSON.parse(e);
              h.Z.views.add(t);
            }
            h.Z.delayLoaded(() => {
            //   d.UI.initialize(this.element),
            //     (this.helpMenu = new a()),
            //     this.helpMenu.attach(
            //       this.helpMenuTarget,
            //       r.Fz.BottomRight,
            //       r.ec.ClickHover
            //     ),
            //     (this.userMenu = new l()),
            //     this.userMenu.events.on(
            //       "actionclick",
            //       this.doUserMenuActionClick
            //     ),
            //     this.userMenu.attach(
            //       this.userMenuTarget,
            //       r.Fz.BottomRight,
            //       r.ec.ClickHover
            //     ),
            //     (this.notificationMenu = new u()),
            //     this.notificationMenu.attach(
            //       this.notificationMenuTarget,
            //       r.Fz.BottomRight,
            //       r.ec.ClickHover
            //     ),
            //     this.notificationMenu.events.on(
            //       "actionclick",
            //       this.doNotificationMenuActionClick
            //     ),
            //     (this.$menuLinks = $(this.selectors.menuLinks, this.element)),
            //     p.B.initialize(this.$menuLinks, {
            //       popupSettings: {
            //         hoverable: !1,
            //         hoverShowDelay: g.X.TooltipLongDelay,
            //         hoverHideDelay: g.X.TooltipHideDelay,
            //       },
            //       position: r.Fz.BottomCenter,
            //       onBeforeShow: () =>
            //         $("body").get(0).scrollHeight >= g.X.BodyMinPopupHeight &&
            //         "none" !=
            //           $(this.selectors.menuLinkIcons, this.element).css(
            //             "display"
            //           ),
            //       variant: "inverted",
            //     }),
            //     this.hasTrialButtonTarget &&
            //       p.B.initialize(this.trialButtonTarget, {
            //         clickable: !0,
            //         hoverable: !1,
            //         popupSettings: {
            //           hoverable: !0,
            //           hoverShowDelay: g.X.TooltipShortDelay,
            //         },
            //       }),
            //     this.$menuLinks.on("click", this.doMenuLinkClick);
            });
          }
          disconnect() {
            this.$menuLinks &&
              (p.B.uninitialize(this.$menuLinks),
              this.$menuLinks.off("click", this.doMenuLinkClick)),
              this.helpMenu && this.helpMenu.detach(),
              this.userMenu &&
                (this.userMenu.events.off(
                  "actionclick",
                  this.doUserMenuActionClick
                ),
                this.userMenu.detach()),
              this.notificationMenu &&
                (this.notificationMenu.events.off(
                  "actionclick",
                  this.doNotificationMenuActionClick
                ),
                this.notificationMenu.detach()),
              h.Z.unregisterLayout("navbar", this);
          }
          doSearch() {
            let e = $(this.searchInputTarget),
              t = $(this.searchScopeTarget),
              s = $(this.element);
            d.UI.setText(e, ""),
              d.UI.setDropdown(t, d.UI.getDropdownIndexValue(t, 0)),
              s.addClass(this.classes.search),
              d.UI.focusText(e);
          }
          doSearchCancel() {
            $(this.element).removeClass(this.classes.search);
          }
          doSearchKeyDown(e) {
            e.which == m.N.ESC && this.doSearchCancel();
          }
          doShowTour() {
            let e = $(this.tourButtonTarget);
            d.UI.popupVisible(e) ||
              d.UI.loading(e, () =>
                o.N.post("tour/render")
                  .then((t) => {
                    new C().show(e, r.Fz.BottomCenter, t.data);
                  })
                  .catch((e) => {
                    h.Z.handleError(e);
                  })
              );
          }
          doShowTrial() {
            let e = $(this.trialButtonTarget);
            d.UI.popupVisible(e) || new b().show(e, r.Fz.BottomCenter);
          }
          refreshNotifications() {
            return o.N.post("users/profile/get").then((e) => {
              $(this.notificationMenuTarget).toggleClass(
                this.classes.hasNotifications,
                e.data.notifications_unread > 0
              );
            });
          }
          increaseTourCounter() {
            if (this.hasTourCounterTarget) {
              let e = $(this.tourCounterTarget);
              e.text(e.data("count") + 1);
            }
          }
        }
        I(w, "targets", [
          "searchInput",
          "searchScope",
          "helpMenu",
          "userMenu",
          "notificationMenu",
          "trialButton",
          "tourButton",
          "tourCounter",
        ]);
      },
      68097: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => p });
        var i = s(24862),
          o = s(96622),
          n = s(13814),
          r = s(47914),
          a = s(69555);
        class l extends a.GI {
          constructor(e) {
            super("layout.project_menu", { horizontalOffset: e });
          }
        }
        class d extends a.GI {
          constructor(e, t) {
            super(`layout.sidebar_${e}_menu`, { verticalOffset: t });
          }
        }
        var h = s(58947),
          c = s(58771),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        const p = class extends i.Qr {
          constructor(...e) {
            super(...e),
              g(this, "selectors", {
                sticky: ".sidebar__sticky",
                menu: ".sidebar__menu",
                projectSelect: ".sidebar__menu__project-select",
                projectSelectAvatar: ".sidebar__menu__project-select .avatar",
                navLinks: ".sidebar__menu__nav ul li a",
                navItem: ".sidebar__menu__nav ul li",
                fullNavLinks: ".sidebar__menu__nav--full ul li a",
                navFull: ".sidebar__menu__nav--full",
                compactMenuLink: ".sidebar__menu__nav--compact a",
              }),
              g(this, "classes", {
                forceCollapsed: "sidebar--force_collapsed",
                collapsed: "sidebar--collapsed",
                menuCompact: "sidebar__menu--compact",
                transitioning: "sidebar--transitioning",
                withTransitions: "sidebar--with-transitions",
                navItemSelected: "sidebar__menu__nav__item--selected",
              }),
              g(this, "doWindowScroll", (e) => {
                this.refreshSticky() && this.toggleCompactMenu();
              }),
              g(this, "doWindowResize", (e) => {
                window.innerWidth < r.X.SidebarBreakpoint
                  ? (this.forceCollapsed ||
                      (this.$sidebar.addClass(this.classes.forceCollapsed),
                      this.updatePersistentSettings({ forceCollapsed: !0 }),
                      (this.forceCollapsed = !0)),
                    this.expanded && this.collapse(!0, !1))
                  : (this.forceCollapsed &&
                      (this.$sidebar.removeClass(this.classes.forceCollapsed),
                      this.updatePersistentSettings({ forceCollapsed: !1 }),
                      (this.forceCollapsed = !1)),
                    this.expanded ||
                      (this.userPrefersExpanded && this.expand(!0, !1))),
                  this.toggleCompactMenu();
              }),
              g(this, "doNavLinkClick", (e) => {
                let t = $(e.currentTarget);
                e.shiftKey || e.metaKey || e.ctrlKey || e.altKey
                  ? t.blur()
                  : (this.$navLinks
                      .closest(this.selectors.navItem)
                      .removeClass(this.classes.navItemSelected),
                    t
                      .closest(this.selectors.navItem)
                      .addClass(this.classes.navItemSelected));
              });
          }
          connect() {
            u.Z.registerLayout("sidebar", this),
              (this.events = new c.U()),
              (this.expanded = !0),
              (this.$sidebar = $(this.element)),
              (this.$window = $(window)),
              (this.sidebarName = this.$sidebar.data("sidebar"));
            let e = this.$sidebar.attr("data-views");
            if (e) {
              let t = JSON.parse(e);
              u.Z.views.add(t);
            }
            (this.$sticky = $(this.selectors.sticky, this.element)),
              (this.stickyTop = -1),
              (this.stickyLeft = -1),
              (this.$sidebarMenu = $(this.selectors.menu, this.element)),
              (this.$compactMenuLink = $(
                this.selectors.compactMenuLink,
                this.element
              )),
              (this.$projectSelect = $(
                this.selectors.projectSelect,
                this.element
              )),
              (this.$projectSelectAvatar = $(
                this.selectors.projectSelectAvatar,
                this.element
              )),
              (this.hasProject = this.$projectSelect.length > 0),
              window.addEventListener("scroll", this.doWindowScroll, {
                passive: !0,
              }),
              window.addEventListener("resize", this.doWindowResize, {
                passive: !0,
              });
            let t = u.Z.cookies.getCookieObject("sidebar"),
              s = {};
            t &&
              ((s.forceCollapsed = t.forceCollapsed),
              (s.userStatePreference = t.userStatePreference),
              (s.compactMenu = t.compactMenu)),
              _.defaults(s, {
                userStatePreference: "expanded",
                forceCollapsed: !1,
                compactMenu: !1,
              }),
              (this.persistentSettings = s),
              (this.userPrefersExpanded =
                "expanded" == this.persistentSettings.userStatePreference),
              (this.forceCollapsed = this.persistentSettings.forceCollapsed),
              !this.userPrefersExpanded || this.forceCollapsed
                ? this.collapse(!1, !1)
                : this.expand(!1, !1),
              this.forceCollapsed
                ? this.$sidebar.addClass(this.classes.forceCollapsed)
                : this.$sidebar.removeClass(this.classes.forceCollapsed),
              (this.isCompactMenu = this.persistentSettings.compactMenu),
              this.isCompactMenu
                ? this.$sidebarMenu.addClass(this.classes.menuCompact)
                : this.$sidebarMenu.removeClass(this.classes.menuCompact),
              u.Z.delayLoaded(() => {
                // o.UI.initialize(this.element),
                //   (this.$fullNavLinks = $(
                //     this.selectors.fullNavLinks,
                //     this.element
                //   )),
                //   h.B.initialize(this.$fullNavLinks, {
                //     popupSettings: {
                //       hoverable: !1,
                //       hoverShowDelay: r.X.TooltipLongDelay,
                //       hoverHideDelay: r.X.TooltipHideDelay,
                //     },
                //     position: a.Fz.RightCenter,
                //     onBeforeShow: () =>
                //       $("body").get(0).scrollHeight >= r.X.BodyMinPopupHeight &&
                //       !this.expanded,
                //     variant: "inverted",
                //   }),
                //   (this.$navLinks = $(this.selectors.navLinks, this.elements)),
                //   this.$navLinks.on("click", this.doNavLinkClick),
                //   (this.navbarHeight = $(".navbar").height()),
                //   window.innerWidth < r.X.SidebarBreakpoint
                //     ? (this.$sidebar.addClass(this.classes.forceCollapsed),
                //       this.updatePersistentSettings({ forceCollapsed: !0 }),
                //       (this.forceCollapsed = !0),
                //       this.expanded && this.collapse(!1, !1))
                //     : (this.$sidebar.removeClass(this.classes.forceCollapsed),
                //       this.updatePersistentSettings({ forceCollapsed: !1 }),
                //       (this.forceCollapsed = !1),
                //       this.userPrefersExpanded &&
                //         !this.expanded &&
                //         this.expand(!1, !1)),
                //   this.toggleCompactMenu(!0),
                //   this.refreshSticky();
              });
          }
          disconnect() {
            this.$fullNavLinks && h.B.uninitialize(this.$fullNavLinks),
              this.$navLinks &&
                this.$navLinks.off("click", this.doNavLinkClick),
              window.removeEventListener("scroll", this.doWindowScroll, {
                passive: !0,
              }),
              window.removeEventListener("resize", this.doWindowResize, {
                passive: !0,
              }),
              u.Z.unregisterLayout("sidebar", this);
          }
          updatePersistentSettings(e) {
            let t = {};
            _.defaults(t, e, this.persistentSettings),
              (this.persistentSettings = t),
              u.Z.cookies.setCookieObject("sidebar", t);
          }
          toggleCompactMenu(e = !1) {
            e &&
              ((this.fullSidebarMenuHeight = $(
                this.selectors.navFull,
                this.element
              ).outerHeight()),
              (this.projectSelectHeight = this.hasProject
                ? $(this.selectors.projectSelect, this.element).outerHeight()
                : 0));
            var t = this.$sidebarMenu.outerHeight();
            this.fullSidebarMenuHeight + this.projectSelectHeight + 20 >= t
              ? this.isCompactMenu ||
                (this.$sidebarMenu.addClass(this.classes.menuCompact),
                (this.isCompactMenu = !0),
                this.updatePersistentSettings({ compactMenu: !0 }))
              : this.isCompactMenu &&
                (this.$sidebarMenu.removeClass(this.classes.menuCompact),
                (this.isCompactMenu = !1),
                this.updatePersistentSettings({ compactMenu: !1 }),
                this.hideSidebarMenu());
          }
          refreshSticky() {
            var e = Math.max(0, this.navbarHeight - this.$window.scrollTop()),
              t = Math.min(0, -this.$window.scrollLeft()),
              s = this.stickyTop != e,
              i = this.stickyLeft != t;
            if (((this.stickyTop = e), (this.stickyLeft = t), s)) {
              var o = `calc(100vh - ${e}px`;
              this.$sticky.css("top", `${e}px`), this.$sticky.css("height", o);
            }
            return i && this.$sticky.css("left", `${t}px`), s || i;
          }
          expand(e, t) {
            let s = this.toggleTransition(e);
            this.$sidebar.removeClass(this.classes.collapsed),
              (this.expanded = !0),
              t &&
                ((this.userPrefersExpanded = !0),
                this.updatePersistentSettings({
                  userStatePreference: "expanded",
                })),
              e &&
                (this.hideProjectMenu(),
                this.hideSidebarMenu(),
                this.toggleCompactMenu(!0),
                s.then(() => {
                  this.triggerChange(!0);
                }));
          }
          collapse(e, t) {
            let s = this.toggleTransition(e);
            this.$sidebar.addClass(this.classes.collapsed),
              (this.expanded = !1),
              t &&
                ((this.userPrefersExpanded = !1),
                this.updatePersistentSettings({
                  userStatePreference: "collapsed",
                })),
              e &&
                (this.hideProjectMenu(),
                this.hideSidebarMenu(),
                this.toggleCompactMenu(!0),
                s.then(() => {
                  this.triggerChange(!1);
                }));
          }
          triggerChange(e) {
            this.events.trigger("change", { target: this, expanded: e });
          }
          toggleTransition(e) {
            if (e) {
              let e = new Promise((e, t) => {
                  this.$sidebar.one("transitionend", (t) => {
                    this.$sidebar.removeClass(this.classes.transitioning), e();
                  });
                }),
                t = new Promise((e, t) => {
                  setTimeout(() => {
                    e();
                  }, r.X.SidebarAnimationDelay);
                });
              return (
                this.$sidebar.addClass(this.classes.withTransitions),
                this.$sidebar.addClass(this.classes.transitioning),
                Promise.all([e, t])
              );
            }
            return (
              this.$sidebar.removeClass(this.classes.withTransitions),
              Promise.resolve()
            );
          }
          doExpand() {
            this.expand(!0, !0);
          }
          doCollapse() {
            this.collapse(!0, !0);
          }
          doProjectSelect(e) {
            const t = e.currentTarget,
              s = $(e.currentTarget);
            o.UI.popupVisible(s) ||
              (o.UI.markLoading(this.$projectSelectAvatar),
              n.N.post("projects/render_sidebar_menu")
                .then((e) => {
                  o.UI.markCompleted(this.$projectSelectAvatar),
                    (this.projectMenu = new l(this.expanded ? 0 : 10)),
                    this.projectMenu.show(
                      t,
                      this.expanded ? a.Fz.BottomLeft : a.Fz.RightTop,
                      e.data
                    );
                })
                .catch((e) => {
                  o.UI.markCompleted(this.$projectSelectAvatar),
                    u.Z.handleError(e);
                }));
          }
          doCompactMenu(e) {
            const t = $(e.currentTarget);
            o.UI.popupVisible(t) ||
              ((this.sidebarMenu = new d(this.sidebarName, 10)),
              this.sidebarMenu.show(e.currentTarget, a.Fz.RightTop));
          }
          hideProjectMenu() {
            this.hasProject && this.projectMenu && this.projectMenu.hide();
          }
          hideSidebarMenu() {
            this.sidebarMenu && this.sidebarMenu.hide();
          }
        };
      },
      76671: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => c });
        var i = s(10313),
          o = s(13814),
          n = s(96622),
          r = s(15331),
          a = s(69555),
          l = s(5960),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.BaseController {
          constructor(...e) {
            super(...e),
              h(this, "doAutomationRunsActionClick", (e) => {
                "show" === e.actionName &&
                  this.showCase(e.target, e.id, e.$field, e.$action);
              }),
              h(this, "doRunResultGroupsChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["runResultPage", { state: e.state }])
                )
              ),
              h(this, "doSessionResultGroupsChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments([
                    "sessionResultPage",
                    { state: e.state },
                  ])
                )
              ),
              h(this, "doResultTabsChange", (e) => {
                this.refreshFragments([
                  "resultTabContent",
                  { tab: e.index },
                ]).then(() => {
                  this.components.resultTabs.highlightTab(e.index),
                    this.components.resultTabs.setLoading(!1);
                });
              }),
              h(this, "renderResultTabContent", (e = {}) => {
                let t, s;
                return (
                  (t =
                    "tab" in e
                      ? e.tab
                      : this.components.resultTabs.getCurrentTab()),
                  (s =
                    0 == t
                      ? "milestones/render_run_results/" + this.milestone.id
                      : 1 == t
                      ? "milestones/render_session_results/" + this.milestone.id
                      : "milestones/render_automation_results/" +
                        this.milestone.id),
                  o.N.post(s, o.N.toNetworkCase({}))
                );
              }),
              h(this, "afterRenderResultTabContent", () => {
                (this.runResultsStatuses = null),
                  (this.sessionResultsStatuses = null);
              }),
              h(this, "renderRunResultPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  this.runResultsStatuses &&
                    (t.statuses = this.runResultsStatuses),
                  o.N.post(
                    "milestones/render_run_result_page/" + this.milestone.id,
                    o.N.toNetworkCase(t)
                  )
                );
              }),
              h(this, "renderSessionResultPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  this.sessionResultsStatuses &&
                    (t.statuses = this.sessionResultsStatuses),
                  o.N.post(
                    "milestones/render_session_result_page/" +
                      this.milestone.id,
                    o.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.page = { name: "activity" }),
              (this.milestone = this.params.milestone),
              (this.projectId = this.params.projectId),
              (this.canDelete = this.params.canDelete),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canReopen = this.params.canReopen),
              (this.runResultsStatuses = null),
              (this.sessionResultsStatuses = null),
              d.Z.requestChild(this.component, "resultTabs", {
                events: { tabchange: this.doResultTabsChange },
              }),
              d.Z.requestChild(this.component, "runResultGroups", {
                events: { statechange: this.doRunResultGroupsChange },
              }),
              d.Z.requestChild(this.component, "sessionResultGroups", {
                events: { statechange: this.doSessionResultGroupsChange },
              }),
              d.Z.requestChild(this.component, "failures", {
                events: { actionclick: this.doAutomationRunsActionClick },
              }),
              d.Z.requestChild(this.component, "slowest", {
                events: { actionclick: this.doAutomationRunsActionClick },
              }),
              n.UI.initialize(this.element),
              (this.fragmentsAfterEdit = ["about", "header"]),
              (this.fragmentsAfterComplete = ["about", "header"]),
              (this.fragmentsAfterStart = ["about", "header"]),
              (this.fragmentsAfterStop = ["about", "header"]),
              (this.fragmentsAfterReopen = ["about", "header"]),
              this.registerBaseFragments(),
              this.fragments.register(
                "resultTabContent",
                this.renderResultTabContent,
                { completedCallback: this.afterRenderResultTabContent }
              ),
              this.fragments.register(
                "runResultPage",
                this.renderRunResultPage
              ),
              this.fragments.register(
                "sessionResultPage",
                this.renderSessionResultPage
              );
          }
          showCase(e, t, s, i) {
            n.UI.popupVisible(i) ||
              e.loading("actionfield", s, () =>
                o.N.post("automation/sources/render_case/" + t)
                  .then((e) => {
                    new l.o().show(i, a.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    d.Z.handleError(e);
                  })
              );
          }
          doRunListFilter(e) {
            let t = $(this.runListFilterIconTarget),
              s = $(this.runListFilterIconLabelTarget);
            n.UI.popupVisible(s) ||
              n.UI.loading(t, () => {
                let e = {};
                return (
                  this.runResultsStatuses &&
                    (e.selected = this.runResultsStatuses),
                  o.N.post(
                    "milestones/render_run_result_status_filter/" +
                      this.milestone.id,
                    o.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const i = new r.d();
                      (i.onSubmit = (e) => (
                        e.condition.values && e.condition.values.length > 0
                          ? (this.runResultsStatuses = e.condition.values)
                          : (this.runResultsStatuses = null),
                        this.refreshFragments("runResultPage").then(() => {
                          e.condition.values && e.condition.values.length > 0
                            ? n.UI.setSelectActionCount(
                                t,
                                e.condition.values.length
                              )
                            : n.UI.setSelectActionCount(t, 0);
                        })
                      )),
                        i.show(s, a.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      d.Z.handleError(e);
                    })
                );
              });
          }
          doRunListCancelFilter(e) {
            let t = $(this.runListFilterIconTarget);
            n.UI.loading(
              t,
              () => (
                (this.runResultsStatuses = null),
                this.refreshFragments("runResultPage").then(() => {
                  n.UI.setSelectActionCount(t, 0);
                })
              )
            );
          }
          doSessionListFilter(e) {
            let t = $(this.sessionListFilterIconTarget),
              s = $(this.sessionListFilterIconLabelTarget);
            n.UI.popupVisible(s) ||
              n.UI.loading(t, () => {
                let e = {};
                return (
                  this.sessionResultsStatuses &&
                    (e.selected = this.sessionResultsStatuses),
                  o.N.post(
                    "milestones/render_session_result_status_filter/" +
                      this.milestone.id,
                    o.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const i = new r.d();
                      (i.onSubmit = (e) => (
                        e.condition.values && e.condition.values.length > 0
                          ? (this.sessionResultsStatuses = e.condition.values)
                          : (this.sessionResultsStatuses = null),
                        this.refreshFragments("sessionResultPage").then(() => {
                          e.condition.values && e.condition.values.length > 0
                            ? n.UI.setSelectActionCount(
                                t,
                                e.condition.values.length
                              )
                            : n.UI.setSelectActionCount(t, 0);
                        })
                      )),
                        i.show(s, a.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      d.Z.handleError(e);
                    })
                );
              });
          }
          doSessionListCancelFilter(e) {
            let t = $(this.sessionListFilterIconTarget);
            n.UI.loading(
              t,
              () => (
                (this.sessionResultsStatuses = null),
                this.refreshFragments("sessionResultPage").then(() => {
                  n.UI.setSelectActionCount(t, 0);
                })
              )
            );
          }
        }
        h(c, "targets", [
          "responsiveContainer",
          "startButton",
          "completeButton",
          "editButton",
          "editMenuButton",
          "showInfoIcon",
          "runListFilterIconReset",
          "runListFilterIcon",
          "runListFilterIconLabel",
          "sessionListFilterIconReset",
          "sessionListFilterIcon",
          "sessionListFilterIconLabel",
        ]);
      },
      4457: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => p });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(16087),
          l = s(67694),
          d = s(69555),
          h = s(75360),
          c = s(62612),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends i.v {
          constructor(...e) {
            super(...e),
              g(this, "selectors", { row: "tr" }),
              g(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              g(this, "doSearch", () => {
                this.refreshSearch();
              }),
              g(this, "doStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["completed", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              g(this, "doActionClick", (e) => {
                "menu" === e.actionName &&
                  this.showContextMenu(e.id, e.$action, e.$row, e.$field);
              }),
              g(this, "doContextMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editMilestone(e.context.id, e.context.$field);
                    break;
                  case "delete":
                    this.deleteMilestone(e.context.id, e.context.$row);
                    break;
                  case "reopen":
                    this.reopenMilestone(e.context.id, e.context.$field);
                }
              }),
              g(this, "renderTabs", () =>
                n.N.post("milestones/render_tabs/" + this.projectId, { tab: 1 })
              ),
              g(this, "renderCompletedMetrics", () =>
                n.N.post(
                  "milestones/render_completed_metrics/" + this.projectId
                )
              ),
              g(this, "renderCompleted", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = e.state
                  ? e.state
                  : this.components.milestones.getState();
                return (
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  n.N.post(
                    "milestones/render_completed/" + this.projectId,
                    n.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canDelete = this.params.canDelete),
              (this.canAddEdit = this.params.canAddEdit),
              o.UI.initialize(this.element),
              u.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                },
              }),
              u.Z.requestChild(this.component, "milestones", {
                events: {
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                },
              }),
              this.fragments.register("tabs", this.renderTabs),
              this.fragments.register("completed", this.renderCompleted),
              this.fragments.register(
                "completedMetrics",
                this.renderCompletedMetrics
              );
          }
          doAdd() {
            let e = $(this.addButtonTarget);
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new h.q(h.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    n.N.visit("milestones/" + this.projectId)),
                    t.show(e.data);
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["completed", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          showContextMenu(e, t, s, i) {
            if (o.UI.popupVisible(t)) return;
            let n = s.data("reopen");
            const l = [];
            if (this.canAddEdit) {
              let e = {
                type: "action",
                name: "reopen",
                title: r.Z.lang("milestones.reopen"),
                callback: this.doContextMenuClick,
              };
              n ||
                ((e.enabled = !1),
                (e.tooltip = r.Z.lang(
                  "milestones.reopen_not_allowed_tooltip"
                ))),
                l.push(e),
                l.push({
                  type: "action",
                  name: "edit",
                  title: r.Z.lang("milestones.edit"),
                  callback: this.doContextMenuClick,
                });
            }
            this.canAddEdit && this.canDelete && l.push({ type: "divider" }),
              this.canDelete &&
                l.push({
                  type: "action",
                  name: "delete",
                  title: r.Z.lang("milestones.delete"),
                  callback: this.doContextMenuClick,
                }),
              new a.x(l, { context: { $field: i, $row: s, id: e } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          reopenMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post(
                "milestones/update/" + e,
                n.N.toNetworkCase({ isCompleted: !1 })
              )
                .then((e) =>
                  this.refreshFragments("tabs", "completed", "completedMetrics")
                )
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          deleteMilestone(e, t) {
            let s = t.data("name"),
              i = new c.A(
                r.Z.lang("milestones.delete_title"),
                r.Z.langEscape("milestones.delete_message", { name: s }),
                r.Z.lang("milestones.delete_button")
              );
            (i.onSuccess = () =>
              n.N.post("milestones/delete/" + e).then(() =>
                this.refreshFragments("tabs", "completed", "completedMetrics")
              )),
              i.show();
          }
          editMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_update/" + e)
                .then((t) => {
                  const s = new h.q(h.G.Edit, this.projectId, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("completed", "completedMetrics")),
                    s.show(t.data);
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.row).data("id");
            o.UI.loading(t, () =>
              n.N.post("milestones/render_stats/" + s)
                .then((e) => {
                  new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
        }
        g(p, "targets", ["responsiveContainer", "addButton"]);
      },
      6924: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => f });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(16087),
          l = s(67694),
          d = s(69555),
          h = s(91481),
          c = s(65983),
          u = s(75360),
          g = s(62612),
          p = s(5270);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f extends i.v {
          constructor(...e) {
            super(...e),
              m(this, "selectors", {
                itemOrSubItem:
                  ".milestones-list-item, .milestones-sub-list-item",
              }),
              m(this, "doMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editMilestone(e.context.id, e.context.$menu);
                    break;
                  case "delete":
                    this.deleteMilestone(e.context.id, e.context.$milestone);
                    break;
                  case "start":
                    this.startMilestone(e.context.id, e.context.$menu);
                    break;
                  case "complete":
                    this.completeMilestone(e.context.id, e.context.$menu);
                    break;
                  case "stop":
                    this.stopMilestone(e.context.id, e.context.$menu);
                    break;
                  case "add":
                    this.addSubMilestone(e.context.id, e.context.$menu);
                }
              }),
              m(this, "renderTabs", () =>
                n.N.post("milestones/render_tabs/" + this.projectId, { tab: 0 })
              ),
              m(this, "renderActive", () =>
                n.N.post("milestones/render_active/" + this.projectId)
              );
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canDelete = this.params.canDelete),
              (this.canAddEdit = this.params.canAddEdit),
              o.UI.initialize(this.element),
              this.fragments.register("tabs", this.renderTabs),
              this.fragments.register("active", this.renderActive);
          }
          doEmptyAdd() {
            this.add($(this.emptyAddButtonTarget));
          }
          doAdd() {
            this.add($(this.addButtonTarget));
          }
          add(e) {
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new u.q(u.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    this.refreshFragments("active", "tabs")),
                    t.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          doShowMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.itemOrSubItem),
              i = s.data("id"),
              n = s.data("started"),
              l = s.data("subItems");
            const h = [];
            this.canAddEdit &&
              (n
                ? (h.push({
                    type: "action",
                    name: "stop",
                    title: r.Z.lang("milestones.stop"),
                    callback: this.doMenuClick,
                  }),
                  h.push({
                    type: "action",
                    name: "complete",
                    title: r.Z.lang("milestones.complete"),
                    callback: this.doMenuClick,
                  }))
                : h.push({
                    type: "action",
                    name: "start",
                    title: r.Z.lang("milestones.start"),
                    callback: this.doMenuClick,
                  }),
              h.push({
                type: "action",
                name: "edit",
                title: r.Z.lang("milestones.edit"),
                callback: this.doMenuClick,
              }),
              h.push({ type: "divider" }),
              l
                ? h.push({
                    type: "action",
                    name: "add",
                    title: r.Z.lang("milestones.add_sub"),
                    callback: this.doMenuClick,
                  })
                : h.push({
                    type: "action",
                    title: r.Z.lang("milestones.add_sub"),
                    enabled: !1,
                    tooltip: r.Z.lang("milestones.add_sub_not_allowed_tooltip"),
                  })),
              this.canAddEdit && this.canDelete && h.push({ type: "divider" }),
              this.canDelete &&
                h.push({
                  type: "action",
                  name: "delete",
                  title: r.Z.lang("milestones.delete"),
                  callback: this.doMenuClick,
                }),
              new a.x(h, { context: { $menu: t, $milestone: s, id: i } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          addSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((t) => {
                  const s = new u.q(u.G.Add, this.projectId, null, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("active", "tabs")),
                    s.show(t.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          deleteMilestone(e, t) {
            let s = t.data("name"),
              i = new g.A(
                r.Z.lang("milestones.delete_title"),
                r.Z.langEscape("milestones.delete_message", { name: s }),
                r.Z.lang("milestones.delete_button")
              );
            (i.onSuccess = () =>
              n.N.post("milestones/delete/" + e).then(() =>
                this.refreshFragments("active", "tabs")
              )),
              i.show();
          }
          doEditMilestone(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.itemOrSubItem).data("id");
            this.editMilestone(s, t);
          }
          editMilestone(e, t) {
            return o.UI.loading(t, () =>
              n.N.post("milestones/render_update/" + e)
                .then((t) => {
                  const s = new u.q(u.G.Edit, this.projectId, e);
                  (s.onSuccess = (e) => this.refreshFragments("active")),
                    s.show(t.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          doStartMilestone(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.itemOrSubItem).data("id");
            this.startMilestone(s, t);
          }
          startMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_start/" + e)
                .then((t) => {
                  const s = new h.K(e);
                  (s.onSuccess = (e) => this.refreshFragments("active")),
                    s.show(t.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          stopMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post(
                "milestones/update/" + e,
                n.N.toNetworkCase({ isStarted: !1 })
              )
                .then((e) => this.refreshFragments("active"))
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          doCompleteMilestone(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.itemOrSubItem).data("id");
            this.completeMilestone(s, t);
          }
          completeMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_complete/" + e)
                .then((t) => {
                  const s = new c.X(e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("active", "tabs")),
                    s.show(t.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.itemOrSubItem).data("id");
            o.UI.loading(t, () =>
              n.N.post("milestones/render_stats/" + s)
                .then((e) => {
                  new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
        }
        m(f, "targets", ["responsiveContainer", "addButton", "emptyAddButton"]);
      },
      53640: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(10313),
          o = s(96622),
          n = s(13814),
          r = s(15331),
          a = s(69555),
          l = s(9669),
          d = s.n(l),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.BaseController {
          constructor(...e) {
            super(...e),
              c(this, "selectors", {
                issueDetailsField: ".table__field__issue-details",
                issueDetailsFieldDetails:
                  ".table__field__issue-details__details",
              }),
              c(this, "classes", {
                issueDetailsFieldLoading:
                  "table__field__issue-details--loading",
              }),
              c(this, "doAppNavigate", () => {
                this.cancelExecutionRequests(), this.cancelDesignRequests();
              }),
              c(this, "doExecutionCancelSearch", () => {
                this.refreshExecutionSearch();
              }),
              c(this, "doExecutionSearch", () => {
                this.refreshExecutionSearch();
              }),
              c(this, "doDesignCancelSearch", () => {
                this.refreshDesignSearch();
              }),
              c(this, "doDesignSearch", () => {
                this.refreshDesignSearch();
              }),
              c(this, "doIssuesDesignAdded", (e) => {
                this.components.designSearchBar.setEnabled(!0),
                  this.loadIssueDetails(e, this.designCancelSource);
              }),
              c(this, "doIssuesExecutionAdded", (e) => {
                this.loadIssueDetails(e, this.executionCancelSource);
              }),
              c(this, "doIssuesExecutionStateChange", (e) => {
                this.cancelExecutionRequests(),
                  e.target.loading(e.loading, e.column, () =>
                    this.refreshFragments([
                      "issueExecutionPage",
                      { state: e.state },
                    ])
                  );
              }),
              c(this, "doIssuesDesignStateChange", (e) => {
                this.cancelDesignRequests(),
                  e.target.loading(e.loading, e.column, () =>
                    this.refreshFragments([
                      "issueDesignPage",
                      { state: e.state },
                    ])
                  );
              }),
              c(this, "doExecutionCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide(),
                  (this.executionStatuses = []),
                  o.UI.loading(
                    t,
                    () => (
                      this.components.executionSearchBar.setInlineFilter(
                        "statuses",
                        ""
                      ),
                      this.refreshFragments([
                        "issueExecutionPage",
                        { withPagination: !1 },
                      ]).catch((e) => {
                        h.Z.handleError(e);
                      })
                    )
                  );
              }),
              c(this, "doExecutionInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) ||
                  o.UI.loading(t, () => {
                    let e = { selected: this.executionStatuses };
                    return n.N.post(
                      "milestones/render_issue_status_filter/" +
                        this.milestone.id,
                      n.N.toNetworkCase(e)
                    )
                      .then((e) => {
                        const s = "statuses";
                        let i =
                          this.components.executionSearchBar.getInlineFilter(s);
                        const o = new r.d();
                        (o.onSubmit = (e) => (
                          (this.executionStatuses = []),
                          e.condition &&
                            e.condition.values &&
                            (this.executionStatuses = e.condition.values),
                          this.components.executionSearchBar.setInlineFilter(
                            s,
                            e.labels
                          ),
                          this.refreshFragments([
                            "issueExecutionPage",
                            { withPagination: !1 },
                          ]).catch((e) => {
                            h.Z.handleError(e);
                          })
                        )),
                          (o.onHide = (e) => {
                            e ||
                              this.components.executionSearchBar.setInlineFilter(
                                s,
                                i
                              );
                          }),
                          o.events.on("change", (e) => {
                            this.components.executionSearchBar.setInlineFilter(
                              s,
                              e.labels
                            );
                          }),
                          o.show(t, a.Fz.BottomRight, e.data);
                      })
                      .catch((e) => {
                        h.Z.handleError(e);
                      });
                  });
              }),
              c(this, "renderIssueExecutionPage", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.issuesExecution.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.executionStatuses &&
                    (t.statuses = this.executionStatuses),
                  this.components.executionSearchBar &&
                    this.components.executionSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.executionSearchBar.getSearchTerm()),
                  n.N.post(
                    "milestones/render_issue_execution_page/" +
                      this.milestone.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              c(this, "renderIssueDesignPage", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.issuesExecution.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.designSearchBar &&
                    this.components.designSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.designSearchBar.getSearchTerm()),
                  n.N.post(
                    "milestones/render_issue_design_page/" + this.milestone.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              c(this, "renderIssuesDesign", (e = {}) => {
                let t = {};
                return (
                  this.components.designSearchBar &&
                    this.components.designSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.designSearchBar.getSearchTerm()),
                  n.N.post(
                    "milestones/render_issues_design/" + this.milestone.id,
                    n.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.page = { name: "issues" }),
              (this.milestone = this.params.milestone),
              (this.projectId = this.params.projectId),
              (this.canDelete = this.params.canDelete),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canReopen = this.params.canReopen),
              (this.executionStatuses = []),
              (this.executionCancelSource = n.N.getCancelSource()),
              (this.designCancelSource = n.N.getCancelSource()),
              (this.detailsCache = {}),
              o.UI.initialize(this.element),
              h.Z.requestChild(this.component, "resources"),
              (this.fragmentsAfterEdit = ["about", "header", "issuesDesign"]),
              (this.fragmentsAfterComplete = ["about", "header"]),
              (this.fragmentsAfterStart = ["about", "header"]),
              (this.fragmentsAfterStop = ["about", "header"]),
              (this.fragmentsAfterReopen = ["about", "header"]),
              this.registerBaseFragments(),
              h.Z.requestChild(this.component, "executionSearchBar", {
                events: {
                  search: this.doExecutionSearch,
                  cancelsearch: this.doExecutionCancelSearch,
                  inlinefilter: this.doExecutionInlineFilter,
                  cancelinlinefilter: this.doExecutionCancelInlineFilter,
                },
              }),
              h.Z.requestChild(this.component, "designSearchBar", {
                events: {
                  search: this.doDesignSearch,
                  cancelsearch: this.doDesignCancelSearch,
                },
              }),
              h.Z.requestChild(this.component, "issuesExecution", {
                onAdded: this.doIssuesExecutionAdded,
                events: { statechange: this.doIssuesExecutionStateChange },
              }),
              h.Z.requestChild(this.component, "issuesDesign", {
                onAdded: this.doIssuesDesignAdded,
                events: { statechange: this.doIssuesDesignStateChange },
              }),
              this.fragments.register(
                "issueExecutionPage",
                this.renderIssueExecutionPage
              ),
              this.fragments.register(
                "issueDesignPage",
                this.renderIssueDesignPage
              ),
              this.fragments.register("issuesDesign", this.renderIssuesDesign),
              h.Z.events.on("navigate", this.doAppNavigate);
          }
          unload() {
            this.cancelExecutionRequests(),
              this.cancelDesignRequests(),
              h.Z.events.off("navigate", this.doAppNavigate),
              (this.detailsCache = null);
          }
          cancelExecutionRequests() {
            n.N.cancelRequests(this.executionCancelSource),
              (this.executionCancelSource = n.N.getCancelSource());
          }
          cancelDesignRequests() {
            n.N.cancelRequests(this.designCancelSource),
              (this.designCancelSource = n.N.getCancelSource());
          }
          loadIssueDetails(e, t) {
            const s = (e, t, s) => {
              let i = t
                .filter(`tr[data-id="${e}"]`)
                .find(this.selectors.issueDetailsField);
              i.removeClass(this.classes.issueDetailsFieldLoading),
                i.find(this.selectors.issueDetailsFieldDetails).html(s);
            };
            let i = e.getRows();
            (i = i.filter("[data-new=1]")), i.attr("data-new", 0);
            let o = [];
            i.each((e, t) => {
              let s = $(t),
                i = s.data("id"),
                n = s.data("canLookup"),
                r = s.data("targetId");
              n && r && i && o.push({ id: i, targetId: r });
            }),
              (o = _.uniqWith(o, (e, t) => e.id == t.id)),
              (o = o.filter(
                (e) =>
                  !(e.id in this.detailsCache) ||
                  (s(e.id, i, this.detailsCache[e.id]), !1)
              ));
            let r = {};
            for (let e of o)
              r[e.targetId] || (r[e.targetId] = []), r[e.targetId].push(e);
            for (let e in r) {
              let o = { ids: r[e].map((e) => e.id) };
              n.N.postNonBlocking(
                "issues/render_statuses/" + this.projectId,
                n.N.toNetworkCase(o),
                { cancelToken: t.token }
              )
                .then((e) => {
                  this.loaded &&
                    $(e.data)
                      .filter("[data-id]")
                      .each((e, t) => {
                        let o = $(t),
                          n = o.data("id"),
                          r = o.html();
                        s(n, i, r), (this.detailsCache[n] = r);
                      });
                })
                .catch((e) => {
                  e instanceof d().Cancel || h.Z.handleError(e);
                });
            }
          }
          refreshExecutionSearch() {
            this.cancelExecutionRequests(),
              this.components.executionSearchBar.setInputLoading(!0),
              this.refreshFragments([
                "issueExecutionPage",
                { withPagination: !1 },
              ]).then(() => {
                this.components.executionSearchBar.setInputLoading(!1);
              });
          }
          refreshDesignSearch() {
            this.cancelDesignRequests(),
              this.components.designSearchBar.setInputLoading(!0),
              this.refreshFragments([
                "issueDesignPage",
                { withPagination: !1 },
              ]).then(() => {
                this.components.designSearchBar.setInputLoading(!1);
              });
          }
        }
        c(u, "targets", [
          "responsiveContainer",
          "startButton",
          "completeButton",
          "editButton",
          "editMenuButton",
          "showInfoIcon",
        ]);
      },
      29392: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i = s(10313),
          o = s(13814),
          n = s(96622),
          r = s(69555);
        class a extends r.GI {
          constructor() {
            super("milestones.status_automation_source_popup");
          }
        }
        var l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends i.BaseController {
          constructor(...e) {
            super(...e),
              d(this, "selectors", {
                source: ".milestones-automation-sources__source",
              }),
              d(this, "renderDocs", () =>
                o.N.post("milestones/render_docs/" + this.milestone.id)
              ),
              d(this, "renderBurndownMetrics", () =>
                o.N.post(
                  "milestones/render_burndown_metrics/" + this.milestone.id
                )
              );
          }
          load() {
            (this.page = { name: "status" }),
              (this.milestone = this.params.milestone),
              (this.projectId = this.params.projectId),
              (this.canDelete = this.params.canDelete),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canReopen = this.params.canReopen),
              n.UI.initialize(this.element),
              (this.fragmentsAfterEdit = [
                "about",
                "header",
                "docs",
                "burndownMetrics",
              ]),
              (this.fragmentsAfterComplete = [
                "about",
                "header",
                "burndownMetrics",
              ]),
              (this.fragmentsAfterStart = [
                "about",
                "header",
                "burndownMetrics",
              ]),
              (this.fragmentsAfterStop = [
                "about",
                "header",
                "burndownMetrics",
              ]),
              (this.fragmentsAfterReopen = [
                "about",
                "header",
                "burndownMetrics",
              ]),
              this.registerBaseFragments(),
              this.fragments.register("docs", this.renderDocs),
              this.fragments.register(
                "burndownMetrics",
                this.renderBurndownMetrics
              );
          }
          doEmptyEditDocs() {
            this.editMilestone($(this.emptyEditDocsButtonTarget), !0);
          }
          doEditDocs() {
            this.editMilestone($(this.editDocsIconTarget), !0);
          }
          doProgressStartMilestone() {
            this.startMilestone($(this.progressStartButtonTarget));
          }
          doShowAutomationConfigs(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.source).data("id");
            n.UI.loading(t, () =>
              o.N.post(
                "milestones/render_automation_source/" +
                  this.milestone.id +
                  "/" +
                  s
              )
                .then((e) => {
                  new a().show(t, r.Fz.BottomLeft, e.data);
                })
                .catch((e) => {
                  l.Z.handleError(e);
                })
            );
          }
        }
        d(h, "targets", [
          "responsiveContainer",
          "startButton",
          "completeButton",
          "editButton",
          "editMenuButton",
          "showInfoIcon",
          "emptyEditDocsButton",
          "editDocsIcon",
          "progressStartButton",
        ]);
      },
      10313: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => f });
        var i = s(26454),
          o = s(13814),
          n = s(43689),
          r = s(18792),
          a = s(69555),
          l = s(96622),
          d = s(16087),
          h = s(62612),
          c = s(75360),
          u = s(91481),
          g = s(65983),
          p = s(5270);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f extends i.v {
          constructor(...e) {
            super(...e),
              m(this, "doEditMenuClick", (e) => {
                let t;
                switch (
                  (e.target.hide(),
                  this.hasEditButtonTarget && (t = $(this.editButtonTarget)),
                  e.actionName)
                ) {
                  case "edit":
                    this.editMilestone(t);
                    break;
                  case "delete":
                    this.deleteMilestone();
                    break;
                  case "start":
                    this.startMilestone(t);
                    break;
                  case "complete":
                    this.completeMilestone(t);
                    break;
                  case "stop":
                    this.stopMilestone(t);
                    break;
                  case "reopen":
                    this.reopenMilestone(t);
                }
              }),
              m(this, "renderHeader", () =>
                o.N.post("milestones/render_header/" + this.milestone.id, {
                  page: this.page.name,
                })
              ),
              m(this, "renderAbout", () =>
                o.N.post("milestones/render_about/" + this.milestone.id)
              );
          }
          registerBaseFragments() {
            this.fragments.register("header", this.renderHeader),
              this.fragments.register("about", this.renderAbout);
          }
          doShowInfo() {
            let e = $(this.showInfoIconTarget);
            if (l.UI.popupVisible(e)) return;
            let t = "/milestones/view/" + this.milestone.id;
            new r.N({
              title: n.Z.lang("milestones.info_name", {
                name: this.milestone.name,
              }),
              id: this.milestone.id,
              link: t,
              url: o.N.url(t),
            }).show(e, a.Fz.BottomLeft);
          }
          doShowEditMenu() {
            let e = $(this.editMenuButtonTarget);
            if (l.UI.popupVisible(e)) return;
            const t = [];
            if (this.canAddEdit)
              if (
                (t.push({
                  type: "action",
                  name: "edit",
                  title: n.Z.lang("milestones.edit"),
                  callback: this.doEditMenuClick,
                }),
                this.milestone.is_completed)
              ) {
                let e = {
                  type: "action",
                  name: "reopen",
                  title: n.Z.lang("milestones.reopen"),
                  callback: this.doEditMenuClick,
                };
                this.canReopen ||
                  ((e.enabled = !1),
                  (e.tooltip = n.Z.lang(
                    "milestones.reopen_not_allowed_tooltip"
                  ))),
                  t.push(e);
              } else
                this.milestone.is_started
                  ? (t.push({
                      type: "action",
                      name: "stop",
                      title: n.Z.lang("milestones.stop"),
                      callback: this.doEditMenuClick,
                    }),
                    t.push({
                      type: "action",
                      name: "complete",
                      title: n.Z.lang("milestones.complete"),
                      callback: this.doEditMenuClick,
                    }))
                  : t.push({
                      type: "action",
                      name: "start",
                      title: n.Z.lang("milestones.start"),
                      callback: this.doEditMenuClick,
                    });
            this.canDelete &&
              (this.canAddEdit && t.push({ type: "divider" }),
              t.push({
                type: "action",
                name: "delete",
                title: n.Z.lang("milestones.delete"),
                callback: this.doEditMenuClick,
              })),
              new d.x(t).show(e, a.Fz.BottomRight);
          }
          doStartMilestone() {
            this.startMilestone($(this.startButtonTarget));
          }
          doCompleteMilestone() {
            this.completeMilestone($(this.completeButtonTarget));
          }
          doEditMilestone() {
            this.editMilestone($(this.editButtonTarget));
          }
          doDeleteMilestone() {
            this.deleteMilestone();
          }
          completeMilestone(e) {
            l.UI.loading(e, () =>
              o.N.post("milestones/render_complete/" + this.milestone.id)
                .then((e) => {
                  const t = new g.X(this.milestone.id);
                  (t.onSuccess = (e) => (
                    (this.milestone = e), this.afterComplete()
                  )),
                    t.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          startMilestone(e) {
            l.UI.loading(e, () =>
              o.N.post("milestones/render_start/" + this.milestone.id)
                .then((e) => {
                  const t = new u.K(this.milestone.id);
                  (t.onSuccess = (e) => (
                    (this.milestone = e), this.afterStart()
                  )),
                    t.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          stopMilestone(e) {
            l.UI.loading(e, () =>
              o.N.post(
                "milestones/update/" + this.milestone.id,
                o.N.toNetworkCase({ isStarted: !1 })
              )
                .then((e) => ((this.milestone = e.data), this.afterStop()))
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          reopenMilestone(e) {
            l.UI.loading(e, () =>
              o.N.post(
                "milestones/update/" + this.milestone.id,
                o.N.toNetworkCase({ isCompleted: !1 })
              )
                .then((e) => ((this.milestone = e.data), this.afterReopen()))
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          deleteMilestone() {
            let e = new h.A(
              n.Z.lang("milestones.delete_title"),
              n.Z.langEscape("milestones.delete_message", {
                name: this.milestone.name,
              }),
              n.Z.lang("milestones.delete_button")
            );
            (e.onSuccess = () =>
              o.N.post("milestones/delete/" + this.milestone.id).then(() =>
                o.N.visit("milestones/" + this.projectId)
              )),
              e.show();
          }
          editMilestone(e, t = !1) {
            l.UI.loading(e, () =>
              o.N.post("milestones/render_update/" + this.milestone.id)
                .then((e) => {
                  const s = new c.q(
                    c.G.Edit,
                    this.projectId,
                    this.milestone.id,
                    null,
                    t
                  );
                  (s.onSuccess = (e) => (
                    (this.milestone = e), this.afterEdit()
                  )),
                    s.show(e.data);
                })
                .catch((e) => {
                  p.Z.handleError(e);
                })
            );
          }
          afterEdit() {
            return this.refreshFragments(...this.fragmentsAfterEdit);
          }
          afterComplete() {
            return this.refreshFragments(...this.fragmentsAfterComplete);
          }
          afterStart() {
            return this.refreshFragments(...this.fragmentsAfterStart);
          }
          afterStop() {
            return this.refreshFragments(...this.fragmentsAfterStop);
          }
          afterReopen() {
            return this.refreshFragments(...this.fragmentsAfterReopen);
          }
        }
      },
      49579: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => F });
        var i = s(10313),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(16087),
          l = s(67694),
          d = s(69555),
          h = s(91481),
          c = s(65983),
          u = s(75360),
          g = s(3461),
          p = s(86715),
          m = s(80345),
          f = s(51549),
          C = s(3638),
          b = s(38426),
          I = s(84182),
          w = s(61861),
          v = s(54688),
          S = s(17637),
          x = s(62612),
          k = s(24371),
          T = s(4989),
          y = s(710),
          E = s(22143),
          N = s(5270);
        function U(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class F extends i.BaseController {
          constructor(...e) {
            super(...e),
              U(this, "selectors", {
                subItem: ".milestones-child-item",
                row: "tr",
              }),
              U(this, "doAutomationRunsStateChange", (e) => {
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments([
                    "automationRunTable",
                    { state: e.state },
                  ])
                );
              }),
              U(this, "doAutomationRunsActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showAutomationRunsContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editAutomationRun(e.target, e.id, e.$field);
                }
              }),
              U(this, "doAutomationRunContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editAutomationRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteAutomationRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                }
              }),
              U(this, "doAutomationRunContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.automationRuns.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteAutomationRuns(t);
                    break;
                  case "edit":
                    this.editAutomationRuns(
                      e.context.table,
                      t,
                      e.context.$field
                    );
                }
              }),
              U(this, "doSessionsStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["sessions", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              U(this, "doRunsStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["runs", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              U(this, "doSessionsActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showSessionContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editSession(e.target, e.id, e.$field);
                }
              }),
              U(this, "doSessionAddMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "add":
                    this.addSession(e.context.$icon);
                    break;
                  case "addMultiple":
                    this.addMultipleSessions(e.context.$icon);
                }
              }),
              U(this, "doSessionContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editSession(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteSession(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "close":
                    this.closeSession(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "duplicate":
                    this.duplicateSession(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                }
              }),
              U(this, "doSessionContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.sessions.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteSessions(t);
                    break;
                  case "close":
                    this.closeSessions(t);
                    break;
                  case "edit":
                    this.editSessions(e.context.table, t, e.context.$field);
                    break;
                  case "assign":
                    this.assignSessions(e.context.table, t, e.context.$field);
                    break;
                  case "duplicate":
                    this.duplicateSessions(
                      e.context.table,
                      t,
                      e.context.$field
                    );
                }
              }),
              U(this, "doRunsActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showRunContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editRun(e.target, e.id, e.$field);
                }
              }),
              U(this, "doRunAddMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "add":
                    this.addRun(e.context.$icon);
                    break;
                  case "addMultiple":
                    this.addMultipleRuns(e.context.$icon);
                }
              }),
              U(this, "doRunContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "close":
                    this.closeRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "duplicate":
                    this.duplicateRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "assign":
                    this.assignRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                }
              }),
              U(this, "doRunContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.runs.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteRuns(t);
                    break;
                  case "close":
                    this.closeRuns(t);
                    break;
                  case "edit":
                    this.editRuns(e.context.table, t, e.context.$field);
                    break;
                  case "duplicate":
                    this.duplicateRuns(e.context.table, t, e.context.$field);
                    break;
                  case "assign":
                    this.assignRuns(e.context.table, t, e.context.$field);
                }
              }),
              U(this, "doSubMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editSubMilestone(e.context.id, e.context.$menu);
                    break;
                  case "delete":
                    this.deleteSubMilestone(e.context.id, e.context.$milestone);
                    break;
                  case "start":
                    this.startSubMilestone(e.context.id, e.context.$menu);
                    break;
                  case "reopen":
                    this.reopenSubMilestone(e.context.id, e.context.$menu);
                    break;
                  case "complete":
                    this.completeSubMilestone(e.context.id, e.context.$menu);
                    break;
                  case "stop":
                    this.stopSubMilestone(e.context.id, e.context.$menu);
                    break;
                  case "add":
                    this.addSubMilestone(e.context.id, e.context.$menu);
                }
              }),
              U(this, "renderSubs", () =>
                n.N.post("milestones/render_subs/" + this.milestone.id)
              ),
              U(this, "renderRuns", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.runs.getState()),
                  t && !e.withPagination && delete t.paginationCurrent,
                  n.N.post(
                    "milestones/render_runs/" + this.milestone.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              U(this, "renderSessions", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.sessions &&
                      (t = this.components.sessions.getState()),
                  t && !e.withPagination && delete t.paginationCurrent,
                  n.N.post(
                    "milestones/render_sessions/" + this.milestone.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              U(this, "renderAutomationRunTable", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.automationRuns.getState()),
                  t && !e.withPagination && delete t.paginationCurrent,
                  n.N.post(
                    "milestones/render_automation_run_table/" +
                      this.milestone.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              U(this, "renderAutomationRuns", (e = {}) =>
                n.N.post(
                  "milestones/render_automation_runs/" + this.milestone.id
                )
              ),
              U(this, "renderMetrics", (e = {}) =>
                n.N.post("milestones/render_view_metrics/" + this.milestone.id)
              );
          }
          load() {
            (this.page = { name: "results" }),
              (this.milestone = this.params.milestone),
              (this.projectId = this.params.projectId),
              (this.canDelete = this.params.canDelete),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canReopen = this.params.canReopen),
              (this.canSessionsAddEdit = this.params.canSessionsAddEdit),
              (this.canSessionsDelete = this.params.canSessionsDelete),
              (this.canSessionsClose = this.params.canSessionsClose),
              (this.canSessionsClosedDelete =
                this.params.canSessionsClosedDelete),
              (this.canRunsAddEdit = this.params.canRunsAddEdit),
              (this.canRunsDelete = this.params.canRunsDelete),
              (this.canRunsClose = this.params.canRunsClose),
              (this.canRunsClosedDelete = this.params.canRunsClosedDelete),
              (this.canRunResultsAddEdit = this.params.canRunResultsAddEdit),
              (this.canAutomationRunsAddEdit =
                this.params.canAutomationRunsAddEdit),
              (this.canAutomationRunsDelete =
                this.params.canAutomationRunsDelete),
              N.Z.requestChild(this.component, "sessions", {
                events: {
                  statechange: this.doSessionsStateChange,
                  actionclick: this.doSessionsActionClick,
                },
              }),
              N.Z.requestChild(this.component, "runs", {
                events: {
                  statechange: this.doRunsStateChange,
                  actionclick: this.doRunsActionClick,
                },
              }),
              N.Z.requestChild(this.component, "automationRuns", {
                events: {
                  statechange: this.doAutomationRunsStateChange,
                  actionclick: this.doAutomationRunsActionClick,
                },
              }),
              o.UI.initialize(this.element),
              this.registerBaseFragments(),
              (this.fragmentsAfterEdit = ["header", "about", "subs"]),
              (this.fragmentsAfterComplete = [
                "header",
                "about",
                "subs",
                "runs",
                "sessions",
              ]),
              (this.fragmentsAfterStart = ["about", "header"]),
              (this.fragmentsAfterStop = ["about", "header"]),
              (this.fragmentsAfterReopen = [
                "about",
                "header",
                "subs",
                "runs",
                "sessions",
              ]),
              this.fragments.register("subs", this.renderSubs),
              this.fragments.register("runs", this.renderRuns),
              this.fragments.register("sessions", this.renderSessions),
              this.fragments.register(
                "automationRuns",
                this.renderAutomationRuns
              ),
              this.fragments.register(
                "automationRunTable",
                this.renderAutomationRunTable
              ),
              this.fragments.register("metrics", this.renderMetrics);
          }
          doShowAutomationStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                n.N.post("automation/runs/render_stats/" + s)
                  .then((e) => {
                    new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    N.Z.handleError(e);
                  })
              );
          }
          showAutomationRunsContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let l = [];
            this.components.automationRuns.getSelectedRows().length <= 1
              ? (this.canAutomationRunsAddEdit &&
                  l.push({
                    type: "action",
                    name: "edit",
                    title: r.Z.lang("automation_runs.menu_edit_run"),
                    callback: this.doAutomationRunContextMenuSingleClick,
                  }),
                this.canAutomationRunsAddEdit &&
                  this.canAutomationRunsDelete &&
                  l.push({ type: "divider" }),
                this.canAutomationRunsDelete &&
                  l.push({
                    type: "action",
                    name: "delete",
                    title: r.Z.lang("automation_runs.menu_delete_run"),
                    callback: this.doAutomationRunContextMenuSingleClick,
                  }))
              : (this.canAutomationRunsAddEdit &&
                  l.push({
                    type: "action",
                    name: "edit",
                    title: r.Z.lang("automation_runs.menu_edit_runs"),
                    callback: this.doAutomationRunContextMenuMultipleClick,
                  }),
                this.canAutomationRunsAddEdit &&
                  this.canAutomationRunsDelete &&
                  l.push({ type: "divider" }),
                this.canAutomationRunsDelete &&
                  l.push({
                    type: "action",
                    name: "delete",
                    title: r.Z.lang("automation_runs.menu_delete_runs"),
                    callback: this.doAutomationRunContextMenuMultipleClick,
                  })),
              new a.x(l, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, d.Fz.BottomLeft);
          }
          deleteAutomationRun(e, t, s) {
            let i = s.data("name"),
              o = new x.A(
                r.Z.lang("automation_runs.delete_title"),
                r.Z.langEscape("automation_runs.delete_message", { name: i }),
                r.Z.lang("automation_runs.delete_button")
              );
            (o.onSuccess = () =>
              n.N.post("automation/runs/delete/" + t).then(() =>
                this.refreshFragments("metrics", "automationRuns")
              )),
              o.show();
          }
          deleteAutomationRuns(e) {
            let t = new x.A(
              r.Z.lang("automation_runs.delete_many_title"),
              r.Z.lang("automation_runs.delete_many_message"),
              r.Z.lang("automation_runs.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return n.N.post(
                "automation/runs/delete_many/" + this.projectId,
                n.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("metrics", "automationRuns"));
            }),
              t.show();
          }
          editAutomationRun(e, t, s) {
            e.loading("actionfield", s, () =>
              n.N.post("automation/runs/render_update/" + t)
                .then((e) => {
                  const s = new v.m(this.projectId, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("metrics", "automationRunTable")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          editAutomationRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return n.N.post(
                "automation/runs/render_update_many/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new S.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("metrics", "automationRunTable")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                });
            });
          }
          doShowSessionStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.parent(),
              i = s.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(s, () =>
                n.N.post("sessions/render_stats/" + i)
                  .then((e) => {
                    new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    N.Z.handleError(e);
                  })
              );
          }
          doShowRunStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                n.N.post("runs/render_stats/" + s)
                  .then((e) => {
                    new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    N.Z.handleError(e);
                  })
              );
          }
          doEmptyAddSession(e) {
            this.addSession($(this.emptyAddSessionButtonTarget));
          }
          doEmptyAddRun(e) {
            this.addRun($(this.emptyAddRunButtonTarget));
          }
          doShowSessionAddMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "add",
              title: r.Z.lang("sessions.menu_add"),
              callback: this.doSessionAddMenuClick,
            }),
              s.push({
                type: "action",
                name: "addMultiple",
                title: r.Z.lang("sessions.menu_add_multiple"),
                callback: this.doSessionAddMenuClick,
              }),
              new a.x(s, { context: { $icon: t } }).show(t, d.Fz.BottomRight);
          }
          showSessionContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let l = this.components.sessions.getSelectedRows(),
              h = [];
            if (l.length <= 1)
              i.data("isClosed")
                ? (this.canSessionsAddEdit &&
                    h.push({
                      type: "action",
                      name: "duplicate",
                      title: r.Z.lang("sessions.menu_duplicate_session"),
                      callback: this.doSessionContextMenuSingleClick,
                    }),
                  this.canSessionsAddEdit &&
                    this.canSessionsClosedDelete &&
                    h.push({ type: "divider" }),
                  this.canSessionsClosedDelete &&
                    h.push({
                      type: "action",
                      name: "delete",
                      title: r.Z.lang("sessions.menu_delete_session"),
                      callback: this.doSessionContextMenuSingleClick,
                    }))
                : (this.canSessionsAddEdit &&
                    (h.push({
                      type: "action",
                      name: "edit",
                      title: r.Z.lang("sessions.menu_edit_session"),
                      callback: this.doSessionContextMenuSingleClick,
                    }),
                    h.push({
                      type: "action",
                      name: "duplicate",
                      title: r.Z.lang("sessions.menu_duplicate_session"),
                      callback: this.doSessionContextMenuSingleClick,
                    })),
                  this.canSessionsAddEdit &&
                    (this.canSessionsDelete || this.canSessionsClose) &&
                    h.push({ type: "divider" }),
                  this.canSessionsClose &&
                    h.push({
                      type: "action",
                      name: "close",
                      title: r.Z.lang("sessions.menu_close_session"),
                      callback: this.doSessionContextMenuSingleClick,
                    }),
                  this.canSessionsDelete &&
                    h.push({
                      type: "action",
                      name: "delete",
                      title: r.Z.lang("sessions.menu_delete_session"),
                      callback: this.doSessionContextMenuSingleClick,
                    }));
            else {
              let e = l.get(),
                t = e.reduce((e, t) => e || $(t).data("isClosed"), !1),
                s = e.reduce((e, t) => e || !$(t).data("isClosed"), !1),
                i = !t && this.canSessionsClose,
                o = !0;
              s && (o = o && this.canSessionsDelete),
                t && (o = o && this.canSessionsClosedDelete),
                this.canSessionsAddEdit &&
                  (t ||
                    h.push({
                      type: "action",
                      name: "edit",
                      title: r.Z.lang("sessions.menu_edit_sessions"),
                      callback: this.doSessionContextMenuMultipleClick,
                    }),
                  h.push({
                    type: "action",
                    name: "duplicate",
                    title: r.Z.lang("sessions.menu_duplicate_sessions"),
                    callback: this.doSessionContextMenuMultipleClick,
                  }),
                  t ||
                    (h.push({ type: "divider" }),
                    h.push({
                      type: "action",
                      name: "assign",
                      title: r.Z.lang("sessions.menu_assign_sessions"),
                      callback: this.doSessionContextMenuMultipleClick,
                    }))),
                this.canSessionsAddEdit &&
                  (o || i) &&
                  h.push({ type: "divider" }),
                i &&
                  h.push({
                    type: "action",
                    name: "close",
                    title: r.Z.lang("sessions.menu_close_sessions"),
                    callback: this.doSessionContextMenuMultipleClick,
                  }),
                o &&
                  h.push({
                    type: "action",
                    name: "delete",
                    title: r.Z.lang("sessions.menu_delete_sessions"),
                    callback: this.doSessionContextMenuMultipleClick,
                  });
            }
            new a.x(h, {
              context: { table: e, $field: n, $row: i, id: t },
            }).show(s, d.Fz.BottomLeft);
          }
          editSession(e, t, s) {
            e.setLoading("actionfield", !0, s),
              n.N.post("sessions/render_update/" + t)
                .then((e) => {
                  const s = new p.q(p.G.Edit, this.projectId, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("sessions", "metrics")),
                    s.show(e.data)
                  );
                })
                .then(() => {
                  e.setLoading("actionfield", !1, s);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), N.Z.handleError(t);
                });
          }
          duplicateSession(e, t, s) {
            e.setLoading("actionfield", !0, s),
              n.N.post("sessions/render_copy/" + t)
                .then((e) => {
                  const t = new p.q(p.G.Add, this.projectId);
                  return (
                    (t.onSuccess = (e) =>
                      this.refreshFragments("sessions", "metrics")),
                    t.show(e.data)
                  );
                })
                .then(() => {
                  e.setLoading("actionfield", !1, s);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), N.Z.handleError(t);
                });
          }
          duplicateSessions(e, t, s) {
            e.setLoading("actionfield", !0, s);
            let i = { ids: t };
            n.N.post(
              "sessions/render_copy_many/" + this.projectId,
              n.N.toNetworkCase(i)
            )
              .then((e) => {
                const t = new m.Y(this.projectId);
                return (
                  (t.onSuccess = (e) =>
                    this.refreshFragments("sessions", "metrics")),
                  t.show(e.data)
                );
              })
              .then(() => {
                e.setLoading("actionfield", !1, s);
              })
              .catch((t) => {
                e.setLoading("actionfield", !1, s), N.Z.handleError(t);
              });
          }
          assignSessions(e, t, s) {
            e.setLoading("actionfield", !0, s),
              n.N.post("sessions/render_assign_many/" + this.projectId)
                .then((i) => {
                  e.setLoading("actionfield", !1, s);
                  const o = new f.M(t, this.projectId);
                  (o.onSuccess = (e) => this.refreshFragments("sessions")),
                    o.show(i.data);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), N.Z.handleError(t);
                });
          }
          editSessions(e, t, s) {
            e.setLoading("actionfield", !0, s);
            let i = { ids: t };
            n.N.post(
              "sessions/render_update_many/" + this.projectId,
              n.N.toNetworkCase(i)
            )
              .then((e) => {
                const s = new C.y(t, this.projectId);
                return (
                  (s.onSuccess = (e) =>
                    this.refreshFragments("sessions", "metrics")),
                  s.show(e.data)
                );
              })
              .then(() => {
                e.setLoading("actionfield", !1, s);
              })
              .catch((t) => {
                e.setLoading("actionfield", !1, s), N.Z.handleError(t);
              });
          }
          addSession(e) {
            o.UI.loading(e, () =>
              n.N.post("sessions/render_create/" + this.projectId)
                .then((e) => {
                  const t = new p.q(
                    p.G.Add,
                    this.projectId,
                    null,
                    this.milestone.id
                  );
                  return (
                    (t.onSuccess = (e) =>
                      this.refreshFragments("sessions", "metrics")),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          addMultipleSessions(e) {
            o.UI.loading(e, () =>
              n.N.post("sessions/render_create_many/" + this.projectId)
                .then((e) => {
                  const t = new m.Y(this.projectId, this.milestone.id);
                  (t.onSuccess = (e) =>
                    this.refreshFragments("sessions", "metrics")),
                    t.show(e.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          deleteSession(e, t, s) {
            let i = s.data("name"),
              o = new x.A(
                r.Z.lang("sessions.delete_title"),
                r.Z.langEscape("sessions.delete_message", { name: i }),
                r.Z.lang("sessions.delete_button")
              );
            (o.onSuccess = () =>
              n.N.post("sessions/delete/" + t).then(() =>
                this.refreshFragments("sessions", "metrics")
              )),
              o.show();
          }
          closeSession(e, t, s) {
            let i = s.data("name"),
              o = new k.U(
                r.Z.lang("sessions.close_title"),
                r.Z.langEscape("sessions.close_message", { name: i }),
                r.Z.lang("sessions.close_button")
              );
            (o.onSuccess = () =>
              n.N.post("sessions/close/" + t).then(() =>
                this.refreshFragments("sessions", "metrics")
              )),
              o.show();
          }
          deleteSessions(e) {
            let t = new x.A(
              r.Z.lang("sessions.delete_many_title"),
              r.Z.lang("sessions.delete_many_message"),
              r.Z.lang("sessions.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return n.N.post(
                "sessions/delete_many/" + this.projectId,
                n.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("sessions", "metrics"));
            }),
              t.show();
          }
          closeSessions(e) {
            let t = new k.U(
              r.Z.lang("sessions.close_many_title"),
              r.Z.lang("sessions.close_many_message"),
              r.Z.lang("sessions.close_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return n.N.post(
                "sessions/close_many/" + this.projectId,
                n.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("sessions", "metrics"));
            }),
              t.show();
          }
          doShowRunAddMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "add",
              title: r.Z.lang("runs.menu_add"),
              callback: this.doRunAddMenuClick,
            }),
              s.push({
                type: "action",
                name: "addMultiple",
                title: r.Z.lang("runs.menu_add_multiple"),
                callback: this.doRunAddMenuClick,
              }),
              new a.x(s, { context: { $icon: t } }).show(t, d.Fz.BottomRight);
          }
          showRunContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let l = this.components.runs.getSelectedRows(),
              h = [];
            if (l.length <= 1)
              i.data("isClosed")
                ? (this.canRunsAddEdit &&
                    h.push({
                      type: "action",
                      name: "duplicate",
                      title: r.Z.lang("runs.menu_duplicate_run"),
                      callback: this.doRunContextMenuSingleClick,
                    }),
                  this.canRunsAddEdit &&
                    this.canRunsClosedDelete &&
                    h.push({ type: "divider" }),
                  this.canRunsClosedDelete &&
                    h.push({
                      type: "action",
                      name: "delete",
                      title: r.Z.lang("runs.menu_delete_run"),
                      callback: this.doRunContextMenuSingleClick,
                    }))
                : (this.canRunsAddEdit &&
                    (h.push({
                      type: "action",
                      name: "edit",
                      title: r.Z.lang("runs.menu_edit_run"),
                      callback: this.doRunContextMenuSingleClick,
                    }),
                    h.push({
                      type: "action",
                      name: "duplicate",
                      title: r.Z.lang("runs.menu_duplicate_run"),
                      callback: this.doRunContextMenuSingleClick,
                    })),
                  this.canRunResultsAddEdit &&
                    (this.canRunsAddEdit && h.push({ type: "divider" }),
                    h.push({
                      type: "action",
                      name: "assign",
                      title: r.Z.lang("runs.menu_assign_tests"),
                      callback: this.doRunContextMenuSingleClick,
                    })),
                  (this.canRunsAddEdit || this.canRunResultsAddEdit) &&
                    (this.canRunsDelete || this.canRunsClose) &&
                    h.push({ type: "divider" }),
                  this.canRunsClose &&
                    h.push({
                      type: "action",
                      name: "close",
                      title: r.Z.lang("runs.menu_close_run"),
                      callback: this.doRunContextMenuSingleClick,
                    }),
                  this.canRunsDelete &&
                    h.push({
                      type: "action",
                      name: "delete",
                      title: r.Z.lang("runs.menu_delete_run"),
                      callback: this.doRunContextMenuSingleClick,
                    }));
            else {
              let e = l.get(),
                t = e.reduce((e, t) => e || $(t).data("isClosed"), !1),
                s = e.reduce((e, t) => e || !$(t).data("isClosed"), !1),
                i = !t && this.canRunResultsAddEdit,
                o = !t && this.canRunsClose,
                n = !0;
              s && (n = n && this.canRunsDelete),
                t && (n = n && this.canRunsClosedDelete),
                this.canRunsAddEdit &&
                  (t ||
                    h.push({
                      type: "action",
                      name: "edit",
                      title: r.Z.lang("runs.menu_edit_runs"),
                      callback: this.doRunContextMenuMultipleClick,
                    }),
                  h.push({
                    type: "action",
                    name: "duplicate",
                    title: r.Z.lang("runs.menu_duplicate_runs"),
                    callback: this.doRunContextMenuMultipleClick,
                  })),
                i &&
                  (this.canRunsAddEdit && h.push({ type: "divider" }),
                  h.push({
                    type: "action",
                    name: "assign",
                    title: r.Z.lang("runs.menu_assign_tests"),
                    callback: this.doRunContextMenuMultipleClick,
                  })),
                (this.canRunsAddEdit || i) &&
                  (n || o) &&
                  h.push({ type: "divider" }),
                o &&
                  h.push({
                    type: "action",
                    name: "close",
                    title: r.Z.lang("runs.menu_close_runs"),
                    callback: this.doRunContextMenuMultipleClick,
                  }),
                n &&
                  h.push({
                    type: "action",
                    name: "delete",
                    title: r.Z.lang("runs.menu_delete_runs"),
                    callback: this.doRunContextMenuMultipleClick,
                  });
            }
            new a.x(h, {
              context: { table: e, $field: n, $row: i, id: t },
            }).show(s, d.Fz.BottomLeft);
          }
          editRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return n.N.post(
                "runs/render_update_many/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new w.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("runs", "metrics")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                });
            });
          }
          duplicateRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return n.N.post(
                "runs/render_select_statuses_for_many/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new y.A();
                  return (
                    (s.onSuccess = (e) => {
                      let s = { ids: t, statuses: e };
                      return n.N.post(
                        "runs/render_copy_many/" + this.projectId,
                        n.N.toNetworkCase(s)
                      ).then((e) => {
                        const t = new E.Y(this.projectId);
                        return (
                          (t.onSuccess = (e) =>
                            this.refreshFragments("runs", "metrics")),
                          t.show(e.data)
                        );
                      });
                    }),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                });
            });
          }
          assignRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return n.N.post(
                "runs/render_assign_many/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new b.M(t, this.projectId);
                  return (
                    (s.onSuccess = (e) => this.refreshFragments("runs")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                });
            });
          }
          duplicateRun(e, t, s) {
            e.loading("actionfield", s, () =>
              n.N.post("runs/render_select_statuses/" + t)
                .then((e) => {
                  const s = new T.Z();
                  return (
                    (s.onSuccess = (e) => {
                      let s = { statuses: e };
                      return n.N.post(
                        "runs/render_copy/" + t,
                        n.N.toNetworkCase(s)
                      ).then((e) => {
                        const t = new g.q(g.G.Copy, this.projectId);
                        return (
                          (t.onSuccess = (e) =>
                            this.refreshFragments("runs", "metrics")),
                          t.show(e.data)
                        );
                      });
                    }),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          assignRun(e, t, s) {
            e.loading("actionfield", s, () =>
              n.N.post("runs/render_assign/" + t)
                .then((e) => {
                  const s = new I.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) => this.refreshFragments("runs")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          editRun(e, t, s) {
            e.setLoading("actionfield", !0, s),
              n.N.post("runs/render_update/" + t)
                .then((e) => {
                  const s = new g.q(g.G.Edit, this.projectId, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("runs", "metrics")),
                    s.show(e.data)
                  );
                })
                .then(() => {
                  e.setLoading("actionfield", !1, s);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), N.Z.handleError(t);
                });
          }
          addRun(e) {
            o.UI.loading(e, () =>
              n.N.post("runs/render_create/" + this.projectId)
                .then((e) => {
                  const t = new g.q(
                    g.G.Add,
                    this.projectId,
                    null,
                    this.milestone.id
                  );
                  return (
                    (t.onSuccess = (e) =>
                      this.refreshFragments("runs", "metrics")),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          addMultipleRuns(e) {
            o.UI.loading(e, () =>
              n.N.post("runs/render_create_many/" + this.projectId)
                .then((e) => {
                  const t = new E.Y(this.projectId, this.milestone.id);
                  (t.onSuccess = (e) =>
                    this.refreshFragments("runs", "metrics")),
                    t.show(e.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          deleteRun(e, t, s) {
            let i = s.data("name"),
              o = new x.A(
                r.Z.lang("runs.delete_title"),
                r.Z.langEscape("runs.delete_message", { name: i }),
                r.Z.lang("runs.delete_button")
              );
            (o.onSuccess = () =>
              n.N.post("runs/delete/" + t).then(() =>
                this.refreshFragments("runs", "metrics")
              )),
              o.show();
          }
          deleteRuns(e) {
            let t = new x.A(
              r.Z.lang("runs.delete_many_title"),
              r.Z.lang("runs.delete_many_message"),
              r.Z.lang("runs.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return n.N.post(
                "runs/delete_many/" + this.projectId,
                n.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("runs", "metrics"));
            }),
              t.show();
          }
          closeRun(e, t, s) {
            let i = s.data("name"),
              o = new k.U(
                r.Z.lang("runs.close_title"),
                r.Z.langEscape("runs.close_message", { name: i }),
                r.Z.lang("runs.close_button"),
                r.Z.langEscape("runs.close_confirmation", { name: i })
              );
            (o.onSuccess = () =>
              n.N.post("runs/close/" + t).then(() =>
                this.refreshFragments("runs", "metrics")
              )),
              o.show();
          }
          closeRuns(e) {
            let t = new k.U(
              r.Z.lang("runs.close_many_title"),
              r.Z.lang("runs.close_many_message"),
              r.Z.lang("runs.close_many_button"),
              r.Z.langEscape("runs.close_many_confirmation")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return n.N.post(
                "runs/close_many/" + this.projectId,
                n.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("runs", "metrics"));
            }),
              t.show();
          }
          doShowSubMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.subItem),
              i = s.data("id"),
              n = s.data("started"),
              l = s.data("completed"),
              h = s.data("reopen"),
              c = s.data("subItems");
            const u = [];
            if (this.canAddEdit) {
              if (l) {
                let e = {
                  type: "action",
                  name: "reopen",
                  title: r.Z.lang("milestones.reopen"),
                  callback: this.doSubMenuClick,
                };
                h ||
                  ((e.enabled = !1),
                  (e.tooltip = r.Z.lang(
                    "milestones.reopen_not_allowed_tooltip"
                  ))),
                  u.push(e);
              } else
                n
                  ? (u.push({
                      type: "action",
                      name: "stop",
                      title: r.Z.lang("milestones.stop"),
                      callback: this.doSubMenuClick,
                    }),
                    u.push({
                      type: "action",
                      name: "complete",
                      title: r.Z.lang("milestones.complete"),
                      callback: this.doSubMenuClick,
                    }))
                  : u.push({
                      type: "action",
                      name: "start",
                      title: r.Z.lang("milestones.start"),
                      callback: this.doSubMenuClick,
                    });
              u.push({
                type: "action",
                name: "edit",
                title: r.Z.lang("milestones.edit"),
                callback: this.doSubMenuClick,
              }),
                u.push({ type: "divider" }),
                c
                  ? u.push({
                      type: "action",
                      name: "add",
                      title: r.Z.lang("milestones.add_sub"),
                      callback: this.doSubMenuClick,
                    })
                  : u.push({
                      type: "action",
                      name: "add",
                      title: r.Z.lang("milestones.add_sub"),
                      enabled: !1,
                      tooltip: r.Z.lang(
                        "milestones.add_sub_not_allowed_tooltip"
                      ),
                    });
            }
            this.canAddEdit && this.canDelete && u.push({ type: "divider" }),
              this.canDelete &&
                u.push({
                  type: "action",
                  name: "delete",
                  title: r.Z.lang("milestones.delete"),
                  callback: this.doSubMenuClick,
                }),
              new a.x(u, { context: { $menu: t, $milestone: s, id: i } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          addSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((t) => {
                  const s = new u.q(u.G.Add, this.projectId, null, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("subs", "metrics")),
                    s.show(t.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          doStartSubMilestone(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.subItem).data("id");
            this.startSubMilestone(s, t);
          }
          startSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_start/" + e)
                .then((t) => {
                  const s = new h.K(e);
                  (s.onSuccess = (e) => this.refreshFragments("subs")),
                    s.show(t.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          stopSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post(
                "milestones/update/" + e,
                n.N.toNetworkCase({ isStarted: !1 })
              )
                .then((e) => this.refreshFragments("subs"))
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          reopenSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post(
                "milestones/update/" + e,
                n.N.toNetworkCase({ isCompleted: !1 })
              )
                .then((e) => this.refreshFragments("subs"))
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          doCompleteSubMilestone(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.subItem).data("id");
            this.completeSubMilestone(s, t);
          }
          completeSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_complete/" + e)
                .then((t) => {
                  const s = new c.X(e);
                  (s.onSuccess = (e) => this.refreshFragments("subs")),
                    s.show(t.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          deleteSubMilestone(e, t) {
            let s = t.data("name"),
              i = new x.A(
                r.Z.lang("milestones.delete_title"),
                r.Z.langEscape("milestones.delete_message", { name: s }),
                r.Z.lang("milestones.delete_button")
              );
            (i.onSuccess = () =>
              n.N.post("milestones/delete/" + e).then(() =>
                this.refreshFragments("subs", "metrics")
              )),
              i.show();
          }
          editSubMilestone(e, t) {
            o.UI.loading(t, () =>
              n.N.post("milestones/render_update/" + e)
                .then((t) => {
                  const s = new u.q(u.G.Edit, this.projectId, e);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("subs", "metrics")),
                    s.show(t.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          doAddSubMilestone() {
            let e = $(this.addSubMilestoneIconTarget);
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new u.q(
                    u.G.Add,
                    this.projectId,
                    null,
                    this.milestone.id
                  );
                  (t.onSuccess = (e) =>
                    this.refreshFragments("subs", "metrics")),
                    t.show(e.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
          doShowSubStatsPopup(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.subItem).data("id");
            o.UI.loading(t, () =>
              n.N.post("milestones/render_stats/" + s)
                .then((e) => {
                  new l._(!0).show(t, d.Fz.BottomLeft, e.data);
                })
                .catch((e) => {
                  N.Z.handleError(e);
                })
            );
          }
        }
        U(F, "targets", [
          "responsiveContainer",
          "startButton",
          "completeButton",
          "editButton",
          "editMenuButton",
          "addSubMilestoneIcon",
          "showInfoIcon",
          "showRunAddMenuIcon",
          "showSessionAddMenuIcon",
          "emptyAddSessionButton",
          "emptyAddRunButton",
        ]);
      },
      99911: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => C });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(50609),
          l = s(7042),
          d = s(14589),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends a.V {
          constructor(e) {
            super("projects.docs_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 800,
              resizable: !0,
            }),
              (this.projectId = e);
          }
          load() {
            this.updatedAt = this.params.updatedAt;
          }
          prepare() {
            return new Promise((e, t) => {
              h.Z.requestChild(this.component, "docs", {
                onAdded: () => {
                  this.components.docs.loadEditor().then(() => {
                    e();
                  });
                },
              });
            });
          }
          loaded() {
            this.components.docs.focus();
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.markLoading(this.$submitButton),
              l.l.hideValidationErrors(this.formViews);
            let t = {
              docs: this.components.docs.getData(),
              updatedAt: this.updatedAt,
              forceUpdate: e,
            };
            n.N.post(
              "projects/update_docs/" + this.projectId,
              n.N.toNetworkCase(t)
            )
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  o.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                d.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      l.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    o.UI.markCompleted(this.$submitButton);
                  })
              );
          }
        }
        c(u, "forms", [{ name: "project", fields: ["docs"] }]),
          c(u, "targets", ["submitButton"]),
          c(u, "actions", ["doSubmit"]);
        var g = s(18341),
          p = s(69555),
          m = s(132);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends i.v {
          constructor(...e) {
            super(...e),
              f(this, "selectors", { relatedItem: "li" }),
              f(this, "classes", {
                relatedItemActionsVisible:
                  "split-project-list-item--actions-visible",
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              o.UI.initialize(this.element);
          }
          doEmptyEdit() {
            this.edit($(this.emptyEditButtonTarget));
          }
          doEdit() {
            this.edit($(this.editButtonTarget));
          }
          edit(e) {
            o.UI.markLoading(e),
              n.N.post("projects/render_update_docs/" + this.projectId)
                .then((t) => {
                  o.UI.markCompleted(e);
                  const s = new u(this.projectId);
                  (s.onSuccess = (e) =>
                    n.N.postReplace(
                      "projects/render_docs/" + this.projectId,
                      this.contentContainerTarget
                    ).then(() => {
                      o.UI.initialize(this.contentContainerTarget);
                    })),
                    s.show(t.data);
                })
                .catch((t) => {
                  o.UI.markCompleted(e), h.Z.handleError(t);
                });
          }
          doAddRelated() {
            let e = $(this.addRelatedLinkTarget);
            o.UI.popupVisible(e) ||
              (o.UI.markLoading(e),
              n.N.post("projects/render_create_related/" + this.projectId)
                .then((t) => {
                  o.UI.markCompleted(e);
                  const s = new g.P();
                  (s.onSuccess = (t) => {
                    o.UI.markLoading(e),
                      n.N.post(
                        `projects/create_related/${this.projectId}/${t.value}`
                      )
                        .then(() =>
                          this.refreshRelated().then(() => {
                            o.UI.markCompleted(e);
                          })
                        )
                        .catch((t) => {
                          o.UI.markCompleted(e), h.Z.handleError(t);
                        });
                  }),
                    s.show(e, p.Fz.Bottom, t.data);
                })
                .catch((t) => {
                  o.UI.markCompleted(e), h.Z.handleError(t);
                }));
          }
          doDeleteRelated(e) {
            let t = $(e.target),
              s = t.closest(this.selectors.relatedItem),
              i = o.UI.getClosestIconAction(t),
              a = s.data("id");
            if (o.UI.popupVisible(i)) return;
            s.addClass(this.classes.relatedItemActionsVisible);
            const l = new m.l(r.Z.lang("docs.really_delete_related"));
            (l.onSuccess = () => {
              o.UI.markLoading(i),
                n.N.post(`projects/delete_related/${this.projectId}/${a}`)
                  .then(() => this.refreshRelated())
                  .catch((e) => {
                    o.UI.markCompleted(i),
                      s.removeClass(this.classes.relatedItemActionsVisible),
                      h.Z.handleError(e);
                  });
            }),
              (l.onHide = (e) => {
                e || s.removeClass(this.classes.relatedItemActionsVisible);
              }),
              l.show(i, p.Fz.BottomLeft);
          }
          refreshRelated() {
            return n.N.postReplace(
              "projects/render_related/" + this.projectId,
              this.relatedContainerTarget
            ).then(() => {
              o.UI.initialize(this.relatedContainerTarget);
            });
          }
        }
        f(C, "targets", [
          "contentContainer",
          "editButton",
          "emptyEditButton",
          "addRelatedLink",
          "relatedContainer",
        ]);
      },
      91552: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(26454),
          o = s(16559),
          n = s(96622),
          r = s(67694),
          a = s(18792),
          l = s(69555),
          d = s(43689),
          h = s(13814),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends i.v {
          constructor(...e) {
            super(...e),
              u(this, "selectors", {
                row: "tr",
                milestoneItemOrSubItem:
                  ".milestones-list-item, .milestones-sub-list-item",
              }),
              u(this, "doAutomationRunActivitySelectDate", (e) => {
                h.N.visit(`automation/runs/${this.project.id}?date=${e.date}`);
              });
          }
          load() {
            (this.project = this.params.project),
              n.UI.initialize(this.element),
              c.Z.requestChild(this.component, "automationRunActivity", {
                events: { selectdate: this.doAutomationRunActivitySelectDate },
              }),
              this.params.notification &&
                o.T.showPageNotification(this.params.notification)
                  .then(() => c.Z.layout.navbar.refreshNotifications())
                  .catch((e) => {
                    c.Z.handleError(e);
                  });
          }
          doShowMilestoneStatsPopup(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.milestoneItemOrSubItem).data("id");
            n.UI.loading(t, () =>
              h.N.post("milestones/render_stats/" + s)
                .then((e) => {
                  new r._(!0).show(t, l.Fz.BottomLeft, e.data);
                })
                .catch((e) => {
                  c.Z.handleError(e);
                })
            );
          }
          doShowSessionStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.parent(),
              i = s.closest(this.selectors.row).data("id");
            n.UI.popupVisible(t) ||
              n.UI.loading(s, () =>
                h.N.post("sessions/render_stats/" + i)
                  .then((e) => {
                    new r._(!0).show(t, l.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    c.Z.handleError(e);
                  })
              );
          }
          doShowRunStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            n.UI.popupVisible(t) ||
              n.UI.loading(t, () =>
                h.N.post("runs/render_stats/" + s)
                  .then((e) => {
                    new r._(!0).show(t, l.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    c.Z.handleError(e);
                  })
              );
          }
          doShowInfo() {
            let e = $(this.showInfoIconTarget);
            if (n.UI.popupVisible(e)) return;
            let t = "/projects/view/" + this.project.id;
            new a.N({
              title: d.Z.lang("projects.info_name", {
                name: this.project.name,
              }),
              id: this.project.id,
              link: t,
              url: h.N.url(t),
            }).show(e, l.Fz.BottomLeft);
          }
        }
        u(g, "targets", ["responsiveContainer", "showInfoIcon"]);
      },
      55542: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { AddEditControlMode: () => h, default: () => c });
        var i = s(89432),
          o = s(96622),
          n = s(13814),
          r = s(36649),
          a = s(7042),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class c extends i.d {
          constructor(...e) {
            super(...e),
              d(this, "selectors", {
                controlGroup: ".control-group",
                controlGroupSection: ".control-group__section",
              }),
              d(this, "classes", {
                controlGroupFocused: "control-group--focused",
                commentEditorError: "repos-case-comment-editor--error",
              }),
              d(this, "doFocusTrackerChange", (e) => {
                this.$controlGroup.toggleClass(
                  this.classes.controlGroupFocused,
                  e.focused
                ),
                  e.focused || this.events.trigger("blur", { target: this });
              }),
              d(this, "doControlGroupMouseDown", (e) => {
                let t = $(e.target).add($(e.target).parents());
                this.focusTracker.hasElement(t) ||
                  (this.getEnabled() &&
                    (e.preventDefault(), this.components.comment.focus()));
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.mode = this.params.mode),
              (this.caseId = this.params.caseId),
              (this.commentId = this.params.commentId),
              (this.enabled = !0),
              (this.focusTracker = new r.R(this.$element, !0)),
              this.focusTracker.events.on("change", this.doFocusTrackerChange),
              (this.$controlGroup = $(
                this.selectors.controlGroup,
                this.$element
              )),
              this.$controlGroup.on("mousedown", this.doControlGroupMouseDown),
              (this.$submitButton = $(this.submitButtonTarget)),
              (this.$cancelButton = $(this.cancelButtonTarget)),
              (this.$validationErrors = $(this.validationErrorsTarget)),
              (this.$toolbar = $(this.toolbarTarget)),
              o.UI.initialize(this.$element),
              l.Z.requestChild(this.component, "comment", {
                onAdded: () => {
                  this.components.comment.loadEditor().then(() => {
                    this.focusTracker.refreshElements(this.$element),
                      this.events.trigger("loaded", { target: this });
                  });
                },
              });
          }
          unload() {
            this.$controlGroup.off("mousedown", this.doControlGroupMouseDown);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              let e = { comment: this.components.comment.getData() },
                t =
                  this.mode == h.Add
                    ? "repositories/create_case_comment/" + this.caseId
                    : "repositories/update_case_comment/" + this.commentId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) =>
                  Promise.all(
                    this.events.trigger("success", {
                      target: this,
                      result: e.data,
                    })
                  )
                    .then(() => {
                      this.hideValidationErrors();
                    })
                    .catch((e) => {
                      l.Z.handleError(e);
                    })
                )
                .catch((e) => {
                  a.l.handleCustomFormError(e, (e, t) => {
                    this.showValidationErrors(t);
                  });
                });
            });
          }
          cancel() {
            this.events.trigger("cancel", { target: this });
          }
          doCancel() {
            this.cancel();
          }
          resetForm() {
            this.hideValidationErrors(),
              this.components.comment.setData(""),
              this.components.comment.focus();
          }
          focus() {
            this.components.comment.focus(), this.focusTracker.focusChanged();
          }
          setEnabled(e) {
            (this.enabled = e),
              this.components.comment.setEnabled(e),
              o.UI.toggleButtonEnabled(this.$submitButton, e),
              o.UI.toggleButtonEnabled(this.$cancelButton, e);
          }
          getEnabled() {
            return this.enabled;
          }
          hideValidationErrors() {
            this.$element.removeClass(this.classes.commentEditorError);
          }
          showValidationErrors(e) {
            this.$element.addClass(this.classes.commentEditorError),
              a.l.showValidationBlockErrors(this.$validationErrors, e);
          }
          getFocused() {
            return this.focusTracker.getFocused();
          }
        }
        d(c, "targets", [
          "submitButton",
          "cancelButton",
          "validationErrors",
          "toolbar",
        ]);
      },
      29930: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => pe });
        var i = s(26454),
          o = s(96622),
          n = s(11802),
          r = s(7042),
          a = s(47914),
          l = s(13814),
          d = s(15612),
          h = s(84709),
          c = s(16087),
          u = s(21077),
          g = s(50609),
          p = s(43689),
          m = s(28456),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b extends g.V {
          constructor(e = null) {
            super("repositories.cases.copy_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              C(this, "classes", {
                settingsContainerSelf:
                  "repos-copy-cases-dialog__settings-container--has-self",
                settingsContainerSettings:
                  "repos-copy-cases-dialog__settings-container--has-settings",
              }),
              C(this, "doSourceProjectIdChange", (e) => {
                this.resetSourceProjectSettings(),
                  this.setSourceProject(e.value),
                  this.$settingsContainer.removeClass(
                    this.classes.settingsContainerSelf
                  ),
                  this.$settingsContainer.removeClass(
                    this.classes.settingsContainerSettings
                  ),
                  o.UI.setButtonDisabled(this.$submitButton),
                  e.value == this.projectId
                    ? this.$settingsContainer.addClass(
                        this.classes.settingsContainerSelf
                      )
                    : e.value &&
                      (this.$settingsContainer.addClass(
                        this.classes.settingsContainerSettings
                      ),
                      o.UI.setButtonEnabled(this.$submitButton)),
                  this.refreshPositionIfNeeded();
              }),
              C(this, "doSourceFolderIdChange", (e) => {
                e.id && o.UI.setRadio(this.$modeFolder, !0);
              }),
              (this.projectId = e);
          }
          load() {
            f.Z.requestChild(this.component, "sourceProjectId", {
              events: { change: this.doSourceProjectIdChange },
            }),
              f.Z.requestChild(this.component, "sourceFolderId", {
                events: { change: this.doSourceFolderIdChange },
              }),
              f.Z.requestChild(this.component, "targetFolderId"),
              this.resetSourceProjectSettings();
          }
          resetSourceProjectSettings() {
            (this.cases = []),
              (this.filter = a.X.EmptyFilter),
              o.UI.setRadio(this.$modeAll, !0),
              this.updateCaseCount(),
              this.components.sourceFolderId &&
                this.components.sourceFolderId.clear();
          }
          setSourceProject(e) {
            this.components.sourceFolderId.setProjectId(e);
          }
          doSelectCases() {
            o.UI.loading(this.$casesSelection, () => {
              let e = {
                  filter: this.filter,
                  selected: this.cases,
                  showImport: !1,
                },
                t = o.UI.getDropdownIntOrNull(this.$sourceProjectId);
              return l.N.post(
                "repositories/render_select_cases/" + t,
                l.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new m._(t);
                  (s.onSuccess = (e) => {
                    (this.cases = e.cases),
                      (this.filter = e.filter),
                      this.updateCaseCount(),
                      o.UI.setRadio(this.$modeCases, !0);
                  }),
                    s.show(e.data);
                })
                .catch((e) => {
                  f.Z.handleError(e);
                });
            });
          }
          updateCaseCount() {
            let e;
            (e =
              0 == this.cases.length
                ? p.Z.lang("repositories.copy_cases_include_cases_none")
                : 1 == this.cases.length
                ? p.Z.lang("repositories.copy_cases_include_cases_single")
                : p.Z.lang("repositories.copy_cases_include_cases_multi", {
                    count: this.cases.length,
                  })),
              this.$selectedCasesCount.text(e);
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = null;
              o.UI.getRadio(this.$modeAll)
                ? (e = d.g.CopyCasesModeAll)
                : o.UI.getRadio(this.$modeFolder)
                ? (e = d.g.CopyCasesModeFolder)
                : o.UI.getRadio(this.$modeCases) &&
                  (e = d.g.CopyCasesModeCases);
              let t = {
                mode: e,
                sourceProjectId: o.UI.getDropdownIntOrNull(
                  this.$sourceProjectId
                ),
                sourceFolderId: this.components.sourceFolderId.getFolderId(),
                sourceCaseIds: this.cases,
                targetFolderId: this.components.targetFolderId.getFolderId(),
              };
              return l.N.post(
                "repositories/copy_cases_to_project/" + this.projectId,
                l.N.toNetworkCase(t)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  r.l.handleFormError(e, this.formViews);
                });
            });
          }
        }
        C(b, "forms", [
          {
            name: "copy",
            fields: [
              "sourceProjectId",
              "sourceFolderId",
              "modeAll",
              "modeCases",
              "modeFolder",
            ],
          },
        ]),
          C(b, "targets", [
            "submitButton",
            "settingsContainer",
            "casesSelection",
            "selectedCasesCount",
          ]),
          C(b, "actions", ["doSubmit", "doSelectCases"]);
        var I = s(77741),
          w = s(55885),
          v = s(35451),
          S = s(14589),
          x = s(27181);
        function k(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class T extends g.V {
          constructor(e, t) {
            super("repositories.cases.edit_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: a.X.SplitDialogWidth,
              resizable: !0,
            }),
              k(this, "selectors", {
                input: "input",
                dropdown: ".dropdown",
                fieldSelection: ".field-selection",
                fieldSelectionField: ".field-selection__field",
                fieldSelectionCheckbox: ".field-selection__checkbox .checkbox",
                fieldLabel: ".field > label",
              }),
              k(this, "classes", {
                fieldSelectionEditing: "field-selection--editing",
                fieldSelectionRestricted: "field-selection--restricted",
                hidden: "default-hidden",
              }),
              k(this, "doTemplateIdChange", (e) => {
                let t = !1,
                  s = this.fieldMappings[e.value] || [];
                this.fields.updateVisibility((e) => {
                  let i = s.includes(e.name);
                  return (
                    e.settings.is_compact || (t = t || i), s.includes(e.name)
                  );
                }),
                  this.$wideCustomFieldSection.toggleClass(
                    this.classes.hidden,
                    !t
                  );
              }),
              k(this, "doFieldSelectionCheckboxChange", (e) => {
                this.fieldSelectionChange(
                  e.closest(this.selectors.fieldSelection),
                  e
                );
              }),
              k(this, "doFieldSelectionLabelClick", (e) => {
                let t = $(e.currentTarget).closest(
                  this.selectors.fieldSelection
                );
                if (t.hasClass(this.classes.fieldSelectionRestricted)) return;
                let s = $(this.selectors.fieldSelectionCheckbox, t);
                o.UI.setCheckbox(s, !o.UI.getCheckbox(s)),
                  this.fieldSelectionChange(t, s);
              }),
              (this.caseIds = e),
              (this.projectId = t);
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.fieldMappings = this.params.fieldMappings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.templateId = this.params.templateId),
              (this.updates = this.params.updates),
              (this.fields = new x.rN(this.fieldSettings, this.$dialog)),
              (this.$fieldSelections = $(
                this.selectors.fieldSelection,
                this.$dialog
              )),
              (this.$fieldSelectionLabels = $(
                this.selectors.fieldLabel,
                this.$ieldSelections
              )),
              (this.$fieldSelectionCheckboxes = $(
                this.selectors.fieldSelectionCheckbox,
                this.$fieldSelections
              )),
              this.$fieldSelectionLabels.on(
                "click",
                this.doFieldSelectionLabelClick
              ),
              o.UI.onCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              ),
              f.Z.requestChild(this.component, "templateId", {
                events: { change: this.doTemplateIdChange },
              }),
              f.Z.requestChild(this.component, "issues");
          }
          unload() {
            this.$fieldSelectionLabels.off(
              "click",
              this.doFieldSelectionLabelClick
            ),
              o.UI.offCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              );
          }
          prepare() {
            return this.fields.prepare();
          }
          fieldSelectionChange(e, t) {
            let s = o.UI.getCheckbox(t);
            e.toggleClass(this.classes.fieldSelectionEditing, s),
              o.UI.dropdownRefreshSizes(e);
            let i = $(this.selectors.fieldSelectionField, e),
              n = i.data("customField"),
              r = i.data("field");
            setTimeout(() => {
              if (n) {
                let e = this.fields.getField(n);
                e && e.control.focus();
              } else
                "name" == r || "estimate" == r
                  ? o.UI.focusText($(this.selectors.input, i).first())
                  : o.UI.focusDropdown($(this.selectors.dropdown, i).first());
            }, 0);
          }
          doSubmit() {
            this.submit();
          }
          isFieldSelectionEnabled(e) {
            let t = e.closest(this.selectors.fieldSelection),
              s = $(this.selectors.fieldSelectionCheckbox, t);
            return s.length > 0 && o.UI.getCheckbox(s);
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let t = { ids: this.caseIds };
              this.isFieldSelectionEnabled(this.$name) &&
                (t.name = o.UI.getText(this.$name)),
                this.isFieldSelectionEnabled(this.$configurations) &&
                  (t.configurations = o.UI.getDropdownInts(
                    this.$configurations
                  )),
                this.isFieldSelectionEnabled(this.$templateId) &&
                  (t.templateId = o.UI.getDropdownIntOrNull(this.$templateId)),
                this.isFieldSelectionEnabled(this.$stateId) &&
                  (t.stateId = o.UI.getDropdownIntOrNull(this.$stateId)),
                this.isFieldSelectionEnabled(this.$estimate) &&
                  (t.estimate = o.UI.getText(this.$estimate)),
                this.isFieldSelectionEnabled(this.$issues) &&
                  (t.issues = this.components.issues.getIssues()),
                this.isFieldSelectionEnabled(this.$tags) &&
                  (t.tags = o.UI.getDropdown(this.$tags));
              let s = t.templateId || this.templateId;
              return (
                s &&
                  _.assign(
                    t,
                    this.fields.getValues(
                      (e) =>
                        !!this.isFieldSelectionEnabled(e.$field) &&
                        (this.fieldMappings[s] || []).includes(e.name) &&
                        (!e.settings.is_restricted || this.canAddEditRestricted)
                    )
                  ),
                (t.updates = this.updates),
                (t.forceUpdate = e),
                l.N.post(
                  "repositories/update_cases/" + this.projectId,
                  l.N.toNetworkCase(t)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    S.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        r.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  )
              );
            });
          }
        }
        function y(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        k(T, "forms", [
          {
            name: "case",
            fields: [
              "name",
              "configurations",
              "templateId",
              "stateId",
              "estimate",
              "tags",
              "issues",
            ],
          },
        ]),
          k(T, "targets", ["submitButton", "wideCustomFieldSection"]),
          k(T, "actions", ["doSubmit"]);
        class E extends g.V {
          constructor() {
            super("repositories.folders.delete_dialog", {
              onSubmitForm: () => this.doDelete(),
              width: 540,
              variant: "negative",
            }),
              y(this, "selectors", { checkbox: ".checkbox" }),
              y(this, "doCheckboxChange", () => {
                this.updateSubmitButton();
              });
          }
          load() {
            (this.$checkboxes = $(this.selectors.checkbox, this.$dialog)),
              this.$checkboxes.each((e, t) => {
                let s = $(t);
                o.UI.onCheckboxChange(s, this.doCheckboxChange);
              }),
              this.updateSubmitButton();
          }
          unload() {
            this.$checkboxes.each((e, t) => {
              let s = $(t);
              o.UI.offCheckboxChange(s, this.doCheckboxChange);
            });
          }
          getAllCheckboxesChecked() {
            return this.$checkboxes.toArray().reduce((e, t) => {
              let s = $(t);
              return e && o.UI.getCheckbox(s);
            }, !0);
          }
          updateSubmitButton() {
            o.UI.toggleButtonEnabled(
              this.$submitButton,
              this.getAllCheckboxesChecked()
            );
          }
          doSubmit() {
            this.getAllCheckboxesChecked() &&
              (o.UI.markLoading(this.$submitButton),
              this.triggerSuccess().then(() => {
                o.UI.markCompleted(this.$submitButton);
              }));
          }
        }
        y(E, "actions", ["doSubmit"]), y(E, "targets", ["submitButton"]);
        var N = s(19968),
          U = s(80714);
        function F(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class A extends g.V {
          constructor(e) {
            super("repositories.export_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              F(this, "classes", { hidden: "default-hidden" }),
              F(this, "doFolderIdChange", (e) => {
                e.id && o.UI.setRadio(this.$modeFolder, !0);
              }),
              (this.projectId = e);
          }
          load() {
            f.Z.requestChild(this.component, "folderId", {
              events: { change: this.doFolderIdChange },
            }),
              f.Z.requestChild(this.component, "columns"),
              (this.cases = []),
              (this.filter = a.X.EmptyFilter),
              this.updateCaseCount();
          }
          unload() {}
          updateCaseCount() {
            let e;
            (e =
              0 == this.cases.length
                ? p.Z.lang("repositories.export_csv_cases_include_cases_none")
                : 1 == this.cases.length
                ? p.Z.lang("repositories.export_csv_cases_include_cases_single")
                : p.Z.lang(
                    "repositories.export_csv_cases_include_cases_multi",
                    { count: this.cases.length }
                  )),
              this.$selectedCasesCount.text(e);
          }
          doSelectCases() {
            o.UI.loading(this.$casesSelection, () => {
              let e = {
                filter: this.filter,
                selected: this.cases,
                showImport: !1,
              };
              return l.N.post(
                "repositories/render_select_cases/" + this.projectId,
                l.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new m._(this.projectId);
                  (t.onSuccess = (e) => {
                    (this.cases = e.cases),
                      (this.filter = e.filter),
                      this.updateCaseCount(),
                      o.UI.setRadio(this.$modeCases, !0);
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  f.Z.handleError(e);
                });
            });
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = null;
              o.UI.getRadio(this.$modeAll)
                ? (e = d.g.RepositoryExportModeAll)
                : o.UI.getRadio(this.$modeFolder)
                ? (e = d.g.RepositoryExportModeFolder)
                : o.UI.getRadio(this.$modeCases) &&
                  (e = d.g.RepositoryExportModeCases);
              let t = [];
              this.components.columns.getSelectedRows().each((e, s) => {
                t.push($(s).data("column"));
              });
              let s = {
                delimiter: o.UI.getDropdown(this.$delimiter),
                folderId: this.components.folderId.getFolderId(),
                showContext: o.UI.getCheckbox(this.$showContext),
                caseIds: this.cases,
                mode: e,
                columns: t,
              };
              return (
                f.Z.blockUI(),
                l.N.post(
                  "repositories/validate_export_csv/" + this.projectId,
                  l.N.toNetworkCase(s)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      l.N.formPostDownload(
                        "repositories/export_csv/" + this.projectId,
                        { data: JSON.stringify(l.N.toNetworkCase(s)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    r.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    f.Z.unblockUI();
                  })
              );
            });
          }
        }
        function P(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        F(A, "forms", [
          {
            name: "export",
            fields: [
              "delimiter",
              "folderId",
              "modeAll",
              "modeCases",
              "modeFolder",
              "showContext",
            ],
          },
        ]),
          F(A, "targets", [
            "submitButton",
            "casesSelection",
            "selectedCasesCount",
            "downloadMessage",
          ]),
          F(A, "actions", ["doSubmit", "doSelectCases"]);
        class R extends g.V {
          constructor(e, t, s) {
            super("repositories.cases.import_csv_progress_dialog", {
              width: 520,
              hideOnESC: !1,
            }),
              P(this, "templates", { progressCaption: "$(count)/$(total)" }),
              P(this, "classes", {
                dialogImporting: "repos-csv-import-progress-dialog--importing",
                dialogDone: "repos-csv-import-progress-dialog--done",
              }),
              (this.projectId = e),
              (this.importData = t),
              (this.records = s),
              (this.total = s.length),
              (this.processed = 0),
              (this.hadError = !1),
              (this.cancelled = !1),
              (this.inProgress = !1);
          }
          load() {
            f.Z.requestChild(this.component, "progress", {
              onAdded: () => {
                this.updateProgress();
              },
            });
          }
          unload() {}
          processRecords() {
            if (0 == this.total) return;
            o.UI.markLoading(this.$closeButton),
              f.Z.setBlockingRequests(!1),
              (this.inProgress = !0),
              this.$progress.addClass(this.classes.dialogImporting);
            let e = [];
            for (let t = 0; t < this.records.length; t += 250) {
              let s = this.records.slice(t, t + 250);
              e.push(s);
            }
            e.reduce(
              (e, t) =>
                e.then(() => {
                  if (this.cancelled) return Promise.resolve();
                  let e = _.cloneDeep(this.importData);
                  return (
                    (e.records = t),
                    l.N.post(
                      "repositories/import_cases/" + this.projectId,
                      l.N.toNetworkCase(e)
                    )
                      .then(() => {
                        (this.processed += t.length), this.updateProgress();
                      })
                      .then(
                        () =>
                          new Promise(function (e, t) {
                            setTimeout(function () {
                              e();
                            }, 200);
                          })
                      )
                      .catch((e) => {
                        (this.cancelled = !0),
                          (this.hadError = !0),
                          r.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      })
                  );
                }),
              Promise.resolve()
            ).then(() => {
              f.Z.setBlockingRequests(!0),
                (this.inProgress = !1),
                this.$progress.removeClass(this.classes.dialogImporting),
                this.hadError ||
                  this.$progress.addClass(this.classes.dialogDone),
                this.updateCompleted();
            });
          }
          updateProgress() {
            let e = p.Z.template(this.templates.progressCaption, {
              count: this.processed,
              total: this.total,
            });
            this.components.progress.setProgress(this.processed, this.total, e);
          }
          updateCompleted() {
            o.UI.setButtonDisabled(this.$cancelButton),
              o.UI.setButtonEnabled(this.$closeButton),
              o.UI.markCompleted(this.$cancelButton),
              o.UI.markCompleted(this.$closeButton),
              this.hadError ||
                this.components.progress.setProgress(this.total, this.total);
          }
          doClose() {
            o.UI.getButtonEnabled(this.$closeButton) &&
              o.UI.loading(this.$closeButton, () =>
                this.triggerSuccess(o.UI.getCheckbox(this.$importAnother))
              );
          }
          doCancel() {
            (this.cancelled = !0),
              o.UI.setButtonDisabled(this.$cancelButton),
              o.UI.markLoading(this.$cancelButton),
              o.UI.markCompleted(this.$closeButton);
          }
          keyDown(e) {
            e.which == n.N.ESC &&
              (this.inProgress
                ? this.cancelled || this.doCancel()
                : this.doClose());
          }
        }
        P(R, "targets", [
          "closeButton",
          "cancelButton",
          "importAnother",
          "progress",
        ]),
          P(R, "actions", ["doClose", "doCancel"]),
          P(R, "forms", [{ name: "progress", fields: [] }]);
        var M = s(37914);
        function B(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class D extends g.V {
          constructor(e) {
            super("repositories.cases.import_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 750,
              width: 900,
              height: 740,
              resizable: !0,
            }),
              B(this, "classes", {
                dropzoneDragging:
                  "repos-csv-import-dialog-file__dropzone--dragging",
                fileSectionHasFile: "repos-csv-import-dialog-file--has-file",
              }),
              B(this, "selectors", {
                row: "tr",
                transform: ".repos-csv-import-dialog-transforms__transform",
              }),
              B(this, "csvDelimiters", [",", ";", ":", "|", "\t"]),
              B(this, "csvEncodings", [
                "utf-8",
                "iso-8859-15",
                "iso-8859-1",
                "windows-1252",
              ]),
              B(this, "doCsvOptionChange", () => {
                this.csvChanged = !0;
              }),
              B(this, "doTemplateIdChange", () => {
                if (this.importData.fields)
                  for (let e of this.importData.fields)
                    (e.transform = null), (e.target = null);
              }),
              B(this, "doClipboardPaste", (e, t) => {
                t.files.length > 0 &&
                  (this.setFile(t.files), e.preventDefault());
              }),
              B(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              B(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              B(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              B(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.setFile(t);
              }),
              B(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.setFile(t.files),
                  o.UI.clearFile(this.$fileInput);
              }),
              B(this, "doFolderModeFlatFolderIdChange", (e) => {
                e.id && o.UI.setRadio(this.$folderModeFlat, !0);
              }),
              B(this, "doFolderModeSubFolderIdChange", (e) => {
                e.id && o.UI.setRadio(this.$folderModeSub, !0);
              }),
              B(this, "doTargetChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.row)
                    .data("key"),
                  s = e.target.getItemParams(e.value);
                for (let i of this.importData.fields)
                  if (i.key === t) {
                    if (
                      ((i.target = e.value),
                      (i.transform = null),
                      (i.type = s ? s.type : null),
                      s &&
                        (s.type == d.g.ImportTypesCheckbox ||
                          s.type == d.g.ImportTypesDropdown ||
                          s.type == d.g.ImportTypesMultiselect))
                    ) {
                      let e = this.csvImporter.getValues(
                          i.index,
                          d.g.ImportCsvMaxValues
                        ),
                        t = {};
                      for (let s of e) t[s] = null;
                      i.transform = { mapping: t };
                    }
                    break;
                  }
              }),
              B(this, "doTransformMappingChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.row)
                    .attr("data-from"),
                  s = e.target.$element
                    .closest(this.selectors.transform)
                    .data("key");
                for (let i of this.importData.fields)
                  if (i.key === s) {
                    if (i.transform && i.transform.mapping)
                      for (let s of Object.keys(i.transform.mapping))
                        if (s === t) {
                          null !== e.value
                            ? (i.transform.mapping[s] = parseInt(e.value, 10))
                            : (i.transform.mapping[s] = null);
                          break;
                        }
                    break;
                  }
              }),
              B(this, "doTransformFormatChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.transform)
                    .data("key"),
                  s = e.target.getItemParams(e.value);
                for (let i of this.importData.fields)
                  if (i.key === t) {
                    i.transform = {
                      format: s && s.format ? s.format : parseInt(e.value, 10),
                    };
                    break;
                  }
              }),
              (this.projectId = e),
              (this.csvFile = null),
              (this.csvImporter = null),
              (this.csvChanged = !0),
              (this.page = 1),
              (this.importData = {});
          }
          load() {
            this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              o.UI.onTextChange(this.$csvOffset, this.doCsvOptionChange),
              o.UI.onCheckboxChange(this.$csvHasHeader, this.doCsvOptionChange),
              f.Z.requestChild(this.component, "csvEncoding", {
                events: { change: this.doCsvOptionChange },
              }),
              f.Z.requestChild(this.component, "csvDelimiter", {
                events: { change: this.doCsvOptionChange },
              }),
              f.Z.requestChild(this.component, "templateId", {
                events: { change: this.doTemplateIdChange },
              }),
              f.Z.requestChild(this.component, "target", {
                events: { change: this.doTargetChange },
              }),
              f.Z.requestChild(this.component, "transformMapping", {
                events: { change: this.doTransformMappingChange },
              }),
              f.Z.requestChild(this.component, "transformFormat", {
                events: { change: this.doTransformFormatChange },
              }),
              f.Z.requestChild(this.component, "folderModeFlatFolderId", {
                events: { change: this.doFolderModeFlatFolderIdChange },
              }),
              f.Z.requestChild(this.component, "folderModeSubFolderId", {
                events: { change: this.doFolderModeSubFolderIdChange },
              }),
              (this.receiver = f.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              })),
              this.setWizardPage(1);
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              o.UI.offTextChange(this.$csvOffset, this.doCsvOptionChange),
              o.UI.offCheckboxChange(
                this.$csvHasHeader,
                this.doCsvOptionChange
              ),
              f.Z.clipboard.removeReceiver(this.receiver);
          }
          setFile(e = []) {
            r.l.hideValidationErrors(this.formViews),
              (this.csvFile = null),
              e.length > 0 &&
                ((this.csvFile = e[0]),
                this.csvFile.size > d.g.ImportCsvMaxFileSize &&
                  ((this.csvFile = null),
                  r.l.showValidationErrorMessage(
                    this.formViews[0],
                    p.Z.lang("repositories.import_csv_file_too_large")
                  ))),
              this.$fileSection.toggleClass(
                this.classes.fileSectionHasFile,
                !!this.csvFile
              ),
              this.csvFile
                ? (this.$fileName.text(this.csvFile.name),
                  this.$fileSize.text(
                    `(${p.Z.formatBytes(this.csvFile.size)})`
                  ))
                : (this.$fileName.empty(), this.$fileSize.empty()),
              (this.csvChanged = !0);
          }
          doClearFile() {
            this.setFile();
          }
          toggleButtons(e) {
            let t = {};
            _.defaults(t, e, { previous: !1, next: !1, submit: !1 }),
              t.previous
                ? this.$previousButton.show()
                : this.$previousButton.hide(),
              t.next ? this.$nextButton.show() : this.$nextButton.hide(),
              t.submit ? this.$submitButton.show() : this.$submitButton.hide();
          }
          setWizardPage(e) {
            switch (
              ((this.page = e),
              this.$pages.attr("data-page", e),
              this.refreshUi(),
              e)
            ) {
              case 1:
                this.toggleButtons({ previous: !1, next: !0, submit: !1 });
                break;
              case 2:
              case 3:
                this.toggleButtons({ previous: !0, next: !0, submit: !1 });
                break;
              case 4:
                this.toggleButtons({ previous: !0, next: !1, submit: !0 });
            }
          }
          getCsvParse() {
            return s.e(262).then(s.bind(s, 86068));
          }
          getValidateCsvSettings() {
            let e = {};
            if (!this.csvFile)
              throw new r.X(
                p.Z.lang("repositories.import_csv_validation_no_file")
              );
            if (0 === this.csvFile.size)
              throw new r.X(
                p.Z.lang("repositories.import_csv_validation_empty_file")
              );
            const t = o.UI.getDropdownIntOrNull(this.$csvDelimiter);
            if (!t || t < 1 || t > this.csvDelimiters.length)
              throw new r.X(
                p.Z.lang("repositories.import_csv_validation_delimiter"),
                "csvDelimiter"
              );
            e.delimiter = this.csvDelimiters[t - 1];
            const s = o.UI.getTextIntOrNull(this.$csvOffset);
            if (!s || s < 1)
              throw new r.X(
                p.Z.lang("repositories.import_csv_validation_row_start"),
                "csvOffset"
              );
            (e.offset = s),
              (e.hasHeader = o.UI.getCheckbox(this.$csvHasHeader));
            const i = o.UI.getDropdown(this.$csvEncoding);
            if (!i || !this.csvEncodings.includes(i))
              throw new r.X(
                p.Z.lang("repositories.import_csv_validation_encoding"),
                "csvEncoding"
              );
            return (e.encoding = i), e;
          }
          validateImportCsv() {
            return Promise.resolve().then(() => {
              let e = this.getValidateCsvSettings();
              if (this.csvChanged)
                return this.getCsvParse().then((t) =>
                  p.Z.readFileAsArrayBuffer(this.csvFile)
                    .then((s) => {
                      this.csvImporter ||
                        (this.csvImporter = new M.L0(t.parse)),
                        this.csvImporter.loadFromBinary(s, e),
                        (this.csvChanged = !1);
                      let i = this.csvImporter
                        .getColumns()
                        .map((e, t) => ({
                          key: `c${t}`,
                          name: e,
                          target: null,
                          transform: null,
                          index: t,
                        }));
                      this.importData.fields = i;
                    })
                    .catch((e) => {
                      throw e instanceof t.CsvError
                        ? new r.X(
                            p.Z.lang(
                              "repositories.import_csv_validation_parse_error"
                            ) + e.message
                          )
                        : e instanceof p.S
                        ? new r.X(e.message)
                        : e;
                    })
                );
            });
          }
          loadNextPage2() {
            return (
              o.UI.getRadio(this.$folderModeFlat)
                ? ((this.importData.folderMode = d.g.ImportFolderModeFlat),
                  (this.importData.folderId =
                    this.components.folderModeFlatFolderId.getFolderId()))
                : o.UI.getRadio(this.$folderModeSub)
                ? ((this.importData.folderMode = d.g.ImportFolderModeSub),
                  (this.importData.folderId =
                    this.components.folderModeSubFolderId.getFolderId()))
                : ((this.importData.folderMode = d.g.ImportFolderModeRoot),
                  (this.importData.folderId = null)),
              (this.importData.templateId = o.UI.getDropdownIntOrNull(
                this.$templateId
              )),
              l.N.post(
                "repositories/render_import_csv2/" + this.projectId,
                l.N.toNetworkCase(this.importData)
              )
                .then((e) => {
                  this.$page2Container.html(e.data), this.setWizardPage(2);
                })
                .catch((e) => {
                  r.l.handleFormError(e, [this.formViews[0]]);
                })
            );
          }
          doNextFromPage1() {
            o.UI.loading(
              this.$nextButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                f.Z.blockUI(),
                this.validateImportCsv()
                  .then(() => this.loadNextPage2())
                  .catch((e) => {
                    r.l.handleClientFormError(this.formViews[0], e);
                  })
                  .then(() => {
                    f.Z.unblockUI();
                  })
              )
            );
          }
          loadNextPage3() {
            return l.N.post(
              "repositories/render_import_csv3/" + this.projectId,
              l.N.toNetworkCase(this.importData)
            ).then((e) => {
              this.$page3Container.html(e.data), this.setWizardPage(3);
            });
          }
          doNextFromPage2() {
            o.UI.loading(
              this.$nextButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                this.loadNextPage3().catch((e) => {
                  r.l.handleFormError(e, [this.formViews[1]]);
                })
              )
            );
          }
          getRecords() {
            return Promise.resolve().then(() => {
              let e,
                t = [];
              for (let s of this.importData.fields) {
                if (!s.target) continue;
                let i = { index: s.index };
                s.type == d.g.ImportTypesMultiselect
                  ? (i.type = M.pH.Split)
                  : s.type == d.g.ImportTypesSteps
                  ? (i.type = M.pH.List)
                  : s.type == d.g.ImportTypesText
                  ? (i.type = M.pH.Concat)
                  : (i.type = M.pH.Top),
                  s.target == d.g.RepositoryCasesName &&
                    ((i.validators = [M.RL.Required]), (e = s.index)),
                  t.push(i);
              }
              try {
                return o.UI.getRadio(this.$isRowModeMulti)
                  ? this.csvImporter.getNormalizedRecordsMulti(t, e)
                  : this.csvImporter.getNormalizedRecordsSingle(t);
              } catch (e) {
                throw e instanceof M.Jb
                  ? new r.X(
                      p.Z.lang(
                        "repositories.import_csv_validation_record_error"
                      ) + e.message
                    )
                  : e;
              }
            });
          }
          loadNextPage4(e) {
            let t = _.cloneDeep(this.importData);
            return (
              (t.records = e.slice(0, 25)),
              l.N.post(
                "repositories/render_import_csv4/" + this.projectId,
                l.N.toNetworkCase(t)
              )
                .then((t) => {
                  this.$page4Container.html(t.data), this.setWizardPage(4);
                  let s =
                    1 == e.length
                      ? "repositories.import_csv_records_singular"
                      : "repositories.import_csv_records_plural";
                  this.$statusText.text(p.Z.lang(s, { count: e.length })),
                    o.UI.toggleButtonEnabled(this.$submitButton, e.length > 0);
                })
                .catch((e) => {
                  r.l.handleFormError(e, [this.formViews[2]]);
                })
            );
          }
          doNextFromPage3() {
            o.UI.loading(
              this.$nextButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                f.Z.blockUI(),
                this.getRecords()
                  .then((e) => this.loadNextPage4(e))
                  .catch((e) => {
                    r.l.handleClientFormError(this.formViews[2], e);
                  })
                  .then(() => {
                    f.Z.unblockUI();
                  })
              )
            );
          }
          doNext() {
            switch (this.page) {
              case 1:
                this.doNextFromPage1();
                break;
              case 2:
                this.doNextFromPage2();
                break;
              case 3:
                this.doNextFromPage3();
            }
          }
          doPrevious() {
            switch (this.page) {
              case 2:
                o.UI.loading(
                  this.$previousButton,
                  () => (
                    r.l.hideValidationErrors(this.formViews),
                    l.N.post(
                      "repositories/validate_import_csv2/" + this.projectId,
                      l.N.toNetworkCase(this.importData)
                    )
                      .then((e) => {
                        this.setWizardPage(1);
                      })
                      .catch((e) => {
                        r.l.handleFormError(e, [this.formViews[1]]);
                      })
                  )
                );
                break;
              case 3:
                o.UI.loading(
                  this.$previousButton,
                  () => (
                    r.l.hideValidationErrors(this.formViews),
                    l.N.post(
                      "repositories/validate_import_csv3/" + this.projectId,
                      l.N.toNetworkCase(this.importData)
                    )
                      .then((e) => {
                        this.setWizardPage(2);
                      })
                      .catch((e) => {
                        r.l.handleFormError(e, [this.formViews[2]]);
                      })
                  )
                );
                break;
              case 4:
                this.$statusText.empty(), this.setWizardPage(this.page - 1);
            }
          }
          importCasesWithProgress(e) {
            const t = new R(this.projectId, this.importData, e);
            (t.onSuccess = (e) =>
              Promise.all(this.events.trigger("change")).then(() => {
                e ? this.resetImport() : this.hide();
              })),
              t.show().then(() => {
                t.processRecords();
              });
          }
          resetImport() {
            this.$statusText.empty(),
              this.setWizardPage(1),
              (this.importData.fields = null),
              (this.csvChanged = !0),
              this.setFile();
          }
          doSubmit() {
            o.UI.loading(
              this.$submitButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                this.getRecords()
                  .then((e) => {
                    this.importCasesWithProgress(e);
                  })
                  .catch((e) => {
                    r.l.handleClientFormError(this.formViews[2], e);
                  })
              )
            );
          }
        }
        function L(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        B(D, "forms", [
          { name: "form1", fields: ["templateId"] },
          { name: "form2", fields: [] },
          { name: "form3", fields: [] },
        ]),
          B(D, "targets", [
            "submitButton",
            "nextButton",
            "previousButton",
            "fileSection",
            "dropzone",
            "fileInput",
            "fileName",
            "fileSize",
            "pages",
            "page2Container",
            "page3Container",
            "page4Container",
            "isRowModeSingle",
            "isRowModeMulti",
            "csvDelimiter",
            "csvOffset",
            "csvHasHeader",
            "csvEncoding",
            "folderModeFlat",
            "folderModeSub",
            "folderModeRoot",
            "statusText",
          ]),
          B(D, "actions", ["doSubmit", "doNext", "doPrevious", "doClearFile"]);
        class Z extends g.V {
          constructor(e, t, s) {
            super("repositories.cases.import_tlx_progress_dialog", {
              width: 520,
              hideOnESC: !1,
            }),
              L(this, "templates", { progressCaption: "$(count)/$(total)" }),
              L(this, "classes", {
                dialogImporting: "repos-tlx-import-progress-dialog--importing",
                dialogDone: "repos-tlx-import-progress-dialog--done",
              }),
              (this.projectId = e),
              (this.importData = t),
              (this.records = s),
              (this.total = s.length),
              (this.processed = 0),
              (this.hadError = !1),
              (this.cancelled = !1),
              (this.inProgress = !1);
          }
          load() {
            f.Z.requestChild(this.component, "progress", {
              onAdded: () => {
                this.updateProgress();
              },
            });
          }
          unload() {}
          processRecords() {
            if (0 == this.total) return;
            o.UI.markLoading(this.$closeButton),
              f.Z.setBlockingRequests(!1),
              (this.inProgress = !0),
              this.$progress.addClass(this.classes.dialogImporting);
            let e = [];
            for (let t = 0; t < this.records.length; t += 250) {
              let s = this.records.slice(t, t + 250);
              e.push(s);
            }
            e.reduce(
              (e, t) =>
                e.then(() => {
                  if (this.cancelled) return Promise.resolve();
                  let e = _.cloneDeep(this.importData);
                  return (
                    (e.records = t),
                    l.N.post(
                      "repositories/import_cases/" + this.projectId,
                      l.N.toNetworkCase(e)
                    )
                      .then(() => {
                        (this.processed += t.length), this.updateProgress();
                      })
                      .then(
                        () =>
                          new Promise(function (e, t) {
                            setTimeout(function () {
                              e();
                            }, 200);
                          })
                      )
                      .catch((e) => {
                        (this.cancelled = !0),
                          (this.hadError = !0),
                          r.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      })
                  );
                }),
              Promise.resolve()
            ).then(() => {
              f.Z.setBlockingRequests(!0),
                (this.inProgress = !1),
                this.$progress.removeClass(this.classes.dialogImporting),
                this.hadError ||
                  this.$progress.addClass(this.classes.dialogDone),
                this.updateCompleted();
            });
          }
          updateProgress() {
            let e = p.Z.template(this.templates.progressCaption, {
              count: this.processed,
              total: this.total,
            });
            this.components.progress.setProgress(this.processed, this.total, e);
          }
          updateCompleted() {
            o.UI.setButtonDisabled(this.$cancelButton),
              o.UI.setButtonEnabled(this.$closeButton),
              o.UI.markCompleted(this.$cancelButton),
              o.UI.markCompleted(this.$closeButton),
              this.hadError ||
                this.components.progress.setProgress(this.total, this.total);
          }
          doClose() {
            o.UI.getButtonEnabled(this.$closeButton) &&
              o.UI.loading(this.$closeButton, () =>
                this.triggerSuccess(o.UI.getCheckbox(this.$importAnother))
              );
          }
          doCancel() {
            (this.cancelled = !0),
              o.UI.setButtonDisabled(this.$cancelButton),
              o.UI.markLoading(this.$cancelButton),
              o.UI.markCompleted(this.$closeButton);
          }
          keyDown(e) {
            e.which == n.N.ESC &&
              (this.inProgress
                ? this.cancelled || this.doCancel()
                : this.doClose());
          }
        }
        L(Z, "targets", [
          "closeButton",
          "cancelButton",
          "importAnother",
          "progress",
        ]),
          L(Z, "actions", ["doClose", "doCancel"]),
          L(Z, "forms", [{ name: "progress", fields: [] }]);
        const j = Object.freeze({
            Unknown: 1,
            Empty: 2,
            String: 3,
            Id: 4,
            Items: 5,
            Steps: 6,
          }),
          z = Object.freeze({
            String: 1,
            StringList: 2,
            Id: 3,
            IdList: 4,
            Text: 5,
          }),
          V = Object.freeze({ Required: 1 });
        class O extends Error {}
        class W extends Error {}
        class H extends Error {}
        class G {
          constructor(e) {
            (this.xmlParserModule = e), this.clear();
          }
          clear() {
            this.content = { sections: [], cases: [] };
          }
          getContent() {
            return this.content;
          }
          getFieldName(e) {
            let t = e.trim();
            return (
              (t = t.charAt(0).toUpperCase() + t.slice(1)),
              t.trim().replace("_", " ")
            );
          }
          iterateCases(e, t) {
            let s = 0,
              i = [];
            const o = (n) => {
              for (let o of n.cases) {
                if (t) {
                  let n = null;
                  for (let e of o.fields)
                    if (
                      "template" == e.key &&
                      !e.isCustom &&
                      e.type == j.String
                    ) {
                      n = e;
                      break;
                    }
                  n && n.value ? n.value == t && e(o, s, i) : e(o, s, i);
                } else e(o, s, i);
                s++;
              }
              for (let e of n.sections)
                i.push({ name: e.name, description: e.description }),
                  o(e),
                  i.pop();
            };
            o(this.content);
          }
          getSections() {
            let e = [],
              t = 0;
            const s = (i) => {
              for (let o of i.sections)
                t++,
                  e.push({
                    name: o.name,
                    description: o.description,
                    depth: t - 1,
                  }),
                  s(o),
                  t--;
            };
            return s(this.content), e;
          }
          getRecords(e, t) {
            let s = [];
            const i = (e, t) => {
                for (let s of e.fields) if (s.key == t) return s;
              },
              o = (e, t) => {
                switch (t) {
                  case z.String:
                  case z.Id:
                  case z.Text:
                    return e.value;
                  case z.IdList:
                  case z.StringList:
                    return [e.value];
                }
              },
              n = (e, t) => {
                switch (t) {
                  case z.String:
                  case z.Text:
                    return e.value.name || null;
                  case z.Id:
                    return e.value.id || null;
                  case z.IdList:
                    return e.value.id ? [e.value.id] : [];
                  case z.StringList:
                    return e.value.name ? [e.value.name] : [];
                }
              },
              r = (e, t) => {
                let s = e.value.length > 0 ? e.value[0] : null;
                switch (t) {
                  case z.String:
                    return s ? s.name : null;
                  case z.Text:
                    return e.value && e.value.length > 0
                      ? e.value
                          .map((e) => e.name)
                          .filter((e) => e)
                          .join("\n")
                      : null;
                  case z.Id:
                    return s ? s.id : null;
                  case z.IdList:
                    return e.value.map((e) => e.id);
                  case z.StringList:
                    return e.value.map((e) => e.name);
                }
              },
              a = (e, t) => {
                let s = e.value.length > 0 ? e.value[0] : null;
                switch (t) {
                  case z.String:
                    return s;
                  case z.Text:
                    return e.value && e.value.length > 0
                      ? e.value.filter((e) => e).join("\n")
                      : null;
                  case z.Id:
                    return s;
                  case z.IdList:
                  case z.StringList:
                    return e.value;
                }
              };
            return (
              this.iterateCases((t, l, d) => {
                let h = {};
                for (let s of e) {
                  let e = i(t, s.key);
                  if (e) {
                    switch (e.type) {
                      case j.String:
                        h[s.key] = o(e, s.targetType);
                        break;
                      case j.Id:
                        h[s.key] = n(e, s.targetType);
                        break;
                      case j.Items:
                        h[s.key] = r(e, s.targetType);
                        break;
                      case j.Steps:
                        h[s.key] = a(e, s.targetType);
                    }
                    if (
                      s.validators &&
                      Array.isArray(s.validators) &&
                      s.validators.includes(V.Required) &&
                      !h[s.key]
                    )
                      throw new O(
                        `Record ${
                          l + 1
                        }: The Name is required for every record, but the value is empty.`
                      );
                  }
                }
                (h.section = d.map((e) => e.name)), s.push(h);
              }, t),
              s
            );
          }
          getFields(e) {
            let t = [];
            return (
              this.iterateCases((e) => {
                for (let s of e.fields)
                  s.type != j.Unknown &&
                    s.type != j.Empty &&
                    "template" != s.key &&
                    0 == t.filter((e) => e.key == s.key).length &&
                    t.push({ name: s.name, key: s.key, type: s.type });
              }, e),
              t
            );
          }
          getValues(e, t, s) {
            let i = [];
            const o = (e) => {
              (s && i.length >= s) ||
                (0 == i.filter((t) => t.value == e.value).length && i.push(e));
            };
            return (
              this.iterateCases((t) => {
                for (let s of t.fields)
                  if (s.value && s.key && s.key == e)
                    switch (s.type) {
                      case j.String:
                        o({ value: s.value });
                        break;
                      case j.Id:
                        o({ value: s.value.id, name: s.value.name });
                        break;
                      case j.Items:
                        for (let e of s.value) o({ value: e.id, name: e.name });
                        break;
                      case j.Steps:
                        for (let e of s.value) e && o({ value: e });
                    }
              }, t),
              i.sort((e, t) =>
                e.value.toLowerCase().localeCompare(t.value.toLowerCase())
              ),
              i
            );
          }
          getTemplates() {
            let e = [];
            return (
              this.iterateCases((t) => {
                for (let s of t.fields)
                  "template" == s.key &&
                    !s.isCustom &&
                    s.type == j.String &&
                    s.value &&
                    (e.includes(s.value) || e.push(s.value));
              }),
              e
            );
          }
          parseContent(e) {
            this.clear();
            const t = (e, t) => {
                if (!(e && e instanceof Object)) return null;
                if (!(t in e)) return null;
                if (!Array.isArray(e[t])) return null;
                if (0 == e[t].length) return null;
                let s = e[t][0];
                return "string" != typeof s
                  ? null
                  : ((s = s.trim()), s.length > 0 ? s : null);
              },
              s = (e) => ({ id: t(e, "id"), name: t(e, "value") }),
              i = (e, i, o) => {
                if (!Array.isArray(e)) return [];
                if (1 !== e.length) return [];
                let n = e[0],
                  r = {
                    type: j.Unknown,
                    key: o ? `custom_${i}` : i,
                    name: this.getFieldName(i),
                    isCustom: o,
                    value: null,
                  },
                  a = [];
                if ("string" == typeof n)
                  (n = n.trim()),
                    n.length > 0
                      ? ((r.value = n), (r.type = j.String))
                      : (r.type = j.Empty),
                    a.push(r);
                else if ("id" in n && Array.isArray(n.id) && n.id.length > 0)
                  (r.type = j.Id), (r.value = s(n)), a.push(r);
                else if ("item" in n && Array.isArray(n.item)) {
                  (r.type = j.Items), (r.value = []);
                  for (let e of n.item) {
                    let t = s(e);
                    t.id && r.value.push(t);
                  }
                  a.push(r);
                } else if ("step" in n && Array.isArray(n.step)) {
                  let e = [];
                  for (let t of n.step)
                    for (let s in t)
                      "index" != s &&
                        "shared_step_id" != s &&
                        (e.includes(s) || e.push(s));
                  for (let s of e) {
                    let e = [],
                      r = !1;
                    for (let i of n.step) {
                      let o = t(i, s);
                      (r = r || null !== o), e.push(o);
                    }
                    if (r) {
                      let t = {
                        type: j.Steps,
                        key: (o ? `custom_${i}` : i) + "." + s,
                        name: `${this.getFieldName(i)} (${this.getFieldName(
                          s
                        )})`,
                        isCustom: o,
                        value: e,
                      };
                      a.push(t);
                    }
                  }
                } else a.push(r);
                return a;
              },
              o = (e, t = !1) => {
                let s = [];
                for (let n in e)
                  "custom" == n
                    ? Array.isArray(e[n]) &&
                      e[n].length > 0 &&
                      s.push(...o(e[n][0], !0))
                    : s.push(...i(e[n], n, t));
                return s;
              },
              n = (e) => ({ fields: o(e) }),
              r = (e) => {
                let s = {
                  name: null,
                  description: null,
                  sections: [],
                  cases: [],
                };
                if (
                  ((s.name = t(e, "name")),
                  (s.description = t(e, "description")),
                  e.sections && (s.sections = a(e.sections)),
                  e.cases && e.cases[0].case)
                )
                  for (let t of e.cases[0].case) s.cases.push(n(t));
                return s;
              },
              a = (e) => {
                let t = [];
                if (
                  e &&
                  Array.isArray(e) &&
                  1 == e.length &&
                  e[0] instanceof Object &&
                  "section" in e[0] &&
                  Array.isArray(e[0].section) &&
                  e[0].section.length > 0
                )
                  for (let s of e[0].section) t.push(r(s));
                return t;
              };
            let l;
            try {
              l = new this.xmlParserModule.XMLParser({
                ignoreAttributes: !0,
                parseTagValue: !1,
                isArray: () => !0,
              }).parse(e);
            } catch (e) {
              throw new W(e.message);
            }
            if (!(l.suite && l.suite[0] && l.suite[0].sections))
              throw new H("The file is missing the suite or sections tag.");
            this.content.sections = a(l.suite[0].sections);
          }
          loadFromString(e) {
            if ("string" != typeof e)
              throw new Error("TLX load value must be of type string.");
            this.parseContent(e);
          }
          loadFromBinary(e) {
            const t = new TextDecoder().decode(e);
            this.parseContent(t);
          }
        }
        function q(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class X extends g.V {
          constructor(e) {
            super("repositories.cases.import_tlx_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 750,
              width: 900,
              height: 740,
              resizable: !0,
            }),
              q(this, "defaultFieldTargets", {
                title: "repository_cases:name",
                type: "repository_cases:tags",
                priority: "repository_cases:custom_priority",
                estimate: "repository_cases:estimate",
                custom_steps: "repository_cases:custom_description",
                custom_expected: "repository_cases:custom_expected",
                "custom_steps_separated.content":
                  "repository_cases:custom_steps.text1",
                "custom_steps_separated.expected":
                  "repository_cases:custom_steps.text3",
              }),
              q(this, "classes", {
                dropzoneDragging:
                  "repos-tlx-import-dialog-file__dropzone--dragging",
                fileSectionHasFile: "repos-tlx-import-dialog-file--has-file",
              }),
              q(this, "selectors", {
                row: "tr",
                transform: ".repos-tlx-import-dialog-transforms__transform",
                avatarFieldText:
                  ".table__field__avatar-text > div:nth-child(2)",
              }),
              q(this, "doTemplateIdChange", () => {
                if (((this.fieldDefaultsSet = !1), this.importData.fields))
                  for (let e of this.importData.fields)
                    (e.transform = null), (e.target = null);
              }),
              q(this, "doFieldsConnected", (e) => {
                this.fieldDefaultsSet ||
                  setTimeout(() => {
                    this.fieldDefaultsSet ||
                      (e.getRows().each((e, t) => {
                        let s = $(t),
                          i = s.data("key");
                        if (i in this.defaultFieldTargets) {
                          let e = o.UI.getDropdownController(
                            o.UI.getTarget("target", s)
                          );
                          if (e) {
                            e.setValue(this.defaultFieldTargets[i]);
                            let t = e.getValue();
                            this.updateFieldTarget(e, t);
                          }
                        }
                      }),
                      (this.fieldDefaultsSet = !0));
                  }, 0);
              }),
              q(this, "doValuesConnected", (e) => {
                let t = e.$element
                    .closest(this.selectors.transform)
                    .data("key"),
                  s = this.tlxImporter.getValues(
                    t,
                    o.UI.getDropdown(this.$sourceTemplate),
                    d.g.ImportTlxMaxValues
                  );
                e.getRows().each((e, t) => {
                  let i = $(t).find(this.selectors.avatarFieldText),
                    o = i.text().trim();
                  for (let e of s)
                    e instanceof Object &&
                      e.name &&
                      e.value &&
                      e.value == o &&
                      i.text(e.name);
                });
              }),
              q(this, "doSourceTemplateChange", () => {
                (this.tlxChanged = !0), (this.fieldDefaultsSet = !1);
              }),
              q(this, "doClipboardPaste", (e, t) => {
                t.files.length > 0 &&
                  (this.loadFile(t.files), e.preventDefault());
              }),
              q(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              q(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              q(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              q(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.loadFile(t);
              }),
              q(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.loadFile(t.files),
                  o.UI.clearFile(this.$fileInput);
              }),
              q(this, "doFolderModeFlatFolderIdChange", (e) => {
                e.id && o.UI.setRadio(this.$folderModeFlat, !0);
              }),
              q(this, "doFolderModeSubFolderIdChange", (e) => {
                e.id && o.UI.setRadio(this.$folderModeSub, !0);
              }),
              q(this, "doTargetChange", (e) => {
                this.updateFieldTarget(e.target, e.value);
              }),
              q(this, "doTransformMappingChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.row)
                    .attr("data-from"),
                  s = e.target.$element
                    .closest(this.selectors.transform)
                    .data("key");
                for (let i of this.importData.fields)
                  if (i.key === s) {
                    if (i.transform && i.transform.mapping)
                      for (let s of Object.keys(i.transform.mapping))
                        if (s === t) {
                          null !== e.value
                            ? (i.transform.mapping[s] = parseInt(e.value, 10))
                            : (i.transform.mapping[s] = null);
                          break;
                        }
                    break;
                  }
              }),
              q(this, "doTransformFormatChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.transform)
                    .data("key"),
                  s = e.target.getItemParams(e.value);
                for (let i of this.importData.fields)
                  if (i.key === t) {
                    i.transform = {
                      format: s && s.format ? s.format : parseInt(e.value, 10),
                    };
                    break;
                  }
              }),
              (this.projectId = e),
              (this.tlxFile = null),
              (this.tlxImporter = null),
              (this.tlxChanged = !0),
              (this.page = 1),
              (this.importData = {}),
              (this.fieldDefaultsSet = !1);
          }
          load() {
            this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              f.Z.requestChild(this.component, "templateId", {
                events: { change: this.doTemplateIdChange },
              }),
              f.Z.requestChild(this.component, "sourceTemplate", {
                events: { change: this.doSourceTemplateChange },
              }),
              f.Z.requestChild(this.component, "target", {
                events: { change: this.doTargetChange },
              }),
              f.Z.requestChild(this.component, "transformMapping", {
                events: { change: this.doTransformMappingChange },
              }),
              f.Z.requestChild(this.component, "transformFormat", {
                events: { change: this.doTransformFormatChange },
              }),
              f.Z.requestChild(this.component, "folderModeFlatFolderId", {
                events: { change: this.doFolderModeFlatFolderIdChange },
              }),
              f.Z.requestChild(this.component, "folderModeSubFolderId", {
                events: { change: this.doFolderModeSubFolderIdChange },
              }),
              f.Z.requestChild(this.component, "fields", {
                onConnected: this.doFieldsConnected,
              }),
              f.Z.requestChild(this.component, "values", {
                onConnected: this.doValuesConnected,
              }),
              (this.receiver = f.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              })),
              this.setWizardPage(1);
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              f.Z.clipboard.removeReceiver(this.receiver);
          }
          getXmlParser() {
            return s.e(906).then(s.t.bind(s, 16932, 23));
          }
          loadFile(e = []) {
            if (
              (r.l.hideValidationErrors(this.formViews),
              this.clearFile(),
              0 == e.length)
            )
              return;
            let t = e[0];
            o.UI.loading(this.$fileSection, () =>
              Promise.resolve()
                .then(() => {
                  if ((f.Z.blockUI(), t.size > d.g.ImportTlxMaxFileSize))
                    throw new r.X(
                      p.Z.lang("repositories.import_tlx_file_too_large")
                    );
                  if (0 == t.size)
                    throw new r.X(
                      p.Z.lang("repositories.import_tlx_file_empty")
                    );
                  return this.getXmlParser().then((e) =>
                    p.Z.readFileAsArrayBuffer(t)
                      .then((s) => {
                        try {
                          let i = new G(e);
                          i.loadFromBinary(s);
                          let n = i.getTemplates();
                          if (0 == n.length)
                            throw new r.X(
                              p.Z.lang(
                                "repositories.import_tlx_no_templates_found"
                              )
                            );
                          o.UI.setDropdownItems(
                            this.$sourceTemplate,
                            n.map((e) => ({ value: e, label: e }))
                          ),
                            o.UI.setDropdown(this.$sourceTemplate, n[0]),
                            this.$fileName.text(t.name),
                            this.$fileSize.text(`(${p.Z.formatBytes(t.size)})`),
                            this.$fileSection.addClass(
                              this.classes.fileSectionHasFile
                            ),
                            (this.tlxImporter = i);
                        } catch (e) {
                          throw e instanceof W
                            ? new r.X(
                                p.Z.lang(
                                  "repositories.import_tlx_parse_error"
                                ) + e.message
                              )
                            : e instanceof H
                            ? new r.X(
                                p.Z.lang(
                                  "repositories.import_tlx_non_tlx_error"
                                ) + e.message
                              )
                            : e;
                        }
                      })
                      .catch((e) => {
                        throw e instanceof p.S ? new r.X(e.message) : e;
                      })
                  );
                })
                .catch((e) => {
                  r.l.handleClientFormError(this.formViews[0], e);
                })
                .then(() => {
                  f.Z.unblockUI();
                })
            );
          }
          clearFile() {
            this.$fileSection.removeClass(this.classes.fileSectionHasFile),
              this.$fileName.empty(),
              this.$fileSize.empty(),
              (this.tlxChanged = !0),
              (this.tlxImporter = null),
              (this.fieldDefaultsSet = !1),
              o.UI.setDropdownItems(this.$sourceTemplate, []);
          }
          doClearFile() {
            this.clearFile();
          }
          updateFieldTarget(e, t) {
            let s = e.$element.closest(this.selectors.row).data("key"),
              i = e.getItemParams(t);
            for (let e of this.importData.fields)
              if (e.key === s) {
                if (
                  ((e.target = t),
                  (e.transform = null),
                  (e.type = i ? i.type : null),
                  i &&
                    i.type &&
                    ((i.type != d.g.ImportTypesText &&
                      i.type != d.g.ImportTypesSteps) ||
                      (e.transform = { format: d.g.ImportTextFormatMarkdown })),
                  i &&
                    (i.type == d.g.ImportTypesCheckbox ||
                      i.type == d.g.ImportTypesDropdown ||
                      i.type == d.g.ImportTypesMultiselect))
                ) {
                  let t = this.tlxImporter.getValues(
                      e.key,
                      o.UI.getDropdown(this.$sourceTemplate),
                      d.g.ImportTlxMaxValues
                    ),
                    s = {};
                  for (let e of t) s[e.value] = null;
                  e.transform = { mapping: s };
                }
                break;
              }
          }
          toggleButtons(e) {
            let t = {};
            _.defaults(t, e, { previous: !1, next: !1, submit: !1 }),
              t.previous
                ? this.$previousButton.show()
                : this.$previousButton.hide(),
              t.next ? this.$nextButton.show() : this.$nextButton.hide(),
              t.submit ? this.$submitButton.show() : this.$submitButton.hide();
          }
          setWizardPage(e) {
            switch (
              ((this.page = e),
              this.$pages.attr("data-page", e),
              this.refreshUi(),
              e)
            ) {
              case 1:
                this.toggleButtons({ previous: !1, next: !0, submit: !1 });
                break;
              case 2:
              case 3:
                this.toggleButtons({ previous: !0, next: !0, submit: !1 });
                break;
              case 4:
                this.toggleButtons({ previous: !0, next: !1, submit: !0 });
            }
          }
          loadNextPage2() {
            return (
              o.UI.getRadio(this.$folderModeFlat)
                ? ((this.importData.folderMode = d.g.ImportFolderModeFlat),
                  (this.importData.folderId =
                    this.components.folderModeFlatFolderId.getFolderId()))
                : o.UI.getRadio(this.$folderModeSub)
                ? ((this.importData.folderMode = d.g.ImportFolderModeSub),
                  (this.importData.folderId =
                    this.components.folderModeSubFolderId.getFolderId()))
                : ((this.importData.folderMode = d.g.ImportFolderModeRoot),
                  (this.importData.folderId = null)),
              (this.importData.templateId = o.UI.getDropdownIntOrNull(
                this.$templateId
              )),
              l.N.post(
                "repositories/render_import_tlx2/" + this.projectId,
                l.N.toNetworkCase(this.importData)
              )
                .then((e) => {
                  this.$page2Container.html(e.data), this.setWizardPage(2);
                })
                .catch((e) => {
                  r.l.handleFormError(e, [this.formViews[0]]);
                })
            );
          }
          validateInitImport() {
            return Promise.resolve().then(() => {
              if (!this.tlxImporter)
                throw new r.X(
                  p.Z.lang("repositories.import_tlx_validation_no_file")
                );
              let e = o.UI.getDropdown(this.$sourceTemplate);
              if (!e)
                throw new r.X(
                  p.Z.lang(
                    "repositories.import_tlx_validation_no_source_template"
                  ),
                  "sourceTemplate"
                );
              if (!this.tlxChanged) return;
              let t = this.tlxImporter
                .getFields(e)
                .map((e) => ({
                  key: e.key,
                  name: e.name,
                  target: null,
                  transform: null,
                }));
              (this.importData.fields = t), (this.tlxChanged = !1);
            });
          }
          doNextFromPage1() {
            o.UI.loading(
              this.$nextButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                this.validateInitImport()
                  .then(() => this.loadNextPage2())
                  .catch((e) => {
                    r.l.handleClientFormError(this.formViews[0], e);
                  })
              )
            );
          }
          loadNextPage3() {
            return l.N.post(
              "repositories/render_import_tlx3/" + this.projectId,
              l.N.toNetworkCase(this.importData)
            ).then((e) => {
              this.$page3Container.html(e.data), this.setWizardPage(3);
            });
          }
          doNextFromPage2() {
            o.UI.loading(
              this.$nextButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                this.loadNextPage3().catch((e) => {
                  r.l.handleFormError(e, [this.formViews[1]]);
                })
              )
            );
          }
          getRecords() {
            return Promise.resolve().then(() => {
              let e = [];
              for (let t of this.importData.fields) {
                if (!t.target) continue;
                let s = { key: t.key, sourceType: t.type, targetType: null };
                t.type == d.g.ImportTypesMultiselect
                  ? (s.targetType = z.IdList)
                  : t.type == d.g.ImportTypesDropdown ||
                    t.type == d.g.ImportTypesCheckbox
                  ? (s.targetType = z.Id)
                  : t.type == d.g.ImportTypesSteps
                  ? (s.targetType = z.StringList)
                  : t.type == d.g.ImportTypesText
                  ? (s.targetType = z.Text)
                  : (s.targetType = z.String),
                  t.target == d.g.RepositoryCasesName &&
                    (s.validators = [V.Required]),
                  e.push(s);
              }
              try {
                return this.tlxImporter.getRecords(
                  e,
                  o.UI.getDropdown(this.$sourceTemplate)
                );
              } catch (e) {
                throw e instanceof O
                  ? new r.X(
                      p.Z.lang(
                        "repositories.import_tlx_validation_record_error"
                      ) + e.message
                    )
                  : e;
              }
            });
          }
          prepareDataForImport(e, t = !1) {
            return (
              e.fields.push({
                key: "section",
                name: "Section",
                target: d.g.RepositoryCasesFolderId,
                transform: { format: d.g.ImportFolderFormatArray },
              }),
              t &&
                (e.folders = {
                  fields: [
                    { key: "name" },
                    {
                      key: "docs",
                      transform: { format: d.g.ImportTextFormatMarkdown },
                    },
                  ],
                  records: this.tlxImporter
                    .getSections()
                    .map((e) => ({
                      depth: e.depth,
                      name: e.name,
                      docs: e.description,
                    })),
                }),
              e
            );
          }
          loadNextPage4(e) {
            let t = _.cloneDeep(this.importData);
            return (
              (t.records = e.slice(0, 25)),
              (t = this.prepareDataForImport(t)),
              l.N.post(
                "repositories/render_import_tlx4/" + this.projectId,
                l.N.toNetworkCase(t)
              )
                .then((t) => {
                  this.$page4Container.html(t.data), this.setWizardPage(4);
                  let s =
                    1 == e.length
                      ? "repositories.import_tlx_records_singular"
                      : "repositories.import_tlx_records_plural";
                  this.$statusText.text(p.Z.lang(s, { count: e.length })),
                    o.UI.toggleButtonEnabled(this.$submitButton, e.length > 0);
                })
                .catch((e) => {
                  r.l.handleFormError(e, [this.formViews[2]]);
                })
            );
          }
          doNextFromPage3() {
            o.UI.loading(
              this.$nextButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                f.Z.blockUI(),
                this.getRecords()
                  .then((e) => this.loadNextPage4(e))
                  .catch((e) => {
                    r.l.handleClientFormError(this.formViews[2], e);
                  })
                  .then(() => {
                    f.Z.unblockUI();
                  })
              )
            );
          }
          doNext() {
            switch (this.page) {
              case 1:
                this.doNextFromPage1();
                break;
              case 2:
                this.doNextFromPage2();
                break;
              case 3:
                this.doNextFromPage3();
            }
          }
          doPrevious() {
            switch (this.page) {
              case 2:
                o.UI.loading(
                  this.$previousButton,
                  () => (
                    r.l.hideValidationErrors(this.formViews),
                    l.N.post(
                      "repositories/validate_import_tlx2/" + this.projectId,
                      l.N.toNetworkCase(this.importData)
                    )
                      .then((e) => {
                        this.setWizardPage(1);
                      })
                      .catch((e) => {
                        r.l.handleFormError(e, [this.formViews[1]]);
                      })
                  )
                );
                break;
              case 3:
                o.UI.loading(
                  this.$previousButton,
                  () => (
                    r.l.hideValidationErrors(this.formViews),
                    l.N.post(
                      "repositories/validate_import_tlx3/" + this.projectId,
                      l.N.toNetworkCase(this.importData)
                    )
                      .then((e) => {
                        this.setWizardPage(2);
                      })
                      .catch((e) => {
                        r.l.handleFormError(e, [this.formViews[2]]);
                      })
                  )
                );
                break;
              case 4:
                this.$statusText.empty(), this.setWizardPage(this.page - 1);
            }
          }
          importCasesWithProgress(e) {
            let t = _.cloneDeep(this.importData);
            t = this.prepareDataForImport(t, !0);
            const s = new Z(this.projectId, t, e);
            (s.onSuccess = (e) =>
              Promise.all(this.events.trigger("change")).then(() => {
                e ? this.resetImport() : this.hide();
              })),
              s.show().then(() => {
                s.processRecords();
              });
          }
          resetImport() {
            this.$statusText.empty(),
              this.setWizardPage(1),
              (this.importData.fields = null),
              this.clearFile();
          }
          doSubmit() {
            o.UI.loading(
              this.$submitButton,
              () => (
                r.l.hideValidationErrors(this.formViews),
                this.getRecords()
                  .then((e) => {
                    this.importCasesWithProgress(e);
                  })
                  .catch((e) => {
                    r.l.handleClientFormError(this.formViews[2], e);
                  })
              )
            );
          }
        }
        q(X, "forms", [
          { name: "form1", fields: ["templateId"] },
          { name: "form2", fields: [] },
          { name: "form3", fields: [] },
        ]),
          q(X, "targets", [
            "submitButton",
            "nextButton",
            "previousButton",
            "fileSection",
            "dropzone",
            "fileInput",
            "fileName",
            "fileSize",
            "sourceTemplate",
            "pages",
            "page2Container",
            "page3Container",
            "page4Container",
            "folderModeFlat",
            "folderModeSub",
            "folderModeRoot",
            "statusText",
          ]),
          q(X, "actions", ["doSubmit", "doNext", "doPrevious", "doClearFile"]);
        var K = s(69555);
        function J(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class Y extends K.GI {
          constructor(e) {
            super("repositories.cases.grouping_menu", {}),
              J(this, "selectors", { actionItem: ".popup__menu__action-item" }),
              J(this, "classes", { itemActive: "popup__menu__item--active" }),
              (this.groupBy = e);
          }
          load() {
            this.groupBy &&
              $(this.selectors.actionItem, this.$popup).each((e, t) => {
                let s = $(t);
                s.toggleClass(
                  this.classes.itemActive,
                  s.data("value") == this.groupBy
                );
              });
          }
        }
        function Q(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class ee extends K.GI {
          constructor(e) {
            super("repositories.group_states_menu", {}),
              Q(this, "selectors", {
                actionItem: ".popup__menu__action-item",
                itemIcon: ".popup__menu__item__icon",
              }),
              Q(this, "classes", { itemActive: "popup__menu__item--active" }),
              Q(this, "doActionClick", (e) => {
                this.triggerSuccess({
                  target: this,
                  id: e.$actionItem.data("id"),
                  iconHtml: $(this.selectors.itemIcon, e.$actionItem).html(),
                });
              }),
              (this.stateId = e);
          }
          load() {
            this.events.on("actionclick", this.doActionClick),
              this.stateId &&
                $(this.selectors.actionItem, this.$popup).each((e, t) => {
                  let s = $(t);
                  s.toggleClass(
                    this.classes.itemActive,
                    s.data("id") == this.stateId
                  );
                });
          }
          unload() {
            this.events.off("actionclick", this.doActionClick);
          }
        }
        var te = s(18792),
          se = s(62612),
          ie = s(24850),
          oe = s(26734),
          ne = s(7045),
          re = s(8338);
        function ae(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class le extends re.T {
          static displayResponsiveConfigLists(e, t, s) {
            e.each((e, i) => {
              let o = s(i),
                n = this.renderResponsiveList(
                  t,
                  o,
                  this.widths.spaceBetween,
                  (e) => this.getConfigWidth(e),
                  (e) => this.renderConfig(e),
                  (e) => this.getMoreWidth(e),
                  (e) => this.renderMore(e),
                  (e) => this.renderTotal(e)
                );
              i.innerHTML = n;
            });
          }
          static renderConfig(e) {
            return p.Z.template(this.templates.config, { name: e });
          }
          static getConfigWidth(e) {
            return this.widths.padding + this.measureText(e, re.z.Default);
          }
          static renderMore(e) {
            return p.Z.template(this.templates.more, { count: e });
          }
          static getMoreWidth(e) {
            return (
              this.widths.iconWidth +
              this.widths.padding +
              this.measureText(e.toString(), re.z.Default)
            );
          }
          static renderTotal(e) {
            return 1 == e
              ? p.Z.template(this.templates.totalSingle, {
                  text: p.Z.lang("configs.configs_single", { count: e }),
                })
              : p.Z.template(this.templates.totalMulti, {
                  text: p.Z.lang("configs.configs_multi", { count: e }),
                });
          }
        }
        ae(le, "templates", {
          config: '<div class="config-tag">$(name)</div>',
          more: '<div class="config-tag config-tag--plus"><i class="far fa-plus icon-plus fa-fw"></i>$(count)</div>',
          totalSingle:
            '<div class="config-tag config-tag--total">$(text)</div>',
          totalMulti: '<div class="config-tag config-tag--total">$(text)</div>',
        }),
          ae(le, "widths", { spaceBetween: 6, iconWidth: 20, padding: 16 });
        var de = s(87762),
          he = s(48995),
          ce = s(51070),
          ue = s(15331);
        function ge(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class pe extends i.v {
          constructor(...e) {
            super(...e),
              ge(this, "selectors", {
                action: ".action-list__action",
                groupPropertiesDocsContent:
                  ".repos-group-properties__docs__content",
                groupAddCase: ".repos-group-add-case",
                visible: ":visible",
                historyChangeValue:
                  ".repos-case-history-changes__change__value",
                fieldIdCopyIcon: ".field-value-id__copy i",
                tableToolbarPagination: ".table__toolbar__pagination",
              }),
              ge(this, "classes", {
                groupPropertiesDocsOverflowing:
                  "repos-group-properties__docs--overflowing",
                groupPropertiesDocsExpanded:
                  "repos-group-properties__docs--expanded",
                groupPropertiesTitleHasTableToolbar:
                  "repos-group-properties__title--has-table-toolbar",
                groupContentEmpty: "repos-group-content--empty",
                disabled: "disabled",
                hidden: "default-hidden",
                historyChangeValueWithBefore:
                  "repos-case-history-changes__change__value--with-before",
                commentsAdding: "repos-case-comments--adding",
                groupContentWithFolderNames:
                  "repos-group-content--with-folder-names",
                popupNoMinWidth: "popup--no-min-width",
                iconAnimate: "icon-animation-scale-pulse",
                groupHeaderSearchActive: "repos-group-header--search-active",
              }),
              ge(this, "templates", {
                actionEditorContainer:
                  '<div class="action-list__action__editor"></div>',
              }),
              ge(this, "storage", {
                groupFolderNames: "repositories.index.group_folder_names",
              }),
              ge(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              }),
              ge(this, "doCaseHistoryPagerStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["caseHistoryPage", { state: e.state }])
                )
              ),
              ge(this, "doCaseTabsChange", (e) => {
                this.refreshFragments([
                  "caseTabContent",
                  { tab: e.index },
                ]).then(() => {
                  this.components.caseTabs.highlightTab(e.index),
                    this.components.caseTabs.setLoading(!1);
                });
              }),
              ge(this, "doCaseResultsTabChange", (e) => {
                o.UI.loading($(this.caseResultsTabTarget), () =>
                  this.refreshFragments(["caseResultPage", { state: e.state }])
                );
              }),
              ge(this, "doCaseResultsActiveStateChange", (e) =>
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments(["caseResultPage", { state: e.state }])
                )
              ),
              ge(this, "doCaseResultsLatestAllGroupsStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["caseResultPage", { state: e.state }])
                )
              ),
              ge(this, "doCaseIssueGroupsStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["caseIssuePage", { state: e.state }])
                )
              ),
              ge(this, "doCaseCommentMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editComment(
                      e.context.id,
                      e.context.$comment,
                      e.context.$menu
                    );
                    break;
                  case "delete":
                    this.deleteComment(e.context.id);
                }
              }),
              ge(this, "doCaseEditCommentEditorRemoved", (e) => {
                this.endCommentEditing();
              }),
              ge(this, "doCaseEditCommentEditorLoaded", (e) => {
                this.components.caseEditCommentEditor.focus();
              }),
              ge(this, "doCaseEditCommentEditorSuccess", (e) => {
                let t = null;
                return (
                  this.components.caseCommentsPager &&
                    (t = this.components.caseCommentsPager.getState()),
                  this.refreshFragments(["caseCommentPage", { state: t }]).then(
                    () => {
                      this.endCommentEditing();
                    }
                  )
                );
              }),
              ge(this, "doCaseEditCommentEditorCancel", (e) => {
                this.endCommentEditing();
              }),
              ge(this, "doCaseCommentsPagerStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments([
                    "caseCommentPage",
                    { state: e.state },
                  ]).then(() => {
                    this.endCommentEditing();
                  })
                )
              ),
              ge(this, "doCaseAddCommentEditorSuccess", (e) =>
                this.refreshFragments("caseCommentPage").then(() => {
                  this.components.caseAddCommentEditor.resetForm();
                })
              ),
              ge(this, "doCaseAddCommentEditorCancel", (e) => {
                this.hideCaseAddCommentEditor();
              }),
              ge(this, "doMixAdded", (e, t) => {
                this.mover.setMix(e);
              }),
              ge(this, "doMixRemoved", (e, t) => {
                this.mover.setMix(null);
              }),
              ge(this, "doMixDetailsHide", (e) => {
                this.clearCase(),
                  this.components.cases &&
                    this.components.cases.clearActivatedRow(),
                  this.updateUrl(),
                  this.refreshActions();
              }),
              ge(this, "doMixResize", (e) => {
                this.refreshListPaneWidth();
              }),
              ge(this, "doGroupsAdded", (e, t) => {
                this.pageState.groupId = null;
                let s = this.components.groups.getActivatedNode();
                s.length > 0 && (this.pageState.groupId = s.first().data("id")),
                  this.navigator.setTree(e),
                  this.mover.setTree(e),
                  this.refreshActions(),
                  this.updateUrl();
              }),
              ge(this, "doGroupsRemoved", (e, t) => {
                this.navigator.setTree(null), this.mover.setTree(null);
              }),
              ge(this, "doCasesConnected", (e, t) => {
                let s = 0 == e.getRowCount();
                $(this.groupContentTarget).toggleClass(
                  this.classes.groupContentEmpty,
                  s
                ),
                  this.updateCasesToolbar(e),
                  this.updateGroupItemCount(e);
              }),
              ge(this, "doCasesRemoved", (e, t) => {
                this.navigator.setList(null),
                  this.mover.setList(null),
                  this.hasGroupItemCountTarget &&
                    $(this.groupItemCountTarget).empty();
              }),
              ge(this, "doCasesAdded", (e, t) => {
                let s = e.getResponsiveContentColumns();
                for (let e of s) this.updateResponsiveCaseContent(e);
                this.navigator.setList(e),
                  this.mover.setList(e),
                  this.refreshActions(),
                  this.updateUrl(),
                  this.updateCasesToolbar();
              }),
              ge(this, "doCasesResizeContent", (e) => {
                this.updateResponsiveCaseContent(e);
              }),
              ge(this, "doGroupsNodeClick", (e) => {
                this.components.groups.nodeLoading(e.$node, () =>
                  this.components.listContent.loading(() =>
                    this.selectGroup(e.$node, e.id).catch((e) => {
                      f.Z.handleError(e);
                    })
                  )
                );
              }),
              ge(this, "doGroupingMenuActionClick", (e) => {
                if ((e.target.hide(), "select" == e.actionName)) {
                  let t = $(this.groupingMenuIconTarget);
                  o.UI.loading(t, () =>
                    this.changeGrouping(
                      e.actionValue,
                      e.$actionItem.data("name")
                    )
                  );
                }
              }),
              ge(this, "doGroupsLoadNode", (e) =>
                this.components.groups.nodeLoading(e.$node, () =>
                  this.expandNode(e.$node)
                )
              ),
              ge(this, "doGroupsContextMenu", (e) => {
                const t = this.buildGroupsContextMenuEntries();
                new c.x(t, { context: { $node: e.$node, id: e.id } }).show(
                  null,
                  K.Fz.BottomLeft,
                  null,
                  { x: e.mouseEvent.pageX, y: e.$node.offset().top + 24 }
                );
              }),
              ge(this, "doGroupsNodeMenu", (e) => {
                if (!o.UI.popupVisible(e.$menuIcon))
                  return new Promise((t, s) => {
                    const i = this.buildGroupsContextMenuEntries(),
                      o = new c.x(i, { context: { $node: e.$node, id: e.id } });
                    (o.onHide = () => {
                      t();
                    }),
                      o.show(e.$menuIcon, K.Fz.BottomLeft);
                  });
              }),
              ge(this, "doGroupsNodeMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.components.groups.nodeLoading(e.context.$node, () =>
                      this.editFolder(e.context.id, e.context.$node)
                    );
                    break;
                  case "delete":
                    this.components.groups.nodeLoading(e.context.$node, () =>
                      this.deleteFolder(e.context.id, e.context.$node)
                    );
                    break;
                  case "add":
                    this.addSubFolder(e.context.id, e.context.$node);
                }
              }),
              ge(this, "doGroupTitleMenuClick", (e) => {
                e.target.hide();
                let t = this.components.groups.getActivatedNode();
                switch (e.actionName) {
                  case "edit":
                    o.UI.loading(e.context.$menuIcon, () =>
                      this.editFolder(this.pageState.groupId, t)
                    );
                    break;
                  case "delete":
                    o.UI.loading(e.context.$menuIcon, () =>
                      this.deleteFolder(this.pageState.groupId, t)
                    );
                }
              }),
              ge(this, "doCaseTitleMenuClick", (e) => {
                let t;
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    o.UI.loading(e.context.$menuIcon, () =>
                      this.editCase(this.pageState.caseId)
                    );
                    break;
                  case "delete":
                    (t = $(this.casePropertiesTarget)),
                      this.deleteCase(this.pageState.caseId, t.data("name"));
                }
              }),
              ge(this, "doShortcutSearch", (e) => {
                e.preventDefault(),
                  this.components.caseSearch &&
                    this.components.caseSearch.focus();
              }),
              ge(this, "doShortcutNext", (e) => {
                this.nextCase();
              }),
              ge(this, "doShortcutPrevious", (e) => {
                this.previousCase();
              }),
              ge(this, "doShortcutListUp", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.up(), this.scrollToActivatedCase());
              }),
              ge(this, "doShortcutListDown", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.down(), this.scrollToActivatedCase());
              }),
              ge(this, "doNavigatorClearItem", (e) => {
                this.clearCase(), this.refreshActions(), this.updateUrl();
              }),
              ge(this, "doNavigatorActivateItem", (e) =>
                this.activateCase(
                  this.components.cases,
                  e.id,
                  e.$row,
                  this.components.cases.getField(e.id, "case")
                )
              ),
              ge(this, "doNavigatorNextPage", (e) =>
                this.components.cases.nextPage()
              ),
              ge(this, "doNavigatorPreviousPage", (e) =>
                this.components.cases.previousPage()
              ),
              ge(this, "doNavigatorNextGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                return (
                  (t =
                    s.length > 0
                      ? this.components.groups.getAndLoadNextNode(s)
                      : Promise.resolve(this.components.groups.getFirstNode())),
                  t
                    .then((e) => {
                      if (!e || 0 == e.length) return Promise.resolve();
                      let t = e.data("id");
                      return (
                        (this.pageState.caseId = null),
                        this.components.groups.markActivatedNode(e),
                        this.components.groups.markLoading(e),
                        this.refreshFragmentsWithCustomErrorHandling([
                          "groupContainer",
                          { groupId: t },
                        ])
                          .then((s) => {
                            this.components.groups.markCompleted(e),
                              (this.pageState.caseId = null),
                              (this.pageState.groupId = t),
                              this.components.listContent.scrollTop(),
                              o.UI.fixedContainerScrollIntoViewIfNeeded(
                                this.components.groups.getActivatedNodeEntry(),
                                this.components.treeContent.getBody()
                              );
                          })
                          .catch((t) => {
                            this.components.groups.markCompleted(e),
                              f.Z.handleError(t);
                          })
                      );
                    })
                    .catch((e) => {
                      f.Z.handleError(e);
                    })
                );
              }),
              ge(this, "doNavigatorPreviousGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                if (
                  ((t =
                    s.length > 0
                      ? this.components.groups.getPreviousNode(s)
                      : this.components.groups.getLastNode()),
                  0 == t.length)
                )
                  return Promise.resolve();
                let i = t.data("id");
                return (
                  (this.pageState.caseId = null),
                  this.components.groups.markActivatedNode(t),
                  this.components.groups.markLoading(t),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "groupContainer",
                    { groupId: i, paginationCurrent: d.g.PaginationCurrentMax },
                  ])
                    .then((e) => {
                      this.components.groups.markCompleted(t),
                        (this.pageState.caseId = null),
                        (this.pageState.groupId = i),
                        this.components.listContent.scrollTop(),
                        o.UI.fixedContainerScrollIntoViewIfNeeded(
                          this.components.groups.getActivatedNodeEntry(),
                          this.components.treeContent.getBody()
                        );
                    })
                    .catch((e) => {
                      this.components.groups.markCompleted(t),
                        f.Z.handleError(e);
                    })
                );
              }),
              ge(this, "doMoverTreeDrop", (e) => {
                if (e.$dropNode.get(0) == e.$dragNode.get(0)) return;
                let t = this.components.groups.getIsParentNode(
                    e.$dropNode,
                    e.$dragNode
                  ),
                  s = (e, t) => {
                    let s = t.data("id"),
                      i = {};
                    if (e == U.Dv.Append)
                      (i.parentId = s),
                        (i.position = d.g.RepositoryPositionFolderEnd);
                    else if (e == U.Dv.Before) {
                      let e = this.components.groups.getParentNode(t);
                      (i.parentId = e.length > 0 ? e.data("id") : null),
                        (i.afterId = s),
                        (i.position = d.g.RepositoryPositionFolderCustom);
                    } else if (e == U.Dv.After) {
                      let e = this.components.groups.getParentNode(t);
                      (i.parentId = e.length > 0 ? e.data("id") : null),
                        (i.beforeId = s),
                        (i.position = d.g.RepositoryPositionFolderCustom);
                    }
                    return i;
                  },
                  i = (e, t, i) => {
                    this.components.groups.nodeLoading(e, () => {
                      let o = s(i, t);
                      return l.N.post(
                        "repositories/copy_folder/" + e.data("id"),
                        l.N.toNetworkCase(o)
                      )
                        .then((e) => {
                          if (i == U.Dv.Append)
                            return this.addSubNodesOrExpand(t, e.data.id);
                          {
                            let s = {};
                            return (
                              this.pageState.filter &&
                                (s.filter = this.pageState.filter),
                              l.N.post(
                                "repositories/render_folder_subtree/" +
                                  e.data.id,
                                l.N.toNetworkCase(s)
                              ).then((e) => {
                                i == U.Dv.Before
                                  ? this.components.groups.insertBefore(
                                      t,
                                      $(e.data)
                                    )
                                  : i == U.Dv.After &&
                                    this.components.groups.insertAfter(
                                      t,
                                      $(e.data)
                                    );
                              })
                            );
                          }
                        })
                        .catch((e) => {
                          f.Z.handleError(e);
                        });
                    });
                  },
                  o = (e, i, o) => {
                    t ||
                      this.components.groups.nodeLoading(e, () => {
                        let t = s(o, i);
                        return l.N.post(
                          "repositories/move_folder/" + e.data("id"),
                          l.N.toNetworkCase(t)
                        )
                          .then((t) => {
                            if (o == U.Dv.Append) {
                              if (!this.components.groups.getNodeExpanded(i))
                                return this.expandNode(i).then(() => {
                                  this.components.groups.removeNode(e);
                                });
                              this.components.groups.moveEnd(i, e);
                            } else
                              o == U.Dv.Before
                                ? this.components.groups.moveBefore(i, e)
                                : o == U.Dv.After &&
                                  this.components.groups.moveAfter(i, e);
                          })
                          .catch((e) => {
                            f.Z.handleError(e);
                          });
                      });
                  },
                  n = (t) => {
                    t.target.hide(),
                      "copy" == t.actionName
                        ? i(e.$dragNode, e.$dropNode, e.dropPosition)
                        : "move" == t.actionName &&
                          o(e.$dragNode, e.$dropNode, e.dropPosition);
                  };
                if (e.dropAction == U.SJ.Choice) {
                  const s = [];
                  s.push({
                    type: "action",
                    name: "copy",
                    title: p.Z.lang("repositories.copy_folder"),
                    callback: n,
                    shortcut: p.Z.lang("shortcut.shift"),
                  }),
                    s.push({
                      type: "action",
                      name: "move",
                      title: p.Z.lang("repositories.move_folder"),
                      callback: n,
                      enabled: !t,
                      shortcut: p.Z.lang("shortcut.control"),
                    }),
                    s.push({ type: "divider" }),
                    s.push({
                      type: "action",
                      name: "cancel",
                      title: p.Z.lang("repositories.cancel"),
                      callback: n,
                    }),
                    new c.x(s, {
                      animations: !1,
                      showPointer: !1,
                      margin: 0,
                    }).show(null, K.Fz.BottomLeft, null, {
                      x: e.cursorX - 5,
                      y: e.cursorY - 5,
                    });
                } else
                  e.dropAction == U.SJ.Copy
                    ? i(e.$dragNode, e.$dropNode, e.dropPosition)
                    : e.dropAction == U.SJ.Move &&
                      o(e.$dragNode, e.$dropNode, e.dropPosition);
              }),
              ge(this, "doMoverListDrop", (e) => {
                let t = e.$dragRows.length,
                  s = (e, t, s, i) => {
                    let o = s.data("id"),
                      n = { ids: i };
                    return (
                      e == U.UL.Tree
                        ? t == U.Dv.Append &&
                          ((n.folderId = o),
                          (n.position = d.g.RepositoryPositionFolderEnd))
                        : e == U.UL.List &&
                          (t == U.Dv.Before
                            ? ((n.folderId = this.pageState.groupId),
                              (n.position = d.g.RepositoryPositionFolderCustom),
                              (n.afterId = o))
                            : t == U.Dv.After &&
                              ((n.folderId = this.pageState.groupId),
                              (n.position = d.g.RepositoryPositionFolderCustom),
                              (n.beforeId = o))),
                      n
                    );
                  },
                  i = (e, t, i, o) => {
                    let n = e.toArray().map((e) => $(e).data("id"));
                    this.components.cases.setManyLoading(n, "avatarfield", !0);
                    let r = s(i, o, t, n);
                    l.N.post(
                      "repositories/copy_cases/" + this.projectId,
                      l.N.toNetworkCase(r)
                    )
                      .then((e) => {
                        if (r.folderId == this.pageState.groupId)
                          return this.refreshFragments("groupCases");
                        this.components.cases.setManyLoading(
                          n,
                          "avatarfield",
                          !1
                        );
                      })
                      .catch((e) => {
                        this.components.cases.setManyLoading(
                          n,
                          "avatarfield",
                          !1
                        ),
                          f.Z.handleError(e);
                      });
                  },
                  o = (e, t, i, o) => {
                    let n = e.toArray().map((e) => $(e).data("id"));
                    this.components.cases.setManyLoading(n, "avatarfield", !0);
                    let r = s(i, o, t, n),
                      a =
                        i == U.UL.Tree &&
                        t.data("id") != this.pageState.groupId,
                      d = !1,
                      h = this.components.cases.getActivatedRow();
                    if (h.length > 0) {
                      let e = h.data("id");
                      d = _.includes(n, e);
                    }
                    l.N.post(
                      "repositories/move_cases/" + this.projectId,
                      l.N.toNetworkCase(r)
                    )
                      .then((e) =>
                        this.refreshFragments("groupCases").then(() => {
                          a && d && this.clearCase();
                        })
                      )
                      .catch((e) => {
                        this.components.cases.setManyLoading(
                          n,
                          "avatarfield",
                          !1
                        ),
                          f.Z.handleError(e);
                      });
                  },
                  n = (t) => {
                    t.target.hide(),
                      "copy" == t.actionName
                        ? i(
                            e.$dragRows,
                            e.$dropElement,
                            e.dropTarget,
                            e.dropPosition
                          )
                        : "move" == t.actionName &&
                          o(
                            e.$dragRows,
                            e.$dropElement,
                            e.dropTarget,
                            e.dropPosition
                          );
                  };
                if (e.dropAction == U.SJ.Choice) {
                  const s = [];
                  s.push({
                    type: "action",
                    name: "copy",
                    title: p.Z.lang(
                      t > 1
                        ? "repositories.copy_cases"
                        : "repositories.copy_case"
                    ),
                    callback: n,
                    shortcut: p.Z.lang("shortcut.shift"),
                  }),
                    s.push({
                      type: "action",
                      name: "move",
                      title: p.Z.lang(
                        t > 1
                          ? "repositories.move_cases"
                          : "repositories.move_case"
                      ),
                      callback: n,
                      shortcut: p.Z.lang("shortcut.control"),
                    }),
                    s.push({ type: "divider" }),
                    s.push({
                      type: "action",
                      name: "cancel",
                      title: p.Z.lang("repositories.cancel"),
                      callback: n,
                    }),
                    new c.x(s, {
                      animations: !1,
                      showPointer: !1,
                      margin: 0,
                    }).show(null, K.Fz.BottomLeft, null, {
                      x: e.cursorX - 5,
                      y: e.cursorY - 5,
                    });
                } else
                  e.dropAction == U.SJ.Copy
                    ? i(
                        e.$dragRows,
                        e.$dropElement,
                        e.dropTarget,
                        e.dropPosition
                      )
                    : e.dropAction == U.SJ.Move &&
                      o(
                        e.$dragRows,
                        e.$dropElement,
                        e.dropTarget,
                        e.dropPosition
                      );
              }),
              ge(this, "doCasesSelectionChange", (e) => {
                this.refreshActions();
              }),
              ge(this, "doCasesStateChange", (e) =>
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments([
                    "groupCases",
                    { state: e.state },
                  ]).then(() => {
                    this.updateUrl(e.state);
                  })
                )
              ),
              ge(this, "doCasesColumnResize", (e) => {
                let t = _.clone(this.pageState.columns);
                t[e.name] && (t[e.name].width = e.width);
                let s = { columns: t };
                return l.N.post(
                  "repositories/save_case_columns/" + this.projectId,
                  l.N.toNetworkCase(s)
                ).then(() => {
                  (this.pageState.columns = t),
                    this.components.cases.resizeNonResponsiveColumn(
                      e.name,
                      e.width
                    );
                });
              }),
              ge(this, "doCasesActionClick", (e) => {
                let t;
                switch (e.actionName) {
                  case "activate":
                    this.activateCase(e.target, e.id, e.$row, e.$field);
                    break;
                  case "menu":
                    this.showCasesContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "copyId":
                    o.UI.copyTextToClipbiard(e.$field.data("copyContent")),
                      (t = e.$field.find(this.selectors.fieldIdCopyIcon)),
                      t.addClass(this.classes.iconAnimate),
                      setTimeout(() => {
                        t.removeClass(this.classes.iconAnimate);
                      }, 600);
                }
              }),
              ge(this, "doCasesContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    e.context.table.loading(
                      "actionfield",
                      e.context.$field,
                      () => this.editCase(e.context.id)
                    );
                    break;
                  case "delete":
                    this.deleteCase(e.context.id, e.context.$row.data("name"));
                }
              }),
              ge(this, "doCasesContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.cases.getSelectedIds();
                switch (e.actionName) {
                  case "edit":
                    e.context.table.loading(
                      "actionfield",
                      e.context.$field,
                      () => this.editCases(t)
                    );
                    break;
                  case "delete":
                    this.deleteCases(t);
                }
              }),
              ge(this, "doFolderNameMenuClick", (e) => {
                e.target.hide(),
                  (this.groupFolderNames = "show" == e.actionName),
                  f.Z.storage.setBoolItem(
                    this.storage.groupFolderNames,
                    this.groupFolderNames
                  ),
                  this.refreshCasesFolderNames();
              }),
              ge(this, "doImportMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "csv":
                    o.UI.loading($(this.importButtonTarget), () =>
                      l.N.post(
                        "repositories/render_import_csv/" + this.projectId
                      )
                        .then((e) => {
                          const t = new D(this.projectId);
                          t.events.on("change", () => this.refreshTreeGroup()),
                            t.show(e.data);
                        })
                        .catch((e) => {
                          f.Z.handleError(e);
                        })
                    );
                    break;
                  case "tlx":
                    o.UI.loading($(this.importButtonTarget), () =>
                      l.N.post(
                        "repositories/render_import_tlx/" + this.projectId
                      )
                        .then((e) => {
                          const t = new X(this.projectId);
                          t.events.on("change", () => this.refreshTreeGroup()),
                            t.show(e.data);
                        })
                        .catch((e) => {
                          f.Z.handleError(e);
                        })
                    );
                }
              }),
              ge(this, "doExportMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "csv":
                    o.UI.loading($(this.exportButtonTarget), () =>
                      l.N.post(
                        "repositories/render_export_csv/" + this.projectId
                      )
                        .then((e) => {
                          new A(this.projectId).show(e.data);
                        })
                        .catch((e) => {
                          f.Z.handleError(e);
                        })
                    );
                    break;
                  case "pdf":
                    this.print();
                }
              }),
              ge(this, "doCaseSearchSearch", (e) => {
                let t = { search: e.term };
                return l.N.post(
                  "repositories/render_case_search/" + this.projectId,
                  l.N.toNetworkCase(t)
                ).then((e) => e.data);
              }),
              ge(this, "doCaseSearchStateChange", (e) => {
                let t = {
                  search: this.components.caseSearch.getSearchTerm(),
                  paginationCurrent: e.state.paginationCurrent,
                  paginationRows: e.state.paginationRows,
                };
                return l.N.post(
                  "repositories/render_case_search/" + this.projectId,
                  l.N.toNetworkCase(t)
                ).then((e) => e.data);
              }),
              ge(this, "doCaseSearchSelectItem", (e) =>
                e.tab
                  ? l.N.visitTab(
                      `repositories/${this.projectId}?case_id=${e.$row.data(
                        "id"
                      )}`
                    )
                  : l.N.visit(
                      `repositories/${this.projectId}?case_id=${e.$row.data(
                        "id"
                      )}`
                    )
              ),
              ge(this, "doCaseSearchFocus", (e) => {
                $(this.groupHeaderToolbarTarget).addClass(
                  this.classes.groupHeaderSearchActive
                );
              }),
              ge(this, "doCaseSearchBlur", (e) => {
                $(this.groupHeaderToolbarTarget).removeClass(
                  this.classes.groupHeaderSearchActive
                );
              }),
              ge(this, "renderTreeGroupContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  l.N.post(
                    "repositories/render_tree_group_containers/" +
                      this.projectId,
                    l.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: ["treeContainer", "groupContainer"],
                  }))
                );
              }),
              ge(this, "afterRenderTreeGroupContainers", () => {
                this.refreshCasesFolderNames(), this.refreshListPaneWidth();
              }),
              ge(this, "renderTreeGroupCaseContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  l.N.post(
                    "repositories/render_tree_group_case_containers/" +
                      this.projectId,
                    l.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: [
                      "treeContainer",
                      "groupContainer",
                      "caseContainer",
                    ],
                  }))
                );
              }),
              ge(this, "afterRenderTreeGroupCaseContainers", () => {
                this.refreshCasesFolderNames(),
                  this.refreshListPaneWidth(),
                  (this.caseResultsStatuses = null);
              }),
              ge(this, "renderGroupContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.groupId && (t.groupId = e.groupId),
                  e.paginationCurrent &&
                    (t.paginationCurrent = e.paginationCurrent),
                  l.N.post(
                    "repositories/render_group_container/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderGroupContainer", () => {
                this.refreshListPaneWidth(), this.refreshCasesFolderNames();
              }),
              ge(this, "renderGroupProperties", (e = {}) =>
                l.N.post(
                  "repositories/render_folder_properties/" +
                    this.pageState.groupId
                )
              ),
              ge(this, "afterRenderGroupProperties", () => {
                this.updateGroupDocs(), this.updateCasesToolbar();
              }),
              ge(this, "renderGroupCases", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.cases &&
                      (t = this.components.cases.getState()),
                  _.defaults(t, this.pageState),
                  e.withPagination || delete t.paginationCurrent,
                  l.N.post(
                    "repositories/render_group_cases/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderGroupCases", () => {
                this.updateCasesToolbar();
              }),
              ge(this, "renderCaseContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.caseId && (t.caseId = e.caseId),
                  l.N.post(
                    "repositories/render_case_container/" + this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderCaseContainer", () => {
                this.caseResultsStatuses = null;
              }),
              ge(this, "renderCaseProperties", (e = {}) =>
                l.N.post(
                  "repositories/render_case_properties/" + this.pageState.caseId
                )
              ),
              ge(this, "afterRenderCaseProperties", () => {}),
              ge(this, "renderCaseTabContent", (e = {}) => {
                let t, s;
                t =
                  "tab" in e ? e.tab : this.components.caseTabs.getCurrentTab();
                let i = {};
                return (
                  0 == t
                    ? (s =
                        "repositories/render_case_comments/" +
                        this.pageState.caseId)
                    : 1 == t
                    ? ((i = { tab: "active" }),
                      (s =
                        "repositories/render_case_results/" +
                        this.pageState.caseId))
                    : (s =
                        2 == t
                          ? "repositories/render_case_issues/" +
                            this.pageState.caseId
                          : "repositories/render_case_history/" +
                            this.pageState.caseId),
                  l.N.post(s, l.N.toNetworkCase(i))
                );
              }),
              ge(this, "afterRenderCaseTabContent", () => {
                this.caseResultsStatuses = null;
              }),
              ge(this, "renderCaseResultPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  (t.tab = o.UI.getDropdown($(this.caseResultsTabTarget))),
                  this.caseResultsStatuses &&
                    (t.statuses = this.caseResultsStatuses),
                  l.N.post(
                    "repositories/render_case_result_page/" +
                      this.pageState.caseId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderCaseResultPage", () => {}),
              ge(this, "renderCaseHistoryPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  l.N.post(
                    "repositories/render_case_history_page/" +
                      this.pageState.caseId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderCaseHistoryPage", () => {}),
              ge(this, "renderCaseCommentPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  l.N.post(
                    "repositories/render_case_comment_page/" +
                      this.pageState.caseId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderCaseCommentPage", () => {}),
              ge(this, "renderCaseIssuePage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  l.N.post(
                    "repositories/render_case_issue_page/" +
                      this.pageState.caseId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              ge(this, "afterRenderCaseIssuePage", () => {});
          }
          prepare() {
            this.groupFolderNames = f.Z.storage.getBoolItem(
              this.storage.groupFolderNames,
              !0
            );
          }
          load() {
            if (
              ((this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              (this.pageState = {
                caseId: this.params.caseId,
                groupBy: this.params.groupBy,
                groupId: this.params.groupId,
                columns: this.params.columns,
                filter: this.params.filter,
              }),
              (this.caseResultsStatuses = null),
              (this.$currentCommentEditContainer = null),
              this.pageState.filter &&
                0 == _.keys(this.pageState.filter.conditions).length &&
                (this.pageState.filter = null),
              (this.navigator = new N.C()),
              this.navigator.events.on(
                "activateitem",
                this.doNavigatorActivateItem
              ),
              this.navigator.events.on("clearitem", this.doNavigatorClearItem),
              this.navigator.events.on("nextgroup", this.doNavigatorNextGroup),
              this.navigator.events.on("nextpage", this.doNavigatorNextPage),
              this.navigator.events.on(
                "previousgroup",
                this.doNavigatorPreviousGroup
              ),
              this.navigator.events.on(
                "previouspage",
                this.doNavigatorPreviousPage
              ),
              (this.mover = new U.FX()),
              this.mover.events.on("listdrop", this.doMoverListDrop),
              this.mover.events.on("treedrop", this.doMoverTreeDrop),
              f.Z.requestChild(this.component, "treeContent"),
              f.Z.requestChild(this.component, "listContent"),
              f.Z.requestChild(this.component, "detailsContent"),
              f.Z.requestChild(this.component, "mix", {
                onAdded: this.doMixAdded,
                onRemoved: this.doMixRemoved,
                events: {
                  detailshide: this.doMixDetailsHide,
                  resize: this.doMixResize,
                },
              }),
              f.Z.requestChild(this.component, "groups", {
                onAdded: this.doGroupsAdded,
                onRemoved: this.doGroupsRemoved,
                events: {
                  loadnode: this.doGroupsLoadNode,
                  nodeclick: this.doGroupsNodeClick,
                  nodemenu: this.doGroupsNodeMenu,
                  contextmenu: this.doGroupsContextMenu,
                },
              }),
              f.Z.requestChild(this.component, "cases", {
                onConnected: this.doCasesConnected,
                onAdded: this.doCasesAdded,
                onRemoved: this.doCasesRemoved,
                events: {
                  actionclick: this.doCasesActionClick,
                  statechange: this.doCasesStateChange,
                  selectionchange: this.doCasesSelectionChange,
                  resizecontent: this.doCasesResizeContent,
                  columnresize: this.doCasesColumnResize,
                },
              }),
              f.Z.requestChild(this.component, "caseTabs", {
                events: { tabchange: this.doCaseTabsChange },
              }),
              f.Z.requestChild(this.component, "caseResultsTab", {
                events: { change: this.doCaseResultsTabChange },
              }),
              f.Z.requestChild(this.component, "caseResultsActive", {
                events: { statechange: this.doCaseResultsActiveStateChange },
              }),
              f.Z.requestChild(this.component, "caseResultsLatestAllGroups", {
                events: {
                  statechange: this.doCaseResultsLatestAllGroupsStateChange,
                },
              }),
              f.Z.requestChild(this.component, "caseIssueGroups", {
                events: { statechange: this.doCaseIssueGroupsStateChange },
              }),
              f.Z.requestChild(this.component, "caseHistoryPager", {
                events: { statechange: this.doCaseHistoryPagerStateChange },
              }),
              f.Z.requestChild(this.component, "caseAddCommentEditor", {
                events: {
                  success: this.doCaseAddCommentEditorSuccess,
                  cancel: this.doCaseAddCommentEditorCancel,
                },
              }),
              f.Z.requestChild(this.component, "caseEditCommentEditor", {
                onRemoved: this.doCaseEditCommentEditorRemoved,
                events: {
                  loaded: this.doCaseEditCommentEditorLoaded,
                  success: this.doCaseEditCommentEditorSuccess,
                  cancel: this.doCaseEditCommentEditorCancel,
                },
              }),
              f.Z.requestChild(this.component, "caseCommentsPager", {
                events: { statechange: this.doCaseCommentsPagerStateChange },
              }),
              f.Z.requestChild(this.component, "caseSearch", {
                events: {
                  search: this.doCaseSearchSearch,
                  selectitem: this.doCaseSearchSelectItem,
                  statechange: this.doCaseSearchStateChange,
                  focus: this.doCaseSearchFocus,
                  blur: this.doCaseSearchBlur,
                },
              }),
              o.UI.initialize(this.element),
              this.fragments.register(
                "treeGroupContainers",
                this.renderTreeGroupContainers,
                { completedCallback: this.afterRenderTreeGroupContainers }
              ),
              this.fragments.register(
                "treeGroupCaseContainers",
                this.renderTreeGroupCaseContainers,
                { completedCallback: this.afterRenderTreeGroupCaseContainers }
              ),
              this.fragments.register(
                "groupContainer",
                this.renderGroupContainer,
                { completedCallback: this.afterRenderGroupContainer }
              ),
              this.fragments.register(
                "groupProperties",
                this.renderGroupProperties,
                { completedCallback: this.afterRenderGroupProperties }
              ),
              this.fragments.register("groupCases", this.renderGroupCases, {
                completedCallback: this.afterRenderGroupCases,
              }),
              this.fragments.register(
                "caseContainer",
                this.renderCaseContainer,
                { completedCallback: this.afterRenderCaseContainer }
              ),
              this.fragments.register(
                "caseProperties",
                this.renderCaseProperties,
                { completedCallback: this.afterRenderCaseProperties }
              ),
              this.fragments.register(
                "caseTabContent",
                this.renderCaseTabContent,
                { completedCallback: this.afterRenderCaseTabContent }
              ),
              this.fragments.register(
                "caseResultPage",
                this.renderCaseResultPage,
                { completedCallback: this.afterRenderCaseResultPage }
              ),
              this.fragments.register(
                "caseHistoryPage",
                this.renderCaseHistoryPage,
                { completedCallback: this.afterRenderCaseHistoryPage }
              ),
              this.fragments.register(
                "caseCommentPage",
                this.renderCaseCommentPage,
                { completedCallback: this.afterRenderCaseCommentPage }
              ),
              this.fragments.register(
                "caseIssuePage",
                this.renderCaseIssuePage,
                { completedCallback: this.afterRenderCaseIssuePage }
              ),
              this.shortcuts.register(n.N.H, this.doShortcutPrevious, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.J, this.doShortcutListUp, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(n.N.K, this.doShortcutListDown, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(n.N.L, this.doShortcutNext, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.Slash, this.doShortcutSearch, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.P, this.doShortcutPrint, {
                control: !0,
              }),
              !this.params.isRepositoryEmpty)
            ) {
              let e = {};
              this.params.paginationCurrent &&
                (e.paginationCurrent = this.params.paginationCurrent),
                this.params.paginationRows &&
                  (e.paginationRows = this.params.paginationRows),
                this.params.sortColumn &&
                  (e.sortColumn = this.params.sortColumn),
                this.params.sortDirection &&
                  (e.sortDirection = this.params.sortDirection),
                this.loadInitialContent(e);
            }
            this.updateUrl();
          }
          unload() {
            this.navigator.setList(null),
              this.navigator.setTree(null),
              this.mover.setList(null),
              this.mover.setTree(null);
          }
          loadInitialContent(e) {
            let t = window.location.hash.substr(1);
            this.pageState.caseId
              ? this.refreshFragments(["treeGroupCaseContainers", e]).then(
                  () => {
                    this.components.treeContent.showContent(
                      d.g.MixContentContent
                    ),
                      this.components.listContent.showContent(
                        d.g.MixContentContent
                      ),
                      this.components.detailsContent.showContent(
                        d.g.MixContentContent
                      ),
                      this.refreshActions(),
                      this.refreshListPaneWidth(),
                      t == d.g.RepositoryHashResults &&
                        setTimeout(() => {
                          this.components.caseTabs &&
                            this.components.caseTabs.showTab(1);
                        }, 100);
                  }
                )
              : this.refreshFragments(["treeGroupContainers", e]).then(() => {
                  this.components.treeContent.showContent(
                    d.g.MixContentContent
                  ),
                    this.components.listContent.showContent(
                      d.g.MixContentContent
                    ),
                    this.refreshActions(),
                    this.refreshListPaneWidth();
                });
          }
          responsiveContainerResize() {
            this.refreshListPaneWidth();
          }
          refreshListPaneWidth() {
            if (!this.components.listContent) return;
            let e = this.components.listContent.getBody();
            if (0 == e.length) return;
            let t = e[0].clientWidth;
            this.updateStickyContent(t),
              this.updateGroupDocs(),
              this.updateCasesToolbar();
          }
          updateGroupDocs() {
            if (!this.hasGroupPropertiesDocsTarget) return;
            let e = $(this.groupPropertiesDocsTarget),
              t = $(this.selectors.groupPropertiesDocsContent, e).height();
            e.toggleClass(
              this.classes.groupPropertiesDocsOverflowing,
              t >= a.X.RepositoriesGroupDocsContentOverflowHeight
            );
          }
          updateCasesToolbar(e = null) {
            if (
              (e || (e = this.components.cases),
              e && this.hasGroupPropertiesTarget)
            ) {
              let t = $(this.groupPropertiesTarget),
                s = e.getToolbarElement();
              t.height() &&
                (s.removeClass(this.classes.hidden),
                s.css("top", `-${t.height() + 18}px`)),
                $(this.groupPropertiesTitleTarget).toggleClass(
                  this.classes.groupPropertiesTitleHasTableToolbar,
                  s.find(this.selectors.tableToolbarPagination).length > 0
                );
            }
          }
          print() {
            h.K.openPrintGass(l.N.url("repositories/print/" + this.projectId));
          }
          doPrint() {
            this.print();
          }
          doCaseHistoryShowBefore(e) {
            $(e.currentTarget)
              .closest(this.selectors.historyChangeValue)
              .addClass(this.classes.historyChangeValueWithBefore);
          }
          doCaseResultsFilter(e) {
            let t = $(this.caseResultsFilterIconTarget),
              s = $(this.caseResultsFilterIconLabelTarget);
            o.UI.popupVisible(s) ||
              o.UI.loading(t, () => {
                let e = {};
                return (
                  this.caseResultsStatuses &&
                    (e.selected = this.caseResultsStatuses),
                  l.N.post(
                    "repositories/render_case_status_filter/" + this.projectId,
                    l.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const i = new ue.d();
                      (i.onSubmit = (e) => (
                        e.condition.values && e.condition.values.length > 0
                          ? (this.caseResultsStatuses = e.condition.values)
                          : (this.caseResultsStatuses = null),
                        this.refreshFragments("caseResultPage").then(() => {
                          e.condition.values && e.condition.values.length > 0
                            ? o.UI.setSelectActionCount(
                                t,
                                e.condition.values.length
                              )
                            : o.UI.setSelectActionCount(t, 0);
                        })
                      )),
                        i.show(s, K.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      f.Z.handleError(e);
                    })
                );
              });
          }
          doCaseResultsCancelFilter(e) {
            let t = $(this.caseResultsFilterIconTarget);
            o.UI.loading(
              t,
              () => (
                (this.caseResultsStatuses = null),
                this.refreshFragments("caseResultPage").then(() => {
                  o.UI.setSelectActionCount(t, 0);
                })
              )
            );
          }
          doShowCaseCommentMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.action),
              i = s.data("id");
            const n = [];
            n.push({
              type: "action",
              name: "edit",
              title: p.Z.lang("repositories.edit_comment"),
              callback: this.doCaseCommentMenuClick,
            }),
              n.push({ type: "divider" }),
              n.push({
                type: "action",
                name: "delete",
                title: p.Z.lang("repositories.delete_comment"),
                callback: this.doCaseCommentMenuClick,
              }),
              new c.x(n, { context: { $menu: t, $comment: s, id: i } }).show(
                t,
                K.Fz.BottomLeft
              );
          }
          deleteComment(e) {
            let t;
            (t = new se.A(
              p.Z.lang("repositories.delete_comment_title"),
              p.Z.lang("repositories.delete_comment_message"),
              p.Z.lang("repositories.delete_comment_button")
            )),
              (t.onSuccess = () =>
                l.N.post("repositories/delete_case_comment/" + e).then(() => {
                  let e = null;
                  return (
                    this.components.caseCommentsPager &&
                      (e = this.components.caseCommentsPager.getState()),
                    this.refreshFragments(["caseCommentPage", { state: e }])
                  );
                })),
              t.show();
          }
          editComment(e, t, s) {
            o.UI.loading(s, () =>
              l.N.post("repositories/render_update_case_comment/" + e)
                .then((e) => {
                  this.components.caseAddCommentEditor.setEnabled(!1),
                    this.components.caseCommentsPager &&
                      this.components.caseCommentsPager.setVisible(!1),
                    this.endCommentEditing(),
                    setTimeout(() => {
                      t.children().hide();
                      let s = $(this.templates.actionEditorContainer);
                      s.html(e.data),
                        t.append(s),
                        (this.$currentCommentEditContainer = s),
                        o.UI.toggleTextEnabled(
                          $(this.caseAddCommentPlaceholderTarget),
                          !1
                        );
                    }, 0);
                })
                .catch((e) => {
                  f.Z.handleError(e), this.endCommentEditing();
                })
            );
          }
          endCommentEditing() {
            if (!this.$currentCommentEditContainer) return;
            let e = this.$currentCommentEditContainer.closest(
              this.selectors.action
            );
            this.$currentCommentEditContainer.remove(),
              e.children().show(),
              (this.$currentCommentEditContainer = null),
              this.hasCaseAddCommentPlaceholderTarget &&
                o.UI.toggleTextEnabled(
                  $(this.caseAddCommentPlaceholderTarget),
                  !0
                ),
              this.components.caseAddCommentEditor &&
                this.components.caseAddCommentEditor.setEnabled(!0),
              this.components.caseCommentsPager &&
                this.components.caseCommentsPager.setVisible(!0);
          }
          hideCaseAddCommentEditor() {
            this.components.caseAddCommentEditor.resetForm(),
              $(this.caseCommentsContainerTarget).removeClass(
                this.classes.commentsAdding
              );
          }
          doCaseCommentPlaceholderFocus(e) {
            this.$currentCommentEditContainer ||
              ($(this.caseCommentsContainerTarget).addClass(
                this.classes.commentsAdding
              ),
              this.components.caseAddCommentEditor.focus());
          }
          doToggleGroupPropertiesDocs() {
            $(this.groupPropertiesDocsTarget).toggleClass(
              this.classes.groupPropertiesDocsExpanded
            ),
              this.updateCasesToolbar();
          }
          updateStickyContent(e) {
            if (!this.components.listContent) return;
            let t = e - 40;
            this.hasGroupPropertyContainerTarget &&
              $(this.groupPropertyContainerTarget).css({ maxWidth: `${t}px` }),
              this.hasGroupAddCaseContainerTarget &&
                $(this.groupAddCaseContainerTarget).css({ maxWidth: `${t}px` }),
              this.hasGroupEmptyContainerTarget &&
                $(this.groupEmptyContainerTarget).css({ maxWidth: `${t}px` });
          }
          updateGroupItemCount(e = null) {
            if (
              (e || (e = this.components.cases),
              e && this.hasGroupItemCountTarget)
            ) {
              let t = e.getParams().itemCount || 0;
              $(this.groupItemCountTarget).text(`(${t})`);
            }
          }
          updateResponsiveCaseContent(e) {
            "repository_cases:tags" == e.name
              ? oe.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.tags;
                  return t ? JSON.parse(t) : [];
                })
              : "repository_cases:configs" == e.name
              ? le.displayResponsiveConfigLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.configs;
                  return t ? JSON.parse(t) : [];
                })
              : "repository_cases:issues" == e.name
              ? (ne.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.issueTags;
                  return t ? JSON.parse(t) : [];
                }),
                o.UI.initialize(this.components.cases.$element))
              : de.m.displayResponsiveValueLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.values;
                  return t ? JSON.parse(t) : [];
                });
          }
          selectGroup(e, t, s = !0) {
            let i = this.components.groups.getActivatedNode();
            return (
              this.components.groups.markActivatedNode(e),
              s &&
                this.components.mix.getDetailsVisible() &&
                this.components.detailsContent.getContentVisible(
                  d.g.MixContentContent
                ) &&
                this.components.detailsContent.markLoading(),
              (this.pageState.caseId = null),
              this.refreshFragmentsWithCustomErrorHandling([
                "groupContainer",
                { groupId: t },
              ])
                .then((e) => {
                  this.components.detailsContent.markCompleted(),
                    this.clearCase(),
                    (this.pageState.groupId = t),
                    this.components.mix.getTreeOverlayVisible() &&
                      this.components.mix.hideTreeOverlay(),
                    this.components.listContent.scrollTop(),
                    this.refreshActions(),
                    this.updateUrl();
                })
                .catch((e) => {
                  throw (
                    (this.components.groups.markActivatedNode(i),
                    this.components.detailsContent.markCompleted(),
                    this.clearCase(),
                    this.updateUrl(),
                    this.refreshActions(),
                    e)
                  );
                })
            );
          }
          clearCase() {
            this.components.detailsContent.showContent(
              d.g.MixContentNoSelection
            ),
              this.fragments.empty("caseContainer"),
              (this.pageState.caseId = null),
              (this.caseResultsStatuses = null);
          }
          updateUrl(e = null) {
            let t = {},
              s = e;
            this.pageState.groupBy != d.g.RepositoryGroupByFolder &&
              (t.group_by = this.pageState.groupBy),
              this.pageState.groupId && (t.group_id = this.pageState.groupId),
              !s &&
                this.components.cases &&
                (s = this.components.cases.getState()),
              s &&
                (s.paginationCurrent &&
                  1 != s.paginationCurrent &&
                  (t.pagination_current = s.paginationCurrent),
                s.paginationRows &&
                  s.paginationRows != d.g.PaginationDefaultRows &&
                  (t.pagination_rows = s.paginationRows),
                s.sortColumn && (t.sort_column = s.sortColumn),
                s.sortDirection && (t.sort_direction = s.sortDirection)),
              this.pageState.caseId && (t.case_id = this.pageState.caseId),
              this.pageState.filter &&
                (t.filter = p.Z.base64EncodeUrlsafe(
                  JSON.stringify(this.pageState.filter)
                ));
            let i = Object.keys(t).map((e) => `${e}=${t[e]}`),
              o = "repositories/" + this.projectId;
            i.length > 0
              ? f.Z.replaceLocation(l.N.url(o + "?" + i.join("&")))
              : f.Z.replaceLocation(l.N.url(o));
          }
          refreshActions() {
            let e = this.pageState.groupBy == d.g.RepositoryGroupByFolder;
            this.hasAddFolderIconTarget &&
              o.UI.toggleIconActionEnabled(
                $(this.addFolderIconTarget),
                e &&
                  (this.components.groups ||
                    this.hasNodataAddFolderButtonTarget)
              ),
              o.UI.toggleSelectActionEnabled(
                $(this.showFolderNameMenuActionTargets),
                !e
              );
            let t = 0;
            this.components.cases &&
              (t = this.components.cases.getSelectedCount());
            let s =
              e && (this.components.cases || this.hasNodataAddCaseButtonTarget);
            this.hasAddCaseIconTarget &&
              o.UI.toggleIconActionEnabled($(this.addCaseIconTargets), s),
              this.hasEmptyGroupAddCaseButtonTarget &&
                $(this.emptyGroupAddCaseButtonTarget).toggleClass(
                  this.classes.hidden,
                  !s
                ),
              this.hasEditCasesIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.editCasesIconTargets),
                  t > 1
                ),
              this.hasDeleteCasesIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.deleteCasesIconTargets),
                  t > 0
                ),
              o.UI.toggleIconActionEnabled(
                $(this.selectColumnsIconTargets),
                !!this.components.cases
              ),
              this.hasGroupAddCaseContainerTarget &&
                ($(
                  this.selectors.groupAddCase,
                  this.groupAddCaseContainerTarget
                ).toggleClass(this.classes.disabled, !s),
                o.UI.toggleTextEnabled($(this.addInlineInputTarget), s),
                o.UI.toggleButtonEnabled($(this.addInlineAddButtonTarget), s),
                o.UI.toggleButtonEnabled(
                  $(this.addInlineSelectStateButtonTarget),
                  s
                ));
            let i = this.components.detailsContent.getContentVisible(
                d.g.MixContentContent
              ),
              n = this.hasCasePropertiesTarget;
            this.hasEditCaseIconTarget &&
              o.UI.toggleIconActionEnabled($(this.editCaseIconTarget), i && n);
          }
          doAddFolder() {
            let e = $(this.addFolderIconTarget);
            o.UI.getIconActionEnabled(e) && this.addFolder(e);
          }
          doNodataAddFolder(e) {
            this.addFolder($(e.currentTarget));
          }
          addFolder(e) {
            o.UI.loading(e, () =>
              l.N.post("repositories/render_create_folder/" + this.projectId)
                .then((e) => {
                  const t = new I.q(I.G.Add, this.projectId);
                  return (
                    (t.onSuccess = (e) => {
                      if (this.components.groups) {
                        let t = {};
                        return (
                          this.pageState.filter &&
                            (t.filter = this.pageState.filter),
                          l.N.post(
                            "repositories/render_folder_subtree/" + e.id,
                            l.N.toNetworkCase(t)
                          ).then((e) => {
                            this.components.groups.addSubNodes(null, $(e.data));
                          })
                        );
                      }
                      return this.refreshFragments("treeGroupContainers").then(
                        () => {
                          this.refreshActions(), this.updateUrl();
                        }
                      );
                    }),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          doShowGroupingMenu() {
            let e = $(this.groupingMenuIconTarget);
            o.UI.popupVisible(e) ||
              o.UI.loading(e, () => {
                let t = { groupBy: this.pageState.groupBy };
                return l.N.post(
                  "repositories/render_case_grouping/" + this.projectId,
                  l.N.toNetworkCase(t)
                )
                  .then((t) => {
                    const s = new Y(this.pageState.groupBy);
                    s.events.on("actionclick", this.doGroupingMenuActionClick),
                      s.show(e, K.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  });
              });
          }
          changeGrouping(e, t) {
            (this.pageState.groupBy = e),
              (this.pageState.groupId = null),
              (this.pageState.caseId = null);
            let s = { groupBy: e };
            return l.N.post(
              "repositories/save_case_grouping/" + this.projectId,
              l.N.toNetworkCase(s)
            )
              .then((e) =>
                this.refreshFragments("treeGroupContainers").then(() => {
                  let e = $(this.groupingMenuIconTarget);
                  o.UI.setSelectActionText(e, t),
                    this.clearCase(),
                    this.updateUrl(),
                    this.refreshActions();
                })
              )
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          buildGroupsContextMenuEntries() {
            const e = [];
            return (
              this.canAddEdit &&
                (e.push({
                  type: "action",
                  name: "edit",
                  title: p.Z.lang("repositories.edit_folder"),
                  callback: this.doGroupsNodeMenuClick,
                }),
                e.push({
                  type: "action",
                  name: "add",
                  title: p.Z.lang("repositories.add_sub_folder"),
                  callback: this.doGroupsNodeMenuClick,
                })),
              this.canAddEdit && this.canDelete && e.push({ type: "divider" }),
              this.canDelete &&
                e.push({
                  type: "action",
                  name: "delete",
                  title: p.Z.lang("repositories.delete_folder"),
                  callback: this.doGroupsNodeMenuClick,
                }),
              e
            );
          }
          doShowGroupTitleMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            this.canAddEdit &&
              s.push({
                type: "action",
                name: "edit",
                title: p.Z.lang("repositories.edit_folder"),
                callback: this.doGroupTitleMenuClick,
              }),
              this.canAddEdit && this.canDelete && s.push({ type: "divider" }),
              this.canDelete &&
                s.push({
                  type: "action",
                  name: "delete",
                  title: p.Z.lang("repositories.delete_folder"),
                  callback: this.doGroupTitleMenuClick,
                }),
              new c.x(s, { context: { $menuIcon: t } }).show(
                t,
                K.Fz.BottomLeft
              );
          }
          doShowGroupTitleInfo(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.groupPropertiesTarget),
              i = s.data("link");
            new te.N({
              title: s.data("name"),
              id: s.data("id"),
              link: i,
              url: l.N.url(i),
            }).show(t, K.Fz.BottomLeft);
          }
          doShowCaseTitleMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            this.canAddEdit &&
              s.push({
                type: "action",
                name: "edit",
                title: p.Z.lang("repositories.edit_case"),
                callback: this.doCaseTitleMenuClick,
              }),
              this.canAddEdit && this.canDelete && s.push({ type: "divider" }),
              this.canDelete &&
                s.push({
                  type: "action",
                  name: "delete",
                  title: p.Z.lang("repositories.delete_case"),
                  callback: this.doCaseTitleMenuClick,
                }),
              new c.x(s, { context: { $menuIcon: t } }).show(
                t,
                K.Fz.BottomLeft
              );
          }
          doShowCaseTitleInfo(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.casePropertiesTarget),
              i = s.data("link");
            new te.N({
              title: s.data("name"),
              id: s.data("id"),
              link: i,
              url: l.N.url(i),
            }).show(t, K.Fz.BottomLeft);
          }
          editFolder(e, t) {
            return l.N.post("repositories/render_update_folder/" + e)
              .then((s) => {
                const i = new I.q(I.G.Edit, this.projectId, e);
                return (
                  (i.onSuccess = (s) => {
                    let i = Promise.resolve();
                    return (
                      this.pageState.groupId == e &&
                        (i = this.refreshFragments("groupProperties").then(
                          () => {
                            this.updateGroupItemCount();
                          }
                        )),
                      i.then(() => {
                        this.components.groups.setNodeLabel(t, s.name);
                      }),
                      i
                    );
                  }),
                  i.show(s.data)
                );
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          deleteFolder(e, t) {
            return l.N.post("repositories/render_delete_folder/" + e)
              .then((s) => {
                const i = new E();
                return (
                  (i.onSuccess = (s) =>
                    l.N.post("repositories/delete_folder/" + e).then(() => {
                      if (this.pageState.groupId == e) {
                        let e = this.components.groups.getPreviousNode(t);
                        return (
                          0 == e.length &&
                            (e = this.components.groups.getNextSibling(t)),
                          0 == e.length
                            ? ((this.pageState.groupId = null),
                              this.refreshFragments("treeGroupContainers").then(
                                () => {
                                  this.clearCase(),
                                    this.updateEmptyRepository();
                                }
                              ))
                            : this.selectGroup(e, e.data("id")).then(() => {
                                this.components.groups.removeNode(t);
                              })
                        );
                      }
                      this.components.groups.removeNode(t);
                    })),
                  i.show(s.data)
                );
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          addSubNodesOrExpand(e, t) {
            if (this.components.groups.getNodeExpanded(e)) {
              let s = {};
              return (
                this.pageState.filter && (s.filter = this.pageState.filter),
                l.N.post(
                  "repositories/render_folder_subtree/" + t,
                  l.N.toNetworkCase(s)
                ).then((t) => {
                  this.components.groups.addSubNodes(e, $(t.data));
                })
              );
            }
            return (
              this.components.groups.setNodeExpandable(e, !0),
              this.expandNode(e)
            );
          }
          addSubFolder(e, t) {
            this.components.groups.nodeLoading(t, () =>
              l.N.post("repositories/render_create_folder/" + this.projectId)
                .then((s) => {
                  const i = new I.q(I.G.Add, this.projectId, null, e);
                  return (
                    (i.onSuccess = (e) => this.addSubNodesOrExpand(t, e.id)),
                    i.show(s.data)
                  );
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          expandNode(e) {
            if (this.components.groups.getNodeExpanded(e))
              return Promise.resolve();
            let t = e.data("id"),
              s = {};
            return (
              this.pageState.filter && (s.filter = this.pageState.filter),
              l.N.post(
                "repositories/render_folder_children_subtree/" + t,
                l.N.toNetworkCase(s)
              )
                .then((t) => {
                  this.components.groups.addLoadedNodes(e, $(t.data)),
                    this.components.groups.expandNode(e);
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          doNextCase() {
            this.nextCase();
          }
          doPreviousCase() {
            this.previousCase();
          }
          nextCase() {
            this.components.groups &&
              (this.components.mix.getDetailsVisible() ||
                (this.components.detailsContent.showContent(
                  d.g.MixContentInitial
                ),
                this.components.mix.showDetails()),
              o.UI.loading($(this.nextCaseIconTarget), () =>
                this.navigator.next().then(() => {
                  f.Z.resetPopupTracker(), this.scrollToActivatedCaseOrTop();
                })
              ));
          }
          previousCase() {
            this.components.groups &&
              (this.components.mix.getDetailsVisible() ||
                (this.components.detailsContent.showContent(
                  d.g.MixContentInitial
                ),
                this.components.mix.showDetails()),
              o.UI.loading($(this.previousCaseIconTarget), () =>
                this.navigator.previous().then(() => {
                  f.Z.resetPopupTracker(), this.scrollToActivatedCaseOrTop();
                })
              ));
          }
          scrollToActivatedCase() {
            if (this.components.cases) {
              let e = this.components.cases.getActivatedRow();
              return (
                e.length > 0 &&
                (o.UI.fixedContainerScrollIntoViewIfNeeded(
                  e,
                  this.components.listContent.getBody()
                ),
                !0)
              );
            }
            return !1;
          }
          scrollToActivatedCaseOrTop() {
            this.scrollToActivatedCase() ||
              this.components.listContent.scrollTop();
          }
          doRefresh() {
            o.UI.loading($(this.refreshIconTarget), () =>
              this.refreshTreeGroup()
            );
          }
          refreshTreeGroup() {
            return this.refreshFragments("treeGroupContainers").then(() => {
              this.clearCase(),
                this.updateUrl(),
                this.refreshActions(),
                this.updateEmptyRepository();
            });
          }
          doFilter(e) {
            let t = $(this.filterIconTarget),
              s = $(this.filterIconLabelTarget);
            o.UI.getIconActionEnabled(t) &&
              (o.UI.popupVisible(s) ||
                o.UI.loading(t, () => {
                  let e = this.pageState.filter
                    ? this.pageState.filter
                    : a.X.EmptyFilter;
                  return l.N.post(
                    "repositories/render_case_filter/" + this.projectId,
                    l.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const t = new ie.y();
                      t.events.on("selectfolders", (e) => {
                        let s = { selected: e.ids };
                        return l.N.post(
                          "repositories/render_select_folders/" +
                            this.projectId,
                          l.N.toNetworkCase(s)
                        ).then((s) => {
                          const i = new w._();
                          t.addActiveDialog(i),
                            (i.onHidden = () => {
                              t.removeActiveDialog(i);
                            }),
                            (i.onSuccess = (t) => {
                              let s = { selected: t };
                              return l.N.post(
                                "repositories/render_case_filter_folders/" +
                                  this.projectId,
                                l.N.toNetworkCase(s)
                              ).then((t) => {
                                e.target.setFolderFilterContent(e.name, t.data);
                              });
                            }),
                            i.show(s.data);
                        });
                      }),
                        (t.onSubmit = (e) => this.saveFilter(e.filter)),
                        t.show(s, K.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      f.Z.handleError(e);
                    });
                }));
          }
          doNomatchCancelFilter(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.saveFilter(a.X.EmptyFilter).catch((e) => {
                f.Z.handleError(e);
              })
            );
          }
          doNomatchShowFolders(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.changeGrouping(
                d.g.RepositoryGroupByFolder,
                p.Z.lang("repositories.folder")
              )
            );
          }
          doMissingCancelFilter(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.saveFilter(a.X.EmptyFilter).catch((e) => {
                f.Z.handleError(e);
              })
            );
          }
          doCancelFilter(e) {
            let t = $(this.filterIconTarget);
            o.UI.getIconActionEnabled(t) &&
              (o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide(),
              o.UI.loading(t, () =>
                this.saveFilter(a.X.EmptyFilter).catch((e) => {
                  f.Z.handleError(e);
                })
              ));
          }
          saveFilter(e) {
            return l.N.post(
              "repositories/save_case_filter/" + this.projectId,
              l.N.toNetworkCase(e)
            ).then((e) => {
              let t = _.keys(e.data.conditions).length;
              return (
                (this.pageState.filter = t > 0 ? e.data : null),
                this.refreshFragments([
                  "treeGroupContainers",
                  { forceGroup: !0 },
                ]).then(() => {
                  let e = $(this.filterIconTarget);
                  o.UI.setSelectActionCount(e, t),
                    this.clearCase(),
                    this.updateUrl(),
                    this.refreshActions(),
                    this.updateEmptyRepository();
                })
              );
            });
          }
          doEditCase() {
            let e = $(this.editCaseIconTarget);
            o.UI.getIconActionEnabled(e) &&
              o.UI.loading(e, () => this.editCase(this.pageState.caseId));
          }
          updateCaseRows(e) {
            let t = this.components.cases.getState();
            return (
              _.defaults(t, this.pageState),
              (t.ids = e),
              (t.canDragdrop = this.components.cases.params.canDragdrop),
              (t.canSelect = this.components.cases.params.canSelect),
              (t.canAction = this.components.cases.params.canAction),
              l.N.post(
                "repositories/render_case_rows/" + this.projectId,
                l.N.toNetworkCase(t)
              ).then((e) => {
                $(e.data).each((e, t) => {
                  let s = $(t),
                    i = s.data("id");
                  this.components.cases.replaceRow(i, s);
                }),
                  this.components.cases.refreshSelection();
              })
            );
          }
          deleteCase(e, t) {
            let s = new se.A(
              p.Z.lang("repositories.delete_case_title"),
              p.Z.langEscape("repositories.delete_case_message", { name: t }),
              p.Z.lang("repositories.delete_case_button")
            );
            (s.onSuccess = () =>
              l.N.post("repositories/delete_case/" + e).then(() =>
                this.refreshFragments("groupCases").then(() => {
                  this.pageState.caseId == e && this.clearCase();
                })
              )),
              s.show();
          }
          deleteCases(e) {
            let t =
                1 == e.length
                  ? "repositories.delete_cases_message_singular"
                  : "repositories.delete_cases_message_plural",
              s = new se.A(
                p.Z.lang("repositories.delete_cases_title"),
                p.Z.langEscape(t, { count: e.length }),
                p.Z.lang("repositories.delete_cases_button")
              );
            (s.onSuccess = () => {
              let t = { ids: e };
              return l.N.post(
                "repositories/delete_cases/" + this.projectId,
                l.N.toNetworkCase(t)
              ).then(() =>
                this.refreshFragments("groupCases").then(() => {
                  _.includes(e, this.pageState.caseId) && this.clearCase();
                })
              );
            }),
              s.show();
          }
          updateEmptyRepository() {
            this.hasEmptyTreePlaceholderTarget &&
              (this.clearCase(),
              this.components.mix.hideDetails(),
              this.updateUrl());
          }
          editCase(e) {
            return l.N.post("repositories/render_update_case/" + e)
              .then((t) => {
                const s = new v.q(
                  v.G.Edit,
                  this.projectId,
                  this.pageState.groupId,
                  e
                );
                return (
                  (s.onSuccess = (t) => {
                    let s = [this.updateCaseRows([e])];
                    if (this.pageState.caseId == e) {
                      let e = ["caseProperties"];
                      this.components.caseTabs &&
                        3 == this.components.caseTabs.getCurrentTab() &&
                        e.push("caseHistoryPage"),
                        s.push(this.refreshFragments(...e));
                    }
                    return Promise.all(s);
                  }),
                  s.show(t.data)
                );
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          editCases(e) {
            let t = { ids: e };
            return l.N.post(
              "repositories/render_update_cases/" + this.projectId,
              l.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new T(e, this.projectId);
                return (
                  (s.onSuccess = (t) => {
                    let s = [this.updateCaseRows(e)];
                    if (_.includes(e, this.pageState.caseId)) {
                      let e = ["caseProperties"];
                      this.components.caseTabs &&
                        3 == this.components.caseTabs.getCurrentTab() &&
                        e.push("caseHistoryPage"),
                        s.push(this.refreshFragments(...e));
                    }
                    return Promise.all(s);
                  }),
                  s.show(t.data)
                );
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          addCase(e, t) {
            let s = $(this.addCaseIconTargets);
            const i = (e, n) => {
              o.UI.loading(e, () =>
                l.N.post("repositories/render_create_case/" + this.projectId)
                  .then((e) => {
                    const o = new v.q(
                      v.G.Add,
                      this.projectId,
                      this.pageState.groupId,
                      null,
                      !1,
                      n
                    );
                    return (
                      (o.onSuccess = (e) =>
                        t(e).then(() => {
                          o.getAddAnotherCase() && i(s, !0);
                        })),
                      o.show(e.data)
                    );
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              );
            };
            i(e, !1);
          }
          doAddCase() {
            let e = $(this.addCaseIconTargets);
            o.UI.getIconActionEnabled(e) &&
              this.addCase(e, (e) =>
                this.hasNodataAddCaseButtonTarget
                  ? this.refreshFragments("treeGroupContainers")
                  : this.refreshFragments("groupCases")
              );
          }
          doEmptyGroupAddCase(e) {
            this.addCase($(e.currentTarget), (e) =>
              this.refreshFragments("groupCases")
            );
          }
          doNodataAddCase(e) {
            this.addCase($(e.currentTarget), (e) =>
              this.refreshFragments("treeGroupContainers")
            );
          }
          doEditCases() {
            let e = $(this.editCasesIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = this.components.cases.getSelectedIds();
            o.UI.loading(e, () => this.editCases(t));
          }
          doDeleteCases() {
            let e = $(this.deleteCasesIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = this.components.cases.getSelectedIds();
            this.deleteCases(t);
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () => this.selectColumns(t));
          }
          selectColumns(e) {
            let t = { columns: this.pageState.columns, showWidth: !0 };
            return l.N.post(
              "repositories/render_case_columns/" + this.projectId,
              l.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new u.D();
                (s.onSubmit = (e) => {
                  let t = { columns: e };
                  return l.N.post(
                    "repositories/save_case_columns/" + this.projectId,
                    l.N.toNetworkCase(t)
                  ).then(
                    () => (
                      (this.pageState.columns = e),
                      this.refreshFragments("groupCases")
                    )
                  );
                }),
                  s.show(e, K.Fz.BottomRight, t.data);
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          showCasesContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let r = [];
            e.getSelectedRows().length <= 1
              ? (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "edit",
                    title: p.Z.lang("repositories.edit_case"),
                    callback: this.doCasesContextMenuSingleClick,
                  }),
                this.canAddEdit &&
                  this.canDelete &&
                  r.push({ type: "divider" }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: p.Z.lang("repositories.delete_case"),
                    callback: this.doCasesContextMenuSingleClick,
                  }))
              : (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "edit",
                    title: p.Z.lang("repositories.edit_cases"),
                    callback: this.doCasesContextMenuMultipleClick,
                  }),
                this.canAddEdit &&
                  this.canDelete &&
                  r.push({ type: "divider" }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: p.Z.lang("repositories.delete_cases"),
                    callback: this.doCasesContextMenuMultipleClick,
                  })),
              new c.x(r, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, K.Fz.BottomLeft);
          }
          activateCase(e, t, s, i) {
            let o = this.components.mix.getDetailsVisible(),
              n = this.components.mix.getMode(),
              r = e.getActivatedRow();
            return (
              o
                ? this.components.detailsContent.markLoading()
                : (this.components.detailsContent.showContent(
                    d.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
              e.loading(
                "actionfield",
                i,
                () => (
                  e.markActivatedRow(s),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "caseContainer",
                    { caseId: t },
                  ])
                    .then((e) => {
                      (this.pageState.caseId = t),
                        this.components.detailsContent.markCompleted(),
                        this.components.detailsContent.showContent(
                          d.g.MixContentContent
                        ),
                        this.components.detailsContent.scrollTop(),
                        this.updateUrl(),
                        this.refreshActions();
                    })
                    .catch((t) => {
                      o
                        ? this.components.detailsContent.markCompleted()
                        : this.components.mix.setMode(n),
                        e.markActivatedRow(r),
                        f.Z.handleError(t);
                    })
                )
              )
            );
          }
          keyDown(e) {
            e.which == n.N.ESC
              ? this.components.caseAddCommentEditor &&
                this.components.caseAddCommentEditor.getFocused()
                ? this.hideCaseAddCommentEditor()
                : this.components.caseEditCommentEditor &&
                  this.components.caseEditCommentEditor.getFocused()
                ? this.endCommentEditing()
                : this.components.mix.hideDetails()
              : e.which == n.N.S &&
                (e.ctrlKey || e.metaKey) &&
                (this.components.caseAddCommentEditor &&
                this.components.caseAddCommentEditor.getFocused()
                  ? this.components.caseAddCommentEditor.submit()
                  : this.components.caseEditCommentEditor &&
                    this.components.caseEditCommentEditor.getFocused() &&
                    this.components.caseEditCommentEditor.submit());
          }
          doAddInlineAddCase(e) {
            let t = $(this.addInlineAddButtonTarget);
            o.UI.loading(t, () => this.addInlineAddCase());
          }
          doAddInlineSelectState(e) {
            let t = $(this.addInlineSelectStateButtonTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.groupAddCaseContainerTarget),
              i = s.data("statesMenu");
            const n = new ee(s.data("stateId"));
            (n.onSuccess = (e) => {
              s.data("stateId", e.id),
                $(this.addInlineSelectStateButtonTarget)
                  .children()
                  .first()
                  .replaceWith(e.iconHtml);
            }),
              n.show(t, K.Fz.TopLeft, i);
          }
          doAddInlineInputKeydown(e) {
            if (e.which == n.N.Enter) {
              e.stopPropagation();
              let t = $(this.addInlineInputTarget);
              o.UI.loading(t.parent(), () => this.addInlineAddCase());
            } else
              e.which == n.N.ESC &&
                (e.stopPropagation(), this.addInlineClear());
          }
          addInlineAddCase() {
            let e = $(this.addInlineInputTarget),
              t = o.UI.getText(e).trim();
            if ((o.UI.setText(e, t), 0 == t.length))
              return void o.UI.focusText(e);
            let s = $(this.groupAddCaseContainerTarget).data("stateId"),
              i = { name: t, folderId: this.pageState.groupId };
            return (
              s && (i.stateId = s),
              l.N.post(
                "repositories/create_case_inline/" + this.projectId,
                l.N.toNetworkCase(i)
              )
                .then((t) =>
                  this.refreshFragments("groupCases").then(() => {
                    o.UI.clearText(e), o.UI.focusText(e);
                  })
                )
                .catch((t) => {
                  r.l.handleCustomFormError(t, (t, s) => {
                    new he.u(
                      he.Y.Negative,
                      p.Z.lang("repositories.inline_add_failed"),
                      p.Z.htmlEscape(s.join(" "))
                    ).show(e, K.Fz.TopLeft);
                  });
                })
            );
          }
          addInlineClear() {
            let e = $(this.addInlineInputTarget);
            o.UI.clearText(e);
          }
          doShowCaseTransitionPopup(e) {
            let t = $(this.showCaseTransitionPopupIconTarget);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                l.N.post(
                  "repositories/render_case_transitions/" +
                    this.pageState.caseId
                )
                  .then((e) => {
                    new ce.r().show(t, K.Fz.BottomRight, e.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              );
          }
          refreshCasesFolderNames() {
            this.hasGroupContentTarget &&
              $(this.groupContentTarget).toggleClass(
                this.classes.groupContentWithFolderNames,
                this.pageState.groupBy != d.g.RepositoryGroupByFolder &&
                  this.groupFolderNames
              );
          }
          doShowFolderNameMenu() {
            let e = $(this.showFolderNameMenuActionTargets).filter(
              this.selectors.visible
            );
            if (!o.UI.getSelectActionEnabled(e)) return;
            let t = $(this.showFolderNameMenuIconTargets).filter(
              this.selectors.visible
            );
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "show",
              title: p.Z.lang("repositories.folder_name_show"),
              callback: this.doFolderNameMenuClick,
              active: this.groupFolderNames,
            }),
              s.push({
                type: "action",
                name: "hide",
                title: p.Z.lang("repositories.folder_name_dont_show"),
                callback: this.doFolderNameMenuClick,
                active: !this.groupFolderNames,
              }),
              new c.x(s).show(t, K.Fz.BottomLeft);
          }
          doCopyCases() {
            let e = $(this.copyButtonTarget);
            o.UI.loading(e, () =>
              l.N.post("repositories/render_copy/" + this.projectId)
                .then((e) => {
                  const t = new b(this.projectId);
                  return (
                    (t.onSuccess = (e) => this.refreshTreeGroup()),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          doShowImportMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            this.canAddEdit &&
              (s.push({
                type: "action",
                name: "csv",
                title: p.Z.lang("repositories.import_from_csv"),
                callback: this.doImportMenuClick,
              }),
              s.push({
                type: "action",
                name: "tlx",
                title: p.Z.lang("repositories.import_from_tlx"),
                callback: this.doImportMenuClick,
              })),
              new c.x(s, {
                additionalClasses: this.classes.popupNoMinWidth,
              }).show(t, K.Fz.BottomRight);
          }
          doShowExportMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: p.Z.lang("repositories.export_to_csv"),
              callback: this.doExportMenuClick,
            }),
              s.push({
                type: "action",
                name: "pdf",
                title: p.Z.lang("repositories.export_to_pdf"),
                callback: this.doExportMenuClick,
              }),
              new c.x(s, {
                additionalClasses: this.classes.popupNoMinWidth,
              }).show(t, K.Fz.BottomRight);
          }
          getCurrentFilters() {
            return this.pageState.filter;
          }
          getCurrentColumns() {
            return this.pageState.columns;
          }
        }
        ge(pe, "targets", [
          "responsiveContainer",
          "addFolderIcon",
          "groupingMenuIcon",
          "refreshIcon",
          "filterIcon",
          "filterIconLabel",
          "addCaseIcon",
          "editCasesIcon",
          "deleteCasesIcon",
          "selectColumnsIcon",
          "groupPropertyContainer",
          "groupAddCaseContainer",
          "groupCasesContainer",
          "groupEmptyContainer",
          "groupProperties",
          "groupPropertiesDocs",
          "previousCaseIcon",
          "nextCaseIcon",
          "caseProperties",
          "editCaseIcon",
          "addInlineSelectStateButton",
          "addInlineAddButton",
          "addInlineInput",
          "showCaseTransitionPopupIcon",
          "nodataAddCaseButton",
          "nodataAddFolderButton",
          "groupContent",
          "emptyTreePlaceholder",
          "emptyGroupAddCaseButton",
          "caseResultsTab",
          "caseResultsFilterIconLabel",
          "caseResultsFilterIcon",
          "caseCommentsContainer",
          "showFolderNameMenuAction",
          "showFolderNameMenuIcon",
          "caseAddCommentPlaceholder",
          "importButton",
          "copyButton",
          "exportButton",
          "groupHeaderToolbar",
          "groupItemCount",
          "groupPropertiesTitle",
        ]);
      },
      83980: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => b });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(11802),
          a = s(43689),
          l = s(47914),
          d = s(15612),
          h = s(21077),
          c = s(69555);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends c.GI {
          constructor(e, t, s) {
            super("repositories.print_configure_popup"),
              (this.flags = e),
              (this.caseMode = t),
              (this.folderMode = s);
          }
          load() {
            n.UI.setCheckbox(this.$showHeader, this.flags.show_header),
              n.UI.setCheckbox(this.$showContext, this.flags.show_context),
              n.UI.setCheckbox(this.$showFooter, this.flags.show_footer),
              n.UI.setCheckbox(this.$showLinks, this.flags.show_links),
              n.UI.setCheckbox(this.$showImages, this.flags.show_images),
              n.UI.setCheckbox(this.$showUsers, this.flags.show_users),
              this.caseMode == d.g.RepositoryPrintCaseModeDetails
                ? n.UI.setRadio(this.$caseModeDetails, !0)
                : n.UI.setRadio(this.$caseModeList, !0),
              this.folderMode == d.g.RepositoryPrintFolderModeName
                ? n.UI.setRadio(this.$folderModeName, !0)
                : this.folderMode == d.g.RepositoryPrintFolderModeFull
                ? n.UI.setRadio(this.$folderModeFull, !0)
                : n.UI.setRadio(this.$folderModeNone, !0);
          }
          doApply() {
            let e = d.g.RepositoryPrintCaseModeList;
            n.UI.getRadio(this.$caseModeDetails) &&
              (e = d.g.RepositoryPrintCaseModeDetails);
            let t = d.g.RepositoryPrintFolderModeNone;
            n.UI.getRadio(this.$folderModeName)
              ? (t = d.g.RepositoryPrintFolderModeName)
              : n.UI.getRadio(this.$folderModeFull) &&
                (t = d.g.RepositoryPrintFolderModeFull),
              this.triggerSuccess({
                flags: {
                  show_header: n.UI.getCheckbox(this.$showHeader),
                  show_context: n.UI.getCheckbox(this.$showContext),
                  show_footer: n.UI.getCheckbox(this.$showFooter),
                  show_links: n.UI.getCheckbox(this.$showLinks),
                  show_images: n.UI.getCheckbox(this.$showImages),
                  show_users: n.UI.getCheckbox(this.$showUsers),
                },
                caseMode: e,
                folderMode: t,
              });
          }
        }
        u(g, "actions", ["doApply"]),
          u(g, "targets", [
            "showHeader",
            "showContext",
            "showFooter",
            "showLinks",
            "showImages",
            "showUsers",
            "caseModeList",
            "caseModeDetails",
            "folderModeNone",
            "folderModeName",
            "folderModeFull",
            "applyButton",
          ]);
        var p = s(24850),
          m = s(55885),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b extends i.v {
          constructor(...e) {
            super(...e),
              C(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.columns = this.params.columns),
              (this.filter = this.params.filter),
              (this.flags = this.params.flags),
              (this.caseMode = this.params.caseMode),
              (this.folderMode = this.params.folderMode),
              this.filter &&
                0 == _.keys(this.filter.conditions).length &&
                (this.filter = null),
              f.Z.requestChild(this.component, "printFrame", {
                onAdded: () => {
                  this.refreshContent();
                },
              }),
              n.UI.initialize(this.element),
              this.shortcuts.register(r.N.P, this.doShortcutPrint, {
                control: !0,
              });
          }
          doConfigure() {
            let e = $(this.configureIconTarget);
            if (n.UI.popupVisible(e)) return;
            const t = new g(this.flags, this.caseMode, this.folderMode);
            (t.onSuccess = (e) => {
              (this.flags = e.flags),
                (this.caseMode = e.caseMode),
                (this.folderMode = e.folderMode),
                this.refreshContent();
            }),
              t.show(e, c.Fz.BottomRight);
          }
          doPrint() {
            this.print();
          }
          print() {
            this.components.printFrame.print();
          }
          doRefresh() {
            n.UI.loading($(this.refreshIconTarget), () =>
              this.refreshContent()
            );
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTarget);
            n.UI.popupVisible(e) ||
              n.UI.loading(e, () => this.selectColumns(e));
          }
          selectColumns(e) {
            let t = {
              columns: this.columns,
              showWidth: !0,
              defaultWidth: d.g.MixColumnWidthDefaultPrint,
            };
            return o.N.post(
              "repositories/render_case_columns/" + this.projectId,
              o.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new h.D(
                  !!window.opener?.appInstance?.layout?.page?.getCurrentColumns,
                  a.Z.lang("repositories.apply_columns")
                );
                s.events.on("externalaction", (e) => {
                  e.target.hide();
                  let t = [];
                  window.opener?.appInstance?.layout?.page?.getCurrentColumns &&
                    (t =
                      window.opener.appInstance.layout.page.getCurrentColumns()),
                    (this.columns = t),
                    this.refreshContent();
                }),
                  (s.onSubmit = (e) => {
                    (this.columns = e), this.refreshContent();
                  }),
                  s.show(e, c.Fz.BottomRight, t.data);
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          doCancelFilter() {
            let e = $(this.filterIconTarget);
            n.UI.popupVisible(e) && n.UI.getVisiblePopup(e).hide(),
              this.saveFilter(l.X.EmptyFilter),
              this.refreshContent();
          }
          doFilter() {
            let e = $(this.filterIconTarget),
              t = $(this.filterIconLabelTarget);
            n.UI.popupVisible(t) ||
              n.UI.loading(e, () => {
                let e = this.filter ? this.filter : l.X.EmptyFilter;
                return o.N.post(
                  "repositories/render_case_filter/" + this.projectId,
                  o.N.toNetworkCase(e)
                )
                  .then((e) => {
                    const s = new p.y(
                      !!window.opener?.appInstance?.layout?.page
                        ?.getCurrentFilters,
                      a.Z.lang("repositories.apply_filter")
                    );
                    s.events.on("selectfolders", (e) => {
                      let t = { selected: e.ids };
                      return o.N.post(
                        "repositories/render_select_folders/" + this.projectId,
                        o.N.toNetworkCase(t)
                      ).then((t) => {
                        const i = new m._();
                        s.addActiveDialog(i),
                          (i.onHidden = () => {
                            s.removeActiveDialog(i);
                          }),
                          (i.onSuccess = (t) => {
                            let s = { selected: t };
                            return o.N.post(
                              "repositories/render_case_filter_folders/" +
                                this.projectId,
                              o.N.toNetworkCase(s)
                            ).then((t) => {
                              e.target.setFolderFilterContent(e.name, t.data);
                            });
                          }),
                          i.show(t.data);
                      });
                    }),
                      s.events.on("externalaction", (e) => {
                        e.target.hide();
                        let t = l.X.EmptyFilter;
                        window.opener?.appInstance?.layout?.page
                          ?.getCurrentFilters &&
                          (t =
                            window.opener.appInstance.layout.page.getCurrentFilters()),
                          this.saveFilter(t),
                          this.refreshContent();
                      }),
                      (s.onSubmit = (e) => {
                        this.saveFilter(e.filter), this.refreshContent();
                      }),
                      s.show(t, c.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  });
              });
          }
          saveFilter(e) {
            let t = e ? _.keys(e.conditions).length : 0;
            this.filter = t > 0 ? e : null;
            let s = $(this.filterIconTarget);
            n.UI.setSelectActionCount(s, t);
          }
          refreshContent() {
            let e = {
              folderMode: this.folderMode,
              caseMode: this.caseMode,
              showHeader: this.flags.show_header,
              showContext: this.flags.show_context,
              showFooter: this.flags.show_footer,
              showLinks: this.flags.show_links,
              showImages: this.flags.show_images,
              showUsers: this.flags.show_users,
              filter: this.filter,
              columns: this.columns,
            };
            return this.components.printFrame.loadPost(
              "repositories/render_print_frame/" + this.projectId,
              o.N.toNetworkCase(e)
            );
          }
        }
        C(b, "targets", [
          "contentContainer",
          "printButton",
          "refreshIcon",
          "selectColumnsIcon",
          "filterIcon",
          "filterIconLabel",
          "configureIcon",
        ]);
      },
      41885: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => v });
        var i = s(89432),
          o = s(96622),
          n = s(43689),
          r = s(13814),
          a = s(16087),
          l = s(73739),
          d = s(50609),
          h = s(47914),
          c = s(7042),
          u = s(132),
          g = s(69555),
          p = s(42722),
          m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends d.V {
          constructor(e, t, s) {
            super("resources.add_attachments_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: h.X.BodyMinWidth,
              height: 550,
              minHeight: 550,
              resizable: !0,
            }),
              f(this, "classes", {
                dropzoneDragging:
                  "resources-attachments-upload__file__dropzone--dragging",
                fileSectionUploading:
                  "resources-attachments-upload__file--uploading",
              }),
              f(this, "selectors", {
                controlItem: ".resources-attachment-controls__item",
              }),
              f(this, "doClipboardPaste", (e, t) => {
                t.files.length > 0 &&
                  (this.uploadAttachments(t.files), e.preventDefault());
              }),
              f(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              f(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              f(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              f(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAttachments(t);
              }),
              f(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAttachments(t.files),
                  o.UI.clearFile(this.$fileInput);
              }),
              (this.entity = e),
              (this.objectId = t),
              (this.projectId = s),
              (this.dragLeaveTimer = null);
          }
          load() {
            m.Z.requestChild(this.component, "fileCountProgress"),
              m.Z.requestChild(this.component, "fileByteProgress"),
              this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              this.refreshSubmitButton(),
              (this.receiver = m.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              m.Z.clipboard.removeReceiver(this.receiver);
          }
          doAddScreenshot(e) {
            const t = $(e.currentTarget);
            o.UI.popupVisible(t) || new p.j().show(t, g.Fz.BottomCenter);
          }
          uploadAttachments(e) {
            let t = [...e],
              s = 0,
              i = e.length;
            this.components.fileByteProgress.setProgress(0, 1),
              this.components.fileCountProgress.setProgress(
                s,
                i,
                n.Z.lang("resources.add_attachments_progress_caption", {
                  count: 1,
                  total: i,
                })
              );
            let a = !1;
            c.l.hideValidationErrors(this.formViews),
              o.UI.markLoading(this.$fileSection),
              this.$fileSection.addClass(this.classes.fileSectionUploading),
              t
                .reduce(
                  (e, t) =>
                    e.then(() => {
                      if (a) return Promise.resolve();
                      let e = new FormData();
                      return (
                        e.append("attachment", t),
                        this.components.fileByteProgress.setProgress(0, 1),
                        r.N.post("attachments/create/" + this.projectId, e, {
                          onUploadProgress: (e) => {
                            this.components.fileByteProgress.setProgress(
                              e.loaded,
                              e.total
                            );
                          },
                        })
                          .then(
                            (e) => (
                              (s += 1),
                              this.components.fileByteProgress.setProgress(
                                1,
                                1
                              ),
                              this.components.fileCountProgress.setProgress(
                                s,
                                i,
                                n.Z.lang(
                                  "resources.add_attachments_progress_caption",
                                  { count: s < i ? s + 1 : i, total: i }
                                )
                              ),
                              r.N.post(
                                "attachments/render_create_control/" + e.data.id
                              ).then((t) => {
                                let s = $(t.data);
                                s.data("id", e.data.id),
                                  o.UI.initialize(s),
                                  this.$attachmentControls.append(s),
                                  this.refreshSubmitButton();
                              })
                            )
                          )
                          .then(
                            () =>
                              new Promise(function (e, t) {
                                setTimeout(function () {
                                  e();
                                }, 200);
                              })
                          )
                          .catch((e) => {
                            c.l.handleFormError(e, this.formViews),
                              this.refreshPositionIfNeeded(),
                              (a = !0);
                          })
                      );
                    }),
                  Promise.resolve()
                )
                .then(() => {
                  o.UI.markCompleted(this.$fileSection),
                    this.$fileSection.removeClass(
                      this.classes.fileSectionUploading
                    ),
                    this.rebindAll();
                });
          }
          doDeleteControl(e) {
            let t = $(e.target),
              s = t.closest(this.selectors.controlItem),
              i = o.UI.getClosestIconAction(t);
            if (o.UI.popupVisible(i)) return;
            const r = new u.l(
              n.Z.lang("resources.add_attachments_really_remove")
            );
            (r.onSuccess = () => {
              s.remove(), this.refreshSubmitButton();
            }),
              r.show(i, g.Fz.BottomRight);
          }
          doSubmit() {
            o.UI.markLoading(this.$submitButton),
              c.l.hideValidationErrors(this.formViews);
            let e = [];
            $(this.selectors.controlItem, this.$attachmentControls).each(
              (t, s) => {
                let i = $(s);
                e.push({
                  name:
                    o.UI.getText(o.UI.getTarget("name", i)) +
                    o.UI.getTarget("extension", i).text(),
                  note: o.UI.getText(o.UI.getTarget("note", i)),
                  attachment_id: i.data("id"),
                });
              }
            ),
              r.N.post(this.entity + "/create_attachments/" + this.objectId, e)
                .then((e) =>
                  this.triggerSuccess(e.data).then(() => {
                    o.UI.markCompleted(this.$submitButton);
                  })
                )
                .catch((e) => {
                  o.UI.markCompleted(this.$submitButton),
                    c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
          }
          refreshSubmitButton() {
            o.UI.toggleButtonEnabled(
              this.$submitButton,
              this.$attachmentControls.children().length > 0
            );
          }
        }
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        f(C, "forms", [
          { name: "attachments", fields: ["name", "url", "note"] },
        ]),
          f(C, "targets", [
            "submitButton",
            "fileInput",
            "fileSection",
            "dropzone",
            "attachmentControls",
          ]),
          f(C, "actions", ["doSubmit", "doDeleteControl", "doAddScreenshot"]);
        class I extends d.V {
          constructor(e, t, s) {
            super("resources.edit_attachment_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: h.X.BodyMinWidth,
            }),
              b(this, "classes", {
                dropzoneDragging:
                  "resources-attachments-upload__file__dropzone--dragging",
                fileSectionUploading:
                  "resources-attachments-upload__file--uploading",
                fileSectionSuccess:
                  "resources-attachments-upload__file--success",
              }),
              b(this, "doClipboardPaste", (e, t) => {
                t.files.length > 0 &&
                  (this.uploadAttachment(t.files[0]), e.preventDefault());
              }),
              b(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              b(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              b(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              b(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAttachment(t[0]);
              }),
              b(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAttachment(t.files[0]);
              }),
              (this.entity = e),
              (this.attachmentId = t),
              (this.projectId = s),
              (this.newAttachmentId = null),
              (this.dragLeaveTimer = null);
          }
          load() {
            m.Z.requestChild(this.component, "fileByteProgress"),
              this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              (this.receiver = m.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              m.Z.clipboard.removeReceiver(this.receiver);
          }
          doAddScreenshot(e) {
            const t = $(e.currentTarget);
            o.UI.popupVisible(t) || new p.j().show(t, g.Fz.TopCenter);
          }
          uploadAttachment(e) {
            this.components.fileByteProgress.setProgress(0, 1),
              (this.cancelled = !1),
              c.l.hideValidationErrors(this.formViews),
              o.UI.markLoading(this.$fileSection),
              this.$fileSection.addClass(this.classes.fileSectionUploading),
              this.$fileSection.removeClass(this.classes.fileSectionSuccess);
            let t = new FormData();
            t.append("attachment", e),
              r.N.post("attachments/create/" + this.projectId, t, {
                onUploadProgress: (e) => {
                  this.components.fileByteProgress.setProgress(
                    e.loaded,
                    e.total
                  );
                },
              })
                .then(
                  (e) => (
                    (this.newAttachmentId = e.data.id),
                    new Promise(function (e, t) {
                      setTimeout(function () {
                        e();
                      }, 100);
                    })
                  )
                )
                .then(() => {
                  this.$fileSection.addClass(this.classes.fileSectionSuccess);
                  let t = "." + n.Z.getFileExtension(e.name);
                  t != this.$extension.text() &&
                    (this.$extension.text(t),
                    o.UI.setText(this.$name, n.Z.getFileBasename(e.name)),
                    o.UI.focusText(this.$name));
                })
                .catch((e) => {
                  c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                })
                .then(() => {
                  o.UI.markCompleted(this.$fileSection),
                    this.$fileSection.removeClass(
                      this.classes.fileSectionUploading
                    );
                });
          }
          doSubmit() {
            o.UI.markLoading(this.$submitButton),
              c.l.hideValidationErrors(this.formViews);
            let e,
              t = {
                name:
                  o.UI.getText(this.$name) +
                  o.UI.getTarget("extension", this.$attachment).text(),
                note: o.UI.getText(this.$note),
              };
            this.newAttachmentId
              ? ((t.attachmentId = this.newAttachmentId),
                (e = this.entity + "/replace_attachment/" + this.attachmentId))
              : (e = this.entity + "/update_attachment/" + this.attachmentId),
              r.N.post(e, r.N.toNetworkCase(t))
                .then((e) =>
                  this.triggerSuccess(e.data).then(() => {
                    o.UI.markCompleted(this.$submitButton);
                  })
                )
                .catch((e) => {
                  o.UI.markCompleted(this.$submitButton),
                    c.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
          }
        }
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        b(I, "forms", [
          { name: "attachment", fields: ["name", "extension", "note"] },
        ]),
          b(I, "targets", [
            "submitButton",
            "fileInput",
            "fileSection",
            "dropzone",
          ]),
          b(I, "actions", ["doSubmit", "doAddScreenshot"]);
        class v extends i.d {
          constructor(...e) {
            super(...e),
              w(this, "selectors", {
                resourceItem: ".split-resource-list__item",
              }),
              w(this, "classes", {
                itemActionsVisible:
                  "split-resource-list__item--actions-visible",
              }),
              w(this, "doAddLinkClick", (e) => {
                e.target.hide(),
                  o.UI.markLoading(this.$addLink),
                  r.N.post(this.entity + "/render_create_link")
                    .then((e) => {
                      o.UI.markCompleted(this.$addLink);
                      const t = new l.P(l.G.Add, this.entity, this.objectId);
                      (t.onSuccess = () => this.refreshContent()),
                        t.show(e.data);
                    })
                    .catch((e) => {
                      o.UI.markCompleted(this.$addLink), m.Z.handleError(e);
                    });
              }),
              w(this, "doAddAttachmentClick", (e) => {
                e.target.hide(),
                  o.UI.markLoading(this.$addLink),
                  r.N.post(this.entity + "/render_create_attachments")
                    .then((e) => {
                      o.UI.markCompleted(this.$addLink);
                      const t = new C(
                        this.entity,
                        this.objectId,
                        this.projectId
                      );
                      (t.onSuccess = () => this.refreshContent()),
                        t.show(e.data);
                    })
                    .catch((e) => {
                      o.UI.markCompleted(this.$addLink), m.Z.handleError(e);
                    });
              });
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.entity = this.params.entity),
              (this.objectId = this.params.objectId),
              (this.projectId = this.params.projectId),
              this.hasAddLinkTarget && (this.$addLink = $(this.addLinkTarget));
          }
          unload() {}
          doAdd() {
            if (o.UI.popupVisible(this.$addLink)) return;
            const e = [];
            e.push({
              type: "action",
              name: "addlink",
              title: n.Z.lang("resources.add_link"),
              callback: this.doAddLinkClick,
            }),
              e.push({
                type: "action",
                name: "addattachments",
                title: n.Z.lang("resources.add_file"),
                callback: this.doAddAttachmentClick,
              }),
              new a.x(e).show(this.$addLink, g.Fz.BottomRight);
          }
          doEditLink(e) {
            let t = $(e.target);
            this.editResource(t, "link");
          }
          doEditAttachment(e) {
            let t = $(e.target);
            this.editResource(t, "attachment");
          }
          editResource(e, t) {
            let s = e.closest(this.selectors.resourceItem),
              i = o.UI.getClosestIconAction(e),
              n = s.data("id");
            o.UI.markLoading(i),
              s.addClass(this.classes.itemActionsVisible),
              r.N.post(`${this.entity}/render_update_${t}/${n}`)
                .then((e) => {
                  let r;
                  o.UI.markCompleted(i),
                    s.removeClass(this.classes.itemActionsVisible),
                    (r =
                      "link" == t
                        ? new l.P(l.G.Edit, this.entity, n)
                        : new I(this.entity, n, this.projectId)),
                    (r.onSuccess = () => this.refreshContent()),
                    r.show(e.data);
                })
                .catch((e) => {
                  o.UI.markCompleted(i),
                    s.removeClass(this.classes.itemActionsVisible),
                    m.Z.handleError(e);
                });
          }
          doDeleteLink(e) {
            let t = $(e.target);
            this.deleteResource(
              t,
              "link",
              n.Z.lang("resources.really_delete_link")
            );
          }
          doDeleteAttachment(e) {
            let t = $(e.target);
            this.deleteResource(
              t,
              "attachment",
              n.Z.lang("resources.really_delete_attachment")
            );
          }
          deleteResource(e, t, s) {
            let i = e.closest(this.selectors.resourceItem),
              n = o.UI.getClosestIconAction(e),
              a = i.data("id");
            if (o.UI.popupVisible(n)) return;
            i.addClass(this.classes.itemActionsVisible);
            const l = new u.l(s);
            (l.onSuccess = () => {
              o.UI.markLoading(n),
                r.N.post(`${this.entity}/delete_${t}/${a}`)
                  .then(() => this.refreshContent())
                  .catch((e) => {
                    o.UI.markCompleted(n),
                      i.removeClass(this.classes.itemActionsVisible),
                      m.Z.handleError(e);
                  });
            }),
              (l.onHide = (e) => {
                e || i.removeClass(this.classes.itemActionsVisible);
              }),
              l.show(n, g.Fz.BottomLeft);
          }
          disableEditing() {
            this.$addLink.parent().hide();
          }
          refreshContent() {
            return r.N.postReplace(
              this.entity + "/render_resources/" + this.objectId,
              this.contentContainerTarget
            ).then(() => {
              o.UI.initialize(this.contentContainerTarget);
            });
          }
        }
        w(v, "targets", ["addLink", "contentContainer"]);
      },
      86182: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i = s(34740),
          o = s(96622),
          n = s(13814),
          r = s(15331),
          a = s(69555),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends i.BaseController {
          constructor(...e) {
            super(...e),
              d(this, "doResultGroupsChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["resultPage", { state: e.state }])
                )
              ),
              d(this, "renderResultPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  this.resultsStatuses && (t.statuses = this.resultsStatuses),
                  n.N.post(
                    "runs/render_result_page/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.page = { name: "activity" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClose = this.params.canClose),
              (this.canDelete = this.params.canDelete),
              (this.canClosedDelete = this.params.canClosedDelete),
              (this.resultsStatuses = null),
              o.UI.initialize(this.element),
              l.Z.requestChild(this.component, "resources"),
              l.Z.requestChild(this.component, "resultGroups", {
                events: { statechange: this.doResultGroupsChange },
              }),
              (this.fragmentsAfterEdit = ["about", "header"]),
              (this.fragmentsAfterClose = ["about", "header"]),
              (this.fragmentsAfterAssign = ["resultPage", "about"]),
              this.registerBaseFragments(),
              this.fragments.register("resultPage", this.renderResultPage);
          }
          doListFilter(e) {
            let t = $(this.listFilterIconTarget),
              s = $(this.listFilterIconLabelTarget);
            o.UI.popupVisible(s) ||
              o.UI.loading(t, () => {
                let e = {};
                return (
                  this.resultsStatuses && (e.selected = this.resultsStatuses),
                  n.N.post(
                    "runs/render_result_status_filter/" + this.run.id,
                    n.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const i = new r.d();
                      (i.onSubmit = (e) => (
                        e.condition.values && e.condition.values.length > 0
                          ? (this.resultsStatuses = e.condition.values)
                          : (this.resultsStatuses = null),
                        this.refreshFragments("resultPage").then(() => {
                          e.condition.values && e.condition.values.length > 0
                            ? o.UI.setSelectActionCount(
                                t,
                                e.condition.values.length
                              )
                            : o.UI.setSelectActionCount(t, 0);
                        })
                      )),
                        i.show(s, a.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      l.Z.handleError(e);
                    })
                );
              });
          }
          doListCancelFilter(e) {
            let t = $(this.listFilterIconTarget);
            o.UI.loading(
              t,
              () => (
                (this.resultsStatuses = null),
                this.refreshFragments("resultPage").then(() => {
                  o.UI.setSelectActionCount(t, 0);
                })
              )
            );
          }
          afterClose() {
            return Promise.all([
              this.refreshFragments(...this.fragmentsAfterClose),
              this.components.resources.refreshContent(),
            ]).then(() => {
              this.components.resources.disableEditing();
            });
          }
        }
        d(h, "targets", [
          "aboutSection",
          "assignButton",
          "closeButton",
          "duplicateButton",
          "editButton",
          "editMenuButton",
          "exportButton",
          "headerStatsBar",
          "listFilterIcon",
          "listFilterIconLabel",
          "listFilterIconReset",
          "responsiveContainer",
          "showInfoIcon",
          "showMilestonePopupIcon",
          "showTransitionPopupIcon",
        ]);
      },
      17632: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => I });
        var i = s(50307),
          o = s(47914),
          n = s(96622),
          r = s(3461),
          a = s(13814),
          l = s(43689),
          d = s(69555),
          h = s(16087),
          c = s(62612),
          u = s(67694),
          g = s(22143),
          p = s(48995),
          m = s(4989),
          f = s(710),
          C = s(5270);
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class I extends i.BaseController {
          constructor(...e) {
            super(...e),
              b(this, "selectors", { row: "tr" }),
              b(this, "doSelectionChange", () => {
                this.updateExportButton();
              }),
              b(this, "doStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["table", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              b(this, "doActionClick", (e) => {
                "menu" === e.actionName &&
                  this.showContextMenu(
                    e.target,
                    e.id,
                    e.$action,
                    e.$row,
                    e.$field
                  );
              }),
              b(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "delete":
                    this.deleteRun(e.context.id, e.context.$row);
                    break;
                  case "duplicate":
                    this.duplicateRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                }
              }),
              b(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.runs.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteRuns(t);
                    break;
                  case "duplicate":
                    this.duplicateRuns(e.context.table, t, e.context.$field);
                }
              }),
              b(this, "renderTabs", () =>
                a.N.post("runs/render_tabs/" + this.projectId, { tab: 1 })
              ),
              b(this, "renderMetrics", () =>
                a.N.post("runs/render_index_metrics/" + this.projectId)
              ),
              b(this, "renderTable", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = e.state ? e.state : this.components.runs.getState();
                return (
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  a.N.post(
                    "runs/render_closed_table/" + this.projectId,
                    a.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClosedDelete = this.params.canClosedDelete),
              (this.filter = this.params.filter || o.X.EmptyFilter),
              C.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              C.Z.requestChild(this.component, "runs", {
                onAdded: (e) => {
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveRunContent(e);
                  this.updateExportButton();
                },
                onRemoved: (e) => {
                  this.updateExportButton();
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                  selectionchange: this.doSelectionChange,
                },
              }),
              n.UI.initialize(this.element),
              this.fragments.register("metrics", this.renderMetrics),
              this.fragments.register("tabs", this.renderTabs),
              this.fragments.register("table", this.renderTable);
          }
          updateExportButton() {
            n.UI.toggleButtonInteractiveEnabled(
              $(this.exportButtonTarget),
              this.components.runs &&
                this.components.runs.getSelectedCount() > 0
            );
          }
          doShowExportMenu(e) {
            this.showExportMenu($(e.currentTarget), () =>
              this.components.runs.getSelectedIds()
            );
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            n.UI.popupVisible(t) ||
              n.UI.loading(t, () =>
                a.N.post("runs/render_stats/" + s)
                  .then((e) => {
                    new u._(!0).show(t, d.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    C.Z.handleError(e);
                  })
              );
          }
          doShowManyWarning(e) {
            let t = $(e.currentTarget);
            n.UI.popupVisible(t) ||
              new p.u(
                p.Y.Warning,
                l.Z.lang("runs.many_active_warning_title"),
                l.Z.lang("runs.many_active_warning_text")
              ).show(t, d.Fz.BottomLeft);
          }
          showContextMenu(e, t, s, i, o) {
            if (n.UI.popupVisible(s)) return;
            let r = [];
            this.components.runs.getSelectedRows().length <= 1
              ? (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: l.Z.lang("runs.menu_duplicate_run"),
                    callback: this.doContextMenuSingleClick,
                  }),
                this.canAddEdit &&
                  this.canClosedDelete &&
                  r.push({ type: "divider" }),
                this.canClosedDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: l.Z.lang("runs.menu_delete_run"),
                    callback: this.doContextMenuSingleClick,
                  }))
              : (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: l.Z.lang("runs.menu_duplicate_runs"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                this.canAddEdit &&
                  this.canClosedDelete &&
                  r.push({ type: "divider" }),
                this.canClosedDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: l.Z.lang("runs.menu_delete_runs"),
                    callback: this.doContextMenuMultipleClick,
                  })),
              new h.x(r, {
                context: { table: e, $field: o, $row: i, id: t },
              }).show(s, d.Fz.BottomLeft);
          }
          duplicateRun(e, t, s) {
            e.loading("actionfield", s, () =>
              a.N.post("runs/render_select_statuses/" + t)
                .then((e) => {
                  const s = new m.Z();
                  return (
                    (s.onSuccess = (e) => {
                      let s = { statuses: e };
                      return a.N.post(
                        "runs/render_copy/" + t,
                        a.N.toNetworkCase(s)
                      ).then((e) => {
                        const t = new r.q(r.G.Copy, this.projectId);
                        return (
                          (t.onSuccess = (e) =>
                            a.N.visit("runs/" + this.projectId)),
                          t.show(e.data)
                        );
                      });
                    }),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  C.Z.handleError(e);
                })
            );
          }
          duplicateRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return a.N.post(
                "runs/render_select_statuses_for_many/" + this.projectId,
                a.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new f.A();
                  return (
                    (s.onSuccess = (e) => {
                      let s = { ids: t, statuses: e };
                      return a.N.post(
                        "runs/render_copy_many/" + this.projectId,
                        a.N.toNetworkCase(s)
                      ).then((e) => {
                        const t = new g.Y(this.projectId);
                        return (
                          (t.onSuccess = (e) =>
                            a.N.visit("runs/" + this.projectId)),
                          t.show(e.data)
                        );
                      });
                    }),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  C.Z.handleError(e);
                });
            });
          }
          deleteRun(e, t) {
            let s = t.data("name"),
              i = new c.A(
                l.Z.lang("runs.delete_title"),
                l.Z.langEscape("runs.delete_message", { name: s }),
                l.Z.lang("runs.delete_button")
              );
            (i.onSuccess = () =>
              a.N.post("runs/delete/" + e).then(() =>
                this.refreshFragments("table", "tabs", "metrics")
              )),
              i.show();
          }
          deleteRuns(e) {
            let t = new c.A(
              l.Z.lang("runs.delete_many_title"),
              l.Z.lang("runs.delete_many_message"),
              l.Z.lang("runs.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return a.N.post(
                "runs/delete_many/" + this.projectId,
                a.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("table", "tabs", "metrics"));
            }),
              t.show();
          }
          doAdd() {
            this.addRun($(this.addButtonTarget));
          }
          doAddMultiple() {
            this.addMultipleRuns($(this.addMultipleButtonTarget));
          }
          addRun(e) {
            n.UI.loading(e, () =>
              a.N.post("runs/render_create/" + this.projectId)
                .then((e) => {
                  const t = new r.q(r.G.Add, this.projectId);
                  (t.onSuccess = (e) => a.N.visit("runs/" + this.projectId)),
                    t.show(e.data);
                })
                .catch((e) => {
                  C.Z.handleError(e);
                })
            );
          }
          addMultipleRuns(e) {
            n.UI.loading(e, () =>
              a.N.post("runs/render_create_many/" + this.projectId)
                .then((e) => {
                  const t = new g.Y(this.projectId);
                  (t.onSuccess = (e) => a.N.visit("runs/" + this.projectId)),
                    t.show(e.data);
                })
                .catch((e) => {
                  C.Z.handleError(e);
                })
            );
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["table", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          saveFilter(e) {
            return a.N.post(
              "runs/save_filter/" + this.projectId,
              a.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshFragments([
                "table",
                { withPagination: !1 },
              ]).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
        }
        b(I, "targets", [
          "responsiveContainer",
          "addButton",
          "addMultipleButton",
          "exportButton",
        ]);
      },
      50307: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => I });
        var i = s(26454),
          o = s(96622),
          n = s(15612),
          r = s(13814),
          a = s(43689),
          l = s(16087),
          d = s(69555),
          h = s(24850),
          c = s(15331),
          u = s(26734),
          g = s(50609),
          p = s(7042),
          m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends g.V {
          constructor(e, t) {
            super("runs.export_many_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              f(this, "classes", {
                hidden: "default-hidden",
                leftContentExportModeSummary:
                  "runs-csv-export-many-dialog__left-content--export-mode-summary",
                leftContentExportModeResults:
                  "runs-csv-export-many-dialog__left-content--export-mode-results",
              }),
              f(this, "doExportModeChange", () => {
                o.UI.getRadio(this.$exportSummary)
                  ? (this.$leftContent.addClass(
                      this.classes.leftContentExportModeSummary
                    ),
                    this.$leftContent.removeClass(
                      this.classes.leftContentExportModeResults
                    ))
                  : (this.$leftContent.removeClass(
                      this.classes.leftContentExportModeSummary
                    ),
                    this.$leftContent.addClass(
                      this.classes.leftContentExportModeResults
                    ));
              }),
              (this.projectId = e),
              (this.runIds = t);
          }
          load() {
            o.UI.onRadioChange(this.$exportSummary, this.doExportModeChange),
              o.UI.onRadioChange(this.$exportResults, this.doExportModeChange),
              m.Z.requestChild(this.component, "resultColumns"),
              m.Z.requestChild(this.component, "summaryColumns");
          }
          unload() {}
          submitSummary() {
            o.UI.loading(this.$submitButton, () => {
              p.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.summaryColumns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: o.UI.getDropdown(this.$delimiter),
                columns: e,
                ids: this.runIds,
              };
              return (
                m.Z.blockUI(),
                r.N.post(
                  "runs/validate_export_many_summary_csv/" + this.projectId,
                  r.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      r.N.formPostDownload(
                        "runs/export_many_summary_csv/" + this.projectId,
                        { data: JSON.stringify(r.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    p.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    m.Z.unblockUI();
                  })
              );
            });
          }
          submitResults() {
            o.UI.loading(this.$submitButton, () => {
              p.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.resultColumns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: o.UI.getDropdown(this.$delimiter),
                columns: e,
                ids: this.runIds,
                showContext: o.UI.getCheckbox(this.$showContext),
                rowMode: o.UI.getDropdownIntOrNull(this.$rowMode),
              };
              return (
                m.Z.blockUI(),
                r.N.post(
                  "runs/validate_export_many_csv/" + this.projectId,
                  r.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      r.N.formPostDownload(
                        "runs/export_many_csv/" + this.projectId,
                        { data: JSON.stringify(r.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500 + 75 * this.runIds.length);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    p.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    m.Z.unblockUI();
                  })
              );
            });
          }
          doSubmit() {
            o.UI.getRadio(this.$exportSummary)
              ? this.submitSummary()
              : this.submitResults();
          }
        }
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        f(C, "forms", [
          {
            name: "export",
            fields: [
              "delimiter",
              "exportMode",
              "exportSummary",
              "exportResults",
              "showContext",
              "rowMode",
            ],
          },
        ]),
          f(C, "targets", ["submitButton", "leftContent", "downloadMessage"]),
          f(C, "actions", ["doSubmit"]);
        class I extends i.v {
          constructor(...e) {
            super(...e),
              b(this, "baseClasses", {
                popupNoMinWidth: "popup--no-min-width",
              }),
              b(this, "doFilter", (e) => {
                const t = $(e.button);
                if (!o.UI.popupVisible(t))
                  return (
                    this.components.searchBar.setFilterLoading(!0),
                    r.N.post(
                      "runs/render_filter/" + this.projectId,
                      r.N.toNetworkCase(this.filter)
                    )
                      .then((e) => {
                        this.components.searchBar.setFilterLoading(!1);
                        const s = new h.y();
                        (s.onSubmit = (e) =>
                          this.saveFilter(e.filter).then(() => {
                            this.components.searchBar.setInlineFilter(
                              "milestones",
                              e.labels["runs:milestone_id"]
                                ? e.labels["runs:milestone_id"]
                                : []
                            ),
                              this.components.searchBar.setInlineFilter(
                                "states",
                                e.labels["runs:state_id"]
                                  ? e.labels["runs:state_id"]
                                  : []
                              ),
                              this.components.searchBar.setInlineFilter(
                                "tags",
                                e.labels["runs:tags"]
                                  ? e.labels["runs:tags"]
                                  : []
                              );
                          })),
                          s.show(t, d.Fz.BottomRight, e.data);
                      })
                      .catch((e) => {
                        this.components.searchBar.setFilterLoading(!1),
                          m.Z.handleError(e);
                      })
                  );
              }),
              b(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          "milestones",
                          []
                        ),
                          this.components.searchBar.setInlineFilter(
                            "states",
                            []
                          ),
                          this.components.searchBar.setInlineFilter("tags", []);
                      })
                      .catch((e) => {
                        m.Z.handleError(e);
                      })
                  );
              }),
              b(this, "doCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                "milestones" == e.filter.name
                  ? (s.conditions["runs:milestone_id"] = {})
                  : "states" == e.filter.name
                  ? (s.conditions["runs:state_id"] = {})
                  : "tags" == e.filter.name && (s.conditions["runs:tags"] = {}),
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          e.filter.name,
                          []
                        );
                      })
                      .catch((e) => {
                        m.Z.handleError(e);
                      })
                  );
              }),
              b(this, "doInlineFilter", (e) => {
                "milestones" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "milestones",
                      "runs/render_milestone_filter/",
                      "runs:milestone_id"
                    )
                  : "states" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "states",
                      "runs/render_state_filter/",
                      "runs:state_id"
                    )
                  : "tags" == e.filter.name &&
                    this.showInlineFilter(
                      e.button,
                      "tags",
                      "runs/render_tag_filter/",
                      "runs:tags"
                    );
              }),
              b(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              b(this, "doSearch", () => {
                this.refreshSearch();
              }),
              b(this, "doResizeContent", (e) => {
                this.updateResponsiveRunContent(e);
              });
          }
          showExportMenu(e, t) {
            if (!o.UI.getButtonInteractiveEnabled(e)) return;
            if (o.UI.popupVisible(e)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: a.Z.lang("runs.export_to_csv"),
              callback: (s) => {
                s.target.hide(),
                  "csv" === s.actionName &&
                    o.UI.loading(e, () => {
                      let e = t(),
                        s = { ids: e };
                      return r.N.post(
                        "runs/render_export_many_csv/" + this.projectId,
                        r.N.toNetworkCase(s)
                      )
                        .then((t) => {
                          new C(this.projectId, e).show(t.data);
                        })
                        .catch((e) => {
                          m.Z.handleError(e);
                        });
                    });
              },
            }),
              new l.x(s, {
                additionalClasses: this.baseClasses.popupNoMinWidth,
              }).show(e, d.Fz.BottomLeft);
          }
          showInlineFilter(e, t, s, i) {
            const a = $(e);
            o.UI.popupVisible(a) ||
              o.UI.loading(a, () =>
                r.N.post(s + this.projectId, r.N.toNetworkCase(this.filter))
                  .then((e) => {
                    let s = this.components.searchBar.getInlineFilter(t);
                    const o = new c.d();
                    (o.onSubmit = (e) => {
                      let s = this.filter;
                      return (
                        (s.conditions[i] = e.condition),
                        (s.mode = n.g.FiltersAll),
                        this.saveFilter(s).then(() => {
                          this.components.searchBar.setInlineFilter(
                            t,
                            e.labels
                          );
                        })
                      );
                    }),
                      (o.onHide = (e) => {
                        e || this.components.searchBar.setInlineFilter(t, s);
                      }),
                      o.events.on("change", (e) => {
                        this.components.searchBar.setInlineFilter(t, e.labels);
                      }),
                      o.show(a, d.Fz.BottomRight, e.data);
                  })
                  .catch((e) => {
                    m.Z.handleError(e);
                  })
              );
          }
          updateResponsiveRunContent(e) {
            "runs:tags" == e.name &&
              u.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.tags;
                return t ? JSON.parse(t) : [];
              });
          }
          refreshSearch() {}
          saveFilter(e) {}
        }
      },
      92228: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => T });
        var i = s(50307),
          o = s(47914),
          n = s(96622),
          r = s(11529),
          a = s(3461),
          l = s(4989),
          d = s(710),
          h = s(13814),
          c = s(50922),
          u = s(43689),
          g = s(69555),
          p = s(16087),
          m = s(24371),
          f = s(62612),
          C = s(67694),
          b = s(61861),
          I = s(22143),
          w = s(38426),
          v = s(84182),
          S = s(48995),
          x = s(5270);
        function k(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class T extends i.BaseController {
          constructor(...e) {
            super(...e),
              k(this, "selectors", {
                groupingHeader: ".grouping-header",
                row: "tr",
              }),
              k(this, "classes", { popupNoMinWidth: "popup--no-min-width" }),
              k(this, "doStateChange", (e) => {
                let t = this.fragments.getClosest(
                    e.target.element,
                    "activeTable"
                  ),
                  s = e.target.getParams().milestoneId;
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments([
                    "table",
                    { state: e.state, milestoneId: s, table: e.target },
                    t,
                  ]).then(() => {
                    e.target.setLoading(e.loading, !1, e.column);
                  });
              }),
              k(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editRun(e.target, e.id, e.$field);
                }
              }),
              k(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "assign":
                    this.assignRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "close":
                    this.closeRun(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "duplicate":
                    this.duplicateRun(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                }
              }),
              k(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.runTables.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteRuns(t);
                    break;
                  case "close":
                    this.closeRuns(t);
                    break;
                  case "edit":
                    this.editRuns(e.context.table, t, e.context.$field);
                    break;
                  case "assign":
                    this.assignRuns(e.context.table, t, e.context.$field);
                    break;
                  case "duplicate":
                    this.duplicateRuns(e.context.table, t, e.context.$field);
                }
              }),
              k(this, "doAddGroupMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "add":
                    this.addRun(e.context.$icon, e.context.id);
                    break;
                  case "addMultiple":
                    this.addMultipleRuns(e.context.$icon, e.context.id);
                }
              }),
              k(this, "doRunTablesSelectionChange", () => {
                this.updateExportButton();
              }),
              k(this, "renderTabs", () =>
                h.N.post("runs/render_tabs/" + this.projectId, { tab: 0 })
              ),
              k(this, "renderMetrics", () =>
                h.N.post("runs/render_index_metrics/" + this.projectId)
              ),
              k(this, "renderActive", (e = {}) => {
                _.defaults(e, { withPagination: !0 });
                let t = { tables: [] },
                  s = x.Z.findComponents(this.element, "runs");
                for (let i of s) {
                  let s = i.getParams().milestoneId,
                    o = i.getState();
                  e.withPagination || delete o.paginationCurrent;
                  let n = h.N.toNetworkCase(o);
                  (n.milestone_id = s), t.tables.push(n);
                }
                return (
                  (t.selected = t.tables.flatMap((e) => e.selected)),
                  this.components.searchBar &&
                    this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  h.N.post(
                    "runs/render_active/" + this.projectId,
                    h.N.toNetworkCase(t)
                  )
                );
              }),
              k(this, "renderTable", (e = {}) => {
                _.defaults(e, { state: null, milestoneId: null, table: null });
                let t = e.state ? e.state : e.table.getState();
                return (
                  (t.milestoneId = e.milestoneId),
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  h.N.post(
                    "runs/render_active_table/" + this.projectId,
                    h.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              (this.canClose = this.params.canClose),
              (this.canResultsAddEdit = this.params.canResultsAddEdit),
              (this.filter = this.params.filter || o.X.EmptyFilter),
              (this.runTables = new r.TableManager()),
              this.runTables.events.on(
                "selectionchange",
                this.doRunTablesSelectionChange
              ),
              x.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              x.Z.requestChild(this.component, "runs", {
                onAdded: (e) => {
                  this.runTables.add(e);
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveRunContent(e);
                },
                onRemoved: (e) => {
                  this.runTables.remove(e);
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                },
              }),
              n.UI.initialize(this.element),
              this.fragments.register("metrics", this.renderMetrics),
              this.fragments.register("tabs", this.renderTabs),
              this.fragments.register("active", this.renderActive),
              this.fragments.register("table", this.renderTable),
              this.params.isLazyLoad && this.lazyLoad();
          }
          lazyLoad() {
            this.refreshFragments("active").then(() => {
              n.UI.markCompleted($(this.runContainerTarget)),
                this.components.searchBar.setEnabled(!0);
            });
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            n.UI.popupVisible(t) ||
              n.UI.loading(t, () =>
                h.N.post("runs/render_stats/" + s)
                  .then((e) => {
                    new C._(!0).show(t, g.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    x.Z.handleError(e);
                  })
              );
          }
          doShowManyWarning(e) {
            let t = $(e.currentTarget);
            n.UI.popupVisible(t) ||
              new S.u(
                S.Y.Warning,
                u.Z.lang("runs.many_active_warning_title"),
                u.Z.lang("runs.many_active_warning_text")
              ).show(t, g.Fz.BottomLeft);
          }
          showContextMenu(e, t, s, i, o) {
            if (n.UI.popupVisible(s)) return;
            let r = [];
            this.runTables.getSelectedRows().length <= 1
              ? (this.canAddEdit &&
                  (r.push({
                    type: "action",
                    name: "edit",
                    title: u.Z.lang("runs.menu_edit_run"),
                    callback: this.doContextMenuSingleClick,
                  }),
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: u.Z.lang("runs.menu_duplicate_run"),
                    callback: this.doContextMenuSingleClick,
                  })),
                this.canResultsAddEdit &&
                  (this.canAddEdit && r.push({ type: "divider" }),
                  r.push({
                    type: "action",
                    name: "assign",
                    title: u.Z.lang("runs.menu_assign_tests"),
                    callback: this.doContextMenuSingleClick,
                  })),
                (this.canAddEdit || this.canResultsAddEdit) &&
                  (this.canDelete || this.canClose) &&
                  r.push({ type: "divider" }),
                this.canClose &&
                  r.push({
                    type: "action",
                    name: "close",
                    title: u.Z.lang("runs.menu_close_run"),
                    callback: this.doContextMenuSingleClick,
                  }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: u.Z.lang("runs.menu_delete_run"),
                    callback: this.doContextMenuSingleClick,
                  }))
              : (this.canAddEdit &&
                  (r.push({
                    type: "action",
                    name: "edit",
                    title: u.Z.lang("runs.menu_edit_runs"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: u.Z.lang("runs.menu_duplicate_runs"),
                    callback: this.doContextMenuMultipleClick,
                  })),
                this.canResultsAddEdit &&
                  (this.canAddEdit && r.push({ type: "divider" }),
                  r.push({
                    type: "action",
                    name: "assign",
                    title: u.Z.lang("runs.menu_assign_tests"),
                    callback: this.doContextMenuMultipleClick,
                  })),
                (this.canAddEdit || this.canResultsAddEdit) &&
                  (this.canDelete || this.canClose) &&
                  r.push({ type: "divider" }),
                this.canClose &&
                  r.push({
                    type: "action",
                    name: "close",
                    title: u.Z.lang("runs.menu_close_runs"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: u.Z.lang("runs.menu_delete_runs"),
                    callback: this.doContextMenuMultipleClick,
                  })),
              new p.x(r, {
                context: { table: e, $field: o, $row: i, id: t },
              }).show(s, g.Fz.BottomLeft);
          }
          assignRun(e, t, s) {
            e.loading("actionfield", s, () =>
              h.N.post("runs/render_assign/" + t)
                .then((e) => {
                  const s = new v.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("active", "metrics")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  x.Z.handleError(e);
                })
            );
          }
          assignRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return h.N.post(
                "runs/render_assign_many/" + this.projectId,
                h.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new w.M(t, this.projectId);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("active", "metrics")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  x.Z.handleError(e);
                });
            });
          }
          editRun(e, t, s) {
            e.setLoading("actionfield", !0, s),
              h.N.post("runs/render_update/" + t)
                .then((s) => {
                  const i = new a.q(a.G.Edit, this.projectId, t);
                  return (
                    (i.onSuccess = (t) => {
                      let s = e.getParams().milestoneId;
                      if (s == t.milestone_id) {
                        let t = this.fragments.getClosest(
                          e.element,
                          "activeTable"
                        );
                        return this.refreshFragments(
                          ["table", { table: e, milestoneId: s }, t],
                          "metrics"
                        );
                      }
                      return this.refreshFragments("active", "metrics");
                    }),
                    i.show(s.data)
                  );
                })
                .then(() => {
                  e.setLoading("actionfield", !1, s);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), x.Z.handleError(t);
                });
          }
          editRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return h.N.post(
                "runs/render_update_many/" + this.projectId,
                h.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new b.y(t, this.projectId);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("active", "metrics")),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  x.Z.handleError(e);
                });
            });
          }
          duplicateRun(e, t, s) {
            e.loading("actionfield", s, () =>
              h.N.post("runs/render_select_statuses/" + t)
                .then((e) => {
                  const s = new l.Z();
                  return (
                    (s.onSuccess = (e) => {
                      let s = { statuses: e };
                      return h.N.post(
                        "runs/render_copy/" + t,
                        h.N.toNetworkCase(s)
                      ).then((e) => {
                        const t = new a.q(a.G.Copy, this.projectId);
                        return (
                          (t.onSuccess = (e) =>
                            this.refreshFragments("active", "tabs", "metrics")),
                          t.show(e.data)
                        );
                      });
                    }),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  x.Z.handleError(e);
                })
            );
          }
          duplicateRuns(e, t, s) {
            e.loading("actionfield", s, () => {
              let e = { ids: t };
              return h.N.post(
                "runs/render_select_statuses_for_many/" + this.projectId,
                h.N.toNetworkCase(e)
              )
                .then((e) => {
                  const s = new d.A();
                  return (
                    (s.onSuccess = (e) => {
                      let s = { ids: t, statuses: e };
                      return h.N.post(
                        "runs/render_copy_many/" + this.projectId,
                        h.N.toNetworkCase(s)
                      ).then((e) => {
                        const t = new I.Y(this.projectId);
                        return (
                          (t.onSuccess = (e) =>
                            this.refreshFragments("active", "tabs", "metrics")),
                          t.show(e.data)
                        );
                      });
                    }),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  x.Z.handleError(e);
                });
            });
          }
          deleteRun(e, t, s) {
            let i = s.data("name"),
              o = new f.A(
                u.Z.lang("runs.delete_title"),
                u.Z.langEscape("runs.delete_message", { name: i }),
                u.Z.lang("runs.delete_button")
              );
            (o.onSuccess = () =>
              h.N.post("runs/delete/" + t).then(() => {
                let t = e.getParams().milestoneId,
                  s = this.fragments.getClosest(e.element, "activeTable");
                return this.refreshFragments(
                  ["table", { table: e, milestoneId: t }, s],
                  "tabs",
                  "metrics"
                );
              })),
              o.show();
          }
          deleteRuns(e) {
            let t = new f.A(
              u.Z.lang("runs.delete_many_title"),
              u.Z.lang("runs.delete_many_message"),
              u.Z.lang("runs.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return h.N.post(
                "runs/delete_many/" + this.projectId,
                h.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("active", "tabs", "metrics"));
            }),
              t.show();
          }
          closeRun(e, t, s) {
            let i = s.data("name"),
              o = new m.U(
                u.Z.lang("runs.close_title"),
                u.Z.langEscape("runs.close_message", { name: i }),
                u.Z.lang("runs.close_button"),
                u.Z.langEscape("runs.close_confirmation", { name: i })
              );
            (o.onSuccess = () =>
              h.N.post("runs/close/" + t).then(() => {
                let t = e.getParams().milestoneId,
                  s = this.fragments.getClosest(e.element, "activeTable");
                return this.refreshFragments(
                  ["table", { table: e, milestoneId: t }, s],
                  "tabs",
                  "metrics"
                );
              })),
              o.show();
          }
          closeRuns(e) {
            let t = new m.U(
              u.Z.lang("runs.close_many_title"),
              u.Z.lang("runs.close_many_message"),
              u.Z.lang("runs.close_many_button"),
              u.Z.langEscape("runs.close_many_confirmation")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return h.N.post(
                "runs/close_many/" + this.projectId,
                h.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("active", "tabs", "metrics"));
            }),
              t.show();
          }
          saveFilter(e) {
            return h.N.post(
              "runs/save_filter/" + this.projectId,
              h.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshFragments([
                "active",
                { withPagination: !1 },
              ]).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["active", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          doEmptyAdd() {
            this.addRun($(this.emptyAddButtonTarget));
          }
          doAdd() {
            this.addRun($(this.addButtonTarget));
          }
          doAddMultiple() {
            this.addMultipleRuns($(this.addMultipleButtonTarget));
          }
          addRun(e, t = null) {
            n.UI.loading(e, () =>
              h.N.post("runs/render_create/" + this.projectId)
                .then((e) => {
                  const s = new a.q(a.G.Add, this.projectId, null, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("active", "tabs", "metrics").then(
                        () => {
                          this.components.searchBar.setEnabled(!0);
                        }
                      )),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  x.Z.handleError(e);
                })
            );
          }
          addMultipleRuns(e, t = null) {
            n.UI.loading(e, () =>
              h.N.post("runs/render_create_many/" + this.projectId)
                .then((e) => {
                  const s = new I.Y(this.projectId, t);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("active", "tabs", "metrics").then(
                      () => {
                        this.components.searchBar.setEnabled(!0);
                      }
                    )),
                    s.show(e.data);
                })
                .catch((e) => {
                  x.Z.handleError(e);
                })
            );
          }
          doShowAddGroupMenu(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.groupingHeader).data("id");
            const i = [];
            i.push({
              type: "action",
              name: "add",
              title: u.Z.lang("runs.menu_add"),
              callback: this.doAddGroupMenuClick,
            }),
              i.push({
                type: "action",
                name: "addMultiple",
                title: u.Z.lang("runs.menu_add_multiple"),
                callback: this.doAddGroupMenuClick,
              }),
              new p.x(i, { context: { $icon: t, id: s } }).show(
                t,
                g.Fz.BottomRight
              );
          }
          doShowGroupMilestonePopup(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            const s = new c.m(),
              i = t
                .closest(this.selectors.groupingHeader)
                .data("hierarchyPopup");
            s.show(t, g.Fz.BottomRight, i);
          }
          doShowExportMenu(e) {
            this.showExportMenu($(e.currentTarget), () =>
              this.runTables.getSelectedIds()
            );
          }
          updateExportButton() {
            n.UI.toggleButtonInteractiveEnabled(
              $(this.exportButtonTarget),
              this.runTables.getSelectedCount() > 0
            );
          }
        }
        k(T, "targets", [
          "responsiveContainer",
          "addButton",
          "addMultipleButton",
          "emptyAddButton",
          "runContainer",
          "exportButton",
        ]);
      },
      85890: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => u });
        var i = s(34740),
          o = s(96622),
          n = s(13814),
          r = s(15331),
          a = s(69555),
          l = s(9669),
          d = s.n(l),
          h = s(5270);
        function c(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class u extends i.BaseController {
          constructor(...e) {
            super(...e),
              c(this, "selectors", {
                issueDetailsField: ".table__field__issue-details",
                issueDetailsFieldDetails:
                  ".table__field__issue-details__details",
              }),
              c(this, "classes", {
                issueDetailsFieldLoading:
                  "table__field__issue-details--loading",
              }),
              c(this, "doAppNavigate", () => {
                this.cancelExecutionRequests(), this.cancelDesignRequests();
              }),
              c(this, "doExecutionCancelSearch", () => {
                this.refreshExecutionSearch();
              }),
              c(this, "doExecutionSearch", () => {
                this.refreshExecutionSearch();
              }),
              c(this, "doDesignCancelSearch", () => {
                this.refreshDesignSearch();
              }),
              c(this, "doDesignSearch", () => {
                this.refreshDesignSearch();
              }),
              c(this, "doIssuesDesignAdded", (e) => {
                this.components.designSearchBar.setEnabled(!0),
                  this.loadIssueDetails(e, this.designCancelSource);
              }),
              c(this, "doIssuesExecutionAdded", (e) => {
                this.loadIssueDetails(e, this.executionCancelSource);
              }),
              c(this, "doIssuesExecutionStateChange", (e) => {
                this.cancelExecutionRequests(),
                  e.target.loading(e.loading, e.column, () =>
                    this.refreshFragments([
                      "issueExecutionPage",
                      { state: e.state },
                    ])
                  );
              }),
              c(this, "doIssuesDesignStateChange", (e) => {
                this.cancelDesignRequests(),
                  e.target.loading(e.loading, e.column, () =>
                    this.refreshFragments([
                      "issueDesignPage",
                      { state: e.state },
                    ])
                  );
              }),
              c(this, "doExecutionCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide(),
                  (this.executionStatuses = []),
                  o.UI.loading(
                    t,
                    () => (
                      this.components.executionSearchBar.setInlineFilter(
                        "statuses",
                        ""
                      ),
                      this.refreshFragments([
                        "issueExecutionPage",
                        { withPagination: !1 },
                      ]).catch((e) => {
                        h.Z.handleError(e);
                      })
                    )
                  );
              }),
              c(this, "doExecutionInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) ||
                  o.UI.loading(t, () => {
                    let e = { selected: this.executionStatuses };
                    return n.N.post(
                      "runs/render_issue_status_filter/" + this.run.id,
                      n.N.toNetworkCase(e)
                    )
                      .then((e) => {
                        const s = "statuses";
                        let i =
                          this.components.executionSearchBar.getInlineFilter(s);
                        const o = new r.d();
                        (o.onSubmit = (e) => (
                          (this.executionStatuses = []),
                          e.condition &&
                            e.condition.values &&
                            (this.executionStatuses = e.condition.values),
                          this.components.executionSearchBar.setInlineFilter(
                            s,
                            e.labels
                          ),
                          this.refreshFragments([
                            "issueExecutionPage",
                            { withPagination: !1 },
                          ]).catch((e) => {
                            h.Z.handleError(e);
                          })
                        )),
                          (o.onHide = (e) => {
                            e ||
                              this.components.executionSearchBar.setInlineFilter(
                                s,
                                i
                              );
                          }),
                          o.events.on("change", (e) => {
                            this.components.executionSearchBar.setInlineFilter(
                              s,
                              e.labels
                            );
                          }),
                          o.show(t, a.Fz.BottomRight, e.data);
                      })
                      .catch((e) => {
                        h.Z.handleError(e);
                      });
                  });
              }),
              c(this, "renderIssueExecutionPage", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.issuesExecution.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.executionStatuses &&
                    (t.statuses = this.executionStatuses),
                  this.components.executionSearchBar &&
                    this.components.executionSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.executionSearchBar.getSearchTerm()),
                  n.N.post(
                    "runs/render_issue_execution_page/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              c(this, "renderIssueDesignPage", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.retiredSources &&
                      (t = this.components.issuesExecution.getState()),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.designSearchBar &&
                    this.components.designSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.designSearchBar.getSearchTerm()),
                  n.N.post(
                    "runs/render_issue_design_page/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              c(this, "renderIssuesDesign", (e = {}) => {
                let t = {};
                return (
                  this.components.designSearchBar &&
                    this.components.designSearchBar.getHasSearched() &&
                    (t.search =
                      this.components.designSearchBar.getSearchTerm()),
                  n.N.post(
                    "runs/render_issues_design/" + this.run.id,
                    n.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.page = { name: "issues" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClose = this.params.canClose),
              (this.canDelete = this.params.canDelete),
              (this.canClosedDelete = this.params.canClosedDelete),
              (this.executionStatuses = []),
              (this.executionCancelSource = n.N.getCancelSource()),
              (this.designCancelSource = n.N.getCancelSource()),
              (this.detailsCache = {}),
              o.UI.initialize(this.element),
              h.Z.requestChild(this.component, "resources"),
              (this.fragmentsAfterEdit = ["about", "header", "issuesDesign"]),
              (this.fragmentsAfterClose = ["about", "resources", "header"]),
              (this.fragmentsAfterAssign = ["about"]),
              this.registerBaseFragments(),
              h.Z.requestChild(this.component, "executionSearchBar", {
                events: {
                  search: this.doExecutionSearch,
                  cancelsearch: this.doExecutionCancelSearch,
                  inlinefilter: this.doExecutionInlineFilter,
                  cancelinlinefilter: this.doExecutionCancelInlineFilter,
                },
              }),
              h.Z.requestChild(this.component, "designSearchBar", {
                events: {
                  search: this.doDesignSearch,
                  cancelsearch: this.doDesignCancelSearch,
                },
              }),
              h.Z.requestChild(this.component, "issuesExecution", {
                onAdded: this.doIssuesExecutionAdded,
                events: { statechange: this.doIssuesExecutionStateChange },
              }),
              h.Z.requestChild(this.component, "issuesDesign", {
                onAdded: this.doIssuesDesignAdded,
                events: { statechange: this.doIssuesDesignStateChange },
              }),
              this.fragments.register(
                "issueExecutionPage",
                this.renderIssueExecutionPage
              ),
              this.fragments.register(
                "issueDesignPage",
                this.renderIssueDesignPage
              ),
              this.fragments.register("issuesDesign", this.renderIssuesDesign),
              h.Z.events.on("navigate", this.doAppNavigate);
          }
          unload() {
            this.cancelExecutionRequests(),
              this.cancelDesignRequests(),
              h.Z.events.off("navigate", this.doAppNavigate),
              (this.detailsCache = null);
          }
          cancelExecutionRequests() {
            n.N.cancelRequests(this.executionCancelSource),
              (this.executionCancelSource = n.N.getCancelSource());
          }
          cancelDesignRequests() {
            n.N.cancelRequests(this.designCancelSource),
              (this.designCancelSource = n.N.getCancelSource());
          }
          loadIssueDetails(e, t) {
            const s = (e, t, s) => {
              let i = t
                .filter(`tr[data-id="${e}"]`)
                .find(this.selectors.issueDetailsField);
              i.removeClass(this.classes.issueDetailsFieldLoading),
                i.find(this.selectors.issueDetailsFieldDetails).html(s);
            };
            let i = e.getRows();
            (i = i.filter("[data-new=1]")), i.attr("data-new", 0);
            let o = [];
            i.each((e, t) => {
              let s = $(t),
                i = s.data("id"),
                n = s.data("canLookup"),
                r = s.data("targetId");
              n && r && i && o.push({ id: i, targetId: r });
            }),
              (o = _.uniqWith(o, (e, t) => e.id == t.id)),
              (o = o.filter(
                (e) =>
                  !(e.id in this.detailsCache) ||
                  (s(e.id, i, this.detailsCache[e.id]), !1)
              ));
            let r = {};
            for (let e of o)
              r[e.targetId] || (r[e.targetId] = []), r[e.targetId].push(e);
            for (let e in r) {
              let o = { ids: r[e].map((e) => e.id) };
              n.N.postNonBlocking(
                "issues/render_statuses/" + this.projectId,
                n.N.toNetworkCase(o),
                { cancelToken: t.token }
              )
                .then((e) => {
                  this.loaded &&
                    $(e.data)
                      .filter("[data-id]")
                      .each((e, t) => {
                        let o = $(t),
                          n = o.data("id"),
                          r = o.html();
                        s(n, i, r), (this.detailsCache[n] = r);
                      });
                })
                .catch((e) => {
                  e instanceof d().Cancel || h.Z.handleError(e);
                });
            }
          }
          refreshExecutionSearch() {
            this.cancelExecutionRequests(),
              this.components.executionSearchBar.setInputLoading(!0),
              this.refreshFragments([
                "issueExecutionPage",
                { withPagination: !1 },
              ]).then(() => {
                this.components.executionSearchBar.setInputLoading(!1);
              });
          }
          refreshDesignSearch() {
            this.cancelDesignRequests(),
              this.components.designSearchBar.setInputLoading(!0),
              this.refreshFragments([
                "issueDesignPage",
                { withPagination: !1 },
              ]).then(() => {
                this.components.designSearchBar.setInputLoading(!1);
              });
          }
          afterClose() {
            return Promise.all([
              this.refreshFragments(...this.fragmentsAfterClose),
              this.components.resources.refreshContent(),
            ]).then(() => {
              this.components.resources.disableEditing();
            });
          }
        }
        c(u, "targets", [
          "aboutSection",
          "assignButton",
          "closeButton",
          "duplicateButton",
          "editButton",
          "editMenuButton",
          "exportButton",
          "headerStatsBar",
          "responsiveContainer",
          "showInfoIcon",
          "showMilestonePopupIcon",
          "showTransitionPopupIcon",
        ]);
      },
      95933: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => b });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(11802),
          a = s(47914),
          l = s(43689),
          d = s(15612),
          h = s(21077),
          c = s(69555);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends c.GI {
          constructor(e, t, s) {
            super("runs.print_configure_popup"),
              u(this, "doOptionChange", (e) => {
                this.refreshApplyButton();
              }),
              (this.flags = e),
              (this.testMode = t),
              (this.folderMode = s);
          }
          load() {
            n.UI.setCheckbox(this.$showHeader, this.flags.show_header),
              n.UI.setCheckbox(this.$showStats, this.flags.show_stats),
              n.UI.setCheckbox(this.$showContext, this.flags.show_context),
              n.UI.setCheckbox(this.$showDocs, this.flags.show_docs),
              n.UI.setCheckbox(this.$showFooter, this.flags.show_footer),
              n.UI.setCheckbox(this.$showLinks, this.flags.show_links),
              n.UI.setCheckbox(this.$showImages, this.flags.show_images),
              n.UI.setCheckbox(this.$showUsers, this.flags.show_users),
              this.testMode == d.g.RunsPrintTestModeList
                ? n.UI.setRadio(this.$testModeList, !0)
                : this.testMode == d.g.RunsPrintTestModeDetails
                ? n.UI.setRadio(this.$testModeDetails, !0)
                : this.testMode == d.g.RunsPrintTestModeFull
                ? n.UI.setRadio(this.$testModeFull, !0)
                : n.UI.setRadio(this.$testModeNone, !0),
              this.folderMode == d.g.RunsPrintFolderModeName
                ? n.UI.setRadio(this.$folderModeName, !0)
                : this.folderMode == d.g.RunsPrintFolderModeFull
                ? n.UI.setRadio(this.$folderModeFull, !0)
                : n.UI.setRadio(this.$folderModeNone, !0),
              n.UI.onCheckboxChange(this.$showHeader, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showStats, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showContext, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showDocs, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showFooter, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeNone, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeList, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeDetails, this.doOptionChange),
              n.UI.onRadioChange(this.$testModeFull, this.doOptionChange),
              this.refreshApplyButton();
          }
          unload() {
            n.UI.offCheckboxChange(this.$showHeader, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showStats, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showContext, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showDocs, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showFooter, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeNone, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeList, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeDetails, this.doOptionChange),
              n.UI.offRadioChange(this.$testModeFull, this.doOptionChange);
          }
          refreshApplyButton() {
            let e =
              n.UI.getCheckbox(this.$showHeader, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showStats, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showContext, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showDocs, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showFooter, this.doOptionChange) ||
              0 == n.UI.getRadio(this.$testModeNone, this.doOptionChange);
            n.UI.toggleButtonEnabled(this.$applyButton, e);
          }
          doApply() {
            let e = d.g.RunsPrintTestModeNone;
            n.UI.getRadio(this.$testModeList)
              ? (e = d.g.RunsPrintTestModeList)
              : n.UI.getRadio(this.$testModeDetails)
              ? (e = d.g.RunsPrintTestModeDetails)
              : n.UI.getRadio(this.$testModeFull) &&
                (e = d.g.RunsPrintTestModeFull);
            let t = d.g.RunsPrintFolderModeNone;
            n.UI.getRadio(this.$folderModeName)
              ? (t = d.g.RunsPrintFolderModeName)
              : n.UI.getRadio(this.$folderModeFull) &&
                (t = d.g.RunsPrintFolderModeFull),
              this.triggerSuccess({
                flags: {
                  show_header: n.UI.getCheckbox(this.$showHeader),
                  show_stats: n.UI.getCheckbox(this.$showStats),
                  show_context: n.UI.getCheckbox(this.$showContext),
                  show_docs: n.UI.getCheckbox(this.$showDocs),
                  show_footer: n.UI.getCheckbox(this.$showFooter),
                  show_links: n.UI.getCheckbox(this.$showLinks),
                  show_images: n.UI.getCheckbox(this.$showImages),
                  show_users: n.UI.getCheckbox(this.$showUsers),
                },
                testMode: e,
                folderMode: t,
              });
          }
        }
        u(g, "actions", ["doApply"]),
          u(g, "targets", [
            "showHeader",
            "showStats",
            "showContext",
            "showDocs",
            "showFooter",
            "showLinks",
            "showImages",
            "showUsers",
            "testModeNone",
            "testModeList",
            "testModeDetails",
            "testModeFull",
            "folderModeNone",
            "folderModeName",
            "folderModeFull",
            "applyButton",
          ]);
        var p = s(24850),
          m = s(55885),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b extends i.v {
          constructor(...e) {
            super(...e),
              C(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              });
          }
          load() {
            (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.columns = this.params.columns),
              (this.filter = this.params.filter),
              (this.flags = this.params.flags),
              (this.testMode = this.params.testMode),
              (this.folderMode = this.params.folderMode),
              this.filter &&
                0 == _.keys(this.filter.conditions).length &&
                (this.filter = null),
              f.Z.requestChild(this.component, "printFrame", {
                onAdded: () => {
                  this.refreshContent();
                },
              }),
              n.UI.initialize(this.element),
              this.shortcuts.register(r.N.P, this.doShortcutPrint, {
                control: !0,
              });
          }
          doConfigure() {
            let e = $(this.configureIconTarget);
            if (n.UI.popupVisible(e)) return;
            const t = new g(this.flags, this.testMode, this.folderMode);
            (t.onSuccess = (e) => {
              (this.flags = e.flags),
                (this.testMode = e.testMode),
                (this.folderMode = e.folderMode),
                this.refreshContent();
            }),
              t.show(e, c.Fz.BottomRight);
          }
          doPrint() {
            this.print();
          }
          print() {
            this.components.printFrame.print();
          }
          doRefresh() {
            n.UI.loading($(this.refreshIconTarget), () =>
              this.refreshContent()
            );
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTarget);
            n.UI.popupVisible(e) ||
              n.UI.loading(e, () => this.selectColumns(e));
          }
          selectColumns(e) {
            let t = {
              columns: this.columns,
              showWidth: !0,
              defaultWidth: d.g.MixColumnWidthDefaultPrint,
            };
            return o.N.post(
              "runs/render_test_columns/" + this.projectId,
              o.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new h.D(
                  !!window.opener?.appInstance?.layout?.page?.getCurrentColumns,
                  l.Z.lang("runs.apply_columns")
                );
                s.events.on("externalaction", (e) => {
                  e.target.hide();
                  let t = [];
                  window.opener?.appInstance?.layout?.page?.getCurrentColumns &&
                    (t =
                      window.opener.appInstance.layout.page.getCurrentColumns()),
                    (this.columns = t),
                    this.refreshContent();
                }),
                  (s.onSubmit = (e) => {
                    (this.columns = e), this.refreshContent();
                  }),
                  s.show(e, c.Fz.BottomRight, t.data);
              })
              .catch((e) => {
                f.Z.handleError(e);
              });
          }
          doCancelFilter() {
            let e = $(this.filterIconTarget);
            n.UI.popupVisible(e) && n.UI.getVisiblePopup(e).hide(),
              this.saveFilter(a.X.EmptyFilter),
              this.refreshContent();
          }
          doFilter() {
            let e = $(this.filterIconTarget),
              t = $(this.filterIconLabelTarget);
            n.UI.popupVisible(t) ||
              n.UI.loading(e, () => {
                let e = this.filter ? this.filter : a.X.EmptyFilter;
                return o.N.post(
                  "runs/render_test_filter/" + this.run.id,
                  o.N.toNetworkCase(e)
                )
                  .then((e) => {
                    const s = new p.y(
                      !!window.opener?.appInstance?.layout?.page
                        ?.getCurrentFilters,
                      l.Z.lang("runs.apply_filter")
                    );
                    s.events.on("selectfolders", (e) => {
                      let t = { selected: e.ids };
                      return o.N.post(
                        "runs/render_select_folders/" + this.run.id,
                        o.N.toNetworkCase(t)
                      ).then((t) => {
                        const i = new m._();
                        s.addActiveDialog(i),
                          (i.onHidden = () => {
                            s.removeActiveDialog(i);
                          }),
                          (i.onSuccess = (t) => {
                            let s = { selected: t };
                            return o.N.post(
                              "runs/render_test_filter_folders/" + this.run.id,
                              o.N.toNetworkCase(s)
                            ).then((t) => {
                              e.target.setFolderFilterContent(e.name, t.data);
                            });
                          }),
                          i.show(t.data);
                      });
                    }),
                      s.events.on("externalaction", (e) => {
                        e.target.hide();
                        let t = a.X.EmptyFilter;
                        window.opener?.appInstance?.layout?.page
                          ?.getCurrentFilters &&
                          (t =
                            window.opener.appInstance.layout.page.getCurrentFilters()),
                          this.saveFilter(t),
                          this.refreshContent();
                      }),
                      (s.onSubmit = (e) => {
                        this.saveFilter(e.filter), this.refreshContent();
                      }),
                      s.show(t, c.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  });
              });
          }
          saveFilter(e) {
            let t = e ? _.keys(e.conditions).length : 0;
            this.filter = t > 0 ? e : null;
            let s = $(this.filterIconTarget);
            n.UI.setSelectActionCount(s, t);
          }
          refreshContent() {
            let e = {
              folderMode: this.folderMode,
              testMode: this.testMode,
              showHeader: this.flags.show_header,
              showDocs: this.flags.show_docs,
              showContext: this.flags.show_context,
              showStats: this.flags.show_stats,
              showFooter: this.flags.show_footer,
              showLinks: this.flags.show_links,
              showImages: this.flags.show_images,
              showUsers: this.flags.show_users,
              filter: this.filter,
              columns: this.columns,
            };
            return this.components.printFrame.loadPost(
              "runs/render_print_frame/" + this.run.id,
              o.N.toNetworkCase(e)
            );
          }
        }
        C(b, "targets", [
          "contentContainer",
          "printButton",
          "refreshIcon",
          "selectColumnsIcon",
          "filterIcon",
          "filterIconLabel",
          "configureIcon",
        ]);
      },
      77676: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { AddEditControlMode: () => p, default: () => m });
        var i = s(89432),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(36649),
          l = s(7042),
          d = s(14589),
          h = s(42722),
          c = s(69555),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class m extends i.d {
          constructor(...e) {
            super(...e),
              g(this, "selectors", {
                controlGroup: ".control-group",
                controlGroupSection: ".control-group__section",
              }),
              g(this, "classes", {
                controlGroupFocused: "control-group--focused",
                noteEditorError: "run-results-note-editor--error",
                noteEditorUploading: "run-results-note-editor--uploading",
                noteEditorHasAttachments:
                  "run-results-note-editor--attachments",
                noteEditorHasIssues: "run-results-note-editor--issues",
                toolbarDragging: "run-results-note-editor__toolbar--dragging",
              }),
              g(this, "doFocusTrackerChange", (e) => {
                this.$controlGroup.toggleClass(
                  this.classes.controlGroupFocused,
                  e.focused
                ),
                  e.focused || this.events.trigger("blur", { target: this });
              }),
              g(this, "doClipboardPaste", (e, t) => {
                this.getFocused() &&
                  this.getEnabled() &&
                  (t.targetCanReceiveImages
                    ? t.nonImages.length > 0 &&
                      this.uploadAttachments(t.nonImages)
                    : t.files.length > 0 &&
                      (this.uploadAttachments(t.files), e.preventDefault()));
              }),
              g(this, "doControlGroupMouseDown", (e) => {
                let t = $(e.target).add($(e.target).parents());
                this.focusTracker.hasElement(t) ||
                  (this.getEnabled() &&
                    (e.preventDefault(), this.components.comment.focus()));
              }),
              g(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : n.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              g(this, "doToolbarDragEnter", (e) => {
                this.getEnabled() &&
                  (clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.toggleToolbarDragging(!0));
              }),
              g(this, "doToolbarDragOver", (e) => {
                this.getEnabled() &&
                  (clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.toggleToolbarDragging(!0));
              }),
              g(this, "doToolbarDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.toggleToolbarDragging(!1),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              g(this, "doToolbarDrop", (e) => {
                if (
                  (clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.toggleToolbarDragging(!1),
                  !this.getEnabled())
                )
                  return;
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAttachments(t);
              }),
              g(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAttachments(t.files),
                  o.UI.clearFile(this.$fileInput);
              }),
              g(this, "doInlineGalleryPreviewClose", (e) => {
                this.focus();
              }),
              g(
                this,
                "doInlineGalleryDeleteAttachment",
                (e) => (
                  (this.attachments = this.attachments.filter(
                    (t) => t.attachment_id != e.id
                  )),
                  this.refreshAttachments()
                )
              ),
              g(this, "doInlineGalleryEditAttachment", (e) => {
                let t = this.attachments.map((e) => ({
                  attachment_id: e.attachment_id,
                  name: e.name,
                }));
                for (let s of t)
                  if (s.attachment_id == e.id) {
                    s.name = e.name;
                    break;
                  }
                return this.refreshFragmentsWithCustomErrorHandling([
                  "attachments",
                  { attachments: t },
                ])
                  .then(() => {
                    this.hideValidationErrors(), (this.attachments = t);
                  })
                  .catch((e) => {
                    l.l.handleCustomFormError(e, (e, t) => {
                      this.showValidationErrors(t);
                    });
                  });
              }),
              g(this, "renderAttachments", (e = {}) =>
                n.N.post(
                  "attachments/render_update_inline_gallery/" + this.projectId,
                  n.N.toNetworkCase(
                    e.attachments ? e.attachments : this.attachments
                  )
                )
              );
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.mode = this.params.mode),
              (this.testId = this.params.testId),
              (this.projectId = this.params.projectId),
              (this.resultId = this.params.resultId),
              (this.unassigned = this.params.unassigned),
              (this.updatedAt = this.params.updatedAt),
              (this.attachments = this.params.attachments.map((e) => ({
                attachment_id: e.id,
                name: e.name,
              }))),
              (this.enabled = !0),
              (this.dragLeaveTimer = null),
              (this.focusTracker = new a.R(this.$element, !0)),
              this.focusTracker.events.on("change", this.doFocusTrackerChange),
              (this.$controlGroup = $(
                this.selectors.controlGroup,
                this.$element
              )),
              this.$controlGroup.on("mousedown", this.doControlGroupMouseDown),
              (this.$assigneeId = $(this.assigneeIdTarget)),
              (this.$submitButton = $(this.submitButtonTarget)),
              (this.$cancelButtons = $(this.cancelButtonTargets)),
              (this.$validationErrors = $(this.validationErrorsTarget)),
              (this.$toolbar = $(this.toolbarTarget)),
              (this.$toolbarDropzone = $(this.toolbarDropzoneTarget)),
              (this.$attachments = $(this.attachmentsTarget)),
              this.$toolbar.on("dragenter", this.doToolbarDragEnter),
              this.$toolbar.on("dragover", this.doToolbarDragOver),
              this.$toolbar.on("dragleave", this.doToolbarDragLeave),
              this.$toolbar.on("drop", this.doToolbarDrop),
              this.$attachments.on("dragenter", this.doToolbarDragEnter),
              this.$attachments.on("dragover", this.doToolbarDragOver),
              this.$attachments.on("dragleave", this.doToolbarDragLeave),
              this.$attachments.on("drop", this.doToolbarDrop),
              (this.$fileInput = $(this.fileInputTarget)),
              this.$fileInput.on("change", this.doFileInputChange),
              o.UI.initialize(this.$element),
              u.Z.requestChild(this.component, "comment", {
                onAdded: () => {
                  this.components.comment.loadEditor().then(() => {
                    this.focusTracker.refreshElements(this.$element),
                      this.events.trigger("loaded", { target: this });
                  });
                },
              }),
              u.Z.requestChild(this.component, "issues", {}),
              u.Z.requestChild(this.component, "inlineGallery", {
                events: {
                  delete: this.doInlineGalleryDeleteAttachment,
                  edit: this.doInlineGalleryEditAttachment,
                  previewclose: this.doInlineGalleryPreviewClose,
                },
              }),
              u.Z.requestChild(this.component, "fileCountProgress"),
              u.Z.requestChild(this.component, "fileByteProgress"),
              (this.assineeIdtItems = null),
              u.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              }),
              this.fragments.register("attachments", this.renderAttachments),
              (this.receiver = u.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$toolbar.off("dragenter", this.doToolbarDragEnter),
              this.$toolbar.off("dragover", this.doToolbarDragOver),
              this.$toolbar.off("dragleave", this.doToolbarDragLeave),
              this.$toolbar.off("drop", this.doToolbarDrop),
              this.$attachments.off("dragenter", this.doToolbarDragEnter),
              this.$attachments.off("dragover", this.doToolbarDragOver),
              this.$attachments.off("dragleave", this.doToolbarDragLeave),
              this.$attachments.off("drop", this.doToolbarDrop),
              this.$controlGroup.off("mousedown", this.doControlGroupMouseDown),
              this.$fileInput.off("change", this.doFileInputChange),
              u.Z.clipboard.removeReceiver(this.receiver);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              let t = {
                comment: this.components.comment.getData(),
                assigneeId: o.UI.getDropdownIntOrNull(this.$assigneeId),
                attachments: this.attachments,
                issues: this.components.issues.getIssues(),
              };
              this.unassigned && (t.unassigned = !0),
                this.mode == p.Edit &&
                  ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
              let s =
                this.mode == p.Add
                  ? "runs/create_result/" + this.testId
                  : "runs/update_result/" + this.resultId;
              return n.N.post(s, n.N.toNetworkCase(t))
                .then((e) =>
                  Promise.all(
                    this.events.trigger("success", {
                      target: this,
                      result: e.data,
                    })
                  )
                    .then(() => {
                      this.hideValidationErrors();
                    })
                    .catch((e) => {
                      u.Z.handleError(e);
                    })
                )
                .catch((e) =>
                  d.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      l.l.handleCustomFormError(e, (e, t) => {
                        this.showValidationErrors(t);
                      });
                    }
                  )
                );
            });
          }
          cancel() {
            this.events.trigger("cancel", { target: this });
          }
          doCancel() {
            this.cancel();
          }
          resetForm() {
            this.hideValidationErrors(),
              this.components.comment.setData(""),
              this.components.comment.focus(),
              (this.attachments.length = 0),
              o.UI.setDropdown(this.$assigneeId, 0),
              this.emptyFragments("attachments"),
              this.$element.removeClass(this.classes.noteEditorHasAttachments),
              this.$element.removeClass(this.classes.noteEditorHasIssues),
              this.components.issues.clear();
          }
          focus() {
            this.components.comment.focus(), this.focusTracker.focusChanged();
          }
          setEnabled(e) {
            (this.enabled = e),
              this.components.issues.setEnabled(e),
              this.components.comment.setEnabled(e),
              o.UI.toggleDropdownEnabled(this.$assigneeId, e),
              o.UI.toggleButtonEnabled(this.$submitButton, e),
              o.UI.toggleButtonEnabled(this.$cancelButtons, e),
              o.UI.toggleFileEnabled(this.$fileInput, e),
              o.UI.toggleIconActionEnabled($(this.addAttachmentIconTargets), e),
              o.UI.toggleIconActionEnabled($(this.addScreenshotIconTargets), e),
              o.UI.toggleIconActionEnabled($(this.addIssuesIconTargets), e);
          }
          getEnabled() {
            return this.enabled;
          }
          toggleToolbarDragging(e) {
            if (e) {
              let e = 0;
              this.attachments.length > 0 &&
                (e = -this.$attachments.outerHeight()),
                this.$toolbarDropzone.css({ top: e }),
                this.$toolbar.addClass(this.classes.toolbarDragging);
            } else this.$toolbar.removeClass(this.classes.toolbarDragging);
          }
          doAddScreenshot(e) {
            if (!this.getEnabled()) return;
            const t = $(e.currentTarget);
            o.UI.popupVisible(t) || new h.j().show(t, c.Fz.TopCenter);
          }
          doAddIssues() {
            this.getEnabled() &&
              (this.$element.addClass(this.classes.noteEditorHasIssues),
              this.components.issues.focus());
          }
          uploadAttachments(e) {
            let t = [...e],
              s = 0,
              i = e.length;
            this.components.fileByteProgress.setProgress(0, 1),
              this.components.fileCountProgress.setProgress(
                s,
                i,
                r.Z.lang("runs.upload_progress_caption", { count: 1, total: i })
              );
            let a = !1,
              d = [];
            o.UI.markLoading(this.$element),
              this.$element.addClass(this.classes.noteEditorUploading),
              t
                .reduce(
                  (e, t) =>
                    e.then(() => {
                      if (a) return Promise.resolve();
                      let e = new FormData();
                      return (
                        e.append("attachment", t),
                        this.components.fileByteProgress.setProgress(0, 1),
                        n.N.post("attachments/create/" + this.projectId, e, {
                          onUploadProgress: (e) => {
                            this.components.fileByteProgress.setProgress(
                              e.loaded,
                              e.total
                            );
                          },
                        })
                          .then((e) => {
                            (s += 1),
                              this.components.fileByteProgress.setProgress(
                                1,
                                1
                              ),
                              this.components.fileCountProgress.setProgress(
                                s,
                                i,
                                r.Z.lang("runs.upload_progress_caption", {
                                  count: s < i ? s + 1 : i,
                                  total: i,
                                })
                              ),
                              d.push({
                                attachment_id: e.data.id,
                                name: e.data.name,
                              });
                          })
                          .then(
                            () =>
                              new Promise(function (e, t) {
                                setTimeout(function () {
                                  e();
                                }, 200);
                              })
                          )
                          .catch((e) => {
                            l.l.handleCustomFormError(e, (e, t) => {
                              this.showValidationErrors(t);
                            }),
                              (a = !0);
                          })
                      );
                    }),
                  Promise.resolve()
                )
                .then(() =>
                  a
                    ? (o.UI.markCompleted(this.$element),
                      void this.$element.removeClass(
                        this.classes.noteEditorUploading
                      ))
                    : (this.attachments.push(...d),
                      this.refreshAttachments().then(() => {
                        o.UI.markCompleted(this.$element),
                          this.$element.removeClass(
                            this.classes.noteEditorUploading
                          );
                      }))
                );
          }
          hideValidationErrors() {
            this.$element.removeClass(this.classes.noteEditorError);
          }
          showValidationErrors(e) {
            this.$element.addClass(this.classes.noteEditorError),
              l.l.showValidationBlockErrors(this.$validationErrors, e);
          }
          getFocused() {
            return this.focusTracker.getFocused();
          }
          refreshAttachments() {
            return this.refreshFragments("attachments").then(() => {
              this.$element.toggleClass(
                this.classes.noteEditorHasAttachments,
                this.attachments.length > 0
              );
            });
          }
        }
        g(m, "targets", [
          "assigneeId",
          "submitButton",
          "cancelButton",
          "validationErrors",
          "fileInput",
          "addAttachmentIcon",
          "addIssuesIcon",
          "addScreenshotIcon",
          "toolbar",
          "toolbarDropzone",
          "attachments",
        ]);
      },
      98911: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(34740),
          o = s(96622),
          n = s(13814),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.BaseController {
          constructor(...e) {
            super(...e),
              a(this, "renderDocs", () =>
                n.N.post("runs/render_docs/" + this.run.id)
              ),
              a(this, "renderMetrics", () =>
                n.N.post("runs/render_status_metrics/" + this.run.id)
              );
          }
          load() {
            (this.page = { name: "status" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClose = this.params.canClose),
              (this.canDelete = this.params.canDelete),
              (this.canClosedDelete = this.params.canClosedDelete),
              o.UI.initialize(this.element),
              r.Z.requestChild(this.component, "resources"),
              (this.fragmentsAfterEdit = [
                "about",
                "header",
                "docs",
                "metrics",
              ]),
              (this.fragmentsAfterClose = [
                "about",
                "header",
                "docs",
                "metrics",
              ]),
              (this.fragmentsAfterAssign = ["about"]),
              this.registerBaseFragments(),
              this.fragments.register("docs", this.renderDocs),
              this.fragments.register("metrics", this.renderMetrics);
          }
          doEmptyEditDocs() {
            this.editRun($(this.emptyEditDocsButtonTarget), !0);
          }
          doEditDocs() {
            this.editRun($(this.editDocsIconTarget), !0);
          }
          afterClose() {
            return Promise.all([
              this.refreshFragments(...this.fragmentsAfterClose),
              this.components.resources.refreshContent(),
            ]).then(() => {
              this.components.resources.disableEditing();
            });
          }
        }
        a(l, "targets", [
          "aboutSection",
          "assignButton",
          "closeButton",
          "duplicateButton",
          "editButton",
          "editDocsIcon",
          "editMenuButton",
          "emptyEditDocsButton",
          "exportButton",
          "headerStatsBar",
          "responsiveContainer",
          "showInfoIcon",
          "showMilestonePopupIcon",
          "showTransitionPopupIcon",
        ]);
      },
      34740: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => T });
        var i = s(26454),
          o = s(13814),
          n = s(84709),
          r = s(43689),
          a = s(18792),
          l = s(69555),
          d = s(96622),
          h = s(16087),
          c = s(4989),
          u = s(3461),
          g = s(62612),
          p = s(24371);
        class m extends l.GI {
          constructor() {
            super("runs.transition_popup");
          }
        }
        var f = s(50922),
          C = s(67694),
          b = s(84182),
          I = s(48995),
          w = s(50609),
          v = s(7042),
          _ = s(5270);
        function S(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class x extends w.V {
          constructor(e) {
            super("runs.export_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              S(this, "classes", { hidden: "default-hidden" }),
              (this.runId = e);
          }
          load() {
            _.Z.requestChild(this.component, "columns");
          }
          unload() {}
          doSubmit() {
            d.UI.loading(this.$submitButton, () => {
              v.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.columns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: d.UI.getDropdown(this.$delimiter),
                columns: e,
                showContext: d.UI.getCheckbox(this.$showContext),
                rowMode: d.UI.getDropdownIntOrNull(this.$rowMode),
              };
              return (
                _.Z.blockUI(),
                o.N.post(
                  "runs/validate_export_csv/" + this.runId,
                  o.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      o.N.formPostDownload("runs/export_csv/" + this.runId, {
                        data: JSON.stringify(o.N.toNetworkCase(t)),
                      }),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    v.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    _.Z.unblockUI();
                  })
              );
            });
          }
        }
        function k(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        S(x, "forms", [
          { name: "export", fields: ["delimiter", "showContext", "rowMode"] },
        ]),
          S(x, "targets", ["submitButton", "downloadMessage"]),
          S(x, "actions", ["doSubmit"]);
        class T extends i.v {
          constructor(...e) {
            super(...e),
              k(this, "baseClasses", {
                popupNoMinWidth: "popup--no-min-width",
              }),
              k(this, "doExportMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "csv":
                    d.UI.loading($(this.exportButtonTarget), () =>
                      o.N.post("runs/render_export_csv/" + this.run.id)
                        .then((e) => {
                          new x(this.run.id).show(e.data);
                        })
                        .catch((e) => {
                          _.Z.handleError(e);
                        })
                    );
                    break;
                  case "pdf":
                    this.print();
                }
              }),
              k(this, "doEditMenuClick", (e) => {
                let t;
                switch (
                  (e.target.hide(),
                  this.hasEditButtonTarget && (t = $(this.editButtonTarget)),
                  e.actionName)
                ) {
                  case "edit":
                    this.editRun(t);
                    break;
                  case "delete":
                    this.deleteRun();
                    break;
                  case "close":
                    this.closeRun();
                }
              }),
              k(this, "renderHeader", () =>
                o.N.post("runs/render_header/" + this.run.id, {
                  page: this.page.name,
                })
              ),
              k(this, "renderAbout", () =>
                o.N.post("runs/render_about/" + this.run.id, {
                  page: this.page.name,
                })
              );
          }
          registerBaseFragments() {
            this.fragments.register("header", this.renderHeader),
              this.fragments.register("about", this.renderAbout);
          }
          print() {
            n.K.openPrintGass(o.N.url("runs/print/" + this.run.id));
          }
          doPrint() {
            this.print();
          }
          doShowExportMenu(e) {
            let t = $(this.exportButtonTarget);
            if (d.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: r.Z.lang("runs.export_to_csv"),
              callback: this.doExportMenuClick,
            }),
              s.push({
                type: "action",
                name: "pdf",
                title: r.Z.lang("runs.export_to_pdf"),
                callback: this.doExportMenuClick,
              }),
              new h.x(s, {
                additionalClasses: this.baseClasses.popupNoMinWidth,
              }).show(t, l.Fz.BottomLeft);
          }
          doShowStatsPopup() {
            let e = $(this.headerStatsBarTarget);
            d.UI.popupVisible(e) ||
              d.UI.loading(e, () =>
                o.N.post("runs/render_stats/" + this.run.id)
                  .then((t) => {
                    new C._().show(e, l.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    _.Z.handleError(e);
                  })
              );
          }
          doShowClosedInfo(e) {
            let t = $(e.currentTarget);
            d.UI.popupVisible(t) ||
              new I.u(
                I.Y.Closed,
                r.Z.lang("runs.closed_info_title"),
                t.data("content")
              ).show(t, l.Fz.BottomLeft);
          }
          doShowInfo() {
            let e = $(this.showInfoIconTarget);
            if (d.UI.popupVisible(e)) return;
            let t = "/runs/view/" + this.run.id;
            new a.N({
              title: r.Z.lang("runs.info_name", { name: this.run.name }),
              id: this.run.id,
              link: t,
              url: o.N.url(t),
            }).show(e, l.Fz.BottomLeft);
          }
          doShowEditMenu() {
            let e = $(this.editMenuButtonTarget);
            if (d.UI.popupVisible(e)) return;
            const t = [];
            this.run.is_closed
              ? this.canClosedDelete &&
                t.push({
                  type: "action",
                  name: "delete",
                  title: r.Z.lang("runs.delete"),
                  callback: this.doEditMenuClick,
                })
              : (this.canAddEdit &&
                  t.push({
                    type: "action",
                    name: "edit",
                    title: r.Z.lang("runs.edit"),
                    callback: this.doEditMenuClick,
                  }),
                this.canClose &&
                  t.push({
                    type: "action",
                    name: "close",
                    title: r.Z.lang("runs.close"),
                    callback: this.doEditMenuClick,
                  }),
                this.canDelete &&
                  ((this.canAddEdit || this.canClose) &&
                    t.push({ type: "divider" }),
                  t.push({
                    type: "action",
                    name: "delete",
                    title: r.Z.lang("runs.delete"),
                    callback: this.doEditMenuClick,
                  }))),
              new h.x(t).show(e, l.Fz.BottomRight);
          }
          doDuplicateRun() {
            d.UI.loading($(this.duplicateButtonTarget), () =>
              o.N.post("runs/render_select_statuses/" + this.run.id)
                .then((e) => {
                  const t = new c.Z(this.run.id);
                  return (
                    (t.onSuccess = (e) => {
                      let t = { statuses: e };
                      return o.N.post(
                        "runs/render_copy/" + this.run.id,
                        o.N.toNetworkCase(t)
                      ).then((e) => {
                        const t = new u.q(u.G.Copy, this.projectId);
                        return (
                          (t.onSuccess = (e) => o.N.visit("runs/view/" + e.id)),
                          t.show(e.data)
                        );
                      });
                    }),
                    t.show(e.data)
                  );
                })
                .catch((e) => {
                  _.Z.handleError(e);
                })
            );
          }
          doEditRun() {
            this.editRun($(this.editButtonTarget));
          }
          doCloseRun() {
            this.closeRun();
          }
          doAssignRun() {
            d.UI.loading($(this.assignButtonTarget), () =>
              o.N.post("runs/render_assign/" + this.run.id)
                .then((e) => {
                  const t = new b.y(this.run.id, this.projectId);
                  return (
                    (t.onSuccess = (e) => this.afterAssign()), t.show(e.data)
                  );
                })
                .catch((e) => {
                  _.Z.handleError(e);
                })
            );
          }
          deleteRun() {
            let e = new g.A(
              r.Z.lang("runs.delete_title"),
              r.Z.langEscape("runs.delete_message", { name: this.run.name }),
              r.Z.lang("runs.delete_button")
            );
            (e.onSuccess = () =>
              o.N.post("runs/delete/" + this.run.id).then(() =>
                o.N.visit("runs/" + this.projectId)
              )),
              e.show();
          }
          closeRun() {
            let e = new p.U(
              r.Z.lang("runs.close_title"),
              r.Z.langEscape("runs.close_message", { name: this.run.name }),
              r.Z.lang("runs.close_button"),
              r.Z.langEscape("runs.close_confirmation", { name: this.run.name })
            );
            (e.onSuccess = () =>
              o.N.post("runs/close/" + this.run.id).then(
                (e) => ((this.run = e.data), this.afterClose())
              )),
              e.show();
          }
          editRun(e, t = !1) {
            d.UI.loading(e, () =>
              o.N.post("runs/render_update/" + this.run.id)
                .then((e) => {
                  const s = new u.q(
                    u.G.Edit,
                    this.projectId,
                    this.run.id,
                    null,
                    t
                  );
                  (s.onSuccess = (e) => ((this.run = e), this.afterEdit(e))),
                    s.show(e.data);
                })
                .catch((e) => {
                  _.Z.handleError(e);
                })
            );
          }
          doShowTransitionPopup() {
            let e = $(this.showTransitionPopupIconTarget);
            d.UI.popupVisible(e) ||
              d.UI.loading(e, () =>
                o.N.post("runs/render_transitions/" + this.run.id)
                  .then((t) => {
                    new m().show(e, l.Fz.BottomRight, t.data);
                  })
                  .catch((e) => {
                    _.Z.handleError(e);
                  })
              );
          }
          doShowMilestonePopup() {
            let e = $(this.showMilestonePopupIconTarget);
            if (d.UI.popupVisible(e)) return;
            const t = new f.m(),
              s = $(this.aboutSectionTarget).data("hierarchyPopup");
            t.show(e, l.Fz.BottomRight, s);
          }
          afterEdit() {
            return this.refreshFragments(...this.fragmentsAfterEdit);
          }
          afterClose() {
            return this.refreshFragments(...this.fragmentsAfterClose);
          }
          afterAssign() {
            return this.refreshFragments(...this.fragmentsAfterAssign);
          }
        }
      },
      20267: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => O });
        var i = s(34740),
          o = s(96622),
          n = s(11802),
          r = s(15612),
          a = s(47914),
          l = s(13814),
          d = s(69555),
          h = s(19968),
          c = s(26734),
          u = s(7045),
          g = s(87762),
          p = s(21077);
        function m(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class f extends d.GI {
          constructor(e) {
            super("runs.tests.grouping_menu", {}),
              m(this, "selectors", { actionItem: ".popup__menu__action-item" }),
              m(this, "classes", { itemActive: "popup__menu__item--active" }),
              (this.groupBy = e);
          }
          load() {
            this.groupBy &&
              $(this.selectors.actionItem, this.$popup).each((e, t) => {
                let s = $(t);
                s.toggleClass(
                  this.classes.itemActive,
                  s.data("value") == this.groupBy
                );
              });
          }
        }
        var C = s(7042);
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class I extends d.GI {
          constructor(e) {
            super("runs.tests.assign_popup"), (this.testId = e);
          }
          doApply() {
            this.submit(
              this.$applyButton,
              o.UI.getDropdownIntOrNull(this.$assigneeId)
            );
          }
          doUnassign() {
            this.submit(this.$unassignButton, null);
          }
          submit(e, t) {
            o.UI.loading(e, () => {
              let e = {};
              return (
                t ? (e.assigneeId = t) : (e.unassigned = !0),
                l.N.post(
                  "runs/assign_test/" + this.testId,
                  l.N.toNetworkCase(e)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) => {
                    C.l.handleFormError(e, this.formViews);
                  })
              );
            });
          }
        }
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        b(I, "forms", [{ name: "result", fields: ["assigneeId"] }]),
          b(I, "targets", ["applyButton", "unassignButton"]),
          b(I, "actions", ["doApply", "doUnassign"]);
        class v extends d.GI {
          constructor(e, t) {
            super("runs.tests.assign_many_popup"),
              (this.runId = e),
              (this.testIds = t);
          }
          doApply() {
            this.submit(
              this.$applyButton,
              o.UI.getDropdownIntOrNull(this.$assigneeId)
            );
          }
          doUnassign() {
            this.submit(this.$unassignButton, null);
          }
          submit(e, t) {
            o.UI.loading(e, () => {
              let e = { ids: this.testIds };
              return (
                t ? (e.assigneeId = t) : (e.unassigned = !0),
                l.N.post(
                  "runs/assign_tests/" + this.runId,
                  l.N.toNetworkCase(e)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) => {
                    C.l.handleFormError(e, this.formViews);
                  })
              );
            });
          }
        }
        w(v, "forms", [{ name: "result", fields: ["assigneeId"] }]),
          w(v, "targets", ["applyButton", "unassignButton"]),
          w(v, "actions", ["doApply", "doUnassign"]);
        class S extends d.GI {
          constructor() {
            super("runs.tests.status_menu");
          }
        }
        var x = s(18792),
          k = s(43689),
          T = s(16087),
          y = s(24850),
          E = s(62612),
          N = s(55885),
          U = s(77741),
          F = s(35451),
          A = s(50609),
          P = s(14589),
          R = s(27181),
          M = s(5270);
        function B(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class D {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class L extends A.V {
          constructor(e = L.Add, t = null, s = null, i = null, n = null) {
            super("runs.results.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: a.X.SplitDialogWidth,
              resizable: !0,
              responsive: !0,
            }),
              B(this, "classes", {
                hidden: "default-hidden",
                headerStatusVisible:
                  "runs-results-add-edit-dialog-header-status--visible",
              }),
              B(this, "templates", {
                statusTag:
                  '<div class="status-tag status-$(systemName)-back"\n            >$(name)</div>',
              }),
              B(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : l.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              B(this, "doElapsedConvertInput", (e) => {
                let t = { timespan: e.timespan };
                return l.N.post(
                  "common/parse_timespan",
                  l.N.toNetworkCase(t)
                ).then((e) => Math.trunc(e.data.microseconds / 1e6));
              }),
              B(this, "doElapsedEnterKey", (e) => {
                this.submit();
              }),
              B(this, "doStatusIdAdded", () => {
                this.refreshStatusTag();
              }),
              B(this, "doStatusIdChange", () => {
                (this.statusIdChanged = !0), this.refreshStatusTag();
              }),
              B(this, "doStepStatusIdChange", (e) => {
                if (this.statusIdChanged || this.stepStatusIdChanged) return;
                if (this.mode == D.Edit) {
                  let e = o.UI.getDropdown(this.$statusId),
                    t = this.components.statusId.getItemParams(e);
                  if (t && 0 == t.statusIsPassed) return;
                }
                let t = e.target.getValue();
                t != r.g.StatusesUntestedId &&
                  e.target.getItemParams(t).statusIsFailed &&
                  (o.UI.setDropdown(this.$statusId, t),
                  this.refreshStatusTag(),
                  (this.stepStatusIdChanged = !0));
              }),
              (this.mode = e),
              (this.projectId = t),
              (this.testId = s),
              (this.resultId = i),
              (this.statusIdChanged = !1),
              (this.stepStatusIdChanged = !1),
              n &&
                M.Z.waitComponentConnected("statusId", () => {
                  o.UI.setDropdown(this.$statusId, n);
                });
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.updatedAt = this.params.updatedAt),
              (this.fields = new R.rN(this.fieldSettings, this.$dialog)),
              (this.assineeIdtItems = null),
              M.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              }),
              M.Z.requestChild(this.component, "statusId", {
                onAdded: this.doStatusIdAdded,
                events: { change: this.doStatusIdChange },
              }),
              M.Z.requestChild(this.component, "stepStatusId", {
                events: { change: this.doStepStatusIdChange },
              }),
              M.Z.requestChild(this.component, "dialogManageAttachments", {
                events: {
                  refreshui: (e) => {
                    this.refreshUi();
                  },
                  initform: (e) => {
                    C.l.hideValidationErrors(this.formViews);
                  },
                  error: (e) => {
                    C.l.handleFormError(e.error, this.formViews),
                      this.refreshPositionIfNeeded();
                  },
                },
              }),
              M.Z.requestChild(this.component, "elapsed", {
                events: {
                  convertinput: this.doElapsedConvertInput,
                  enterkey: this.doElapsedEnterKey,
                },
              }),
              M.Z.requestChild(this.component, "issues");
          }
          unload() {}
          loaded() {
            this.fields.loaded();
          }
          prepare() {
            let e = new Promise((e, t) => {
                M.Z.requestChild(this.component, "comment", {
                  onAdded: () => {
                    this.components.comment.loadEditor().then(() => {
                      e();
                    });
                  },
                });
              }),
              t = this.fields.prepare();
            return Promise.all([e, t]);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              let t = Promise.resolve(!0);
              if (
                this.components.dialogManageAttachments &&
                this.components.dialogManageAttachments.isEditing()
              ) {
                let e =
                  this.components.dialogManageAttachments.confirmActiveEditing();
                e && (t = e);
              }
              return t.then((t) => {
                if (!t) return;
                C.l.hideValidationErrors(this.formViews);
                let s = {
                  statusId: o.UI.getDropdownIntOrNull(this.$statusId),
                  comment: this.components.comment.getData(),
                  assigneeId: o.UI.getDropdownIntOrNull(this.$assigneeId),
                  elapsed: this.components.elapsed.getValue(),
                  attachments:
                    this.components.dialogManageAttachments.getAttachments(),
                  issues: this.components.issues.getIssues(),
                };
                _.assign(
                  s,
                  this.fields.getValues(
                    (e) =>
                      !e.settings.is_restricted || this.canAddEditRestricted
                  )
                ),
                  this.mode == D.Edit &&
                    ((s.updatedAt = this.updatedAt), (s.forceUpdate = e));
                let i =
                  this.mode == D.Add
                    ? "runs/create_result/" + this.testId
                    : "runs/update_result/" + this.resultId;
                return l.N.post(i, l.N.toNetworkCase(s))
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    P.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        C.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  );
              });
            });
          }
          mainContentScroll() {
            let e = this.$mainContent.scrollTop();
            this.$headerStatus.toggleClass(
              this.classes.headerStatusVisible,
              e > 100
            );
          }
          refreshStatusTag() {
            let e = o.UI.getDropdownIntOrNull(this.$statusId),
              t = null;
            e && (t = this.components.statusId.getItemParams(e)),
              t
                ? this.$headerStatus.html(
                    k.Z.template(this.templates.statusTag, {
                      name: t.statusName,
                      systemName: t.statusSystemName,
                    })
                  )
                : this.$headerStatus.empty();
          }
        }
        function Z(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        B(L, "forms", [
          {
            name: "result",
            fields: ["statusId", "comment", "assigneeId", "elapsed", "issues"],
          },
        ]),
          B(L, "targets", ["submitButton", "headerStatus"]),
          B(L, "actions", ["doSubmit"]);
        class j extends A.V {
          constructor(e, t, s) {
            super("runs.results.add_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: a.X.SplitDialogWidth,
              resizable: !0,
            }),
              Z(this, "classes", { hidden: "default-hidden" }),
              Z(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : l.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              Z(this, "doElapsedConvertInput", (e) => {
                let t = { timespan: e.timespan };
                return l.N.post(
                  "common/parse_timespan",
                  l.N.toNetworkCase(t)
                ).then((e) => Math.trunc(e.data.microseconds / 1e6));
              }),
              Z(this, "doElapsedEnterKey", (e) => {
                this.submit();
              }),
              (this.projectId = e),
              (this.runId = t),
              (this.testIds = s);
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.fields = new R.rN(this.fieldSettings, this.$dialog)),
              (this.assineeIdtItems = null),
              M.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              }),
              M.Z.requestChild(this.component, "elapsed", {
                events: {
                  convertinput: this.doElapsedConvertInput,
                  enterkey: this.doElapsedEnterKey,
                },
              }),
              M.Z.requestChild(this.component, "issues");
          }
          unload() {}
          prepare() {
            let e = new Promise((e, t) => {
                M.Z.requestChild(this.component, "comment", {
                  onAdded: () => {
                    this.components.comment.loadEditor().then(() => {
                      e();
                    });
                  },
                });
              }),
              t = this.fields.prepare();
            return Promise.all([e, t]);
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              C.l.hideValidationErrors(this.formViews);
              let e = {
                ids: this.testIds,
                statusId: o.UI.getDropdownIntOrNull(this.$statusId),
                comment: this.components.comment.getData(),
                assigneeId: o.UI.getDropdownIntOrNull(this.$assigneeId),
                elapsed: this.components.elapsed.getValue(),
                issues: this.components.issues.getIssues(),
              };
              _.assign(
                e,
                this.fields.getValues(
                  (e) => !e.settings.is_restricted || this.canAddEditRestricted
                )
              );
              let t = "runs/create_results/" + this.runId;
              return l.N.post(t, l.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  C.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        Z(j, "forms", [
          {
            name: "result",
            fields: ["statusId", "comment", "assigneeId", "elapsed", "issues"],
          },
        ]),
          Z(j, "targets", ["submitButton"]),
          Z(j, "actions", ["doSubmit"]);
        var z = s(15331);
        function V(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class O extends i.BaseController {
          constructor(...e) {
            super(...e),
              V(this, "selectors", {
                action: ".action-list__action",
                groupPropertiesDocsContent:
                  ".runs-group-properties__docs__content",
                visible: ":visible",
                fieldIdCopyIcon: ".field-value-id__copy i",
                tableToolbarPagination: ".table__toolbar__pagination",
              }),
              V(this, "classes", {
                groupPropertiesDocsOverflowing:
                  "runs-group-properties__docs--overflowing",
                groupPropertiesDocsExpanded:
                  "runs-group-properties__docs--expanded",
                groupContentEmpty: "runs-group-content--empty",
                resultsAdding: "runs-test-results--adding",
                hidden: "default-hidden",
                groupContentWithFolderNames:
                  "runs-group-content--with-folder-names",
                iconAnimate: "icon-animation-scale-pulse",
                groupHeaderSearchActive: "runs-group-header--search-active",
                groupPropertiesTitleHasTableToolbar:
                  "runs-group-properties__title--has-table-toolbar",
              }),
              V(this, "templates", {
                actionEditorContainer:
                  '<div class="action-list__action__editor"></div>',
              }),
              V(this, "storage", {
                groupFolderNames: "runs.view.group_folder_names",
              }),
              V(this, "doMixDetailsHide", (e) => {
                this.clearTest(),
                  this.components.tests &&
                    this.components.tests.clearActivatedRow(),
                  this.updateUrl(),
                  this.refreshActions();
              }),
              V(this, "doMixResize", (e) => {
                this.refreshListPaneWidth();
              }),
              V(this, "doGroupsNodeClick", (e) => {
                this.components.groups.nodeLoading(e.$node, () =>
                  this.components.listContent.loading(() =>
                    this.selectGroup(e.$node, e.id).catch((e) => {
                      M.Z.handleError(e);
                    })
                  )
                );
              }),
              V(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              }),
              V(this, "doShortcutSearch", (e) => {
                e.preventDefault(),
                  this.components.testSearch &&
                    this.components.testSearch.focus();
              }),
              V(this, "doShortcutNext", (e) => {
                this.nextTest();
              }),
              V(this, "doShortcutPrevious", (e) => {
                this.previousTest();
              }),
              V(this, "doShortcutListUp", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.up(), this.scrollToActivatedTest());
              }),
              V(this, "doShortcutListDown", (e) => {
                this.components.mix.getListVisible() &&
                  (this.navigator.down(), this.scrollToActivatedTest());
              }),
              V(this, "doNavigatorClearItem", (e) => {
                this.clearTest(), this.refreshActions(), this.updateUrl();
              }),
              V(this, "doNavigatorActivateItem", (e) =>
                this.activateTest(
                  this.components.tests,
                  e.id,
                  e.$row,
                  this.components.tests.getField(e.id, "test")
                )
              ),
              V(this, "doNavigatorNextPage", (e) =>
                this.components.tests.nextPage()
              ),
              V(this, "doNavigatorPreviousPage", (e) =>
                this.components.tests.previousPage()
              ),
              V(this, "doNavigatorNextGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                return (
                  (t =
                    s.length > 0
                      ? this.components.groups.getAndLoadNextNode(s)
                      : Promise.resolve(this.components.groups.getFirstNode())),
                  t
                    .then((e) => {
                      if (!e || 0 == e.length) return Promise.resolve();
                      let t = e.data("id");
                      return (
                        (this.pageState.testId = null),
                        this.components.groups.markActivatedNode(e),
                        this.components.groups.markLoading(e),
                        this.refreshFragmentsWithCustomErrorHandling([
                          "groupContainer",
                          { groupId: t },
                        ])
                          .then((s) => {
                            this.components.groups.markCompleted(e),
                              (this.pageState.testId = null),
                              (this.pageState.groupId = t),
                              this.components.listContent.scrollTop(),
                              o.UI.fixedContainerScrollIntoViewIfNeeded(
                                this.components.groups.getActivatedNodeEntry(),
                                this.components.treeContent.getBody()
                              );
                          })
                          .catch((t) => {
                            this.components.groups.markCompleted(e),
                              M.Z.handleError(t);
                          })
                      );
                    })
                    .catch((e) => {
                      M.Z.handleError(e);
                    })
                );
              }),
              V(this, "doNavigatorPreviousGroup", (e) => {
                if (!this.components.groups) return Promise.resolve();
                let t,
                  s = this.components.groups.getActivatedNode();
                if (
                  ((t =
                    s.length > 0
                      ? this.components.groups.getPreviousNode(s)
                      : this.components.groups.getLastNode()),
                  0 == t.length)
                )
                  return Promise.resolve();
                let i = t.data("id");
                return (
                  (this.pageState.testId = null),
                  this.components.groups.markActivatedNode(t),
                  this.components.groups.markLoading(t),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "groupContainer",
                    { groupId: i, paginationCurrent: r.g.PaginationCurrentMax },
                  ])
                    .then((e) => {
                      this.components.groups.markCompleted(t),
                        (this.pageState.testId = null),
                        (this.pageState.groupId = i),
                        this.components.listContent.scrollTop(),
                        o.UI.fixedContainerScrollIntoViewIfNeeded(
                          this.components.groups.getActivatedNodeEntry(),
                          this.components.treeContent.getBody()
                        );
                    })
                    .catch((e) => {
                      this.components.groups.markCompleted(t),
                        M.Z.handleError(e);
                    })
                );
              }),
              V(this, "doGroupsLoadNode", (e) =>
                this.components.groups.nodeLoading(e.$node, () =>
                  this.expandNode(e.$node)
                )
              ),
              V(this, "doGroupsAdded", (e, t) => {
                this.pageState.groupId = null;
                let s = this.components.groups.getActivatedNode();
                s.length > 0 && (this.pageState.groupId = s.first().data("id")),
                  this.navigator.setTree(e),
                  this.refreshActions(),
                  this.updateUrl();
              }),
              V(this, "doGroupsRemoved", (e, t) => {
                this.navigator.setTree(null);
              }),
              V(this, "doTestsConnected", (e, t) => {
                let s = 0 == e.getRowCount();
                $(this.groupContentTarget).toggleClass(
                  this.classes.groupContentEmpty,
                  s
                ),
                  this.updateTestsToolbar(e),
                  this.updateGroupItemCount(e);
              }),
              V(this, "doTestsRemoved", (e, t) => {
                this.navigator.setList(null),
                  this.hasGroupItemCountTarget &&
                    $(this.groupItemCountTarget).empty();
              }),
              V(this, "doTestsAdded", (e, t) => {
                let s = e.getResponsiveContentColumns();
                for (let e of s) this.updateResponsiveTestContent(e);
                this.navigator.setList(e),
                  this.refreshActions(),
                  this.updateUrl(),
                  this.updateTestsToolbar();
              }),
              V(this, "doTestsResizeContent", (e) => {
                this.updateResponsiveTestContent(e);
              }),
              V(this, "doTestsSelectionChange", (e) => {
                this.refreshActions();
              }),
              V(this, "doTestsStateChange", (e) =>
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments([
                    "groupTests",
                    { state: e.state },
                  ]).then(() => {
                    this.updateUrl(e.state);
                  })
                )
              ),
              V(this, "doTestsColumnResize", (e) => {
                let t = _.clone(this.pageState.columns);
                t[e.name] && (t[e.name].width = e.width);
                let s = { columns: t };
                return l.N.post(
                  "runs/save_test_columns/" + this.projectId,
                  l.N.toNetworkCase(s)
                ).then(() => {
                  (this.pageState.columns = t),
                    this.components.tests.resizeNonResponsiveColumn(
                      e.name,
                      e.width
                    );
                });
              }),
              V(this, "doTestsActionClick", (e) => {
                let t;
                switch (e.actionName) {
                  case "activate":
                    this.activateTest(e.target, e.id, e.$row, e.$field);
                    break;
                  case "menu":
                    this.showTestsContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "copyId":
                    o.UI.copyTextToClipbiard(e.$field.data("copyContent")),
                      (t = e.$field.find(this.selectors.fieldIdCopyIcon)),
                      t.addClass(this.classes.iconAnimate),
                      setTimeout(() => {
                        t.removeClass(this.classes.iconAnimate);
                      }, 600);
                }
              }),
              V(this, "doTestsContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "add":
                    e.context.table.loading(
                      "actionfield",
                      e.context.$field,
                      () => this.addResult(e.context.id)
                    );
                    break;
                  case "assign":
                    e.context.table.loading(
                      "actionfield",
                      e.context.$field,
                      () => this.assignTest(e.context.$field, e.context.id)
                    );
                }
              }),
              V(this, "doTestsContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.tests.getSelectedIds();
                switch (e.actionName) {
                  case "add":
                    e.context.table.loading(
                      "actionfield",
                      e.context.$field,
                      () => this.addResults(t)
                    );
                    break;
                  case "assign":
                    e.context.table.loading(
                      "actionfield",
                      e.context.$field,
                      () => this.assignTests(e.context.$field, t)
                    );
                }
              }),
              V(this, "doGroupingMenuActionClick", (e) => {
                if ((e.target.hide(), "select" == e.actionName)) {
                  let t = $(this.groupingMenuIconTarget);
                  o.UI.loading(t, () =>
                    this.changeGrouping(
                      e.actionValue,
                      e.$actionItem.data("name")
                    )
                  );
                }
              }),
              V(this, "doShortcutAddResult", () => {
                this.addResultIcon();
              }),
              V(this, "doResultMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editEntry(
                      e.context.id,
                      e.context.$result,
                      e.context.$menu
                    );
                    break;
                  case "delete":
                    this.deleteResult(e.context.id, e.context.$result);
                }
              }),
              V(this, "doShortcutPassNext", (e) => {
                this.passNext();
              }),
              V(this, "doTestTabsChange", (e) => {
                this.refreshFragments([
                  "testTabContent",
                  { tab: e.index },
                ]).then(() => {
                  this.components.testTabs.highlightTab(e.index),
                    this.components.testTabs.setLoading(!1);
                });
              }),
              V(this, "doGroupTitleMenuClick", (e) => {
                e.target.hide();
                let t = this.components.groups.getActivatedNode();
                "edit" === e.actionName &&
                  o.UI.loading(e.context.$menuIcon, () =>
                    this.editFolder(this.pageState.groupId, t)
                  );
              }),
              V(this, "doTestTitleMenuClick", (e) => {
                e.target.hide();
                let t = $(this.testPropertiesTarget).data("caseId");
                "edit" === e.actionName &&
                  o.UI.loading(e.context.$menuIcon, () => this.editCase(t));
              }),
              V(this, "doResultsEditNoteEditorRemoved", (e) => {
                this.endNoteEditing();
              }),
              V(this, "doResultsEditNoteEditorLoaded", (e) => {
                this.components.resultsEditNoteEditor.focus();
              }),
              V(this, "doResultsEditNoteEditorSuccess", (e) =>
                this.refreshFragments("testResultPage", "testProperties").then(
                  () => {
                    this.endNoteEditing();
                  }
                )
              ),
              V(this, "doResultsEditNoteEditorCancel", (e) => {
                this.endNoteEditing();
              }),
              V(this, "doResultsAddNoteEditorSuccess", (e) =>
                this.refreshFragments("testResultPage", "testProperties").then(
                  () => {
                    this.components.resultsAddNoteEditor.resetForm();
                  }
                )
              ),
              V(this, "doResultsAddNoteEditorCancel", (e) => {
                this.hideResultsAddNoteEditor();
              }),
              V(this, "doTestContextTabChange", (e) => {
                o.UI.loading($(this.testContextTabTarget), () =>
                  this.refreshFragments(["testContextPage", { state: e.state }])
                );
              }),
              V(this, "doTestContextActiveStateChange", (e) =>
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments(["testContextPage", { state: e.state }])
                )
              ),
              V(this, "doTestContextLatestAllGroupsStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["testContextPage", { state: e.state }])
                )
              ),
              V(this, "doTestIssueGroupsStateChange", (e) =>
                e.target.loading(e.loading, e.location, () =>
                  this.refreshFragments(["testIssuePage", { state: e.state }])
                )
              ),
              V(this, "doFolderNameMenuClick", (e) => {
                e.target.hide(),
                  (this.groupFolderNames = "show" == e.actionName),
                  M.Z.storage.setBoolItem(
                    this.storage.groupFolderNames,
                    this.groupFolderNames
                  ),
                  this.refreshTestsFolderNames();
              }),
              V(this, "doTestSearchSearch", (e) => {
                let t = { search: e.term };
                return l.N.post(
                  "runs/render_test_search/" + this.run.id,
                  l.N.toNetworkCase(t)
                ).then((e) => e.data);
              }),
              V(this, "doTestSearchStateChange", (e) => {
                let t = {
                  search: this.components.testSearch.getSearchTerm(),
                  paginationCurrent: e.state.paginationCurrent,
                  paginationRows: e.state.paginationRows,
                };
                return l.N.post(
                  "runs/render_test_search/" + this.run.id,
                  l.N.toNetworkCase(t)
                ).then((e) => e.data);
              }),
              V(this, "doTestSearchSelectItem", (e) =>
                e.tab
                  ? l.N.visitTab(
                      `runs/view/${this.run.id}?test_id=${e.$row.data("id")}`
                    )
                  : l.N.visit(
                      `runs/view/${this.run.id}?test_id=${e.$row.data("id")}`
                    )
              ),
              V(this, "doTestSearchFocus", (e) => {
                $(this.groupHeaderToolbarTarget).addClass(
                  this.classes.groupHeaderSearchActive
                );
              }),
              V(this, "doTestSearchBlur", (e) => {
                $(this.groupHeaderToolbarTarget).removeClass(
                  this.classes.groupHeaderSearchActive
                );
              }),
              V(this, "renderTreeGroupContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  l.N.post(
                    "runs/render_tree_group_containers/" + this.run.id,
                    l.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: ["treeContainer", "groupContainer"],
                  }))
                );
              }),
              V(this, "afterRenderTreeGroupContainers", () => {
                this.refreshTestsFolderNames(),
                  this.refreshListPaneWidth(),
                  (this.testContextStatuses = null);
              }),
              V(this, "renderTreeGroupTestContainers", (e = {}) => {
                let t = _.clone(e);
                return (
                  _.defaults(t, this.pageState),
                  l.N.post(
                    "runs/render_tree_group_test_containers/" + this.run.id,
                    l.N.toNetworkCase(t)
                  ).then((e) => ({
                    response: e,
                    fragments: [
                      "treeContainer",
                      "groupContainer",
                      "testContainer",
                    ],
                  }))
                );
              }),
              V(this, "afterRenderTreeGroupTestContainers", () => {
                this.refreshTestsFolderNames(), this.refreshListPaneWidth();
              }),
              V(this, "renderGroupContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.groupId && (t.groupId = e.groupId),
                  e.paginationCurrent &&
                    (t.paginationCurrent = e.paginationCurrent),
                  l.N.post(
                    "runs/render_group_container/" + this.run.id,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              V(this, "afterRenderGroupContainer", () => {
                this.refreshListPaneWidth(), this.refreshTestsFolderNames();
              }),
              V(this, "renderGroupProperties", (e = {}) =>
                l.N.post(
                  `runs/render_folder_properties/${this.run.id}/${this.pageState.groupId}`
                )
              ),
              V(this, "afterRenderGroupProperties", () => {
                this.updateGroupDocs(), this.updateTestsToolbar();
              }),
              V(this, "renderGroupTests", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.tests &&
                      (t = this.components.tests.getState()),
                  _.defaults(t, this.pageState),
                  e.withPagination || delete t.paginationCurrent,
                  l.N.post(
                    "runs/render_group_tests/" + this.run.id,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              V(this, "afterRenderGroupTests", () => {
                this.updateTestsToolbar();
              }),
              V(this, "renderTestContainer", (e = {}) => {
                let t = _.clone(this.pageState);
                return (
                  e.testId && (t.testId = e.testId),
                  l.N.post(
                    "runs/render_test_container/" + this.run.id,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              V(this, "afterRenderTestContainer", () => {
                this.testContextStatuses = null;
              }),
              V(this, "renderTestProperties", (e = {}) =>
                l.N.post("runs/render_test_properties/" + this.pageState.testId)
              ),
              V(this, "afterRenderTestProperties", () => {}),
              V(this, "renderTestTabContent", (e = {}) => {
                let t, s;
                t =
                  "tab" in e ? e.tab : this.components.testTabs.getCurrentTab();
                let i = {};
                return (
                  0 == t
                    ? (s = "runs/render_test_results/" + this.pageState.testId)
                    : 1 == t
                    ? ((i = { tab: "active" }),
                      (s = "runs/render_test_context/" + this.pageState.testId))
                    : (s = "runs/render_test_issues/" + this.pageState.testId),
                  l.N.post(s, l.N.toNetworkCase(i))
                );
              }),
              V(this, "afterRenderTestTabContent", () => {
                this.testContextStatuses = null;
              }),
              V(this, "renderTestResultPage", (e = {}) =>
                l.N.post(
                  "runs/render_test_result_page/" + this.pageState.testId
                )
              ),
              V(this, "afterRenderTestResultPage", () => {}),
              V(this, "renderTestContextPage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  (t.tab = o.UI.getDropdown($(this.testContextTabTarget))),
                  this.testContextStatuses &&
                    (t.statuses = this.testContextStatuses),
                  l.N.post(
                    "runs/render_test_context_page/" + this.pageState.testId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              V(this, "afterRenderTestContextPage", () => {}),
              V(this, "renderTestIssuePage", (e = {}) => {
                let t = {};
                return (
                  e.state && (t = e.state),
                  l.N.post(
                    "runs/render_test_issue_page/" + this.pageState.testId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              V(this, "afterRenderTestIssuePage", () => {});
          }
          prepare() {
            this.groupFolderNames = M.Z.storage.getBoolItem(
              this.storage.groupFolderNames,
              !0
            );
          }
          load() {
            if (
              ((this.page = { name: "results" }),
              (this.run = this.params.run),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClose = this.params.canClose),
              (this.canDelete = this.params.canDelete),
              (this.canClosedDelete = this.params.canClosedDelete),
              (this.canResultAddEdit = this.params.canResultAddEdit),
              (this.canResultDelete = this.params.canResultDelete),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canRepositoryAddEdit = this.params.canRepositoryAddEdit),
              (this.passedStatusId = this.params.passedStatusId),
              (this.pageState = {
                testId: this.params.testId,
                groupBy: this.params.groupBy,
                groupId: this.params.groupId,
                columns: this.params.columns,
                filter: this.params.filter,
              }),
              (this.testContextStatuses = null),
              (this.$currentNoteEditContainer = null),
              this.pageState.filter &&
                0 == _.keys(this.pageState.filter.conditions).length &&
                (this.pageState.filter = null),
              M.Z.requestChild(this.component, "treeContent"),
              M.Z.requestChild(this.component, "listContent"),
              M.Z.requestChild(this.component, "detailsContent"),
              M.Z.requestChild(this.component, "mix", {
                events: {
                  detailshide: this.doMixDetailsHide,
                  resize: this.doMixResize,
                },
              }),
              M.Z.requestChild(this.component, "groups", {
                onAdded: this.doGroupsAdded,
                onRemoved: this.doGroupsRemoved,
                events: {
                  loadnode: this.doGroupsLoadNode,
                  nodeclick: this.doGroupsNodeClick,
                },
              }),
              M.Z.requestChild(this.component, "tests", {
                onConnected: this.doTestsConnected,
                onAdded: this.doTestsAdded,
                onRemoved: this.doTestsRemoved,
                events: {
                  actionclick: this.doTestsActionClick,
                  statechange: this.doTestsStateChange,
                  selectionchange: this.doTestsSelectionChange,
                  resizecontent: this.doTestsResizeContent,
                  columnresize: this.doTestsColumnResize,
                },
              }),
              M.Z.requestChild(this.component, "testTabs", {
                events: { tabchange: this.doTestTabsChange },
              }),
              M.Z.requestChild(this.component, "resultsAddNoteEditor", {
                events: {
                  success: this.doResultsAddNoteEditorSuccess,
                  cancel: this.doResultsAddNoteEditorCancel,
                },
              }),
              M.Z.requestChild(this.component, "resultsEditNoteEditor", {
                onRemoved: this.doResultsEditNoteEditorRemoved,
                events: {
                  loaded: this.doResultsEditNoteEditorLoaded,
                  success: this.doResultsEditNoteEditorSuccess,
                  cancel: this.doResultsEditNoteEditorCancel,
                },
              }),
              M.Z.requestChild(this.component, "testContextTab", {
                events: { change: this.doTestContextTabChange },
              }),
              M.Z.requestChild(this.component, "testContextActive", {
                events: { statechange: this.doTestContextActiveStateChange },
              }),
              M.Z.requestChild(this.component, "testContextLatestAllGroups", {
                events: {
                  statechange: this.doTestContextLatestAllGroupsStateChange,
                },
              }),
              M.Z.requestChild(this.component, "testIssueGroups", {
                events: { statechange: this.doTestIssueGroupsStateChange },
              }),
              M.Z.requestChild(this.component, "testSearch", {
                events: {
                  search: this.doTestSearchSearch,
                  selectitem: this.doTestSearchSelectItem,
                  statechange: this.doTestSearchStateChange,
                  focus: this.doTestSearchFocus,
                  blur: this.doTestSearchBlur,
                },
              }),
              o.UI.initialize(this.element),
              this.registerBaseFragments(),
              this.fragments.register(
                "treeGroupContainers",
                this.renderTreeGroupContainers,
                { completedCallback: this.afterRenderTreeGroupContainers }
              ),
              this.fragments.register(
                "treeGroupTestContainers",
                this.renderTreeGroupTestContainers,
                { completedCallback: this.afterRenderTreeGroupTestContainers }
              ),
              this.fragments.register(
                "groupContainer",
                this.renderGroupContainer,
                { completedCallback: this.afterRenderGroupContainer }
              ),
              this.fragments.register(
                "groupProperties",
                this.renderGroupProperties,
                { completedCallback: this.afterRenderGroupProperties }
              ),
              this.fragments.register("groupTests", this.renderGroupTests, {
                completedCallback: this.afterRenderGroupTests,
              }),
              this.fragments.register(
                "testContainer",
                this.renderTestContainer,
                { completedCallback: this.afterRenderTestContainer }
              ),
              this.fragments.register(
                "testProperties",
                this.renderTestProperties,
                { completedCallback: this.afterRenderTestProperties }
              ),
              this.fragments.register(
                "testTabContent",
                this.renderTestTabContent,
                { completedCallback: this.afterRenderTestTabContent }
              ),
              this.fragments.register(
                "testResultPage",
                this.renderTestResultPage,
                { completedCallback: this.afterRenderTestResultPage }
              ),
              this.fragments.register(
                "testContextPage",
                this.renderTestContextPage,
                { completedCallback: this.afterRenderTestContextPage }
              ),
              this.fragments.register(
                "testIssuePage",
                this.renderTestIssuePage,
                { completedCallback: this.afterRenderTestIssuePage }
              ),
              this.shortcuts.register(n.N.H, this.doShortcutPrevious, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.J, this.doShortcutListUp, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(n.N.K, this.doShortcutListDown, {
                disableForInputs: !0,
              }),
              this.shortcuts.register(n.N.L, this.doShortcutNext, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.P, this.doShortcutPassNext, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.R, this.doShortcutAddResult, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.Slash, this.doShortcutSearch, {
                disableForInputs: !0,
                onlyTriggerInitial: !0,
              }),
              this.shortcuts.register(n.N.P, this.doShortcutPrint, {
                control: !0,
              }),
              (this.navigator = new h.C()),
              this.navigator.events.on(
                "activateitem",
                this.doNavigatorActivateItem
              ),
              this.navigator.events.on("clearitem", this.doNavigatorClearItem),
              this.navigator.events.on("nextgroup", this.doNavigatorNextGroup),
              this.navigator.events.on("nextpage", this.doNavigatorNextPage),
              this.navigator.events.on(
                "previousgroup",
                this.doNavigatorPreviousGroup
              ),
              this.navigator.events.on(
                "previouspage",
                this.doNavigatorPreviousPage
              ),
              !this.params.isRunEmpty)
            ) {
              let e = {};
              this.params.paginationCurrent &&
                (e.paginationCurrent = this.params.paginationCurrent),
                this.params.paginationRows &&
                  (e.paginationRows = this.params.paginationRows),
                this.params.sortColumn &&
                  (e.sortColumn = this.params.sortColumn),
                this.params.sortDirection &&
                  (e.sortDirection = this.params.sortDirection),
                this.loadInitialContent(e);
            }
            this.updateUrl();
          }
          unload() {
            this.navigator.setList(null), this.navigator.setTree(null);
          }
          loadInitialContent(e) {
            this.pageState.testId
              ? this.refreshFragments(["treeGroupTestContainers", e]).then(
                  () => {
                    this.components.treeContent.showContent(
                      r.g.MixContentContent
                    ),
                      this.components.listContent.showContent(
                        r.g.MixContentContent
                      ),
                      this.components.detailsContent.showContent(
                        r.g.MixContentContent
                      ),
                      this.refreshActions(),
                      this.refreshListPaneWidth();
                  }
                )
              : this.refreshFragments(["treeGroupContainers", e]).then(() => {
                  this.components.treeContent.showContent(
                    r.g.MixContentContent
                  ),
                    this.components.listContent.showContent(
                      r.g.MixContentContent
                    ),
                    this.refreshActions(),
                    this.refreshListPaneWidth();
                });
          }
          refreshActions() {
            let e = this.pageState.groupBy == r.g.RepositoryGroupByFolder;
            o.UI.toggleSelectActionEnabled(
              $(this.showFolderNameMenuActionTargets),
              !e
            );
            let t = 0;
            this.components.tests &&
              (t = this.components.tests.getSelectedCount()),
              this.hasAssignTestsIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.assignTestsIconTargets),
                  t > 0
                ),
              this.hasAddResultsIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.addResultsIconTargets),
                  t > 0
                ),
              o.UI.toggleIconActionEnabled(
                $(this.selectColumnsIconTargets),
                !!this.components.tests
              );
            let s = this.components.detailsContent.getContentVisible(
                r.g.MixContentContent
              ),
              i = this.hasTestPropertiesTarget;
            this.hasAddResultIconTarget &&
              o.UI.toggleIconActionEnabled(
                $(this.addResultIconTargets),
                s && i
              ),
              this.hasPassNextIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.passNextIconTargets),
                  s && i
                ),
              this.hasSelectNextIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.selectNextIconTargets),
                  s && i
                ),
              this.hasAssignTestIconTarget &&
                o.UI.toggleIconActionEnabled(
                  $(this.assignTestIconTargets),
                  s && i
                );
          }
          updateUrl(e = null) {
            let t = {},
              s = e;
            this.pageState.groupBy != r.g.RepositoryGroupByFolder &&
              (t.group_by = this.pageState.groupBy),
              this.pageState.groupId && (t.group_id = this.pageState.groupId),
              !s &&
                this.components.tests &&
                (s = this.components.tests.getState()),
              s &&
                (s.paginationCurrent &&
                  1 != s.paginationCurrent &&
                  (t.pagination_current = s.paginationCurrent),
                s.paginationRows &&
                  s.paginationRows != r.g.PaginationDefaultRows &&
                  (t.pagination_rows = s.paginationRows),
                s.sortColumn && (t.sort_column = s.sortColumn),
                s.sortDirection && (t.sort_direction = s.sortDirection)),
              this.pageState.testId && (t.test_id = this.pageState.testId),
              this.pageState.filter &&
                (t.filter = k.Z.base64EncodeUrlsafe(
                  JSON.stringify(this.pageState.filter)
                ));
            let i = Object.keys(t).map((e) => `${e}=${t[e]}`),
              o = "runs/view/" + this.run.id;
            i.length > 0
              ? M.Z.replaceLocation(l.N.url(o + "?" + i.join("&")))
              : M.Z.replaceLocation(l.N.url(o));
          }
          clearTest() {
            this.components.detailsContent.showContent(
              r.g.MixContentNoSelection
            ),
              this.fragments.empty("testContainer"),
              (this.pageState.testId = null),
              (this.testContextStatuses = null);
          }
          selectGroup(e, t, s = !0) {
            let i = this.components.groups.getActivatedNode();
            return (
              this.components.groups.markActivatedNode(e),
              s &&
                this.components.mix.getDetailsVisible() &&
                this.components.detailsContent.getContentVisible(
                  r.g.MixContentContent
                ) &&
                this.components.detailsContent.markLoading(),
              (this.pageState.testId = null),
              this.refreshFragmentsWithCustomErrorHandling([
                "groupContainer",
                { groupId: t },
              ])
                .then((e) => {
                  this.components.detailsContent.markCompleted(),
                    this.clearTest(),
                    (this.pageState.groupId = t),
                    this.components.mix.getTreeOverlayVisible() &&
                      this.components.mix.hideTreeOverlay(),
                    this.components.listContent.scrollTop(),
                    this.refreshActions(),
                    this.updateUrl();
                })
                .catch((e) => {
                  throw (
                    (this.components.groups.markActivatedNode(i),
                    this.components.detailsContent.markCompleted(),
                    this.clearTest(),
                    this.updateUrl(),
                    this.refreshActions(),
                    e)
                  );
                })
            );
          }
          expandNode(e) {
            if (this.components.groups.getNodeExpanded(e))
              return Promise.resolve();
            let t = e.data("id"),
              s = {};
            return (
              this.pageState.filter && (s.filter = this.pageState.filter),
              l.N.post(
                "runs/render_folder_children_subtree/" + this.run.id + "/" + t,
                l.N.toNetworkCase(s)
              )
                .then((t) => {
                  this.components.groups.addLoadedNodes(e, $(t.data)),
                    this.components.groups.expandNode(e);
                })
                .catch((e) => {
                  M.Z.handleError(e);
                })
            );
          }
          doNextTest() {
            this.nextTest();
          }
          doPreviousTest() {
            this.previousTest();
          }
          nextTest() {
            if (this.components.groups)
              return (
                this.components.mix.getDetailsVisible() ||
                  (this.components.detailsContent.showContent(
                    r.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
                o.UI.loading($(this.nextTestIconTarget), () =>
                  this.navigator
                    .next()
                    .then(
                      (e) => (
                        M.Z.resetPopupTracker(),
                        this.scrollToActivatedTestOrTop(),
                        e
                      )
                    )
                )
              );
          }
          previousTest() {
            if (this.components.groups)
              return (
                this.components.mix.getDetailsVisible() ||
                  (this.components.detailsContent.showContent(
                    r.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
                o.UI.loading($(this.previousTestIconTarget), () =>
                  this.navigator
                    .previous()
                    .then(
                      (e) => (
                        M.Z.resetPopupTracker(),
                        this.scrollToActivatedTestOrTop(),
                        e
                      )
                    )
                )
              );
          }
          scrollToActivatedTest() {
            if (this.components.tests) {
              let e = this.components.tests.getActivatedRow();
              return (
                e.length > 0 &&
                (o.UI.fixedContainerScrollIntoViewIfNeeded(
                  e,
                  this.components.listContent.getBody()
                ),
                !0)
              );
            }
            return !1;
          }
          scrollToActivatedTestOrTop() {
            this.scrollToActivatedTest() ||
              this.components.listContent.scrollTop();
          }
          updateGroupItemCount(e = null) {
            if (
              (e || (e = this.components.tests),
              e && this.hasGroupItemCountTarget)
            ) {
              let t = e.getParams().itemCount || 0;
              $(this.groupItemCountTarget).text(`(${t})`);
            }
          }
          updateResponsiveTestContent(e) {
            "repository_cases:tags" == e.name
              ? c.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.tags;
                  return t ? JSON.parse(t) : [];
                })
              : "run_tests:issues" == e.name
              ? (u.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.issueTags;
                  return t ? JSON.parse(t) : [];
                }),
                o.UI.initialize(this.components.tests.$element))
              : "repository_cases:issues" == e.name
              ? (u.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.issueTags;
                  return t ? JSON.parse(t) : [];
                }),
                o.UI.initialize(this.components.tests.$element))
              : g.m.displayResponsiveValueLists(e.$fields, e.width, (e) => {
                  let t = e.dataset.values;
                  return t ? JSON.parse(t) : [];
                });
          }
          doSelectColumns() {
            let e = $(this.selectColumnsIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () => this.selectColumns(t));
          }
          selectColumns(e) {
            let t = { columns: this.pageState.columns, showWidth: !0 };
            return l.N.post(
              "runs/render_test_columns/" + this.projectId,
              l.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new p.D();
                (s.onSubmit = (e) => {
                  let t = { columns: e };
                  return l.N.post(
                    "runs/save_test_columns/" + this.projectId,
                    l.N.toNetworkCase(t)
                  ).then(
                    () => (
                      (this.pageState.columns = e),
                      this.refreshFragments("groupTests")
                    )
                  );
                }),
                  s.show(e, d.Fz.BottomRight, t.data);
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          showTestsContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let r = [];
            e.getSelectedRows().length <= 1
              ? (r.push({
                  type: "action",
                  name: "add",
                  title: k.Z.lang("runs.add_result"),
                  callback: this.doTestsContextMenuSingleClick,
                }),
                r.push({
                  type: "action",
                  name: "assign",
                  title: k.Z.lang("runs.assign_test"),
                  callback: this.doTestsContextMenuSingleClick,
                }))
              : (r.push({
                  type: "action",
                  name: "add",
                  title: k.Z.lang("runs.add_results"),
                  callback: this.doTestsContextMenuMultipleClick,
                }),
                r.push({
                  type: "action",
                  name: "assign",
                  title: k.Z.lang("runs.assign_tests"),
                  callback: this.doTestsContextMenuMultipleClick,
                })),
              new T.x(r, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, d.Fz.BottomLeft);
          }
          activateTest(e, t, s, i) {
            let o = this.components.mix.getDetailsVisible(),
              n = this.components.mix.getMode(),
              a = e.getActivatedRow();
            return (
              o
                ? this.components.detailsContent.markLoading()
                : (this.components.detailsContent.showContent(
                    r.g.MixContentInitial
                  ),
                  this.components.mix.showDetails()),
              e.loading(
                "actionfield",
                i,
                () => (
                  e.markActivatedRow(s),
                  this.refreshFragmentsWithCustomErrorHandling([
                    "testContainer",
                    { testId: t },
                  ])
                    .then((e) => {
                      (this.pageState.testId = t),
                        this.components.detailsContent.markCompleted(),
                        this.components.detailsContent.showContent(
                          r.g.MixContentContent
                        ),
                        this.components.detailsContent.scrollTop(),
                        this.updateUrl(),
                        this.refreshActions();
                    })
                    .catch((t) => {
                      o
                        ? this.components.detailsContent.markCompleted()
                        : this.components.mix.setMode(n),
                        e.markActivatedRow(a),
                        M.Z.handleError(t);
                    })
                )
              )
            );
          }
          keyDown(e) {
            e.which == n.N.ESC
              ? this.components.resultsAddNoteEditor &&
                this.components.resultsAddNoteEditor.getFocused()
                ? this.hideResultsAddNoteEditor()
                : this.components.resultsEditNoteEditor &&
                  this.components.resultsEditNoteEditor.getFocused()
                ? this.endNoteEditing()
                : this.components.mix.hideDetails()
              : e.which == n.N.S &&
                (e.ctrlKey || e.metaKey) &&
                (this.components.resultsAddNoteEditor &&
                this.components.resultsAddNoteEditor.getFocused()
                  ? this.components.resultsAddNoteEditor.submit()
                  : this.components.resultsEditNoteEditor &&
                    this.components.resultsEditNoteEditor.getFocused() &&
                    this.components.resultsEditNoteEditor.submit());
          }
          doToggleGroupPropertiesDocs() {
            $(this.groupPropertiesDocsTarget).toggleClass(
              this.classes.groupPropertiesDocsExpanded
            ),
              this.updateTestsToolbar();
          }
          updateStickyContent(e) {
            if (!this.components.listContent) return;
            let t = e - 40;
            this.hasGroupPropertyContainerTarget &&
              $(this.groupPropertyContainerTarget).css({ maxWidth: `${t}px` }),
              this.hasGroupEmptyContainerTarget &&
                $(this.groupEmptyContainerTarget).css({ maxWidth: `${t}px` });
          }
          updateGroupDocs() {
            if (!this.hasGroupPropertiesDocsTarget) return;
            let e = $(this.groupPropertiesDocsTarget),
              t = $(this.selectors.groupPropertiesDocsContent, e).height();
            e.toggleClass(
              this.classes.groupPropertiesDocsOverflowing,
              t >= a.X.RepositoriesGroupDocsContentOverflowHeight
            );
          }
          updateTestsToolbar(e = null) {
            if (
              (e || (e = this.components.tests),
              e && this.hasGroupPropertiesTarget)
            ) {
              let t = $(this.groupPropertiesTarget),
                s = e.getToolbarElement();
              t.height() &&
                (s.removeClass(this.classes.hidden),
                s.css("top", `-${t.height() + 18}px`)),
                $(this.groupPropertiesTitleTarget).toggleClass(
                  this.classes.groupPropertiesTitleHasTableToolbar,
                  s.find(this.selectors.tableToolbarPagination).length > 0
                );
            }
          }
          responsiveContainerResize() {
            this.refreshListPaneWidth();
          }
          refreshListPaneWidth() {
            if (!this.components.listContent) return;
            let e = this.components.listContent.getBody();
            if (0 == e.length) return;
            let t = e[0].clientWidth;
            this.updateStickyContent(t),
              this.updateGroupDocs(),
              this.updateTestsToolbar(),
              this.components.detailsContent &&
                o.UI.dropdownRefreshSizes(
                  this.components.detailsContent.getBody()
                );
          }
          doNomatchCancelFilter(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.saveFilter(a.X.EmptyFilter).catch((e) => {
                M.Z.handleError(e);
              })
            );
          }
          doNomatchShowFolders(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.changeGrouping(
                r.g.RepositoryGroupByFolder,
                k.Z.lang("repositories.folder")
              )
            );
          }
          doMissingCancelFilter(e) {
            o.UI.loading($(e.currentTarget), () =>
              this.saveFilter(a.X.EmptyFilter).catch((e) => {
                M.Z.handleError(e);
              })
            );
          }
          doNodataEditRun(e) {
            this.editRun($(e.currentTarget));
          }
          doShowGroupingMenu() {
            let e = $(this.groupingMenuIconTarget);
            o.UI.popupVisible(e) ||
              o.UI.loading(e, () => {
                let t = { groupBy: this.pageState.groupBy };
                return l.N.post(
                  "runs/render_test_grouping/" + this.projectId,
                  l.N.toNetworkCase(t)
                )
                  .then((t) => {
                    const s = new f(this.pageState.groupBy);
                    s.events.on("actionclick", this.doGroupingMenuActionClick),
                      s.show(e, d.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    M.Z.handleError(e);
                  });
              });
          }
          changeGrouping(e, t) {
            (this.pageState.groupBy = e),
              (this.pageState.groupId = null),
              (this.pageState.caseId = null);
            let s = { groupBy: e };
            return l.N.post(
              "runs/save_test_grouping/" + this.projectId,
              l.N.toNetworkCase(s)
            )
              .then((e) =>
                this.refreshFragments("treeGroupContainers").then(() => {
                  let e = $(this.groupingMenuIconTarget);
                  o.UI.setSelectActionText(e, t),
                    this.clearTest(),
                    this.updateUrl(),
                    this.refreshActions();
                })
              )
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          doCancelFilter() {
            let e = $(this.filterIconTarget);
            o.UI.getIconActionEnabled(e) &&
              (o.UI.popupVisible(e) && o.UI.getVisiblePopup(e).hide(),
              o.UI.loading(e, () =>
                this.saveFilter(a.X.EmptyFilter).catch((e) => {
                  M.Z.handleError(e);
                })
              ));
          }
          doFilter() {
            let e = $(this.filterIconTarget),
              t = $(this.filterIconLabelTarget);
            o.UI.getIconActionEnabled(e) &&
              (o.UI.popupVisible(t) ||
                o.UI.loading(e, () => {
                  let e = this.pageState.filter
                    ? this.pageState.filter
                    : a.X.EmptyFilter;
                  return l.N.post(
                    "runs/render_test_filter/" + this.run.id,
                    l.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const s = new y.y();
                      s.events.on("selectfolders", (e) => {
                        let t = { selected: e.ids };
                        return l.N.post(
                          "runs/render_select_folders/" + this.run.id,
                          l.N.toNetworkCase(t)
                        ).then((t) => {
                          const i = new N._();
                          s.addActiveDialog(i),
                            (i.onHidden = () => {
                              s.removeActiveDialog(i);
                            }),
                            (i.onSuccess = (t) => {
                              let s = { selected: t };
                              return l.N.post(
                                "runs/render_test_filter_folders/" +
                                  this.run.id,
                                l.N.toNetworkCase(s)
                              ).then((t) => {
                                e.target.setFolderFilterContent(e.name, t.data);
                              });
                            }),
                            i.show(t.data);
                        });
                      }),
                        (s.onSubmit = (e) => this.saveFilter(e.filter)),
                        s.show(t, d.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      M.Z.handleError(e);
                    });
                }));
          }
          saveFilter(e) {
            return l.N.post(
              "runs/save_test_filter/" + this.projectId,
              l.N.toNetworkCase(e)
            ).then((e) => {
              let t = _.keys(e.data.conditions).length;
              return (
                (this.pageState.filter = t > 0 ? e.data : null),
                this.refreshFragments([
                  "treeGroupContainers",
                  { forceGroup: !0 },
                ]).then(() => {
                  let e = $(this.filterIconTarget);
                  o.UI.setSelectActionCount(e, t),
                    this.clearTest(),
                    this.updateUrl(),
                    this.refreshActions(),
                    this.updateEmptyRun();
                })
              );
            });
          }
          updateEmptyRun() {
            this.hasEmptyTreePlaceholderTarget &&
              (this.clearTest(),
              this.components.mix.hideDetails(),
              this.updateUrl());
          }
          doRefresh() {
            o.UI.loading($(this.refreshIconTarget), () =>
              this.refreshFragments("treeGroupContainers").then(() => {
                this.clearTest(),
                  this.updateUrl(),
                  this.refreshActions(),
                  this.updateEmptyRun();
              })
            );
          }
          doAddResults() {
            let e = $(this.addResultsIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () => {
                let e = this.components.tests.getSelectedIds();
                return 1 == e.length
                  ? this.addResult(e[0])
                  : this.addResults(e);
              });
          }
          addResults(e) {
            let t = { ids: e };
            return l.N.post(
              "runs/render_create_results/" + this.run.id,
              l.N.toNetworkCase(t)
            )
              .then((t) => {
                const s = new j(this.projectId, this.run.id, e);
                return (
                  (s.onSuccess = (t) => {
                    let s = ["header"];
                    return (
                      this.pageState.testId &&
                        _.includes(e, this.pageState.testId) &&
                        (s.push("testProperties"), s.push("testTabContent")),
                      Promise.all([
                        this.updateTestRows(e),
                        this.refreshFragments(...s),
                      ])
                    );
                  }),
                  s.show(t.data)
                );
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          doResultsAddResult() {
            let e = $(this.resultsAddResultIconTarget);
            o.UI.loading(e, () => this.addResult(this.pageState.testId));
          }
          doAddResult() {
            this.addResultIcon();
          }
          addResultIcon() {
            let e = $(this.addResultIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.loading(t, () => this.addResult(this.pageState.testId));
          }
          addResult(e, t = null) {
            return l.N.post("runs/render_create_result/" + e)
              .then((s) => {
                const i = new L(D.Add, this.projectId, e, null, t);
                return (
                  (i.onSuccess = (t) => {
                    let s = ["header"];
                    return (
                      this.pageState.testId == e &&
                        (s.push("testProperties"), s.push("testTabContent")),
                      Promise.all([
                        this.updateTestRows([e]),
                        this.refreshFragments(...s),
                      ])
                    );
                  }),
                  i.show(s.data)
                );
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          doSelectTestTitleResult(e) {
            let t = $(e.currentTarget);
            this.showSelectTestResultMenu(t, this.pageState.testId);
          }
          doSelectTestsResult(e) {
            let t = $(e.currentTarget),
              s = this.components.tests.getRowIdByElement(t);
            this.showSelectTestResultMenu(t, s);
          }
          showSelectTestResultMenu(e, t) {
            if (o.UI.popupVisible(e)) return;
            const s = new S();
            s.events.on("actionclick", (s) => {
              s.target.hide(),
                "select" == s.actionName &&
                  o.UI.loading(e, () => this.addResult(t, s.actionValue));
            }),
              s.show(e, d.Fz.BottomRight);
          }
          doShowResultMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.action),
              i = s.data("id");
            const n = [];
            this.canResultAddEdit &&
              n.push({
                type: "action",
                name: "edit",
                title: k.Z.lang("runs.edit_result"),
                callback: this.doResultMenuClick,
              }),
              this.canResultDelete &&
                (this.canResultAddEdit && n.push({ type: "divider" }),
                n.push({
                  type: "action",
                  name: "delete",
                  title: k.Z.lang("runs.delete_result"),
                  callback: this.doResultMenuClick,
                })),
              new T.x(n, { context: { $menu: t, $result: s, id: i } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          deleteResult(e, t) {
            let s, i, o;
            t.data("result")
              ? ((s = k.Z.lang("runs.delete_result_title")),
                (i = k.Z.lang("runs.delete_result_message")),
                (o = k.Z.lang("runs.delete_result_button")))
              : t.data("assignment")
              ? ((s = k.Z.lang("runs.delete_assignment_title")),
                (i = k.Z.lang("runs.delete_assignment_message")),
                (o = k.Z.lang("runs.delete_assignment_button")))
              : ((s = k.Z.lang("runs.delete_note_title")),
                (i = k.Z.lang("runs.delete_note_message")),
                (o = k.Z.lang("runs.delete_note_button")));
            let n = new E.A(s, i, o);
            (n.onSuccess = () =>
              l.N.post("runs/delete_result/" + e).then(() =>
                Promise.all([
                  this.refreshFragments(
                    "header",
                    "testProperties",
                    "testResultPage"
                  ),
                  this.updateTestRows([this.pageState.testId]),
                ])
              )),
              n.show();
          }
          editEntry(e, t, s) {
            t.data("result")
              ? this.editResult(e, t, s)
              : this.editNote(e, t, s);
          }
          editResult(e, t, s) {
            o.UI.loading(s, () =>
              l.N.post("runs/render_update_result/" + e)
                .then((t) => {
                  const s = new L(
                    D.Edit,
                    this.projectId,
                    this.pageState.testId,
                    e
                  );
                  return (
                    (s.onSuccess = (e) =>
                      Promise.all([
                        this.updateTestRows([this.pageState.testId]),
                        this.refreshFragments(
                          "header",
                          "testProperties",
                          "testTabContent"
                        ),
                      ])),
                    s.show(t.data)
                  );
                })
                .catch((e) => {
                  M.Z.handleError(e);
                })
            );
          }
          doResultsSelectNext() {
            let e = $(this.resultsSelectNextIconTarget),
              t = $(this.resultsPassNextIconTarget);
            if (o.UI.popupVisible(e)) return;
            const s = new S();
            s.events.on("actionclick", (e) => {
              e.target.hide(),
                "select" == e.actionName &&
                  o.UI.loading(t, () =>
                    this.addResultNext(this.pageState.testId, e.actionValue)
                  );
            }),
              s.show(e, d.Fz.BottomRight);
          }
          doSelectNext() {
            let e = $(this.selectNextIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.passNextIconTargets).filter(this.selectors.visible);
            const i = new S();
            i.events.on("actionclick", (e) => {
              e.target.hide(),
                "select" == e.actionName &&
                  o.UI.loading(s, () =>
                    this.addResultNext(this.pageState.testId, e.actionValue)
                  );
            }),
              i.show(t, d.Fz.BottomRight);
          }
          doResultsPassNext() {
            let e = $(this.resultsPassNextIconTarget);
            o.UI.loading(e, () =>
              this.addResultNext(this.pageState.testId, this.passedStatusId)
            );
          }
          doPassNext() {
            this.passNext();
          }
          passNext() {
            let e = $(this.passNextIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.loading(t, () =>
              this.addResultNext(this.pageState.testId, this.passedStatusId)
            );
          }
          addResultNext(e, t) {
            let s,
              i = () =>
                Promise.all([
                  this.updateTestRows([e]),
                  this.refreshFragments("header"),
                ]).then(() =>
                  this.nextTest().then((t) => {
                    if (!1 === t && this.pageState.testId == e)
                      return this.refreshFragments(
                        "testProperties",
                        "testTabContent"
                      );
                  })
                ),
              o = () =>
                l.N.post("runs/render_create_result/" + e)
                  .then((s) => {
                    const o = new L(D.Add, this.projectId, e, null, t);
                    return (o.onSuccess = (e) => i()), o.show(s.data);
                  })
                  .catch((e) => {
                    M.Z.handleError(e);
                  });
            if (t) {
              let o = { statusId: t };
              s = l.N.post("runs/create_result/" + e, l.N.toNetworkCase(o))
                .then((e) => i().then(() => !0))
                .catch((e) => !1);
            } else s = Promise.resolve(!1);
            return s.then((e) => {
              if (!e) return o();
            });
          }
          doAssignTests() {
            let e = $(this.assignTestsIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () => {
                let e = this.components.tests.getSelectedIds();
                return 1 == e.length
                  ? this.assignTest(t, e[0])
                  : this.assignTests(t, e);
              });
          }
          assignTests(e, t) {
            return l.N.post("runs/render_assign_tests/" + this.run.id)
              .then((s) => {
                const i = new v(this.run.id, t);
                return (
                  (i.onSuccess = (e) => {
                    let s = [this.updateTestRows(t)];
                    return (
                      this.pageState.testId &&
                        _.includes(t, this.pageState.testId) &&
                        s.push(
                          this.refreshFragments(
                            "testProperties",
                            "testTabContent"
                          )
                        ),
                      Promise.all(s)
                    );
                  }),
                  i.show(e, d.Fz.BottomLeft, s.data)
                );
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          doAssignTest() {
            let e = $(this.assignTestIconTargets);
            if (!o.UI.getIconActionEnabled(e)) return;
            let t = e.filter(this.selectors.visible);
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () => this.assignTest(t, this.pageState.testId));
          }
          assignTest(e, t) {
            return l.N.post("runs/render_assign_test/" + t)
              .then((s) => {
                const i = new I(t);
                return (
                  (i.onSuccess = (e) => {
                    let s = [this.updateTestRows([t])];
                    return (
                      this.pageState.testId == t &&
                        s.push(
                          this.refreshFragments(
                            "testProperties",
                            "testTabContent"
                          )
                        ),
                      Promise.all(s)
                    );
                  }),
                  i.show(e, d.Fz.BottomLeft, s.data)
                );
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          doShowGroupTitleMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            this.run.is_closed ||
              (s.push({
                type: "link",
                url: l.N.url(
                  `repositories/${this.projectId}?group_id=${this.pageState.groupId}`
                ),
                title: k.Z.lang("runs.view_folder"),
              }),
              this.canRepositoryAddEdit &&
                s.push({
                  type: "action",
                  name: "edit",
                  title: k.Z.lang("runs.edit_folder"),
                  callback: this.doGroupTitleMenuClick,
                })),
              new T.x(s, { context: { $menuIcon: t } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          editFolder(e, t) {
            return l.N.post("repositories/render_update_folder/" + e)
              .then((s) => {
                const i = new U.q(U.G.Edit, this.projectId, e, null, !0);
                return (
                  (i.onSuccess = (e) =>
                    this.refreshFragments("groupProperties").then(() => {
                      this.components.groups.setNodeLabel(t, e.name),
                        this.updateGroupItemCount();
                    })),
                  i.show(s.data)
                );
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          doShowTestTitleMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.testPropertiesTarget).data("caseId");
            const i = [];
            i.push({
              type: "link",
              url: s
                ? l.N.url(`repositories/${this.projectId}?case_id=${s}`)
                : "",
              title: k.Z.lang("runs.view_case"),
              enabled: !!s,
            }),
              this.canRepositoryAddEdit &&
                !this.run.is_closed &&
                i.push({
                  type: "action",
                  name: "edit",
                  title: k.Z.lang("runs.edit_case"),
                  callback: this.doTestTitleMenuClick,
                }),
              new T.x(i, { context: { $menuIcon: t } }).show(
                t,
                d.Fz.BottomLeft
              );
          }
          editCase(e) {
            return l.N.post("repositories/render_update_case/" + e)
              .then((t) => {
                const s = new F.q(
                  F.G.Edit,
                  this.projectId,
                  this.pageState.groupId,
                  e,
                  !0
                );
                return (
                  (s.onSuccess = (e) => {
                    let t = [
                      this.updateTestRows([this.pageState.testId]),
                      this.refreshFragments("testProperties", "testTabContent"),
                    ];
                    return Promise.all(t);
                  }),
                  s.show(t.data)
                );
              })
              .catch((e) => {
                M.Z.handleError(e);
              });
          }
          updateTestRows(e) {
            let t = this.components.tests.getState();
            return (
              _.defaults(t, this.pageState),
              (t.ids = e),
              (t.canSelect = this.components.tests.params.canSelect),
              (t.canAction = this.components.tests.params.canAction),
              l.N.post(
                "runs/render_test_rows/" + this.run.id,
                l.N.toNetworkCase(t)
              ).then((e) => {
                $(e.data).each((e, t) => {
                  let s = $(t),
                    i = s.data("id");
                  this.components.tests.replaceRow(i, s);
                }),
                  this.components.tests.refreshSelection();
              })
            );
          }
          doShowGroupTitleInfo(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.groupPropertiesTarget),
              i = s.data("link");
            new x.N({
              title: s.data("name"),
              id: s.data("id"),
              link: i,
              url: l.N.url(i),
            }).show(t, d.Fz.BottomLeft);
          }
          doShowTestTitleInfo(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = $(this.testPropertiesTarget),
              i = s.data("link");
            new x.N({
              title: s.data("name"),
              id: s.data("id"),
              link: i,
              url: l.N.url(i),
            }).show(t, d.Fz.BottomLeft);
          }
          editNote(e, t, s) {
            o.UI.loading(s, () =>
              l.N.post("runs/render_update_note/" + e)
                .then((e) => {
                  this.components.resultsAddNoteEditor.setEnabled(!1),
                    this.endNoteEditing(),
                    setTimeout(() => {
                      t.children().hide();
                      let s = $(this.templates.actionEditorContainer);
                      s.html(e.data),
                        t.append(s),
                        (this.$currentNoteEditContainer = s),
                        o.UI.toggleTextEnabled(
                          $(this.resultsAddNotePlaceholderTarget),
                          !1
                        );
                    }, 0);
                })
                .catch((e) => {
                  M.Z.handleError(e), this.endNoteEditing();
                })
            );
          }
          endNoteEditing() {
            if (!this.$currentNoteEditContainer) return;
            let e = this.$currentNoteEditContainer.closest(
              this.selectors.action
            );
            this.$currentNoteEditContainer.remove(),
              e.children().show(),
              (this.$currentNoteEditContainer = null),
              o.UI.toggleTextEnabled(
                $(this.resultsAddNotePlaceholderTarget),
                !0
              ),
              this.components.resultsAddNoteEditor &&
                this.components.resultsAddNoteEditor.setEnabled(!0);
          }
          hideResultsAddNoteEditor() {
            this.components.resultsAddNoteEditor.resetForm(),
              $(this.testResultsContainerTarget).removeClass(
                this.classes.resultsAdding
              );
          }
          doResultsNotePlaceholderFocus(e) {
            this.$currentNoteEditContainer ||
              ($(this.testResultsContainerTarget).addClass(
                this.classes.resultsAdding
              ),
              this.components.resultsAddNoteEditor.focus());
          }
          doTestContextFilter(e) {
            let t = $(this.testContextFilterIconTarget),
              s = $(this.testContextFilterIconLabelTarget);
            o.UI.popupVisible(s) ||
              o.UI.loading(t, () => {
                let e = {};
                return (
                  this.testContextStatuses &&
                    (e.selected = this.testContextStatuses),
                  l.N.post(
                    "runs/render_test_status_filter/" + this.run.id,
                    l.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const i = new z.d();
                      (i.onSubmit = (e) => (
                        e.condition.values && e.condition.values.length > 0
                          ? (this.testContextStatuses = e.condition.values)
                          : (this.caseResultsStatuses = null),
                        this.refreshFragments("testContextPage").then(() => {
                          e.condition.values && e.condition.values.length > 0
                            ? o.UI.setSelectActionCount(
                                t,
                                e.condition.values.length
                              )
                            : o.UI.setSelectActionCount(t, 0);
                        })
                      )),
                        i.show(s, d.Fz.BottomLeft, e.data);
                    })
                    .catch((e) => {
                      M.Z.handleError(e);
                    })
                );
              });
          }
          doTestContextCancelFilter() {
            let e = $(this.testContextFilterIconTarget);
            o.UI.loading(
              e,
              () => (
                (this.testContextStatuses = null),
                this.refreshFragments("testContextPage").then(() => {
                  o.UI.setSelectActionCount(e, 0);
                })
              )
            );
          }
          refreshTestsFolderNames() {
            this.hasGroupContentTarget &&
              $(this.groupContentTarget).toggleClass(
                this.classes.groupContentWithFolderNames,
                this.pageState.groupBy != r.g.RepositoryGroupByFolder &&
                  this.groupFolderNames
              );
          }
          doShowFolderNameMenu() {
            let e = $(this.showFolderNameMenuActionTargets).filter(
              this.selectors.visible
            );
            if (!o.UI.getSelectActionEnabled(e)) return;
            let t = $(this.showFolderNameMenuIconTargets).filter(
              this.selectors.visible
            );
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "show",
              title: k.Z.lang("runs.folder_name_show"),
              callback: this.doFolderNameMenuClick,
              active: this.groupFolderNames,
            }),
              s.push({
                type: "action",
                name: "hide",
                title: k.Z.lang("runs.folder_name_dont_show"),
                callback: this.doFolderNameMenuClick,
                active: !this.groupFolderNames,
              }),
              new T.x(s).show(t, d.Fz.BottomLeft);
          }
          getCurrentFilters() {
            return this.pageState.filter;
          }
          getCurrentColumns() {
            return this.pageState.columns;
          }
          afterClose() {
            return l.N.visit("runs/view/" + this.run.id);
          }
          afterEdit(e) {
            let t = ["header"];
            return (
              e.selectionChanged &&
                (t.push(["treeGroupContainers", { forceGroup: !0 }]),
                (this.pageState.testId = null)),
              this.refreshFragments(...t).then(() => {
                e.selectionChanged &&
                  (this.clearTest(),
                  this.refreshActions(),
                  this.updateUrl(),
                  this.updateEmptyRun());
              })
            );
          }
          afterAssign() {
            return this.refreshFragments(
              this.components.mix.getDetailsVisible()
                ? "treeGroupTestContainers"
                : "treeGroupContainers"
            );
          }
        }
        V(O, "targets", [
          "addResultIcon",
          "addResultsIcon",
          "assignButton",
          "assignTestIcon",
          "assignTestsIcon",
          "closeButton",
          "duplicateButton",
          "editButton",
          "editMenuButton",
          "emptyTreePlaceholder",
          "exportButton",
          "filterIcon",
          "filterIconLabel",
          "groupContent",
          "groupEmptyContainer",
          "groupHeaderToolbar",
          "groupingMenuIcon",
          "groupItemCount",
          "groupProperties",
          "groupPropertiesDocs",
          "groupPropertiesTitle",
          "groupPropertyContainer",
          "groupTestsContainer",
          "headerStatsBar",
          "nextTestIcon",
          "nodataEditRunButton",
          "passNextIcon",
          "previousTestIcon",
          "refreshIcon",
          "responsiveContainer",
          "resultsAddNotePlaceholder",
          "resultsAddResultIcon",
          "resultsPassNextIcon",
          "resultsSelectNextIcon",
          "selectColumnsIcon",
          "selectNextIcon",
          "showFolderNameMenuAction",
          "showFolderNameMenuIcon",
          "showInfoIcon",
          "testContextFilterIcon",
          "testContextFilterIconLabel",
          "testContextTab",
          "testProperties",
          "testResultsContainer",
        ]);
      },
      45606: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => C });
        var i = s(64386),
          o = s(96622),
          n = s(47914),
          r = s(13814),
          a = s(69555),
          l = s(43689),
          d = s(16087),
          h = s(86715),
          c = s(80345),
          u = s(62612),
          g = s(67694),
          p = s(48995),
          m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends i.BaseController {
          constructor(...e) {
            super(...e),
              f(this, "selectors", { row: "tr" }),
              f(this, "doSelectionChange", () => {
                this.updateExportButton();
              }),
              f(this, "doStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["table", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              f(this, "doActionClick", (e) => {
                "menu" === e.actionName &&
                  this.showContextMenu(
                    e.target,
                    e.id,
                    e.$action,
                    e.$row,
                    e.$field
                  );
              }),
              f(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "delete":
                    this.deleteSession(e.context.id, e.context.$row);
                    break;
                  case "duplicate":
                    this.duplicateSession(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                }
              }),
              f(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.components.sessions.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteSessions(t);
                    break;
                  case "duplicate":
                    this.duplicateSessions(
                      e.context.table,
                      t,
                      e.context.$field
                    );
                }
              }),
              f(this, "renderTabs", () =>
                r.N.post("sessions/render_tabs/" + this.projectId, { tab: 1 })
              ),
              f(this, "renderMetrics", () =>
                r.N.post("sessions/render_index_metrics/" + this.projectId)
              ),
              f(this, "renderTable", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = e.state ? e.state : this.components.sessions.getState();
                return (
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  r.N.post(
                    "sessions/render_closed_table/" + this.projectId,
                    r.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClosedDelete = this.params.canClosedDelete),
              (this.filter = this.params.filter || n.X.EmptyFilter),
              m.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              m.Z.requestChild(this.component, "sessions", {
                onAdded: (e) => {
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveSessionsContent(e);
                  this.updateExportButton();
                },
                onRemoved: (e) => {
                  this.updateExportButton();
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                  selectionchange: this.doSelectionChange,
                },
              }),
              o.UI.initialize(this.element),
              this.fragments.register("metrics", this.renderMetrics),
              this.fragments.register("tabs", this.renderTabs),
              this.fragments.register("table", this.renderTable);
          }
          updateExportButton() {
            o.UI.toggleButtonInteractiveEnabled(
              $(this.exportButtonTarget),
              this.components.sessions &&
                this.components.sessions.getSelectedCount() > 0
            );
          }
          doShowExportMenu(e) {
            this.showExportMenu($(e.currentTarget), () =>
              this.components.sessions.getSelectedIds()
            );
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.parent(),
              i = s.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(s, () =>
                r.N.post("sessions/render_stats/" + i)
                  .then((e) => {
                    new g._(!0).show(t, a.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    m.Z.handleError(e);
                  })
              );
          }
          doShowManyWarning(e) {
            let t = $(e.currentTarget);
            o.UI.popupVisible(t) ||
              new p.u(
                p.Y.Warning,
                l.Z.lang("sessions.many_active_warning_title"),
                l.Z.lang("sessions.many_active_warning_text")
              ).show(t, a.Fz.BottomLeft);
          }
          showContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let r = [];
            this.components.sessions.getSelectedRows().length <= 1
              ? (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: l.Z.lang("sessions.menu_duplicate_session"),
                    callback: this.doContextMenuSingleClick,
                  }),
                this.canAddEdit &&
                  this.canClosedDelete &&
                  r.push({ type: "divider" }),
                this.canClosedDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: l.Z.lang("sessions.menu_delete_session"),
                    callback: this.doContextMenuSingleClick,
                  }))
              : (this.canAddEdit &&
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: l.Z.lang("sessions.menu_duplicate_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                this.canAddEdit &&
                  this.canClosedDelete &&
                  r.push({ type: "divider" }),
                this.canClosedDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: l.Z.lang("sessions.menu_delete_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  })),
              new d.x(r, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, a.Fz.BottomLeft);
          }
          duplicateSessions(e, t, s) {
            e.setLoading("actionfield", !0, s);
            let i = { ids: t };
            r.N.post(
              "sessions/render_copy_many/" + this.projectId,
              r.N.toNetworkCase(i)
            )
              .then((e) => {
                const t = new c.Y(this.projectId);
                return (
                  (t.onSuccess = (e) =>
                    r.N.visit("sessions/" + this.projectId)),
                  t.show(e.data)
                );
              })
              .then(() => {
                e.setLoading("actionfield", !1, s);
              })
              .catch((t) => {
                e.setLoading("actionfield", !1, s), m.Z.handleError(t);
              });
          }
          duplicateSession(e, t, s) {
            e.setLoading("actionfield", !0, s),
              r.N.post("sessions/render_copy/" + t)
                .then((t) => {
                  e.setLoading("actionfield", !1, s);
                  const i = new h.q(h.G.Add, this.projectId);
                  (i.onSuccess = (e) =>
                    r.N.visit("sessions/" + this.projectId)),
                    i.show(t.data);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), m.Z.handleError(t);
                });
          }
          deleteSession(e, t) {
            let s = t.data("name"),
              i = new u.A(
                l.Z.lang("sessions.delete_title"),
                l.Z.langEscape("sessions.delete_message", { name: s }),
                l.Z.lang("sessions.delete_button")
              );
            (i.onSuccess = () =>
              r.N.post("sessions/delete/" + e).then(() =>
                this.refreshFragments("table", "tabs", "metrics")
              )),
              i.show();
          }
          deleteSessions(e) {
            let t = new u.A(
              l.Z.lang("sessions.delete_many_title"),
              l.Z.lang("sessions.delete_many_message"),
              l.Z.lang("sessions.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return r.N.post(
                "sessions/delete_many/" + this.projectId,
                r.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("table", "tabs", "metrics"));
            }),
              t.show();
          }
          doAdd() {
            this.addSession($(this.addButtonTarget));
          }
          doAddMultiple() {
            this.addMultipleSessions($(this.addMultipleButtonTarget));
          }
          addSession(e) {
            o.UI.loading(e, () =>
              r.N.post("sessions/render_create/" + this.projectId)
                .then((e) => {
                  const t = new h.q(h.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    r.N.visit("sessions/" + this.projectId)),
                    t.show(e.data);
                })
                .catch((e) => {
                  m.Z.handleError(e);
                })
            );
          }
          addMultipleSessions(e) {
            o.UI.loading(e, () =>
              r.N.post("sessions/render_create_many/" + this.projectId)
                .then((e) => {
                  const t = new c.Y(this.projectId);
                  (t.onSuccess = (e) =>
                    r.N.visit("sessions/" + this.projectId)),
                    t.show(e.data);
                })
                .catch((e) => {
                  m.Z.handleError(e);
                })
            );
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["table", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          saveFilter(e) {
            return r.N.post(
              "sessions/save_filter/" + this.projectId,
              r.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshFragments([
                "table",
                { withPagination: !1 },
              ]).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
        }
        f(C, "targets", [
          "responsiveContainer",
          "addButton",
          "addMultipleButton",
          "exportButton",
        ]);
      },
      64386: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { BaseController: () => I });
        var i = s(26454),
          o = s(96622),
          n = s(15612),
          r = s(13814),
          a = s(69555),
          l = s(24850),
          d = s(15331),
          h = s(26734),
          c = s(43689),
          u = s(16087),
          g = s(50609),
          p = s(7042),
          m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends g.V {
          constructor(e, t) {
            super("sessions.export_many_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              f(this, "classes", {
                hidden: "default-hidden",
                leftContentExportModeSummary:
                  "sessions-csv-export-many-dialog__left-content--export-mode-summary",
                leftContentExportModeResults:
                  "sessions-csv-export-many-dialog__left-content--export-mode-results",
              }),
              f(this, "doExportModeChange", () => {
                o.UI.getRadio(this.$exportSummary)
                  ? (this.$leftContent.addClass(
                      this.classes.leftContentExportModeSummary
                    ),
                    this.$leftContent.removeClass(
                      this.classes.leftContentExportModeResults
                    ))
                  : (this.$leftContent.removeClass(
                      this.classes.leftContentExportModeSummary
                    ),
                    this.$leftContent.addClass(
                      this.classes.leftContentExportModeResults
                    ));
              }),
              (this.projectId = e),
              (this.sessionIds = t);
          }
          load() {
            o.UI.onRadioChange(this.$exportSummary, this.doExportModeChange),
              o.UI.onRadioChange(this.$exportResults, this.doExportModeChange),
              m.Z.requestChild(this.component, "resultColumns"),
              m.Z.requestChild(this.component, "summaryColumns");
          }
          unload() {}
          submitSummary() {
            o.UI.loading(this.$submitButton, () => {
              p.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.summaryColumns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: o.UI.getDropdown(this.$delimiter),
                columns: e,
                ids: this.sessionIds,
              };
              return (
                m.Z.blockUI(),
                r.N.post(
                  "sessions/validate_export_many_summary_csv/" + this.projectId,
                  r.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      r.N.formPostDownload(
                        "sessions/export_many_summary_csv/" + this.projectId,
                        { data: JSON.stringify(r.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    p.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    m.Z.unblockUI();
                  })
              );
            });
          }
          submitResults() {
            o.UI.loading(this.$submitButton, () => {
              p.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.resultColumns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: o.UI.getDropdown(this.$delimiter),
                columns: e,
                ids: this.sessionIds,
                showContext: o.UI.getCheckbox(this.$showContext),
              };
              return (
                m.Z.blockUI(),
                r.N.post(
                  "sessions/validate_export_many_csv/" + this.projectId,
                  r.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      r.N.formPostDownload(
                        "sessions/export_many_csv/" + this.projectId,
                        { data: JSON.stringify(r.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500 + 25 * this.sessionIds.length);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    p.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    m.Z.unblockUI();
                  })
              );
            });
          }
          doSubmit() {
            o.UI.getRadio(this.$exportSummary)
              ? this.submitSummary()
              : this.submitResults();
          }
        }
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        f(C, "forms", [
          {
            name: "export",
            fields: [
              "delimiter",
              "exportMode",
              "exportSummary",
              "exportResults",
              "showContext",
            ],
          },
        ]),
          f(C, "targets", ["submitButton", "leftContent", "downloadMessage"]),
          f(C, "actions", ["doSubmit"]);
        class I extends i.v {
          constructor(...e) {
            super(...e),
              b(this, "baseClasses", {
                popupNoMinWidth: "popup--no-min-width",
              }),
              b(this, "doFilter", (e) => {
                const t = $(e.button);
                if (!o.UI.popupVisible(t))
                  return (
                    this.components.searchBar.setFilterLoading(!0),
                    r.N.post(
                      "sessions/render_filter/" + this.projectId,
                      r.N.toNetworkCase(this.filter)
                    )
                      .then((e) => {
                        this.components.searchBar.setFilterLoading(!1);
                        const s = new l.y();
                        (s.onSubmit = (e) =>
                          this.saveFilter(e.filter).then(() => {
                            this.components.searchBar.setInlineFilter(
                              "milestones",
                              e.labels["sessions:milestone_id"]
                                ? e.labels["sessions:milestone_id"]
                                : []
                            ),
                              this.components.searchBar.setInlineFilter(
                                "states",
                                e.labels["sessions:state_id"]
                                  ? e.labels["sessions:state_id"]
                                  : []
                              ),
                              this.components.searchBar.setInlineFilter(
                                "tags",
                                e.labels["sessions:tags"]
                                  ? e.labels["sessions:tags"]
                                  : []
                              );
                          })),
                          s.show(t, a.Fz.BottomRight, e.data);
                      })
                      .catch((e) => {
                        this.components.searchBar.setFilterLoading(!1),
                          m.Z.handleError(e);
                      })
                  );
              }),
              b(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                (s.conditions = {}),
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          "milestones",
                          []
                        ),
                          this.components.searchBar.setInlineFilter(
                            "states",
                            []
                          ),
                          this.components.searchBar.setInlineFilter("tags", []);
                      })
                      .catch((e) => {
                        m.Z.handleError(e);
                      })
                  );
              }),
              b(this, "doCancelInlineFilter", (e) => {
                const t = $(e.button);
                o.UI.popupVisible(t) && o.UI.getVisiblePopup(t).hide();
                let s = this.filter;
                "milestones" == e.filter.name
                  ? (s.conditions["sessions:milestone_id"] = {})
                  : "states" == e.filter.name
                  ? (s.conditions["sessions:state_id"] = {})
                  : "tags" == e.filter.name &&
                    (s.conditions["sessions:tags"] = {}),
                  o.UI.loading(t, () =>
                    this.saveFilter(s)
                      .then(() => {
                        this.components.searchBar.setInlineFilter(
                          e.filter.name,
                          []
                        );
                      })
                      .catch((e) => {
                        m.Z.handleError(e);
                      })
                  );
              }),
              b(this, "doInlineFilter", (e) => {
                "milestones" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "milestones",
                      "sessions/render_milestone_filter/",
                      "sessions:milestone_id"
                    )
                  : "states" == e.filter.name
                  ? this.showInlineFilter(
                      e.button,
                      "states",
                      "sessions/render_state_filter/",
                      "sessions:state_id"
                    )
                  : "tags" == e.filter.name &&
                    this.showInlineFilter(
                      e.button,
                      "tags",
                      "sessions/render_tag_filter/",
                      "sessions:tags"
                    );
              }),
              b(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              b(this, "doSearch", () => {
                this.refreshSearch();
              }),
              b(this, "doResizeContent", (e) => {
                this.updateResponsiveSessionsContent(e);
              });
          }
          showExportMenu(e, t) {
            if (!o.UI.getButtonInteractiveEnabled(e)) return;
            if (o.UI.popupVisible(e)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: c.Z.lang("sessions.export_to_csv"),
              callback: (s) => {
                s.target.hide(),
                  "csv" === s.actionName &&
                    o.UI.loading(e, () => {
                      let e = t(),
                        s = { ids: e };
                      return r.N.post(
                        "sessions/render_export_many_csv/" + this.projectId,
                        r.N.toNetworkCase(s)
                      )
                        .then((t) => {
                          new C(this.projectId, e).show(t.data);
                        })
                        .catch((e) => {
                          m.Z.handleError(e);
                        });
                    });
              },
            }),
              new u.x(s, {
                additionalClasses: this.baseClasses.popupNoMinWidth,
              }).show(e, a.Fz.BottomLeft);
          }
          showInlineFilter(e, t, s, i) {
            const l = $(e);
            o.UI.popupVisible(l) ||
              o.UI.loading(l, () =>
                r.N.post(s + this.projectId, r.N.toNetworkCase(this.filter))
                  .then((e) => {
                    let s = this.components.searchBar.getInlineFilter(t);
                    const o = new d.d();
                    (o.onSubmit = (e) => {
                      let s = this.filter;
                      return (
                        (s.conditions[i] = e.condition),
                        (s.mode = n.g.FiltersAll),
                        this.saveFilter(s).then(() => {
                          this.components.searchBar.setInlineFilter(
                            t,
                            e.labels
                          );
                        })
                      );
                    }),
                      (o.onHide = (e) => {
                        e || this.components.searchBar.setInlineFilter(t, s);
                      }),
                      o.events.on("change", (e) => {
                        this.components.searchBar.setInlineFilter(t, e.labels);
                      }),
                      o.show(l, a.Fz.BottomRight, e.data);
                  })
                  .catch((e) => {
                    m.Z.handleError(e);
                  })
              );
          }
          updateResponsiveSessionsContent(e) {
            "sessions:tags" == e.name &&
              h.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.tags;
                return t ? JSON.parse(t) : [];
              });
          }
          refreshSearch() {}
          saveFilter(e) {}
        }
      },
      80013: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => S });
        var i = s(64386),
          o = s(96622),
          n = s(47914),
          r = s(13814),
          a = s(50922),
          l = s(69555),
          d = s(43689),
          h = s(16087),
          c = s(86715),
          u = s(80345),
          g = s(51549),
          p = s(3638),
          m = s(11529),
          f = s(62612),
          C = s(24371),
          b = s(67694),
          I = s(48995),
          w = s(5270);
        function v(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class S extends i.BaseController {
          constructor(...e) {
            super(...e),
              v(this, "selectors", {
                groupingHeader: ".grouping-header",
                row: "tr",
              }),
              v(this, "doStateChange", (e) => {
                let t = this.fragments.getClosest(
                    e.target.element,
                    "activeTable"
                  ),
                  s = e.target.getParams().milestoneId;
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments([
                    "table",
                    { state: e.state, milestoneId: s, table: e.target },
                    t,
                  ]).then(() => {
                    e.target.setLoading(e.loading, !1, e.column);
                  });
              }),
              v(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "menu":
                    this.showContextMenu(
                      e.target,
                      e.id,
                      e.$action,
                      e.$row,
                      e.$field
                    );
                    break;
                  case "edit":
                    this.editSession(e.target, e.id, e.$field);
                }
              }),
              v(this, "doContextMenuSingleClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editSession(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                    break;
                  case "delete":
                    this.deleteSession(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "close":
                    this.closeSession(
                      e.context.table,
                      e.context.id,
                      e.context.$row
                    );
                    break;
                  case "duplicate":
                    this.duplicateSession(
                      e.context.table,
                      e.context.id,
                      e.context.$field
                    );
                }
              }),
              v(this, "doContextMenuMultipleClick", (e) => {
                e.target.hide();
                let t = this.sessionTables.getSelectedIds();
                switch (e.actionName) {
                  case "delete":
                    this.deleteSessions(t);
                    break;
                  case "close":
                    this.closeSessions(t);
                    break;
                  case "edit":
                    this.editSessions(e.context.table, t, e.context.$field);
                    break;
                  case "assign":
                    this.assignSessions(e.context.table, t, e.context.$field);
                    break;
                  case "duplicate":
                    this.duplicateSessions(
                      e.context.table,
                      t,
                      e.context.$field
                    );
                }
              }),
              v(this, "doAddGroupMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "add":
                    this.addSession(e.context.$icon, e.context.id);
                    break;
                  case "addMultiple":
                    this.addMultipleSessions(e.context.$icon, e.context.id);
                }
              }),
              v(this, "doSessionTablesSelectionChange", () => {
                this.updateExportButton();
              }),
              v(this, "renderTabs", () =>
                r.N.post("sessions/render_tabs/" + this.projectId, { tab: 0 })
              ),
              v(this, "renderMetrics", () =>
                r.N.post("sessions/render_index_metrics/" + this.projectId)
              ),
              v(this, "renderActive", (e = {}) => {
                _.defaults(e, { withPagination: !0 });
                let t = { tables: [] },
                  s = w.Z.findComponents(this.element, "sessions");
                for (let i of s) {
                  let s = i.getParams().milestoneId,
                    o = i.getState();
                  e.withPagination || delete o.paginationCurrent;
                  let n = r.N.toNetworkCase(o);
                  (n.milestone_id = s), t.tables.push(n);
                }
                return (
                  (t.selected = t.tables.flatMap((e) => e.selected)),
                  this.components.searchBar &&
                    this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  r.N.post(
                    "sessions/render_active/" + this.projectId,
                    r.N.toNetworkCase(t)
                  )
                );
              }),
              v(this, "renderTable", (e = {}) => {
                _.defaults(e, { state: null, milestoneId: null, table: null });
                let t = e.state ? e.state : e.table.getState();
                return (
                  (t.milestoneId = e.milestoneId),
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  r.N.post(
                    "sessions/render_active_table/" + this.projectId,
                    r.N.toNetworkCase(t)
                  )
                );
              });
          }
          load() {
            (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canDelete = this.params.canDelete),
              (this.canClose = this.params.canClose),
              (this.filter = this.params.filter || n.X.EmptyFilter),
              (this.sessionTables = new m.TableManager()),
              this.sessionTables.events.on(
                "selectionchange",
                this.doSessionTablesSelectionChange
              ),
              w.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                  inlinefilter: this.doInlineFilter,
                  cancelinlinefilter: this.doCancelInlineFilter,
                },
              }),
              w.Z.requestChild(this.component, "sessions", {
                onAdded: (e) => {
                  this.sessionTables.add(e);
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveSessionsContent(e);
                },
                onRemoved: (e) => {
                  this.sessionTables.remove(e);
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doStateChange,
                  actionclick: this.doActionClick,
                },
              }),
              o.UI.initialize(this.element),
              this.fragments.register("metrics", this.renderMetrics),
              this.fragments.register("tabs", this.renderTabs),
              this.fragments.register("active", this.renderActive),
              this.fragments.register("table", this.renderTable),
              this.params.isLazyLoad && this.lazyLoad();
          }
          lazyLoad() {
            this.refreshFragments("active").then(() => {
              o.UI.markCompleted($(this.sessionContainerTarget)),
                this.components.searchBar.setEnabled(!0);
            });
          }
          doShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.parent(),
              i = s.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(s, () =>
                r.N.post("sessions/render_stats/" + i)
                  .then((e) => {
                    new b._(!0).show(t, l.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    w.Z.handleError(e);
                  })
              );
          }
          doShowManyWarning(e) {
            let t = $(e.currentTarget);
            o.UI.popupVisible(t) ||
              new I.u(
                I.Y.Warning,
                d.Z.lang("sessions.many_active_warning_title"),
                d.Z.lang("sessions.many_active_warning_text")
              ).show(t, l.Fz.BottomLeft);
          }
          showContextMenu(e, t, s, i, n) {
            if (o.UI.popupVisible(s)) return;
            let r = [];
            this.sessionTables.getSelectedRows().length <= 1
              ? (this.canAddEdit &&
                  (r.push({
                    type: "action",
                    name: "edit",
                    title: d.Z.lang("sessions.menu_edit_session"),
                    callback: this.doContextMenuSingleClick,
                  }),
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: d.Z.lang("sessions.menu_duplicate_session"),
                    callback: this.doContextMenuSingleClick,
                  })),
                this.canAddEdit &&
                  (this.canDelete || this.canClose) &&
                  r.push({ type: "divider" }),
                this.canClose &&
                  r.push({
                    type: "action",
                    name: "close",
                    title: d.Z.lang("sessions.menu_close_session"),
                    callback: this.doContextMenuSingleClick,
                  }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: d.Z.lang("sessions.menu_delete_session"),
                    callback: this.doContextMenuSingleClick,
                  }))
              : (this.canAddEdit &&
                  (r.push({
                    type: "action",
                    name: "edit",
                    title: d.Z.lang("sessions.menu_edit_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                  r.push({
                    type: "action",
                    name: "duplicate",
                    title: d.Z.lang("sessions.menu_duplicate_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                  r.push({ type: "divider" }),
                  r.push({
                    type: "action",
                    name: "assign",
                    title: d.Z.lang("sessions.menu_assign_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  })),
                this.canAddEdit &&
                  (this.canDelete || this.canClose) &&
                  r.push({ type: "divider" }),
                this.canClose &&
                  r.push({
                    type: "action",
                    name: "close",
                    title: d.Z.lang("sessions.menu_close_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  }),
                this.canDelete &&
                  r.push({
                    type: "action",
                    name: "delete",
                    title: d.Z.lang("sessions.menu_delete_sessions"),
                    callback: this.doContextMenuMultipleClick,
                  })),
              new h.x(r, {
                context: { table: e, $field: n, $row: i, id: t },
              }).show(s, l.Fz.BottomLeft);
          }
          duplicateSessions(e, t, s) {
            e.setLoading("actionfield", !0, s);
            let i = { ids: t };
            r.N.post(
              "sessions/render_copy_many/" + this.projectId,
              r.N.toNetworkCase(i)
            )
              .then((e) => {
                const t = new u.Y(this.projectId);
                return (
                  (t.onSuccess = (e) =>
                    this.refreshFragments("active", "tabs", "metrics")),
                  t.show(e.data)
                );
              })
              .then(() => {
                e.setLoading("actionfield", !1, s);
              })
              .catch((t) => {
                e.setLoading("actionfield", !1, s), w.Z.handleError(t);
              });
          }
          assignSessions(e, t, s) {
            e.setLoading("actionfield", !0, s),
              r.N.post("sessions/render_assign_many/" + this.projectId)
                .then((i) => {
                  e.setLoading("actionfield", !1, s);
                  const o = new g.M(t, this.projectId);
                  (o.onSuccess = (e) =>
                    this.refreshFragments("active", "metrics")),
                    o.show(i.data);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), w.Z.handleError(t);
                });
          }
          editSessions(e, t, s) {
            e.setLoading("actionfield", !0, s);
            let i = { ids: t };
            r.N.post(
              "sessions/render_update_many/" + this.projectId,
              r.N.toNetworkCase(i)
            )
              .then((e) => {
                const s = new p.y(t, this.projectId);
                return (
                  (s.onSuccess = (e) =>
                    this.refreshFragments("active", "metrics")),
                  s.show(e.data)
                );
              })
              .then(() => {
                e.setLoading("actionfield", !1, s);
              })
              .catch((t) => {
                e.setLoading("actionfield", !1, s), w.Z.handleError(t);
              });
          }
          editSession(e, t, s) {
            e.setLoading("actionfield", !0, s),
              r.N.post("sessions/render_update/" + t)
                .then((s) => {
                  const i = new c.q(c.G.Edit, this.projectId, t);
                  return (
                    (i.onSuccess = (t) => {
                      let s = e.getParams().milestoneId;
                      if (s == t.milestone_id) {
                        let t = this.fragments.getClosest(
                          e.element,
                          "activeTable"
                        );
                        return this.refreshFragments(
                          ["table", { table: e, milestoneId: s }, t],
                          "metrics"
                        );
                      }
                      return this.refreshFragments("active", "metrics");
                    }),
                    i.show(s.data)
                  );
                })
                .then(() => {
                  e.setLoading("actionfield", !1, s);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), w.Z.handleError(t);
                });
          }
          duplicateSession(e, t, s) {
            e.setLoading("actionfield", !0, s),
              r.N.post("sessions/render_copy/" + t)
                .then((e) => {
                  const t = new c.q(c.G.Add, this.projectId);
                  return (
                    (t.onSuccess = (e) =>
                      this.refreshFragments("active", "tabs", "metrics")),
                    t.show(e.data)
                  );
                })
                .then(() => {
                  e.setLoading("actionfield", !1, s);
                })
                .catch((t) => {
                  e.setLoading("actionfield", !1, s), w.Z.handleError(t);
                });
          }
          deleteSession(e, t, s) {
            let i = s.data("name"),
              o = new f.A(
                d.Z.lang("sessions.delete_title"),
                d.Z.langEscape("sessions.delete_message", { name: i }),
                d.Z.lang("sessions.delete_button")
              );
            (o.onSuccess = () =>
              r.N.post("sessions/delete/" + t).then(() => {
                let t = e.getParams().milestoneId,
                  s = this.fragments.getClosest(e.element, "activeTable");
                return this.refreshFragments(
                  ["table", { table: e, milestoneId: t }, s],
                  "tabs",
                  "metrics"
                );
              })),
              o.show();
          }
          closeSession(e, t, s) {
            let i = s.data("name"),
              o = new C.U(
                d.Z.lang("sessions.close_title"),
                d.Z.langEscape("sessions.close_message", { name: i }),
                d.Z.lang("sessions.close_button")
              );
            (o.onSuccess = () =>
              r.N.post("sessions/close/" + t).then(() => {
                let t = e.getParams().milestoneId,
                  s = this.fragments.getClosest(e.element, "activeTable");
                return this.refreshFragments(
                  ["table", { table: e, milestoneId: t }, s],
                  "tabs",
                  "metrics"
                );
              })),
              o.show();
          }
          deleteSessions(e) {
            let t = new f.A(
              d.Z.lang("sessions.delete_many_title"),
              d.Z.lang("sessions.delete_many_message"),
              d.Z.lang("sessions.delete_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return r.N.post(
                "sessions/delete_many/" + this.projectId,
                r.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("active", "tabs", "metrics"));
            }),
              t.show();
          }
          closeSessions(e) {
            let t = new C.U(
              d.Z.lang("sessions.close_many_title"),
              d.Z.lang("sessions.close_many_message"),
              d.Z.lang("sessions.close_many_button")
            );
            (t.onSuccess = () => {
              let t = { ids: e };
              return r.N.post(
                "sessions/close_many/" + this.projectId,
                r.N.toNetworkCase(t)
              ).then(() => this.refreshFragments("active", "tabs", "metrics"));
            }),
              t.show();
          }
          saveFilter(e) {
            return r.N.post(
              "sessions/save_filter/" + this.projectId,
              r.N.toNetworkCase(e)
            ).then((e) => {
              this.filter = e.data;
              let t = _.keys(this.filter.conditions).length;
              return this.refreshFragments([
                "active",
                { withPagination: !1 },
              ]).then(() => {
                this.components.searchBar.setFilterCount(t);
              });
            });
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["active", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          doEmptyAdd() {
            this.addSession($(this.emptyAddButtonTarget));
          }
          doAdd() {
            this.addSession($(this.addButtonTarget));
          }
          doAddMultiple() {
            this.addMultipleSessions($(this.addMultipleButtonTarget));
          }
          doShowAddGroupMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.groupingHeader).data("id");
            const i = [];
            i.push({
              type: "action",
              name: "add",
              title: d.Z.lang("sessions.menu_add"),
              callback: this.doAddGroupMenuClick,
            }),
              i.push({
                type: "action",
                name: "addMultiple",
                title: d.Z.lang("sessions.menu_add_multiple"),
                callback: this.doAddGroupMenuClick,
              }),
              new h.x(i, { context: { $icon: t, id: s } }).show(
                t,
                l.Fz.BottomRight
              );
          }
          doShowGroupMilestonePopup(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            const s = new a.m(),
              i = t
                .closest(this.selectors.groupingHeader)
                .data("hierarchyPopup");
            s.show(t, l.Fz.BottomRight, i);
          }
          addSession(e, t = null) {
            o.UI.loading(e, () =>
              r.N.post("sessions/render_create/" + this.projectId)
                .then((e) => {
                  const s = new c.q(c.G.Add, this.projectId, null, t);
                  return (
                    (s.onSuccess = (e) =>
                      this.refreshFragments("active", "tabs", "metrics").then(
                        () => {
                          this.components.searchBar.setEnabled(!0);
                        }
                      )),
                    s.show(e.data)
                  );
                })
                .catch((e) => {
                  w.Z.handleError(e);
                })
            );
          }
          addMultipleSessions(e, t = null) {
            o.UI.loading(e, () =>
              r.N.post("sessions/render_create_many/" + this.projectId)
                .then((e) => {
                  const s = new u.Y(this.projectId, t);
                  (s.onSuccess = (e) =>
                    this.refreshFragments("active", "tabs", "metrics").then(
                      () => {
                        this.components.searchBar.setEnabled(!0);
                      }
                    )),
                    s.show(e.data);
                })
                .catch((e) => {
                  w.Z.handleError(e);
                })
            );
          }
          doShowExportMenu(e) {
            this.showExportMenu($(e.currentTarget), () =>
              this.sessionTables.getSelectedIds()
            );
          }
          updateExportButton() {
            o.UI.toggleButtonInteractiveEnabled(
              $(this.exportButtonTarget),
              this.sessionTables.getSelectedCount() > 0
            );
          }
        }
        v(S, "targets", [
          "responsiveContainer",
          "addButton",
          "addMultipleButton",
          "emptyAddButton",
          "sessionContainer",
          "exportButton",
        ]);
      },
      52858: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => g });
        var i = s(26454),
          o = s(13814),
          n = s(96622),
          r = s(11802),
          a = s(69555),
          l = s(15612);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends a.GI {
          constructor(e, t) {
            super("sessions.print_configure_popup"),
              d(this, "doOptionChange", (e) => {
                this.refreshApplyButton();
              }),
              (this.flags = e),
              (this.resultMode = t);
          }
          load() {
            n.UI.setCheckbox(this.$showHeader, this.flags.show_header),
              n.UI.setCheckbox(this.$showStats, this.flags.show_stats),
              n.UI.setCheckbox(this.$showContext, this.flags.show_context),
              n.UI.setCheckbox(this.$showFooter, this.flags.show_footer),
              n.UI.setCheckbox(this.$showLinks, this.flags.show_links),
              n.UI.setCheckbox(this.$showImages, this.flags.show_images),
              n.UI.setCheckbox(this.$showUsers, this.flags.show_users),
              this.resultMode == l.g.SessionsPrintResultModeFull
                ? n.UI.setRadio(this.$resultModeFull, !0)
                : n.UI.setRadio(this.$resultModeNone, !0),
              n.UI.onCheckboxChange(this.$showHeader, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showStats, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showContext, this.doOptionChange),
              n.UI.onCheckboxChange(this.$showFooter, this.doOptionChange),
              n.UI.onRadioChange(this.$resultModeNone, this.doOptionChange),
              n.UI.onRadioChange(this.$resultModeFull, this.doOptionChange),
              this.refreshApplyButton();
          }
          unload() {
            n.UI.offCheckboxChange(this.$showHeader, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showStats, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showContext, this.doOptionChange),
              n.UI.offCheckboxChange(this.$showFooter, this.doOptionChange),
              n.UI.offRadioChange(this.$resultModeNone, this.doOptionChange),
              n.UI.offRadioChange(this.$resultModeFull, this.doOptionChange);
          }
          refreshApplyButton() {
            let e =
              n.UI.getCheckbox(this.$showHeader, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showStats, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showContext, this.doOptionChange) ||
              n.UI.getCheckbox(this.$showFooter, this.doOptionChange) ||
              0 == n.UI.getRadio(this.$resultModeNone, this.doOptionChange);
            n.UI.toggleButtonEnabled(this.$applyButton, e);
          }
          doApply() {
            let e = l.g.SessionsPrintResultModeNone;
            n.UI.getRadio(this.$resultModeFull) &&
              (e = l.g.SessionsPrintResultModeFull),
              this.triggerSuccess({
                flags: {
                  show_header: n.UI.getCheckbox(this.$showHeader),
                  show_stats: n.UI.getCheckbox(this.$showStats),
                  show_context: n.UI.getCheckbox(this.$showContext),
                  show_footer: n.UI.getCheckbox(this.$showFooter),
                  show_links: n.UI.getCheckbox(this.$showLinks),
                  show_images: n.UI.getCheckbox(this.$showImages),
                  show_users: n.UI.getCheckbox(this.$showUsers),
                },
                resultMode: e,
              });
          }
        }
        d(h, "actions", ["doApply"]),
          d(h, "targets", [
            "showHeader",
            "showStats",
            "showContext",
            "showFooter",
            "showLinks",
            "showImages",
            "showUsers",
            "resultModeNone",
            "resultModeFull",
            "applyButton",
          ]);
        var c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends i.v {
          constructor(...e) {
            super(...e),
              u(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              });
          }
          load() {
            (this.session = this.params.session),
              (this.projectId = this.params.projectId),
              (this.flags = this.params.flags),
              (this.resultMode = this.params.resultMode),
              c.Z.requestChild(this.component, "printFrame", {
                onAdded: () => {
                  this.refreshContent();
                },
              }),
              n.UI.initialize(this.element),
              this.shortcuts.register(r.N.P, this.doShortcutPrint, {
                control: !0,
              });
          }
          doConfigure() {
            let e = $(this.configureIconTarget);
            if (n.UI.popupVisible(e)) return;
            const t = new h(this.flags, this.resultMode);
            (t.onSuccess = (e) => {
              (this.flags = e.flags),
                (this.resultMode = e.resultMode),
                this.refreshContent();
            }),
              t.show(e, a.Fz.BottomRight);
          }
          doPrint() {
            this.print();
          }
          print() {
            this.components.printFrame.print();
          }
          refreshContent() {
            let e = {
              resultMode: this.resultMode,
              showHeader: this.flags.show_header,
              showContext: this.flags.show_context,
              showStats: this.flags.show_stats,
              showFooter: this.flags.show_footer,
              showLinks: this.flags.show_links,
              showImages: this.flags.show_images,
              showUsers: this.flags.show_users,
            };
            return this.components.printFrame.loadPost(
              "sessions/render_print_frame/" + this.session.id,
              o.N.toNetworkCase(e)
            );
          }
        }
        u(g, "targets", ["contentContainer", "printButton", "configureIcon"]);
      },
      76950: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { AddEditControlMode: () => p, default: () => m });
        var i = s(89432),
          o = s(96622),
          n = s(13814),
          r = s(43689),
          a = s(36649),
          l = s(7042),
          d = s(14589),
          h = s(42722),
          c = s(69555),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class m extends i.d {
          constructor(...e) {
            super(...e),
              g(this, "selectors", {
                controlGroup: ".control-group",
                controlGroupSection: ".control-group__section",
              }),
              g(this, "classes", {
                controlGroupFocused: "control-group--focused",
                resultEditorError: "session-result-editor--error",
                resultEditorUploading: "session-result-editor--uploading",
                resultEditorHasAttachments:
                  "session-result-editor--attachments",
                resultEditorHasIssues: "session-result-editor--issues",
                toolbarDragging: "session-result-editor__toolbar--dragging",
              }),
              g(this, "doFocusTrackerChange", (e) => {
                this.$controlGroup.toggleClass(
                  this.classes.controlGroupFocused,
                  e.focused
                );
              }),
              g(this, "doControlGroupMouseDown", (e) => {
                let t = $(e.target).add($(e.target).parents());
                this.focusTracker.hasElement(t) ||
                  (this.getEnabled() &&
                    (e.preventDefault(), this.components.comment.focus()));
              }),
              g(this, "doClipboardPaste", (e, t) => {
                this.getFocused() &&
                  this.getEnabled() &&
                  (t.targetCanReceiveImages
                    ? t.nonImages.length > 0 &&
                      this.uploadAttachments(t.nonImages)
                    : t.files.length > 0 &&
                      (this.uploadAttachments(t.files), e.preventDefault()));
              }),
              g(this, "doToolbarDragEnter", (e) => {
                this.getEnabled() &&
                  (clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.toggleToolbarDragging(!0));
              }),
              g(this, "doToolbarDragOver", (e) => {
                this.getEnabled() &&
                  (clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.toggleToolbarDragging(!0));
              }),
              g(this, "doToolbarDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.toggleToolbarDragging(!1),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              g(this, "doToolbarDrop", (e) => {
                if (
                  (clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.toggleToolbarDragging(!1),
                  !this.getEnabled())
                )
                  return;
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAttachments(t);
              }),
              g(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAttachments(t.files),
                  o.UI.clearFile(this.$fileInput);
              }),
              g(this, "doInlineGalleryPreviewClose", (e) => {
                this.focus();
              }),
              g(
                this,
                "doInlineGalleryDeleteAttachment",
                (e) => (
                  (this.attachments = this.attachments.filter(
                    (t) => t.attachment_id != e.id
                  )),
                  this.refreshAttachments()
                )
              ),
              g(this, "doInlineGalleryEditAttachment", (e) => {
                let t = this.attachments.map((e) => ({
                  attachment_id: e.attachment_id,
                  name: e.name,
                }));
                for (let s of t)
                  if (s.attachment_id == e.id) {
                    s.name = e.name;
                    break;
                  }
                return this.refreshFragmentsWithCustomErrorHandling([
                  "attachments",
                  { attachments: t },
                ])
                  .then(() => {
                    this.hideValidationErrors(), (this.attachments = t);
                  })
                  .catch((e) => {
                    l.l.handleCustomFormError(e, (e, t) => {
                      this.showValidationErrors(t);
                    });
                  });
              }),
              g(this, "doElapsedConvertInput", (e) => {
                let t = { timespan: e.timespan };
                return n.N.post(
                  "common/parse_timespan",
                  n.N.toNetworkCase(t)
                ).then((e) => Math.trunc(e.data.microseconds / 1e6));
              }),
              g(this, "doElapsedEnterKey", (e) => {
                this.submit();
              }),
              g(this, "doElapsedTimer", (e) => {
                this.events.trigger("elapsedtimer", { target: this });
              }),
              g(this, "renderAttachments", (e = {}) =>
                n.N.post(
                  "attachments/render_update_inline_gallery/" + this.projectId,
                  n.N.toNetworkCase(
                    e.attachments ? e.attachments : this.attachments
                  )
                )
              );
          }
          connect() {
            (this.$element = $(this.element)),
              (this.name = this.$element.data("name")),
              super.connect(this.name);
          }
          load() {
            (this.mode = this.params.mode),
              (this.sessionId = this.params.sessionId),
              (this.projectId = this.params.projectId),
              (this.resultId = this.params.resultId),
              (this.updatedAt = this.params.updatedAt),
              (this.attachments = this.params.attachments.map((e) => ({
                attachment_id: e.id,
                name: e.name,
              }))),
              (this.enabled = !0),
              (this.dragLeaveTimer = null),
              (this.focusTracker = new a.R(this.$element)),
              this.focusTracker.events.on("change", this.doFocusTrackerChange),
              (this.$controlGroup = $(
                this.selectors.controlGroup,
                this.$element
              )),
              this.$controlGroup.on("mousedown", this.doControlGroupMouseDown),
              (this.$statusId = $(this.statusIdTarget)),
              (this.$submitButton = $(this.submitButtonTarget)),
              (this.$cancelButton = $(this.cancelButtonTarget)),
              (this.$validationErrors = $(this.validationErrorsTarget)),
              (this.$toolbar = $(this.toolbarTarget)),
              (this.$toolbarDropzone = $(this.toolbarDropzoneTarget)),
              (this.$attachments = $(this.attachmentsTarget)),
              this.$toolbar.on("dragenter", this.doToolbarDragEnter),
              this.$toolbar.on("dragover", this.doToolbarDragOver),
              this.$toolbar.on("dragleave", this.doToolbarDragLeave),
              this.$toolbar.on("drop", this.doToolbarDrop),
              this.$attachments.on("dragenter", this.doToolbarDragEnter),
              this.$attachments.on("dragover", this.doToolbarDragOver),
              this.$attachments.on("dragleave", this.doToolbarDragLeave),
              this.$attachments.on("drop", this.doToolbarDrop),
              (this.$fileInput = $(this.fileInputTarget)),
              this.$fileInput.on("change", this.doFileInputChange),
              o.UI.initialize(this.$element),
              u.Z.requestChild(this.component, "issues"),
              u.Z.requestChild(this.component, "comment", {
                onAdded: () => {
                  this.components.comment.loadEditor().then(() => {
                    this.focusTracker.refreshElements(this.$element),
                      this.events.trigger("loaded", { target: this });
                  });
                },
              }),
              u.Z.requestChild(this.component, "inlineGallery", {
                events: {
                  delete: this.doInlineGalleryDeleteAttachment,
                  edit: this.doInlineGalleryEditAttachment,
                  previewclose: this.doInlineGalleryPreviewClose,
                },
              }),
              u.Z.requestChild(this.component, "elapsed", {
                events: {
                  convertinput: this.doElapsedConvertInput,
                  timer: this.doElapsedTimer,
                  enterkey: this.doElapsedEnterKey,
                },
              }),
              u.Z.requestChild(this.component, "fileCountProgress"),
              u.Z.requestChild(this.component, "fileByteProgress"),
              this.fragments.register("attachments", this.renderAttachments),
              (this.receiver = u.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$toolbar.off("dragenter", this.doToolbarDragEnter),
              this.$toolbar.off("dragover", this.doToolbarDragOver),
              this.$toolbar.off("dragleave", this.doToolbarDragLeave),
              this.$toolbar.off("drop", this.doToolbarDrop),
              this.$attachments.off("dragenter", this.doToolbarDragEnter),
              this.$attachments.off("dragover", this.doToolbarDragOver),
              this.$attachments.off("dragleave", this.doToolbarDragLeave),
              this.$attachments.off("drop", this.doToolbarDrop),
              this.$controlGroup.off("mousedown", this.doControlGroupMouseDown),
              this.$fileInput.off("change", this.doFileInputChange),
              u.Z.clipboard.removeReceiver(this.receiver);
          }
          getFocused() {
            return this.focusTracker.getFocused();
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              let t = o.UI.getDropdownIntOrNull(this.$statusId);
              0 === t && (t = null);
              let s = {
                comment: this.components.comment.getData(),
                statusId: t,
                elapsed: this.components.elapsed.getValue(),
                attachments: this.attachments,
                issues: this.components.issues.getIssues(),
              };
              this.mode == p.Edit &&
                ((s.updatedAt = this.updatedAt), (s.forceUpdate = e));
              let i =
                this.mode == p.Add
                  ? "sessions/create_result/" + this.sessionId
                  : "sessions/update_result/" + this.resultId;
              return n.N.post(i, n.N.toNetworkCase(s))
                .then((e) =>
                  Promise.all(
                    this.events.trigger("success", {
                      target: this,
                      result: e.data,
                    })
                  )
                    .then(() => {
                      this.hideValidationErrors();
                    })
                    .catch((e) => {
                      u.Z.handleError(e);
                    })
                )
                .catch((e) =>
                  d.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      l.l.handleCustomFormError(e, (e, t) => {
                        this.showValidationErrors(t);
                      });
                    }
                  )
                );
            });
          }
          cancel() {
            this.events.trigger("cancel", { target: this });
          }
          doCancel() {
            this.cancel();
          }
          resetForm(e) {
            this.hideValidationErrors(),
              this.components.comment.setData(""),
              (this.attachments.length = 0),
              e && this.components.elapsed.getStarted()
                ? this.components.elapsed.restart()
                : this.components.elapsed.clear(),
              e || o.UI.setDropdown(this.$statusId, 0),
              this.emptyFragments("attachments"),
              this.$element.removeClass(
                this.classes.resultEditorHasAttachments
              ),
              this.$element.removeClass(this.classes.resultEditorHasIssues),
              this.components.issues.clear(),
              this.components.comment.focus();
          }
          focus() {
            this.components.comment.focus(), this.focusTracker.focusChanged();
          }
          setEnabled(e) {
            (this.enabled = e),
              this.components.comment.setEnabled(e),
              this.components.elapsed.setEnabled(e),
              this.components.issues.setEnabled(e),
              o.UI.toggleDropdownEnabled(this.$statusId, e),
              o.UI.toggleButtonEnabled(this.$submitButton, e),
              o.UI.toggleButtonEnabled(this.$cancelButton, e),
              o.UI.toggleFileEnabled(this.$fileInput, e),
              o.UI.toggleIconActionEnabled($(this.addAttachmentIconTargets), e),
              o.UI.toggleIconActionEnabled($(this.addScreenshotIconTargets), e),
              o.UI.toggleIconActionEnabled($(this.addIssuesIconTargets), e);
          }
          getEnabled() {
            return this.enabled;
          }
          getElapsedTimer() {
            return this.components.elapsed.getTimer();
          }
          getElapsedTimerStarted() {
            return this.components.elapsed.getStarted();
          }
          doAddScreenshot(e) {
            if (!this.getEnabled()) return;
            const t = $(e.currentTarget);
            o.UI.popupVisible(t) || new h.j().show(t, c.Fz.TopCenter);
          }
          doAddIssues() {
            this.getEnabled() &&
              (this.$element.addClass(this.classes.resultEditorHasIssues),
              this.components.issues.focus());
          }
          toggleToolbarDragging(e) {
            if (e) {
              let e = 0;
              this.attachments.length > 0 &&
                (e = -this.$attachments.outerHeight()),
                this.$toolbarDropzone.css({ top: e }),
                this.$toolbar.addClass(this.classes.toolbarDragging);
            } else this.$toolbar.removeClass(this.classes.toolbarDragging);
          }
          uploadAttachments(e) {
            let t = [...e],
              s = 0,
              i = e.length;
            this.components.fileByteProgress.setProgress(0, 1),
              this.components.fileCountProgress.setProgress(
                s,
                i,
                r.Z.lang("sessions.upload_progress_caption", {
                  count: 1,
                  total: i,
                })
              );
            let a = !1,
              d = [];
            o.UI.markLoading(this.$element),
              this.$element.addClass(this.classes.resultEditorUploading),
              t
                .reduce(
                  (e, t) =>
                    e.then(() => {
                      if (a) return Promise.resolve();
                      let e = new FormData();
                      return (
                        e.append("attachment", t),
                        this.components.fileByteProgress.setProgress(0, 1),
                        n.N.post("attachments/create/" + this.projectId, e, {
                          onUploadProgress: (e) => {
                            this.components.fileByteProgress.setProgress(
                              e.loaded,
                              e.total
                            );
                          },
                        })
                          .then((e) => {
                            (s += 1),
                              this.components.fileByteProgress.setProgress(
                                1,
                                1
                              ),
                              this.components.fileCountProgress.setProgress(
                                s,
                                i,
                                r.Z.lang("sessions.upload_progress_caption", {
                                  count: s < i ? s + 1 : i,
                                  total: i,
                                })
                              ),
                              d.push({
                                attachment_id: e.data.id,
                                name: e.data.name,
                              });
                          })
                          .then(
                            () =>
                              new Promise(function (e, t) {
                                setTimeout(function () {
                                  e();
                                }, 200);
                              })
                          )
                          .catch((e) => {
                            l.l.handleCustomFormError(e, (e, t) => {
                              this.showValidationErrors(t);
                            }),
                              (a = !0);
                          })
                      );
                    }),
                  Promise.resolve()
                )
                .then(() =>
                  a
                    ? (o.UI.markCompleted(this.$element),
                      void this.$element.removeClass(
                        this.classes.resultEditorUploading
                      ))
                    : (this.attachments.push(...d),
                      this.refreshAttachments().then(() => {
                        o.UI.markCompleted(this.$element),
                          this.$element.removeClass(
                            this.classes.resultEditorUploading
                          );
                      }))
                );
          }
          hideValidationErrors() {
            this.$element.removeClass(this.classes.resultEditorError);
          }
          showValidationErrors(e) {
            this.$element.addClass(this.classes.resultEditorError),
              l.l.showValidationBlockErrors(this.$validationErrors, e);
          }
          refreshAttachments() {
            return this.refreshFragments("attachments").then(() => {
              this.$element.toggleClass(
                this.classes.resultEditorHasAttachments,
                this.attachments.length > 0
              );
            });
          }
        }
        g(m, "targets", [
          "statusId",
          "submitButton",
          "cancelButton",
          "validationErrors",
          "fileInput",
          "addAttachmentIcon",
          "addIssuesIcon",
          "addScreenshotIcon",
          "toolbar",
          "toolbarDropzone",
          "attachments",
        ]);
      },
      90650: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => k });
        var i = s(26454),
          o = s(96622),
          n = s(84709),
          r = s(13814),
          a = s(11802),
          l = s(43689),
          d = s(16087),
          h = s(18792),
          c = s(67694),
          u = s(50922),
          g = s(51070),
          p = s(69555),
          m = s(86715),
          f = s(62612),
          C = s(24371),
          b = s(50609),
          I = s(7042),
          w = s(5270);
        function v(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class _ extends b.V {
          constructor(e) {
            super("sessions.export_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              v(this, "classes", { hidden: "default-hidden" }),
              (this.sessionId = e);
          }
          load() {
            w.Z.requestChild(this.component, "columns");
          }
          unload() {}
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              I.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.columns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: o.UI.getDropdown(this.$delimiter),
                columns: e,
                showContext: o.UI.getCheckbox(this.$showContext),
              };
              return (
                w.Z.blockUI(),
                r.N.post(
                  "sessions/validate_export_csv/" + this.sessionId,
                  r.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      r.N.formPostDownload(
                        "sessions/export_csv/" + this.sessionId,
                        { data: JSON.stringify(r.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    I.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    w.Z.unblockUI();
                  })
              );
            });
          }
        }
        v(_, "forms", [
          { name: "export", fields: ["delimiter", "showContext"] },
        ]),
          v(_, "targets", ["submitButton", "downloadMessage"]),
          v(_, "actions", ["doSubmit"]);
        var S = s(48995);
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class k extends i.v {
          constructor(...e) {
            super(...e),
              x(this, "selectors", {
                action: ".action-list__action",
                actionId: '.action-list__action[data-id="$(id)"]',
                actionContent: ".action-list__action__content",
                resultEditor: ".action-list__action__editor",
              }),
              x(this, "classes", { popupNoMinWidth: "popup--no-min-width" }),
              x(this, "templates", {
                actionEditorContainer:
                  '<div class="action-list__action__editor"></div>',
              }),
              x(this, "doShortcutPrint", (e) => {
                e.preventDefault(), this.print();
              }),
              x(this, "doExportMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "csv":
                    o.UI.loading($(this.exportButtonTarget), () =>
                      r.N.post("sessions/render_export_csv/" + this.session.id)
                        .then((e) => {
                          new _(this.session.id).show(e.data);
                        })
                        .catch((e) => {
                          w.Z.handleError(e);
                        })
                    );
                    break;
                  case "pdf":
                    this.print();
                }
              }),
              x(this, "doActivityFragmentCompleted", () => {
                this.updateActivityTimer();
              }),
              x(this, "doAddResultEditorElapsedTimer", () => {
                this.updateActivityTimer();
              }),
              x(this, "doEditResultEditorElapsedTimer", () => {
                this.updateActivityTimer();
              }),
              x(this, "doEditMenuClick", (e) => {
                let t;
                switch (
                  (e.target.hide(),
                  this.hasEditButtonTarget && (t = $(this.editButtonTarget)),
                  e.actionName)
                ) {
                  case "edit":
                    this.editSession(t);
                    break;
                  case "delete":
                    this.deleteSession();
                    break;
                  case "close":
                    this.closeSession();
                }
              }),
              x(this, "doAddResultEditorSuccess", (e) =>
                this.refreshFragments(
                  "header",
                  "results",
                  "about",
                  "activity"
                ).then(() => {
                  this.components.addResultEditor.resetForm(!0);
                })
              ),
              x(this, "doAddResultEditorCancel", (e) => {
                this.components.addResultEditor.resetForm(!1);
              }),
              x(this, "doResultMenuClick", (e) => {
                switch ((e.target.hide(), e.actionName)) {
                  case "edit":
                    this.editResult(
                      e.context.id,
                      e.context.$result,
                      e.context.$menu
                    );
                    break;
                  case "delete":
                    this.deleteResult(e.context.id, e.context.$result);
                }
              }),
              x(this, "doEditResultEditorLoaded", (e) => {
                this.components.editResultEditor.focus();
              }),
              x(this, "doEditResultEditorSuccess", (e) =>
                this.refreshFragments(
                  "header",
                  "results",
                  "about",
                  "activity"
                ).then(() => {
                  this.endResultEditing();
                })
              ),
              x(this, "doEditResultEditorCancel", (e) => {
                this.endResultEditing();
              }),
              x(this, "renderHeader", () =>
                r.N.post("sessions/render_header/" + this.session.id)
              ),
              x(this, "renderAbout", () =>
                r.N.post("sessions/render_about/" + this.session.id)
              ),
              x(this, "renderActivity", () =>
                r.N.post("sessions/render_activity/" + this.session.id)
              ),
              x(this, "renderProperties", () =>
                r.N.post("sessions/render_properties/" + this.session.id)
              ),
              x(this, "renderResults", () =>
                r.N.post("sessions/render_results/" + this.session.id)
              ),
              x(this, "renderLog", () =>
                r.N.post("sessions/render_log/" + this.session.id)
              );
          }
          load() {
            (this.session = this.params.session),
              (this.projectId = this.params.projectId),
              (this.canAddEdit = this.params.canAddEdit),
              (this.canClose = this.params.canClose),
              (this.canDelete = this.params.canDelete),
              (this.canClosedDelete = this.params.canClosedDelete),
              (this.canResultAddEdit = this.params.canResultAddEdit),
              (this.canResultDelete = this.params.canResultDelete),
              (this.$currentResultEditContainer = null),
              o.UI.initialize(this.element),
              w.Z.requestChild(this.component, "addResultEditor", {
                events: {
                  success: this.doAddResultEditorSuccess,
                  cancel: this.doAddResultEditorCancel,
                  elapsedtimer: this.doAddResultEditorElapsedTimer,
                },
              }),
              w.Z.requestChild(this.component, "editResultEditor", {
                events: {
                  loaded: this.doEditResultEditorLoaded,
                  success: this.doEditResultEditorSuccess,
                  cancel: this.doEditResultEditorCancel,
                  elapsedtimer: this.doEditResultEditorElapsedTimer,
                },
              }),
              this.updateActivityTimer(),
              this.fragments.register("header", this.renderHeader),
              this.fragments.register("about", this.renderAbout),
              this.fragments.register("properties", this.renderProperties),
              this.fragments.register("results", this.renderResults),
              this.fragments.register("activity", this.renderActivity, {
                completedCallback: this.doActivityFragmentCompleted,
              }),
              this.fragments.register("log", this.renderLog),
              this.shortcuts.register(a.N.P, this.doShortcutPrint, {
                control: !0,
              });
          }
          responsiveContainerResize() {
            this.components.addResultEditor &&
              o.UI.dropdownRefreshSizes(
                this.components.addResultEditor.$element
              ),
              this.components.editResultEditor &&
                o.UI.dropdownRefreshSizes(
                  this.components.editResultEditor.$element
                );
          }
          print() {
            n.K.openPrintGass(r.N.url("sessions/print/" + this.session.id));
          }
          doPrint() {
            this.print();
          }
          doShowExportMenu(e) {
            let t = $(this.exportButtonTarget);
            if (o.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "csv",
              title: l.Z.lang("sessions.export_to_csv"),
              callback: this.doExportMenuClick,
            }),
              s.push({
                type: "action",
                name: "pdf",
                title: l.Z.lang("sessions.export_to_pdf"),
                callback: this.doExportMenuClick,
              }),
              new d.x(s, {
                additionalClasses: this.classes.popupNoMinWidth,
              }).show(t, p.Fz.BottomLeft);
          }
          doShowInfo() {
            let e = $(this.showInfoIconTarget);
            if (o.UI.popupVisible(e)) return;
            let t = "/sessions/view/" + this.session.id;
            new h.N({
              title: l.Z.lang("sessions.info_name", {
                name: this.session.name,
              }),
              id: this.session.id,
              link: t,
              url: r.N.url(t),
            }).show(e, p.Fz.BottomLeft);
          }
          doShowEditMenu() {
            let e = $(this.editMenuButtonTarget);
            if (o.UI.popupVisible(e)) return;
            const t = [];
            this.session.is_closed
              ? this.canClosedDelete &&
                t.push({
                  type: "action",
                  name: "delete",
                  title: l.Z.lang("sessions.delete"),
                  callback: this.doEditMenuClick,
                })
              : (this.canAddEdit &&
                  t.push({
                    type: "action",
                    name: "edit",
                    title: l.Z.lang("sessions.edit"),
                    callback: this.doEditMenuClick,
                  }),
                this.canClose &&
                  t.push({
                    type: "action",
                    name: "close",
                    title: l.Z.lang("sessions.close"),
                    callback: this.doEditMenuClick,
                  }),
                this.canDelete &&
                  ((this.canAddEdit || this.canClose) &&
                    t.push({ type: "divider" }),
                  t.push({
                    type: "action",
                    name: "delete",
                    title: l.Z.lang("sessions.delete"),
                    callback: this.doEditMenuClick,
                  }))),
              new d.x(t).show(e, p.Fz.BottomRight);
          }
          doCloseSession() {
            this.closeSession();
          }
          closeSession() {
            this.endResultEditing();
            let e = new C.U(
              l.Z.lang("sessions.close_title"),
              l.Z.langEscape("sessions.close_message", {
                name: this.session.name,
              }),
              l.Z.lang("sessions.close_button")
            );
            (e.onSuccess = () =>
              r.N.post("sessions/close/" + this.session.id).then(
                (e) => (
                  (this.session = e.data),
                  this.refreshFragments("header", "about", "log")
                )
              )),
              e.show();
          }
          deleteSession() {
            this.endResultEditing();
            let e = new f.A(
              l.Z.lang("sessions.delete_title"),
              l.Z.langEscape("sessions.delete_message", {
                name: this.session.name,
              }),
              l.Z.lang("sessions.delete_button")
            );
            (e.onSuccess = () =>
              r.N.post("sessions/delete/" + this.session.id).then(() =>
                r.N.visit("sessions/" + this.projectId)
              )),
              e.show();
          }
          doEditSession() {
            this.editSession($(this.editButtonTarget));
          }
          editSession(e) {
            this.endResultEditing(),
              o.UI.loading(e, () =>
                r.N.post("sessions/render_update/" + this.session.id)
                  .then((e) => {
                    const t = new m.q(
                      m.G.Edit,
                      this.projectId,
                      this.session.id
                    );
                    (t.onSuccess = (e) => (
                      (this.session = e),
                      this.refreshFragments("header", "about", "properties")
                    )),
                      t.show(e.data);
                  })
                  .catch((e) => {
                    w.Z.handleError(e);
                  })
              );
          }
          doShowMilestonePopup() {
            let e = $(this.showMilestonePopupIconTarget);
            if (o.UI.popupVisible(e)) return;
            const t = new u.m(),
              s = $(this.aboutSectionTarget).data("hierarchyPopup");
            t.show(e, p.Fz.BottomRight, s);
          }
          doShowTransitionPopup() {
            let e = $(this.showTransitionPopupIconTarget);
            o.UI.popupVisible(e) ||
              o.UI.loading(e, () =>
                r.N.post("sessions/render_transitions/" + this.session.id)
                  .then((t) => {
                    new g.r().show(e, p.Fz.BottomRight, t.data);
                  })
                  .catch((e) => {
                    w.Z.handleError(e);
                  })
              );
          }
          doShowStatsPopup() {
            let e = $(this.headerStatsBarTarget);
            o.UI.popupVisible(e) ||
              o.UI.loading(e, () =>
                r.N.post("sessions/render_stats/" + this.session.id)
                  .then((t) => {
                    new c._().show(e, p.Fz.BottomLeft, t.data);
                  })
                  .catch((e) => {
                    w.Z.handleError(e);
                  })
              );
          }
          doDuplicateSession() {
            this.endResultEditing(),
              o.UI.loading($(this.duplicateButtonTarget), () =>
                r.N.post("sessions/render_copy/" + this.session.id)
                  .then((e) => {
                    const t = new m.q(m.G.Add, this.projectId);
                    (t.onSuccess = (e) => r.N.visit("sessions/view/" + e.id)),
                      t.show(e.data);
                  })
                  .catch((e) => {
                    w.Z.handleError(e);
                  })
              );
          }
          doShowResultMenu(e) {
            let t = $(e.currentTarget);
            if (o.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.action),
              i = s.data("id");
            const n = [];
            this.canResultAddEdit &&
              n.push({
                type: "action",
                name: "edit",
                title: l.Z.lang("sessions.edit_result"),
                callback: this.doResultMenuClick,
              }),
              this.canResultDelete &&
                (this.canResultAddEdit && n.push({ type: "divider" }),
                n.push({
                  type: "action",
                  name: "delete",
                  title: l.Z.lang("sessions.delete_result"),
                  callback: this.doResultMenuClick,
                })),
              new d.x(n, { context: { $menu: t, $result: s, id: i } }).show(
                t,
                p.Fz.BottomLeft
              );
          }
          deleteResult(e, t) {
            let s;
            (s = t.data("note")
              ? new f.A(
                  l.Z.lang("sessions.delete_note_title"),
                  l.Z.lang("sessions.delete_note_message"),
                  l.Z.lang("sessions.delete_note_button")
                )
              : new f.A(
                  l.Z.lang("sessions.delete_result_title"),
                  l.Z.lang("sessions.delete_result_message"),
                  l.Z.lang("sessions.delete_result_button")
                )),
              (s.onSuccess = () =>
                r.N.post("sessions/delete_result/" + e).then(() =>
                  this.refreshFragments(
                    "header",
                    "results",
                    "about",
                    "activity"
                  )
                )),
              s.show();
          }
          editResult(e, t, s) {
            o.UI.loading(s, () =>
              r.N.post("sessions/render_update_result/" + e)
                .then((e) => {
                  this.components.addResultEditor.setEnabled(!1),
                    this.endResultEditing(),
                    t.children().hide();
                  let s = $(this.templates.actionEditorContainer);
                  s.html(e.data),
                    t.append(s),
                    (this.$currentResultEditContainer = s);
                })
                .catch((e) => {
                  w.Z.handleError(e), this.endResultEditing();
                })
            );
          }
          endResultEditing() {
            if (!this.$currentResultEditContainer) return;
            let e = this.$currentResultEditContainer.closest(
              this.selectors.action
            );
            this.$currentResultEditContainer.remove(),
              e.children().show(),
              this.components.addResultEditor.setEnabled(!0),
              (this.$currentResultEditContainer = null),
              this.updateActivityTimer();
          }
          keyDown(e) {
            e.which == a.N.ESC
              ? this.$currentResultEditContainer &&
                this.components.editResultEditor.cancel()
              : e.which == a.N.S &&
                (e.ctrlKey || e.metaKey) &&
                (this.components.addResultEditor &&
                this.components.addResultEditor.getFocused()
                  ? this.components.addResultEditor.submit()
                  : this.components.editResultEditor &&
                    this.components.editResultEditor.getFocused() &&
                    this.components.editResultEditor.submit());
          }
          updateActivityTimer() {
            let e = $(this.activityTimerTarget),
              t = l.Z.microsecondsToSeconds(e.data("elapsed"));
            if (
              (this.components.addResultEditor &&
                (t += this.components.addResultEditor.getElapsedTimer()),
              this.$currentResultEditContainer &&
                this.components.editResultEditor &&
                this.components.editResultEditor.getElapsedTimerStarted())
            ) {
              t += this.components.editResultEditor.getElapsedTimer();
              let e = this.$currentResultEditContainer.closest(
                this.selectors.action
              );
              t -= l.Z.microsecondsToSeconds(e.data("elapsed"));
            }
            e.text(l.Z.formatSecondsFormal(t, !0));
          }
          doActivityBlockClick(e) {
            let t = $(e.currentTarget).data("id"),
              s = $(l.Z.template(this.selectors.actionId, { id: t })),
              i = $(this.selectors.actionContent, s),
              n = $(this.selectors.actionEditor, s);
            o.UI.windowAnimateIntoViewIfNeeded(n.length > 0 ? n : i, () => {
              (this.$currentResultEditContainer &&
                this.$currentResultEditContainer.closest(s).length > 0) ||
                o.UI.highlight(s.children());
            });
          }
          doShowClosedInfo(e) {
            let t = $(e.currentTarget);
            o.UI.popupVisible(t) ||
              new S.u(
                S.Y.Closed,
                l.Z.lang("sessions.closed_info_title"),
                t.data("content")
              ).show(t, p.Fz.BottomLeft);
          }
        }
        x(k, "targets", [
          "responsiveContainer",
          "closeButton",
          "editButton",
          "editMenuButton",
          "showInfoIcon",
          "showMilestonePopupIcon",
          "aboutSection",
          "headerStatsBar",
          "duplicateButton",
          "activityTimer",
          "showTransitionPopupIcon",
          "exportButton",
        ]);
      },
      47491: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => h });
        var i = s(26454),
          o = s(96622),
          n = s(13814),
          r = s(67694),
          a = s(69555),
          l = s(5270);
        function d(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class h extends i.v {
          constructor(...e) {
            super(...e),
              d(this, "selectors", { row: "tr", hidden: ".default-hidden" }),
              d(this, "classes", { hidden: "default-hidden" }),
              d(this, "doActivityTabsChange", (e) => {
                this.refreshFragments([
                  "activityTabContent",
                  { tab: e.index },
                ]).then(() => {
                  this.components.activityTabs.highlightTab(e.index),
                    this.components.activityTabs.setLoading(!1);
                });
              }),
              d(this, "doAssignmentsConnected", (e, t) => {
                this.updateAssignmentsToolbar(e);
              }),
              d(this, "doAssignmentsAdded", (e, t) => {
                this.updateAssignmentsToolbar(e);
              }),
              d(this, "doAssignmentsStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments([
                    "assignments",
                    { state: e.state },
                  ]).then(() => {
                    e.target.setLoading(e.loading, !1, e.column);
                  });
              }),
              d(this, "renderAssignments", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.runs &&
                      (t = this.components.assignments.getState()),
                  t && !e.withPagination && delete t.paginationCurrent,
                  n.N.post(
                    "todos/render_assignment_table",
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              d(this, "renderActivityTabContent", (e = {}) => {
                let t, s;
                return (
                  (t =
                    "tab" in e
                      ? e.tab
                      : this.components.activityTabs.getCurrentTab()),
                  (s =
                    0 == t
                      ? "todos/render_contributions"
                      : "todos/render_results"),
                  n.N.post(s, n.N.toNetworkCase({}))
                );
              });
          }
          load() {
            o.UI.initialize(this.element),
              l.Z.requestChild(this.component, "assignments", {
                onConnected: this.doAssignmentsConnected,
                onAdded: this.doAssignmentsAdded,
                events: { statechange: this.doAssignmentsStateChange },
              }),
              l.Z.requestChild(this.component, "activityTabs", {
                events: { tabchange: this.doActivityTabsChange },
              }),
              this.fragments.register("assignments", this.renderAssignments),
              this.fragments.register(
                "activityTabContent",
                this.renderActivityTabContent
              );
          }
          updateAssignmentsToolbar(e) {
            if (e) {
              let t = e.getToolbarElement();
              t.removeClass(this.classes.hidden), t.css({ top: "-40px" });
            }
          }
          doShowRunStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                n.N.post("runs/render_stats/" + s)
                  .then((e) => {
                    new r._(!0).show(t, a.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    l.Z.handleError(e);
                  })
              );
          }
          doShowSessionStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.parent(),
              i = s.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(s, () =>
                n.N.post("sessions/render_stats/" + i)
                  .then((e) => {
                    new r._(!0).show(t, a.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    l.Z.handleError(e);
                  })
              );
          }
          doShowAutomationStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            o.UI.popupVisible(t) ||
              o.UI.loading(t, () =>
                n.N.post("automation/runs/render_stats/" + s)
                  .then((e) => {
                    new r._(!0).show(t, a.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    l.Z.handleError(e);
                  })
              );
          }
          doShowMoreActivity(e) {
            $(e.currentTarget).remove(),
              $(this.activityTabContentTarget)
                .find(this.selectors.hidden)
                .removeClass(this.classes.hidden);
          }
        }
        d(h, "targets", ["responsiveContainer", "activityTabContent"]);
      },
      15989: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => l });
        var i = s(26454),
          o = s(96622),
          n = s(15612),
          r = s(10380),
          a = s(5270);
        const l = class extends i.v {
          load() {
            o.UI.initialize(this.element),
              window.opener
                ? new r.P().post(window.opener, a.Z.context.appUrl, {
                    messageType: n.g.MessageOauthComplete,
                    isSuccess: this.params.isSuccess,
                    error: this.params.error,
                  })
                : window.close();
          }
        };
      },
      25218: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => r });
        var i = s(26454),
          o = s(96622),
          n = s(13814);
        const r = class extends i.v {
          load() {
            o.UI.initialize(this.element),
              setTimeout(() => {
                n.N.redirect(this.params.url);
              }, 100);
          }
        };
      },
      73174: (e, t, s) => {
        "use strict";
        s.r(t), s.d(t, { default: () => Z });
        var i,
          o,
          n,
          r = s(26454),
          a = s(13814),
          l = s(96622),
          d = s(43689),
          h = s(16559),
          c = s(69555),
          u = s(47914),
          g = s(50609),
          p = s(7042),
          m = s(5270);
        function f(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class C extends g.V {
          constructor() {
            super("users.profile.avatar_dialog", { width: 600 }),
              f(this, "classes", {
                errorVisible: "profile-select-avatar__error--visible",
                dropzoneDragging:
                  "profile-select-avatar__file__dropzone--dragging",
              }),
              f(this, "doClipboardPaste", (e, t) => {
                t.images.length > 0 &&
                  (this.uploadAvatar(t.images[0]), e.preventDefault());
              }),
              f(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              f(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              f(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              f(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAvatar(t[0]);
              }),
              f(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAvatar(t.files[0]),
                  l.UI.clearFile(this.$fileInput);
              }),
              (this.dragLeaveTimer = null);
          }
          load() {
            this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              (this.receiver = m.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              m.Z.clipboard.removeReceiver(this.receiver);
          }
          uploadAvatar(e) {
            this.$errorContainer.removeClass(this.classes.errorVisible),
              l.UI.markLoading(this.$fileSection);
            let t = new FormData();
            t.append("avatar", e),
              a.N.post("users/profile/create_avatar", t)
                .then((e) =>
                  this.triggerSuccess({ avatarId: e.data.id }).then(() => {
                    l.UI.markCompleted(this.$fileSection);
                  })
                )
                .catch((e) => {
                  l.UI.markCompleted(this.$fileSection),
                    p.l.handleCustomFormError(e, (e, t) => {
                      this.$errorMessage.text(e.avatar.join(" ")),
                        this.$errorContainer.addClass(
                          this.classes.errorVisible
                        ),
                        this.refreshPositionIfNeeded(),
                        this.$fileInput.val(null);
                    });
                });
          }
        }
        function b(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        f(C, "targets", [
          "fileInput",
          "fileSection",
          "errorMessage",
          "errorContainer",
          "dropzone",
        ]);
        class I extends g.V {
          constructor() {
            super("users.profiles.settings_dialog", {
              onSubmitForm: () => this.doSave(),
              width: u.X.SplitDialogWidth,
            }),
              (this.saving = !1);
          }
          prepare() {
            (this.avatarId = this.params.avatarId),
              this.updateRemoveAvatarButton();
          }
          doSave() {
            (this.saving = !0),
              l.UI.markLoading(this.$saveButton),
              p.l.hideValidationErrors(this.formViews);
            let e = l.UI.getDropdownIntOrNull(this.$notifications),
              t = l.UI.getDropdown(this.$timezone),
              s = l.UI.getDropdown(this.$dateFormat),
              i = l.UI.getDropdown(this.$timeFormat),
              o = {
                name: l.UI.getText(this.$name),
                notifications: -1 == e ? null : e,
                timezone: -1 == t ? null : t,
                dateFormat: -1 == s ? null : s,
                timeFormat: -1 == i ? null : i,
                avatarId: this.avatarId,
              };
            a.N.post("users/profile/update_settings", a.N.toNetworkCase(o))
              .then((e) =>
                this.triggerSuccess().then(() => {
                  l.UI.markCompleted(this.$saveButton), (this.saving = !1);
                })
              )
              .catch((e) => {
                (this.saving = !1),
                  l.UI.markCompleted(this.$saveButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
          doChangeAvatar() {
            let e = new C();
            (e.onSuccess = (e) => (
              (this.avatarId = e.avatarId),
              this.updateRemoveAvatarButton(),
              this.updateAvatar()
            )),
              e.show();
          }
          doRemoveAvatar() {
            l.UI.markLoading(this.$removeAvatarButton),
              (this.avatarId = null),
              this.updateRemoveAvatarButton(),
              this.updateAvatar()
                .then(() => {
                  l.UI.markCompleted(this.$removeAvatarButton);
                })
                .catch((e) => {
                  l.UI.markCompleted(this.$removeAvatarButton),
                    m.Z.handleError(e);
                });
          }
          updateAvatar() {
            let e = { avatarId: this.avatarId, name: l.UI.getText(this.$name) };
            return a.N.postReplace(
              "users/profile/render_avatar",
              this.$avatarContainer,
              a.N.toNetworkCase(e)
            );
          }
          updateRemoveAvatarButton() {
            l.UI.toggleButtonEnabled(this.$removeAvatarButton, this.avatarId);
          }
          doNameChange() {
            setTimeout(() => {
              !this.visible ||
                this.saving ||
                this.avatarId ||
                this.updateAvatar();
            }, 50);
          }
        }
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        b(I, "forms", [
          {
            name: "settings",
            fields: [
              "name",
              "notifications",
              "timezone",
              "dateFormat",
              "timeFormat",
            ],
          },
        ]),
          b(I, "targets", [
            "saveButton",
            "avatarContainer",
            "removeAvatarButton",
          ]),
          b(I, "actions", [
            "doSave",
            "doChangeAvatar",
            "doRemoveAvatar",
            "doNameChange",
          ]);
        class v extends g.V {
          constructor() {
            super("users.profile.disable_2fa_dialog", {
              onSubmitForm: () => {
                this.doDisable();
              },
              width: 520,
              variant: "negative",
            });
          }
          doDisable() {
            l.UI.markLoading(this.$disableButton);
            let e = { password: l.UI.getText(this.$password) };
            a.N.post("users/profile/disable_2fa", e)
              .then((e) =>
                this.triggerSuccess().then(() => {
                  l.UI.markCompleted(this.$disableButton);
                })
              )
              .catch((e) => {
                l.UI.markCompleted(this.$disableButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function S(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        w(v, "forms", [{ name: "disable", fields: ["password"] }]),
          w(v, "targets", ["disableButton"]),
          w(v, "actions", ["doDisable"]);
        class x extends g.V {
          constructor() {
            super("users.profile.reset_2fa_dialog", {
              onSubmitForm: () => {
                this.doReset();
              },
              width: 500,
            });
          }
          doReset() {
            l.UI.markLoading(this.$resetButton);
            let e = { password: l.UI.getText(this.$password) };
            a.N.post("users/profile/start_2fa", e)
              .then((e) =>
                this.triggerSuccess(e.data.series).then(() => {
                  l.UI.markCompleted(this.$resetButton);
                })
              )
              .catch((e) => {
                l.UI.markCompleted(this.$resetButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function k(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        S(x, "forms", [{ name: "reset", fields: ["password"] }]),
          S(x, "targets", ["resetButton"]),
          S(x, "actions", ["doReset"]);
        class T extends g.V {
          constructor() {
            super("users.profile.manage_2fa_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              width: 680,
            }),
              (this.page = 0);
          }
          prepare() {
            this.toggleButtons({ previous: !1, next: !1, confirm: !1 }),
              this.setActionsVisible(!1);
          }
          toggleButtons(e) {
            let t = {};
            _.defaults(t, e, { previous: !1, next: !1, confirm: !1 }),
              t.previous
                ? this.$previousButton.show()
                : this.$previousButton.hide(),
              t.next ? this.$nextButton.show() : this.$nextButton.hide(),
              t.confirm
                ? this.$confirmButton.show()
                : this.$confirmButton.hide();
          }
          setWizardPage(e) {
            switch (((this.page = e), e)) {
              case 1:
                this.toggleButtons({ previous: !1, next: !0, confirm: !1 });
                break;
              case 2:
                this.toggleButtons({ previous: !0, next: !0, confirm: !1 });
                break;
              case 3:
                this.toggleButtons({ previous: !0, next: !1, confirm: !0 }),
                  this.$code.focus();
            }
          }
          loadPage(e, t) {
            l.UI.markLoading(t);
            let s = { series: this.series };
            a.N.postReplace(
              `users/profile/render_set${e}_2fa`,
              this.$contentContainer,
              s
            )
              .then(() => {
                l.UI.markCompleted(t),
                  this.rebindAll(),
                  this.setWizardPage(e),
                  this.refreshPositionIfNeeded();
              })
              .catch((e) => {
                l.UI.markCompleted(t), m.Z.handleError(e);
              });
          }
          doNext() {
            (1 != this.page && 2 != this.page) ||
              this.loadPage(this.page + 1, this.$nextButton);
          }
          doPrevious() {
            (2 != this.page && 3 != this.page) ||
              this.loadPage(this.page - 1, this.$previousButton);
          }
          doEnable() {
            l.UI.markLoading(this.$enableButton),
              a.N.post("users/profile/start_2fa")
                .then((e) => {
                  this.series = e.data.series;
                  let t = { series: this.series };
                  a.N.postReplace(
                    "users/profile/render_set1_2fa",
                    this.$contentContainer,
                    t
                  )
                    .then(() => {
                      l.UI.markCompleted(this.$enableButton),
                        this.setActionsVisible(!0),
                        this.setWizardPage(1),
                        this.refreshPositionIfNeeded();
                    })
                    .catch((e) => {
                      l.UI.markCompleted(this.$enableButton),
                        m.Z.handleError(e);
                    });
                })
                .catch((e) => {
                  l.UI.markCompleted(this.$enableButton), m.Z.handleError(e);
                });
          }
          doConfirm() {
            l.UI.markLoading(this.$confirmButton);
            let e = { series: this.series, code: l.UI.getText(this.$code) };
            a.N.post("users/profile/enable_2fa", e)
              .then((e) =>
                this.triggerSuccess().then(() => {
                  l.UI.markCompleted(this.$confirmButton);
                })
              )
              .catch((e) => {
                l.UI.markCompleted(this.$confirmButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
          doSubmit() {
            3 == this.page ? this.doConfirm() : this.doNext();
          }
          doDisable() {
            const e = new v();
            (e.onSuccess = () => this.triggerSuccess()), e.show();
          }
          doReset() {
            const e = new x();
            (e.onSuccess = (e) => {
              this.series = e;
              let t = { series: this.series };
              return a.N.postReplace(
                "users/profile/render_set1_2fa",
                this.$contentContainer,
                t
              )
                .then(() => {
                  this.setActionsVisible(!0),
                    this.setWizardPage(1),
                    this.refreshPositionIfNeeded();
                })
                .catch((e) => {
                  m.Z.handleError(e);
                });
            }),
              e.show();
          }
        }
        function y(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        k(T, "forms", [{ name: "confirm", fields: ["code"] }]),
          k(T, "targets", [
            "previousButton",
            "nextButton",
            "confirmButton",
            "enableButton",
            "contentContainer",
          ]),
          k(T, "actions", [
            "doPrevious",
            "doNext",
            "doConfirm",
            "doEnable",
            "doDisable",
            "doReset",
          ]);
        class E {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class N extends g.V {
          constructor(e = N.Add, t = null, s = null) {
            super(
              e == E.Add
                ? "users.profile.add_api_dialog"
                : "users.profile.edit_api_dialog",
              { onSubmitForm: () => this.doSubmit(), width: 500 }
            ),
              (this.mode = e),
              (this.series = t),
              (this.name = s);
          }
          prepare() {
            this.mode == E.Edit && l.UI.setText(this.$name, this.name);
          }
          doSubmit() {
            l.UI.markLoading(this.$submitButton),
              p.l.hideValidationErrors(this.formViews);
            let e = { name: l.UI.getText(this.$name) };
            this.mode == E.Edit && (e.series = this.series);
            let t =
              this.mode == E.Add
                ? "users/profile/create_api_token"
                : "users/profile/update_api_token";
            a.N.post(t, e)
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  l.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                l.UI.markCompleted(this.$submitButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        y(N, "forms", [{ name: "api", fields: ["name"] }]),
          y(N, "targets", ["submitButton"]),
          y(N, "actions", ["doSubmit"]);
        class U extends g.V {
          constructor(e) {
            super("users.profile.generated_api_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 600,
            }),
              (this.bearer = e);
          }
          prepare() {
            this.$bearer.text(this.bearer);
          }
        }
        (n = ["bearer"]),
          (o = "targets") in (i = U)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
        var F = s(132);
        function A(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class P extends g.V {
          constructor() {
            super("users.profile.manage_api_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              width: 680,
            }),
              A(this, "doActionClick", (e) => {
                switch (e.actionName) {
                  case "delete":
                    this.doDeleteAction(e);
                    break;
                  case "edit":
                    this.doEditAction(e);
                }
              });
          }
          prepare() {
            (this.hasApiTokens = this.params.hasApiTokens),
              this.setActionsVisible(this.hasApiTokens);
          }
          load() {
            m.Z.requestChild(this.component, "keys", {
              events: { actionclick: this.doActionClick },
            });
          }
          doAdd() {
            const e = new N(E.Add);
            (e.onSuccess = (e) => {
              let t;
              return (
                this.events.trigger("change", { target: this }),
                this.hasApiTokens
                  ? (t = a.N.postReplace(
                      "users/profile/render_api_table",
                      this.$apiContainer
                    ))
                  : ((this.hasApiTokens = !0),
                    (t = a.N.postReplace(
                      "users/profile/render_api_content",
                      this.$contentContainer
                    ).then(() => {
                      this.setActionsVisible(!0),
                        this.rebindAll(),
                        this.refreshPositionIfNeeded();
                    }))),
                t.then(() => {
                  new U(e.bearer).show();
                })
              );
            }),
              e.show();
          }
          doDeleteAction(e) {
            if (l.UI.popupVisible(e.$action)) return;
            const t = new F.l(d.Z.lang("users.api_really_delete_key"));
            (t.onSuccess = () => {
              e.target.setLoading("actionfield", !0, e.$field),
                a.N.post("users/profile/delete_api_token", { series: e.id })
                  .then(
                    (e) => (
                      this.events.trigger("change", { target: this }),
                      a.N.postReplace(
                        "users/profile/render_api_table",
                        this.$apiContainer
                      )
                    )
                  )
                  .catch((t) => {
                    e.target.setLoading("actionfield", !1, e.$field),
                      m.Z.handleError(t);
                  });
            }),
              t.show(e.$action, c.Fz.BottomRight);
          }
          doEditAction(e) {
            const t = new N(E.Edit, e.id, e.$row.data("name"));
            (t.onSuccess = (e) =>
              a.N.postReplace(
                "users/profile/render_api_table",
                this.$apiContainer
              )),
              t.show();
          }
        }
        function R(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        A(P, "targets", ["apiContainer", "contentContainer"]),
          A(P, "actions", ["doAdd"]);
        class M extends g.V {
          constructor() {
            super("users.profile.password_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: 500,
            });
          }
          doSave() {
            l.UI.markLoading(this.$saveButton);
            let e = {
              passwordOld: l.UI.getText(this.$passwordOld),
              password: l.UI.getText(this.$password),
              passwordConfirmation: l.UI.getText(this.$passwordConfirmation),
            };
            a.N.post("users/profile/update_password", a.N.toNetworkCase(e))
              .then((e) =>
                this.triggerSuccess().then(() => {
                  l.UI.markCompleted(this.$saveButton);
                })
              )
              .catch((e) => {
                l.UI.markCompleted(this.$saveButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function B(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        R(M, "forms", [
          {
            name: "changePassword",
            fields: ["passwordOld", "password", "passwordConfirmation"],
          },
        ]),
          R(M, "targets", ["saveButton"]),
          R(M, "actions", ["doSave"]);
        class D extends g.V {
          constructor() {
            super("users.profile.email_dialog", {
              onSubmitForm: () => {
                this.doSave();
              },
              width: 500,
            });
          }
          doSave() {
            l.UI.markLoading(this.$saveButton);
            let e = {
              password: l.UI.getText(this.$password),
              email: l.UI.getText(this.$email),
              emailConfirmation: l.UI.getText(this.$emailConfirmation),
            };
            a.N.post("users/profile/update_email", a.N.toNetworkCase(e))
              .then((e) =>
                this.triggerSuccess().then(() => {
                  l.UI.markCompleted(this.$saveButton);
                })
              )
              .catch((e) => {
                l.UI.markCompleted(this.$saveButton),
                  p.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        function L(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        B(D, "forms", [
          {
            name: "changeEmail",
            fields: ["password", "email", "emailConfirmation"],
          },
        ]),
          B(D, "targets", ["saveButton"]),
          B(D, "actions", ["doSave"]);
        class Z extends r.v {
          constructor(...e) {
            super(...e),
              L(this, "doCancelSearch", (e) => {
                this.refreshSearch();
              }),
              L(this, "doSearch", () => {
                this.refreshSearch();
              }),
              L(this, "doNotificationsActionClick", (e) => {
                switch (e.actionName) {
                  case "open":
                    this.openNotification(e.$field, e.$row);
                    break;
                  case "delete":
                    this.deleteNotification(e.id, e.$action, e.$field);
                }
              }),
              L(this, "doNotificationsStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column);
                let t = e.state;
                this.components.searchBar.getHasSearched() &&
                  (t.search = this.components.searchBar.getSearchTerm()),
                  a.N.postReplace(
                    "users/profile/render_notifications",
                    this.notificationsContainerTarget,
                    a.N.toNetworkCase(t)
                  ).catch((t) => {
                    e.target.setLoading(e.loading, !1, e.column),
                      m.Z.handleError(t);
                  });
              });
          }
          load() {
            l.UI.initialize(this.element),
              m.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                },
              }),
              m.Z.requestChild(this.component, "notifications", {
                events: {
                  statechange: this.doNotificationsStateChange,
                  actionclick: this.doNotificationsActionClick,
                },
              });
          }
          doChangeSettings() {
            let e = $(this.settingsButtonTarget);
            l.UI.markLoading(e),
              a.N.post("users/profile/render_settings")
                .then((t) => {
                  l.UI.markCompleted(e);
                  const s = new I();
                  (s.onSuccess = () => this.refreshProfile()), s.show(t.data);
                })
                .catch((t) => {
                  l.UI.markCompleted(e), m.Z.handleError(t);
                });
          }
          manage2fa(e) {
            l.UI.markLoading(e),
              a.N.post("users/profile/render_manage_2fa")
                .then((t) => {
                  l.UI.markCompleted(e);
                  const s = new T();
                  (s.onSuccess = () =>
                    this.refreshProfile().then(() => {
                      this.hasRequired2faWarningTarget &&
                        $(this.required2faWarningTarget).hide();
                    })),
                    s.show(t.data);
                })
                .catch((t) => {
                  l.UI.markCompleted(e), m.Z.handleError(t);
                });
          }
          doManage2fa() {
            this.manage2fa($(this.manage2faLoaderTarget));
          }
          doManageApi() {
            let e = $(this.manageApiLoaderTarget);
            l.UI.markLoading(e),
              a.N.post("users/profile/render_manage_api")
                .then((t) => {
                  l.UI.markCompleted(e);
                  const s = new P();
                  s.events.on("change", () => this.refreshProfile()),
                    s.show(t.data);
                })
                .catch((t) => {
                  l.UI.markCompleted(e), m.Z.handleError(t);
                });
          }
          doEnableRequired2fa() {
            this.manage2fa($(this.enableRequired2faButtonTarget));
          }
          doChangePassword() {
            new M().show();
          }
          doChangeEmail() {
            const e = new D();
            (e.onSuccess = () => this.refreshProfile()), e.show();
          }
          deleteNotification(e, t, s) {
            if (l.UI.popupVisible(t)) return;
            const i = new F.l(d.Z.lang("users.really_delete_notification"));
            (i.onSuccess = () => {
              this.components.notifications.setLoading("actionfield", !0, s),
                a.N.post("users/profile/delete_notification/" + e)
                  .then(() => {
                    this.refreshNotifications().then(() => {
                      this.components.notifications.setLoading(
                        "actionfield",
                        !1,
                        s
                      );
                    });
                  })
                  .catch((e) => {
                    this.components.notifications.setLoading(
                      "actionfield",
                      !1,
                      s
                    ),
                      m.Z.handleError(e);
                  });
            }),
              i.show(t, c.Fz.BottomRight);
          }
          openNotification(e, t) {
            this.components.notifications.setLoading("actionfield", !0, e);
            let s = t.data("notification");
            h.T.open(s)
              .then(() => {
                this.components.notifications.setLoading("actionfield", !1, e),
                  this.refreshNotifications();
              })
              .catch((t) => {
                this.components.notifications.setLoading("actionfield", !1, e),
                  m.Z.handleError(t);
              });
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0);
            let e = this.components.notifications.getState();
            return (
              delete e.paginationCurrent,
              this.components.searchBar.getHasSearched() &&
                (e.search = this.components.searchBar.getSearchTerm()),
              a.N.postReplace(
                "users/profile/render_notifications",
                this.notificationsContainerTarget,
                a.N.toNetworkCase(e)
              )
                .then(() => {
                  this.components.searchBar.setInputLoading(!1);
                })
                .catch((e) => {
                  this.components.searchBar.setInputLoading(!1),
                    m.Z.handleError(e);
                })
            );
          }
          refreshNotifications() {
            let e = this.components.notifications.getState();
            return (
              this.components.searchBar.getHasSearched() &&
                (e.search = this.components.searchBar.getSearchTerm()),
              a.N.postReplace(
                "users/profile/render_notifications",
                this.notificationsContainerTarget,
                a.N.toNetworkCase(e)
              )
                .then(() => m.Z.layout.navbar.refreshNotifications())
                .catch((e) => {
                  m.Z.handleError(e);
                })
            );
          }
          doMarkAllNotificationsRead() {
            let e = $(this.markAllNotificationsReadButtonTarget);
            l.UI.markLoading(e),
              a.N.post("users/profile/read_notifications")
                .then(() => {
                  this.refreshNotifications().then(() => {
                    l.UI.markCompleted(e);
                  });
                })
                .catch((t) => {
                  l.UI.markCompleted(e), m.Z.handleError(t);
                });
          }
          doDeleteAllNotifications() {
            let e = $(this.deleteAllNotificationsButtonTarget);
            if (l.UI.popupVisible(e)) return;
            const t = new F.l(
              d.Z.lang("users.really_delete_all_notifications")
            );
            (t.onSuccess = () => {
              l.UI.markLoading(e),
                a.N.post("users/profile/clear_notifications")
                  .then(() => {
                    this.refreshNotifications().then(() => {
                      l.UI.markCompleted(e);
                    });
                  })
                  .catch((t) => {
                    l.UI.markCompleted(e), m.Z.handleError(t);
                  });
            }),
              t.show(e, c.Fz.TopLeft);
          }
          refreshProfile() {
            return a.N.postReplace(
              "users/profile/render_profile",
              this.profileContainerTarget
            ).then(() => {
              l.UI.initialize(this.profileContainerTarget);
            });
          }
        }
        L(Z, "targets", [
          "responsiveContainer",
          "settingsButton",
          "profileContainer",
          "manage2faLoader",
          "manageApiLoader",
          "enableRequired2faButton",
          "required2faWarning",
          "emailButton",
          "notificationsContainer",
          "deleteAllNotificationsButton",
          "markAllNotificationsReadButton",
        ]);
      },
      47914: (e, t, s) => {
        "use strict";
        s.d(t, { X: () => o });
        var i = s(15612);
        class o {
          static get StorageNamespace() {
            return "app.";
          }
          static get CookieNamespace() {
            return "testmo_";
          }
          static get ClearAppKeysDelay() {
            return 6e4;
          }
          static get SidebarBreakpoint() {
            return 992;
          }
          static get SidebarVerticalBreakpoint() {
            return 600;
          }
          static get SidebarAnimationDelay() {
            return 200;
          }
          static get BodyMinWidth() {
            return 640;
          }
          static get BodyMinPopupHeight() {
            return 700;
          }
          static get DialogCompactBreakpoint() {
            return 730;
          }
          static get DialogWidth() {
            return 700;
          }
          static get SplitDialogWidth() {
            return 850;
          }
          static get DialogHideTransition() {
            return 100;
          }
          static get DialogHideTransitionDelay() {
            return this.DialogHideTransition + 50;
          }
          static get TableBreakpoints() {
            return [545, 650, 749, 850, 950, 1050, 1150, 1250, 1320];
          }
          static get SearchBarBreakpoints() {
            return [545, 650, 749, 850, 950, 1050, 1150, 1250, 1320];
          }
          static get ResponsiveStart() {
            return 50;
          }
          static get ResponsiveIncrement() {
            return 50;
          }
          static get ResponsiveEnd() {
            return 1300;
          }
          static get PopupHideTransition() {
            return 150;
          }
          static get PopupHideTransitionDelay() {
            return this.PopupHideTransition + 50;
          }
          static get PopupTargetSizeAdjustment() {
            return 35;
          }
          static get PopupLargeWindowWidthBreakpoint() {
            return 992;
          }
          static get PopupLargeWindowHeightBreakpoint() {
            return 900;
          }
          static get TooltipLongDelay() {
            return 600;
          }
          static get TooltipShortDelay() {
            return 400;
          }
          static get TooltipReducedDelay() {
            return 200;
          }
          static get TooltipHideDelay() {
            return 50;
          }
          static get TooltipRecent() {
            return 600;
          }
          static get TooltipPageDelay() {
            return 600;
          }
          static get ChartTooltipHideDelay() {
            return 50;
          }
          static get AnimationAppearDelay() {
            return 100;
          }
          static get AnimationScrollDelay() {
            return 250;
          }
          static get AnimationHighlightDelay() {
            return 500;
          }
          static get NotAuthenticatedError() {
            return 401;
          }
          static get ForbiddenError() {
            return 403;
          }
          static get NotFoundError() {
            return 404;
          }
          static get ConflictError() {
            return 409;
          }
          static get RequestTooLargeError() {
            return 413;
          }
          static get SessionError() {
            return 419;
          }
          static get ValidationError() {
            return 422;
          }
          static get EditorMinHeight() {
            return 125;
          }
          static get EditorMaxHeight() {
            return 450;
          }
          static get RepositoriesGroupDocsContentOverflowHeight() {
            return 120;
          }
          static get MixMinTreeWidth() {
            return 250;
          }
          static get MixMinListWidth() {
            return 400;
          }
          static get MixMinDetailsWidth() {
            return 400;
          }
          static get MixSplitterWidth() {
            return 6;
          }
          static get MixPlaceholderWidth() {
            return 26;
          }
          static get MixOverlayTreeWidth() {
            return 300;
          }
          static getMixMinimumModeWidth(e) {
            switch (e) {
              case i.g.MixModeList:
                return o.MixPlaceholderWidth + o.MixMinListWidth;
              case i.g.MixModeDetails:
                return o.MixMinDetailsWidth;
              case i.g.MixModeListDetails:
                return (
                  o.MixPlaceholderWidth +
                  o.MixMinListWidth +
                  o.MixSplitterWidth +
                  o.MixMinDetailsWidth
                );
              case i.g.MixModeTreeList:
                return (
                  o.MixMinTreeWidth + o.MixSplitterWidth + o.MixMinListWidth
                );
              case i.g.MixModeTreeListDetails:
                return (
                  o.MixMinTreeWidth +
                  o.MixSplitterWidth +
                  o.MixMinListWidth +
                  o.MixSplitterWidth +
                  o.MixMinDetailsWidth
                );
            }
          }
          static get NavigatorActivateDelay() {
            return 300;
          }
          static get EmptyFilter() {
            return { mode: i.g.FiltersAll, conditions: {} };
          }
          static get PrintWindowMaxWidth() {
            return 1100;
          }
          static get PrintWindowMaxHeight() {
            return 1e3;
          }
          static get PrintWindowMinWidth() {
            return 800;
          }
          static get PrintWindowMinHeight() {
            return 600;
          }
        }
      },
      12877: (e, t, s) => {
        "use strict";
        s.d(t, { c: () => r });
        var i = s(50609),
          o = s(96622);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.V {
          constructor(e) {
            super("admin.integrations.test_dialog", { width: 560 }),
              (this.contentTitleHtml = e);
          }
          load() {
            this.$contentTitle.html(this.contentTitleHtml);
          }
          complete(e) {
            o.UI.markCompleted(this.$content),
              this.$contentMessages.html(e),
              this.refreshPositionIfNeeded();
          }
        }
        n(r, "forms", [{ name: "connection", fields: ["name", "account"] }]),
          n(r, "targets", ["content", "contentTitle", "contentMessages"]);
      },
      15192: (e, t, s) => {
        "use strict";
        s.d(t, { q: () => _, G: () => v });
        var i = s(47914),
          o = s(15612),
          n = s(50609),
          r = s(96622),
          a = s(43689),
          l = s(13814),
          d = s(7042),
          h = s(69555),
          c = s(16087),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends n.V {
          constructor() {
            super("admin.projects.avatar_dialog", { width: 600 }),
              g(this, "selectors", {
                avatars: ".admin-projects-select-avatar__select li",
                avatar: ".avatar",
              }),
              g(this, "classes", {
                errorVisible: "admin-projects-select-avatar__error--visible",
                dropzoneDragging:
                  "admin-projects-select-avatar__file__dropzone--dragging",
              }),
              g(this, "doClipboardPaste", (e, t) => {
                t.images.length > 0 &&
                  (this.uploadAvatar(t.images[0]), e.preventDefault());
              }),
              g(this, "doDropzoneDragEnter", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              g(this, "doDropzoneDragOver", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.addClass(this.classes.dropzoneDragging);
              }),
              g(this, "doDropzoneDragLeave", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = setTimeout(() => {
                    this.$dropzone.removeClass(this.classes.dropzoneDragging),
                      (this.dragLeaveTimer = null);
                  }, 100));
              }),
              g(this, "doDropzoneDrop", (e) => {
                clearTimeout(this.dragLeaveTimer),
                  (this.dragLeaveTimer = null),
                  this.$dropzone.removeClass(this.classes.dropzoneDragging);
                let t = e.originalEvent.dataTransfer.files;
                t.length > 0 && this.uploadAvatar(t[0]);
              }),
              g(this, "doFileInputChange", (e) => {
                let t = this.$fileInput.get(0);
                t.files.length > 0 && this.uploadAvatar(t.files[0]),
                  r.UI.clearFile(this.$fileInput);
              }),
              g(this, "doAvatarClick", (e) => {
                let t = $(e.currentTarget).data("index"),
                  s = $(this.selectors.avatar, e.currentTarget);
                r.UI.markLoading(s),
                  this.triggerSuccess({ avatarId: null, avatarIndex: t }).then(
                    (e) => {
                      r.UI.markCompleted(s);
                    }
                  );
              }),
              (this.dragLeaveTimer = null);
          }
          load() {
            $(this.selectors.avatars, this.$dialog).on(
              "click",
              this.doAvatarClick
            ),
              this.$fileInput.on("change", this.doFileInputChange),
              this.$dropzone.on("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.on("dragover", this.doDropzoneDragOver),
              this.$dropzone.on("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.on("drop", this.doDropzoneDrop),
              (this.receiver = u.Z.clipboard.addReceiver({
                onPaste: this.doClipboardPaste,
              }));
          }
          unload() {
            this.$dropzone.off("dragenter", this.doDropzoneDragEnter),
              this.$dropzone.off("dragover", this.doDropzoneDragOver),
              this.$dropzone.off("dragleave", this.doDropzoneDragLeave),
              this.$dropzone.off("drop", this.doDropzoneDrop),
              this.$fileInput.off("change", this.doFileInputChange),
              $(this.selectors.avatars, this.$dialog).off(
                "click",
                this.doAvatarClick
              ),
              u.Z.clipboard.removeReceiver(this.receiver);
          }
          uploadAvatar(e) {
            this.$errorContainer.removeClass(this.classes.errorVisible),
              r.UI.markLoading(this.$fileSection);
            let t = new FormData();
            t.append("avatar", e),
              l.N.post("admin/projects/create_avatar", t)
                .then((e) =>
                  this.triggerSuccess({
                    avatarId: e.data.id,
                    avatarIndex: null,
                  }).then(() => {
                    r.UI.markCompleted(this.$fileSection);
                  })
                )
                .catch((e) => {
                  r.UI.markCompleted(this.$fileSection),
                    d.l.handleCustomFormError(e, (e, t) => {
                      this.$errorMessage.text(e.avatar.join(" ")),
                        this.$errorContainer.addClass(
                          this.classes.errorVisible
                        ),
                        this.refreshPositionIfNeeded(),
                        this.$fileInput.val(null);
                    });
                });
          }
        }
        g(p, "targets", [
          "fileInput",
          "fileSection",
          "errorMessage",
          "errorContainer",
          "dropzone",
        ]);
        var m,
          f,
          C,
          b = s(14589);
        class I extends h.GI {
          constructor() {
            super("admin.projects.default_access_warning_popup");
          }
          doRevert() {
            this.triggerSuccess();
          }
        }
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        (C = ["doRevert"]),
          (f = "actions") in (m = I)
            ? Object.defineProperty(m, f, {
                value: C,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (m[f] = C);
        class v {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class _ extends n.V {
          constructor(e = _.Add, t = null) {
            super("admin.projects.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.SplitDialogWidth,
            }),
              w(this, "classes", {
                defaultAcessWarning:
                  "admin-projects-dialog-default-access--warning",
              }),
              w(this, "doUsersCancelSearch", (e) => {
                this.refreshSearch();
              }),
              w(this, "doUsersSearch", () => {
                this.refreshSearch();
              }),
              w(this, "doUsersStateChange", (e) => {
                e.target.setLoading(e.loading, !0);
                let t = e.state;
                (t.access = [...this.userAccess.values()]),
                  this.components.usersSearchBar.getHasSearched() &&
                    (t.search = this.components.usersSearchBar.getSearchTerm()),
                  l.N.postReplace(
                    "admin/projects/render_users",
                    this.$usersContainer,
                    l.N.toNetworkCase(t)
                  ).catch((t) => {
                    e.target.setLoading(e.loading, !1), u.Z.handleError(t);
                  });
              }),
              w(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              w(this, "doDefaultAccessBeforeShow", (e) => {
                this.defaultAccessWarningPopup.onSuccess =
                  this.doDefaultAccessRevert;
              }),
              w(this, "doDefaultAccessRevert", (e) => {
                r.UI.setDropdown(
                  this.$defaultAccess,
                  -o.g.ProjectsAccessGlobal
                ),
                  this.$defaultAccessContainer.removeClass(
                    this.classes.defaultAcessWarning
                  );
              }),
              w(this, "doDefaultAccessChange", (e) => {
                let t = this.$defaultAccessContainer.hasClass(
                  this.classes.defaultAcessWarning
                );
                if (
                  (this.$defaultAccessContainer.toggleClass(
                    this.classes.defaultAcessWarning,
                    e.value != -o.g.ProjectsAccessGlobal
                  ),
                  e.value != -o.g.ProjectsAccessGlobal && !t)
                ) {
                  if (r.UI.popupVisible(this.$defaultAccessWarningIcon)) return;
                  (this.defaultAccessWarningPopup.onSuccess =
                    this.doDefaultAccessRevert),
                    this.defaultAccessWarningPopup.show(
                      this.$defaultAccessWarningIcon,
                      h.Fz.RightCenter
                    );
                }
              }),
              w(this, "doTableActionClick", (e) => {
                if ("selectaccess" == e.actionName) {
                  if (r.UI.popupVisible(e.$field)) return;
                  const t = [];
                  t.push({
                    type: "action",
                    title: a.Z.lang("projects.access_empty"),
                    value: 0,
                    callback: this.doSelectAccessClick,
                  }),
                    t.push({
                      type: "action",
                      title: a.Z.lang("users.no_access"),
                      value: -o.g.ProjectsAccessNoAccess,
                      callback: this.doSelectAccessClick,
                    }),
                    t.push({
                      type: "action",
                      title: a.Z.lang("users.global_role"),
                      value: -o.g.ProjectsAccessGlobal,
                      callback: this.doSelectAccessClick,
                    }),
                    t.push({ type: "divider" });
                  for (let e of this.roles)
                    t.push({
                      type: "action",
                      title: e.name,
                      value: e.id,
                      callback: this.doSelectAccessClick,
                    });
                  new c.x(t, { context: { table: e.target, id: e.id } }).show(
                    e.$field,
                    h.Fz.BottomLeft
                  );
                }
              }),
              w(this, "doSelectAccessClick", (e) => {
                let t;
                e.target.hide();
                let s = {};
                if (e.context.table == this.components.users)
                  (t = this.userAccess), (s.user_id = e.context.id);
                else {
                  if (e.context.table != this.components.groups) return;
                  (t = this.groupAccess), (s.group_id = e.context.id);
                }
                switch (e.actionValue) {
                  case -o.g.ProjectsAccessNoAccess:
                    (s.access = o.g.ProjectsAccessNoAccess),
                      t.set(e.context.id, s);
                    break;
                  case -o.g.ProjectsAccessGlobal:
                    (s.access = o.g.ProjectsAccessGlobal),
                      t.set(e.context.id, s);
                    break;
                  case 0:
                    t.delete(e.context.id);
                    break;
                  default:
                    (s.access = o.g.ProjectsAccessRole),
                      (s.role_id = e.actionValue),
                      t.set(e.context.id, s);
                }
                e.context.table.setMenuLabel(
                  e.context.id,
                  "access",
                  $(e.actionItem).text()
                );
              }),
              (this.mode = e),
              (this.projectId = t);
          }
          load() {
            (this.roles = this.params.roles),
              (this.userAccess = a.Z.arrayToMap(this.params.access, "user_id")),
              (this.groupAccess = a.Z.arrayToMap(
                this.params.access,
                "group_id"
              )),
              (this.avatarId = this.params.avatarId),
              (this.avatarIndex = this.params.avatarIndex),
              (this.updatedAt = this.params.updatedAt),
              u.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              u.Z.requestChild(this.component, "usersSearchBar", {
                events: {
                  search: this.doUsersSearch,
                  cancelsearch: this.doUsersCancelSearch,
                },
              }),
              u.Z.requestChild(this.component, "users", {
                events: {
                  actionclick: this.doTableActionClick,
                  statechange: this.doUsersStateChange,
                },
              }),
              u.Z.requestChild(this.component, "groups", {
                events: { actionclick: this.doTableActionClick },
              }),
              u.Z.requestChild(this.component, "defaultAccess", {
                events: { change: this.doDefaultAccessChange },
              }),
              (this.defaultAccessWarningPopup = new I()),
              this.defaultAccessWarningPopup.attach(
                this.$defaultAccessWarningIcon,
                h.Fz.RightCenter,
                h.ec.ClickHover
              ),
              this.defaultAccessWarningPopup.events.on(
                "beforeshow",
                this.doDefaultAccessBeforeShow
              );
          }
          unload() {
            this.defaultAccessWarningPopup.detach();
          }
          refreshSearch() {
            let e = { access: [...this.userAccess.values()] };
            this.components.usersSearchBar.getHasSearched() &&
              (e.search = this.components.usersSearchBar.getSearchTerm()),
              this.components.usersSearchBar.setInputLoading(!0),
              l.N.postReplace(
                "admin/projects/render_users",
                this.$usersContainer,
                l.N.toNetworkCase(e)
              )
                .then(() => {
                  this.components.usersSearchBar.setInputLoading(!1);
                })
                .catch((e) => {
                  this.components.usersSearchBar.setInputLoading(!1),
                    u.Z.handleError(e);
                });
          }
          collectProjectData() {
            let e = [];
            e.push(...this.userAccess.values()),
              e.push(...this.groupAccess.values());
            let t = {
              name: r.UI.getText(this.$name),
              note: r.UI.getText(this.$note),
              is_completed: r.UI.getCheckbox(this.$isCompleted),
              access: e,
              avatar_id: this.avatarId,
              avatar_index: this.avatarIndex,
            };
            const s = r.UI.getDropdownIntOrNull(this.$defaultAccess);
            return (
              s < 0
                ? ((t.default_access = -s), (t.default_role_id = null))
                : ((t.default_access = o.g.ProjectsAccessRole),
                  (t.default_role_id = s)),
              t
            );
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            r.UI.markLoading(this.$submitButton),
              d.l.hideValidationErrors(this.formViews);
            let t = this.collectProjectData();
            this.mode == v.Edit &&
              ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
            let s =
              this.mode == v.Add
                ? "admin/projects/create"
                : "admin/projects/update/" + this.projectId;
            l.N.post(s, l.N.toNetworkCase(t))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  r.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                b.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      d.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    r.UI.markCompleted(this.$submitButton);
                  })
              );
          }
          doSelectAvatar() {
            let e = new p();
            (e.onSuccess = (e) => (
              (this.avatarId = e.avatarId),
              (this.avatarIndex = e.avatarIndex),
              l.N.postReplace(
                "admin/projects/render_avatar",
                this.$avatarContainer,
                l.N.toNetworkCase(e)
              )
            )),
              e.show();
          }
        }
        w(_, "forms", [
          {
            name: "settings",
            fields: [
              "name",
              "note",
              "defaultAccess",
              "isCompleted",
              "defaultAccessContainer",
              "defaultAccessWarningIcon",
            ],
          },
        ]),
          w(_, "targets", [
            "submitButton",
            "usersContainer",
            "avatarContainer",
          ]),
          w(_, "actions", ["doSubmit", "doSelectAvatar"]);
      },
      92405: (e, t, s) => {
        "use strict";
        s.d(t, { b: () => a });
        var i = s(17746),
          o = s(11802),
          n = s(96622);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.a {
          constructor(e = !1, t = null) {
            super("attachments.gallery_dialog", {}),
              r(this, "selectors", {
                item: ".attachment-gallery-dialog__item",
                activeItem: ".attachment-gallery-dialog__item--active",
                image: ".attachment-gallery-dialog__item__content__image img",
              }),
              r(this, "classes", {
                activeItem: "attachment-gallery-dialog__item--active",
              }),
              (this.customMode = e),
              (this.initialSelected = t);
          }
          load() {
            let e = $(this.selectors.item, this.$overlay);
            e.each((e, t) => {
              let s = $(t),
                i = $(this.selectors.image, s);
              i.one("load", () => {
                n.UI.markCompleted(s);
              }),
                i.attr("src", i.attr("data-src"));
            }),
              this.customMode &&
                this.initialSelected &&
                e.each((e, t) => {
                  let s = $(t);
                  if (s.data("url") == this.initialSelected)
                    return s.addClass(this.classes.activeItem), !1;
                });
          }
          doNext() {
            this.showNext();
          }
          doPrevious() {
            this.showPrevious();
          }
          keyDown(e) {
            if (e.which == o.N.LeftArrow)
              return (
                this.showPrevious(),
                e.stopPropagation(),
                void e.preventDefault()
              );
            e.which == o.N.RightArrow &&
              (this.showNext(), e.stopPropagation(), e.preventDefault());
          }
          showNext() {
            let e = $(this.selectors.item, this.$overlay),
              t = e.length,
              s = $(this.selectors.activeItem, this.$overlay),
              i = s.index();
            i < t - 1 &&
              (s.removeClass(this.classes.activeItem),
              e.eq(i + 1).addClass(this.classes.activeItem));
          }
          showPrevious() {
            let e = $(this.selectors.item, this.$overlay),
              t = $(this.selectors.activeItem, this.$overlay),
              s = t.index();
            s > 0 &&
              (t.removeClass(this.classes.activeItem),
              e.eq(s - 1).addClass(this.classes.activeItem));
          }
        }
        r(a, "actions", ["doPrevious", "doNext"]);
      },
      54688: (e, t, s) => {
        "use strict";
        s.d(t, { m: () => c });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(14589),
          a = s(7042),
          l = s(75360),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.V {
          constructor(e, t = null) {
            super("automation.runs.edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              h(this, "classes", { hidden: "default-hidden" }),
              h(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              (this.projectId = e),
              (this.runId = t);
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              d.Z.requestChild(this.component, "milestoneId", {
                events: { actionclick: this.doMilestoneActionClick },
              });
          }
          unload() {}
          doAddMilestone() {
            this.addMilestone(this.$addMilestoneIcon);
          }
          addMilestone(e) {
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new l.q(l.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    n.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        d.Z.waitComponentConnected("milestoneId", () => {
                          o.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  d.Z.handleError(e);
                })
            );
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let t = {
                name: o.UI.getText(this.$name),
                configId: o.UI.getDropdownIntOrNull(this.$configId),
                milestoneId: o.UI.getDropdownIntOrNull(this.$milestoneId),
                tags: o.UI.getDropdown(this.$tags),
              };
              (t.updatedAt = this.updatedAt), (t.forceUpdate = e);
              let s = "automation/runs/update/" + this.runId;
              return n.N.post(s, n.N.toNetworkCase(t))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) =>
                  r.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      a.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    }
                  )
                );
            });
          }
        }
        h(c, "forms", [
          { name: "run", fields: ["name", "configId", "milestoneId", "tags"] },
        ]),
          h(c, "targets", ["submitButton", "addMilestoneIcon"]),
          h(c, "actions", ["doSubmit", "doAddMilestone"]);
      },
      17637: (e, t, s) => {
        "use strict";
        s.d(t, { y: () => c });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(14589),
          l = s(75360),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.V {
          constructor(e, t) {
            super("runs.edit_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              h(this, "selectors", {
                input: "input",
                dropdown: ".dropdown",
                fieldSelection: ".field-selection",
                fieldSelectionField: ".field-selection__field",
                fieldSelectionCheckbox: ".field-selection__checkbox .checkbox",
                fieldLabel: ".field > label",
              }),
              h(this, "classes", {
                fieldSelectionEditing: "field-selection--editing",
                fieldSelectionRestricted: "field-selection--restricted",
                hidden: "default-hidden",
              }),
              h(this, "doFieldSelectionCheckboxChange", (e) => {
                this.fieldSelectionChange(
                  e.closest(this.selectors.fieldSelection),
                  e
                );
              }),
              h(this, "doFieldSelectionLabelClick", (e) => {
                let t = $(e.currentTarget).closest(
                  this.selectors.fieldSelection
                );
                if (t.hasClass(this.classes.fieldSelectionRestricted)) return;
                let s = $(this.selectors.fieldSelectionCheckbox, t);
                o.UI.setCheckbox(s, !o.UI.getCheckbox(s)),
                  this.fieldSelectionChange(t, s);
              }),
              h(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              (this.runIds = e),
              (this.projectId = t);
          }
          load() {
            (this.updates = this.params.updates),
              (this.$fieldSelections = $(
                this.selectors.fieldSelection,
                this.$dialog
              )),
              (this.$fieldSelectionLabels = $(
                this.selectors.fieldLabel,
                this.$ieldSelections
              )),
              (this.$fieldSelectionCheckboxes = $(
                this.selectors.fieldSelectionCheckbox,
                this.$fieldSelections
              )),
              this.$fieldSelectionLabels.on(
                "click",
                this.doFieldSelectionLabelClick
              ),
              o.UI.onCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              ),
              d.Z.requestChild(this.component, "milestoneId", {
                events: { actionclick: this.doMilestoneActionClick },
              });
          }
          unload() {
            this.$fieldSelectionLabels.off(
              "click",
              this.doFieldSelectionLabelClick
            ),
              o.UI.offCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              );
          }
          fieldSelectionChange(e, t) {
            let s = o.UI.getCheckbox(t);
            e.toggleClass(this.classes.fieldSelectionEditing, s),
              o.UI.dropdownRefreshSizes(e);
            let i = $(this.selectors.fieldSelectionField, e),
              n = i.data("field");
            setTimeout(() => {
              "name" == n
                ? o.UI.focusText($(this.selectors.input, i).first())
                : o.UI.focusDropdown($(this.selectors.dropdown, i).first());
            }, 0);
          }
          doAddMilestone(e) {
            e.stopPropagation(), this.addMilestone(this.$addMilestoneIcon);
          }
          addMilestone(e) {
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new l.q(l.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    n.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        d.Z.waitComponentConnected("milestoneId", () => {
                          o.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  d.Z.handleError(e);
                })
            );
          }
          doSubmit() {
            this.submit();
          }
          isFieldSelectionEnabled(e) {
            let t = e.closest(this.selectors.fieldSelection),
              s = $(this.selectors.fieldSelectionCheckbox, t);
            return o.UI.getCheckbox(s);
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let t = { ids: this.runIds };
              return (
                this.isFieldSelectionEnabled(this.$name) &&
                  (t.name = o.UI.getText(this.$name)),
                this.isFieldSelectionEnabled(this.$configId) &&
                  (t.configId = o.UI.getDropdownIntOrNull(this.$configId)),
                this.isFieldSelectionEnabled(this.$milestoneId) &&
                  (t.milestoneId = o.UI.getDropdownIntOrNull(
                    this.$milestoneId
                  )),
                this.isFieldSelectionEnabled(this.$tags) &&
                  (t.tags = o.UI.getDropdown(this.$tags)),
                (t.updates = this.updates),
                (t.forceUpdate = e),
                n.N.post(
                  "automation/runs/update_many/" + this.projectId,
                  n.N.toNetworkCase(t)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    a.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        r.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  )
              );
            });
          }
        }
        h(c, "forms", [
          { name: "run", fields: ["name", "configId", "milestoneId", "tags"] },
        ]),
          h(c, "targets", ["submitButton", "addMilestoneIcon"]),
          h(c, "actions", ["doSubmit", "doAddMilestone"]);
      },
      56542: (e, t, s) => {
        "use strict";
        s.d(t, { u: () => d });
        var i = s(50609),
          o = s(13814),
          n = s(7042),
          r = s(96622),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.V {
          constructor(e, t) {
            super("automation.runs.export_many_csv_dialog", {
              onSubmitForm: () => {
                this.doSubmit();
              },
              minHeight: 600,
              minWidth: 760,
              width: 820,
              height: 680,
              resizable: !0,
            }),
              l(this, "classes", {
                hidden: "default-hidden",
                leftContentExportModeSummary:
                  "automation-runs-csv-export-many-dialog__left-content--export-mode-summary",
                leftContentExportModeResults:
                  "automation-runs-csv-export-many-dialog__left-content--export-mode-results",
              }),
              l(this, "doExportModeChange", () => {
                r.UI.getRadio(this.$exportSummary)
                  ? (this.$leftContent.addClass(
                      this.classes.leftContentExportModeSummary
                    ),
                    this.$leftContent.removeClass(
                      this.classes.leftContentExportModeResults
                    ))
                  : (this.$leftContent.removeClass(
                      this.classes.leftContentExportModeSummary
                    ),
                    this.$leftContent.addClass(
                      this.classes.leftContentExportModeResults
                    ));
              }),
              (this.projectId = e),
              (this.runIds = t);
          }
          load() {
            r.UI.onRadioChange(this.$exportSummary, this.doExportModeChange),
              r.UI.onRadioChange(this.$exportResults, this.doExportModeChange),
              a.Z.requestChild(this.component, "resultColumns"),
              a.Z.requestChild(this.component, "summaryColumns");
          }
          unload() {}
          submitSummary() {
            r.UI.loading(this.$submitButton, () => {
              n.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.summaryColumns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: r.UI.getDropdown(this.$delimiter),
                columns: e,
                ids: this.runIds,
              };
              return (
                a.Z.blockUI(),
                o.N.post(
                  "automation/runs/validate_export_many_summary_csv/" +
                    this.projectId,
                  o.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      o.N.formPostDownload(
                        "automation/runs/export_many_summary_csv/" +
                          this.projectId,
                        { data: JSON.stringify(o.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    n.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    a.Z.unblockUI();
                  })
              );
            });
          }
          submitResults() {
            r.UI.loading(this.$submitButton, () => {
              n.l.hideValidationErrors(this.formViews);
              let e = [];
              this.components.resultColumns.getSelectedRows().each((t, s) => {
                e.push($(s).data("column"));
              });
              let t = {
                delimiter: r.UI.getDropdown(this.$delimiter),
                columns: e,
                ids: this.runIds,
                showContext: r.UI.getCheckbox(this.$showContext),
              };
              return (
                a.Z.blockUI(),
                o.N.post(
                  "automation/runs/validate_export_many_csv/" + this.projectId,
                  o.N.toNetworkCase(t)
                )
                  .then(
                    (e) => (
                      this.$downloadMessage.removeClass(this.classes.hidden),
                      o.N.formPostDownload(
                        "automation/runs/export_many_csv/" + this.projectId,
                        { data: JSON.stringify(o.N.toNetworkCase(t)) }
                      ),
                      new Promise((e, t) => {
                        setTimeout(() => {
                          e();
                        }, 1500 + 75 * this.runIds.length);
                      }).then(() => this.triggerSuccess())
                    )
                  )
                  .catch((e) => {
                    n.l.handleFormError(e, this.formViews);
                  })
                  .then(() => {
                    a.Z.unblockUI();
                  })
              );
            });
          }
          doSubmit() {
            r.UI.getRadio(this.$exportSummary)
              ? this.submitSummary()
              : this.submitResults();
          }
        }
        l(d, "forms", [
          {
            name: "export",
            fields: [
              "delimiter",
              "exportMode",
              "exportSummary",
              "exportResults",
              "showContext",
            ],
          },
        ]),
          l(d, "targets", ["submitButton", "leftContent", "downloadMessage"]),
          l(d, "actions", ["doSubmit"]);
      },
      25275: (e, t, s) => {
        "use strict";
        s.d(t, { A: () => d });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(11802),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.V {
          constructor(e, t = null) {
            super("automation.sources.delete_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 520,
              variant: "negative",
              hideOnESC: !1,
            }),
              l(this, "classes", { hidden: "default-hidden" }),
              l(this, "doConfirmationCheckboxChange", () => {
                o.UI.toggleButtonEnabled(
                  this.$submitButton,
                  o.UI.getCheckbox(this.$confirmationCheckbox)
                );
              }),
              (this.projectId = e),
              (this.sourceId = t),
              (this.cancelled = !1),
              (this.inProgress = !1);
          }
          load() {
            (this.runCount = this.params.runCount),
              a.Z.requestChild(this.component, "progress"),
              o.UI.onCheckboxChange(
                this.$confirmationCheckbox,
                this.doConfirmationCheckboxChange
              );
          }
          unload() {}
          doSubmit() {
            if (!o.UI.getCheckbox(this.$confirmationCheckbox)) return;
            o.UI.setButtonDisabled(this.$submitButton),
              o.UI.toggleCheckboxEnabled(this.$confirmationCheckbox, !1);
            const e = () =>
              n.N.post("automation/sources/purge_runs/" + this.sourceId).then(
                (t) => {
                  if (t.data.run_count > 0 && !this.cancelled)
                    return (
                      this.components.progress &&
                        this.components.progress.setProgress(
                          this.runCount - t.data.run_count,
                          this.runCount
                        ),
                      e()
                    );
                }
              );
            o.UI.loading(
              this.$submitButton,
              () => (
                a.Z.setBlockingRequests(!1),
                (this.inProgress = !0),
                this.components.progress.setProgress(0, this.runCount),
                this.$progressContainer.show(),
                e()
                  .then(() => {
                    if (!this.cancelled)
                      return n.N.post(
                        "automation/sources/delete/" + this.sourceId
                      ).then(() => {
                        this.triggerSuccess();
                      });
                    this.triggerSuccess();
                  })
                  .catch((e) => {
                    a.Z.handleError(e);
                  })
              )
            ).then(() => {
              (this.inProgress = !1), a.Z.setBlockingRequests(!0);
            });
          }
          doCancel() {
            this.inProgress
              ? this.cancelled ||
                ((this.cancelled = !0),
                o.UI.setButtonDisabled(this.$cancelButton),
                o.UI.markLoading(this.$cancelButton),
                o.UI.markCompleted(this.$submitButton))
              : this.hide();
          }
          hideClick() {
            this.doCancel();
          }
          keyDown(e) {
            e.which == r.N.ESC && this.doCancel();
          }
        }
        l(d, "forms", [{ name: "source", fields: [] }]),
          l(d, "targets", [
            "submitButton",
            "cancelButton",
            "confirmationCheckbox",
            "progressContainer",
          ]),
          l(d, "actions", ["doSubmit", "doCancel"]);
      },
      69339: (e, t, s) => {
        "use strict";
        s.d(t, { m: () => d });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(14589),
          a = s(7042);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.V {
          constructor(e, t = null) {
            super("automation.sources.edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 600,
            }),
              l(this, "classes", { hidden: "default-hidden" }),
              (this.projectId = e),
              (this.sourceId = t);
          }
          load() {
            this.updatedAt = this.params.updatedAt;
          }
          unload() {}
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let t = {
                name: o.UI.getText(this.$name),
                isRetired: o.UI.getRadio(this.$isRetired),
              };
              (t.updatedAt = this.updatedAt), (t.forceUpdate = e);
              let s = "automation/sources/update/" + this.sourceId;
              return n.N.post(s, n.N.toNetworkCase(t))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) =>
                  r.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      a.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    }
                  )
                );
            });
          }
        }
        l(d, "forms", [
          { name: "source", fields: ["name", "isRetired", "isActive"] },
        ]),
          l(d, "targets", ["submitButton"]),
          l(d, "actions", ["doSubmit"]);
      },
      24371: (e, t, s) => {
        "use strict";
        s.d(t, { U: () => r });
        var i = s(50609),
          o = s(96622);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.V {
          constructor(e, t, s = null, i = null, r = "negative") {
            super("common.confirmation_dialog", {
              onSubmitForm: () => this.doConfirm(),
              width: 520,
              variant: r,
            }),
              n(this, "doConfirmationCheckboxChange", () => {
                o.UI.toggleButtonEnabled(
                  this.$confirmationButton,
                  o.UI.getCheckbox(this.$confirmationCheckbox)
                );
              }),
              (this.title = e),
              (this.htmlMessage = t),
              (this.htmlConfirmation = i),
              (this.button = s),
              (this.variant = r);
          }
          load() {
            this.$title.text(this.title),
              this.$message.html(this.htmlMessage),
              this.$confirmationButton.addClass(this.variant),
              this.button && this.$confirmationButton.text(this.button),
              this.htmlConfirmation
                ? (this.$confirmationLabel.html(this.htmlConfirmation),
                  o.UI.setButtonDisabled(this.$confirmationButton),
                  o.UI.onCheckboxChange(
                    this.$confirmationCheckbox,
                    this.doConfirmationCheckboxChange
                  ))
                : this.$confirmationCheckbox.remove();
          }
          doConfirm() {
            (this.htmlConfirmation &&
              !o.UI.getCheckbox(this.$confirmationCheckbox)) ||
              (o.UI.markLoading(this.$confirmationButton),
              this.triggerSuccess().then(() => {
                o.UI.markCompleted(this.$confirmationButton);
              }));
          }
        }
        n(r, "actions", ["doConfirm"]),
          n(r, "targets", [
            "title",
            "message",
            "confirmationButton",
            "confirmationCheckbox",
            "confirmationLabel",
          ]);
      },
      62612: (e, t, s) => {
        "use strict";
        s.d(t, { A: () => r });
        var i = s(50609),
          o = s(96622);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.V {
          constructor(e, t, s = null, i = null, r = {}) {
            super("common.delete_dialog", {
              onSubmitForm: () => this.doDelete(),
              width: 520,
              variant: "negative",
            }),
              n(this, "doConfirmationCheckboxChange", () => {
                o.UI.toggleButtonEnabled(
                  this.$deleteButton,
                  o.UI.getCheckbox(this.$confirmationCheckbox)
                );
              }),
              (this.title = e),
              (this.htmlMessage = t),
              (this.htmlConfirmation = i),
              (this.button = s),
              (this.options = r);
          }
          load() {
            this.$title.text(this.title),
              this.$message.html(this.htmlMessage),
              this.button && this.$deleteButton.text(this.button),
              this.htmlConfirmation
                ? (this.$confirmationLabel.html(this.htmlConfirmation),
                  o.UI.setButtonDisabled(this.$deleteButton),
                  o.UI.onCheckboxChange(
                    this.$confirmationCheckbox,
                    this.doConfirmationCheckboxChange
                  ))
                : this.$confirmationCheckbox.remove(),
              this.options.htmlWarning
                ? this.$warning.html(this.options.htmlWarning)
                : this.$warning.remove();
          }
          doDelete() {
            (this.htmlConfirmation &&
              !o.UI.getCheckbox(this.$confirmationCheckbox)) ||
              (o.UI.markLoading(this.$deleteButton),
              this.triggerSuccess().then(() => {
                o.UI.markCompleted(this.$deleteButton);
              }));
          }
        }
        n(r, "actions", ["doDelete"]),
          n(r, "targets", [
            "title",
            "message",
            "deleteButton",
            "confirmationCheckbox",
            "confirmationLabel",
            "warning",
          ]);
      },
      71258: (e, t, s) => {
        "use strict";
        s.d(t, { w: () => a });
        var i = s(50609),
          o = s(96622),
          n = s(5270);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.V {
          constructor(e = {}) {
            super("common.error_dialog", {
              width: 480,
              variant: "negative",
              breadcrumbs: !1,
            }),
              r(this, "classes", { hidden: "default-hidden" }),
              r(this, "defaultOptions", {
                message: null,
                title: null,
                details: null,
                allowRefresh: !1,
              }),
              (this.options = {}),
              _.defaults(this.options, e, this.defaultOptions);
          }
          load() {
            this.options.message && this.$message.text(this.options.message),
              this.options.title && this.$title.text(this.options.title),
              this.options.details &&
                (this.$details.text(this.options.details),
                this.$showDetailsLink.removeClass(this.classes.hidden)),
              this.options.allowRefresh &&
                this.$refreshButton.removeClass(this.classes.hidden);
          }
          doRefresh() {
            o.UI.markLoading(this.$refreshButton),
              n.Z.blockUI(),
              document.location.reload(!0);
          }
          doShowDetails() {
            this.$details.show(),
              this.$showDetailsLink.hide(),
              this.refreshPositionIfNeeded();
          }
        }
        r(a, "actions", ["doRefresh", "doShowDetails"]),
          r(a, "targets", [
            "message",
            "showDetailsLink",
            "refreshButton",
            "details",
            "title",
          ]);
      },
      67811: (e, t, s) => {
        "use strict";
        s.d(t, { s: () => a });
        var i,
          o,
          n,
          r = s(50609);
        class a extends r.V {
          constructor(e, t) {
            super("common.glass_blocked_dialog", { width: 550 });
          }
          load() {}
        }
        (n = ["doSubmit"]),
          (o = "actions") in (i = a)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      33908: (e, t, s) => {
        "use strict";
        s.d(t, { n: () => a });
        var i,
          o,
          n,
          r = s(50609);
        class a extends r.V {
          constructor(e, t) {
            super("common.message_dialog", { width: 500 }),
              (this.title = e),
              (this.message = t);
          }
          load() {
            this.$title.text(this.title), this.$message.text(this.message);
          }
        }
        (n = ["title", "message"]),
          (o = "targets") in (i = a)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      75360: (e, t, s) => {
        "use strict";
        s.d(t, { G: () => c, q: () => u });
        var i = s(47914),
          o = s(50609),
          n = s(96622),
          r = s(13814),
          a = s(7042),
          l = s(14589),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class u extends o.V {
          constructor(e = u.Add, t = null, s = null, o = null, r = !1) {
            super("milestones.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.SplitDialogWidth,
            }),
              h(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              (this.mode = e),
              (this.projectId = t),
              (this.milestoneId = s),
              (this.showDocsInitially = r),
              o &&
                d.Z.waitComponentConnected("parentId", () => {
                  n.UI.setDropdown(this.$parentId, o);
                });
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              d.Z.requestChild(this.component, "tabs", {
                onAdded: () => {
                  this.showDocsInitially && this.components.tabs.showTab(1);
                },
                events: { tabchange: this.doTabChanged },
              }),
              d.Z.requestChild(this.component, "issues");
          }
          prepare() {
            return new Promise((e, t) => {
              d.Z.requestChild(this.component, "docs", {
                onAdded: () => {
                  this.components.docs.loadEditor().then(() => {
                    this.showDocsInitially &&
                      setTimeout(() => {
                        this.components.docs.focus();
                      }, 1),
                      e();
                  });
                },
              });
            });
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            n.UI.markLoading(this.$submitButton),
              a.l.hideValidationErrors(this.formViews);
            let t = {
              name: n.UI.getText(this.$name),
              note: n.UI.getText(this.$note),
              parentId: n.UI.getDropdownIntOrNull(this.$parentId),
              typeId: n.UI.getDropdownIntOrNull(this.$typeId),
              automationTags: n.UI.getDropdown(this.$automationTags),
              dueDate: n.UI.getText(this.$dueDate),
              docs: this.components.docs.getData(),
              issues: this.components.issues.getIssues(),
            };
            this.$startDate.length > 0 &&
              (t.startDate = n.UI.getText(this.$startDate)),
              this.mode == c.Edit &&
                ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
            let s =
              this.mode == c.Add
                ? "milestones/create/" + this.projectId
                : "milestones/update/" + this.milestoneId;
            r.N.post(s, r.N.toNetworkCase(t))
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  n.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) =>
                l.s
                  .handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      a.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                  .then(() => {
                    n.UI.markCompleted(this.$submitButton);
                  })
              );
          }
          doSetDueDate(e) {
            let t = $(e.currentTarget).data("weeks"),
              s = n.UI.getDate(this.$startDate);
            !1 === s && (s = new Date());
            let i = new Date(s.valueOf());
            i.setDate(i.getDate() + 7 * t), n.UI.setDate(this.$dueDate, i);
          }
        }
        h(u, "forms", [
          {
            name: "settings",
            fields: [
              "name",
              "note",
              "parentId",
              "typeId",
              "startDate",
              "dueDate",
              "automationTags",
              "issues",
            ],
          },
          { name: "documentation", fields: ["docs"] },
        ]),
          h(u, "targets", ["submitButton"]),
          h(u, "actions", ["doSubmit", "doSetDueDate"]);
      },
      65983: (e, t, s) => {
        "use strict";
        s.d(t, { X: () => l });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.V {
          constructor(e) {
            super("milestones.start_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 550,
            }),
              (this.milestoneId = e);
          }
          doSubmit() {
            o.UI.markLoading(this.$submitButton),
              r.l.hideValidationErrors(this.formViews);
            let e = {
              isCompleted: !0,
              completedAt: o.UI.getText(this.$completedAt),
            };
            n.N.post(
              "milestones/update/" + this.milestoneId,
              n.N.toNetworkCase(e)
            )
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  o.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                o.UI.markCompleted(this.$submitButton),
                  r.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        a(l, "forms", [{ name: "milestone", fields: ["completedAt"] }]),
          a(l, "targets", ["submitButton"]),
          a(l, "actions", ["doSubmit"]);
      },
      91481: (e, t, s) => {
        "use strict";
        s.d(t, { K: () => l });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.V {
          constructor(e) {
            super("milestones.start_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 550,
            }),
              (this.milestoneId = e);
          }
          doSubmit() {
            o.UI.markLoading(this.$submitButton),
              r.l.hideValidationErrors(this.formViews);
            let e = { isStarted: !0, startedAt: o.UI.getText(this.$startedAt) };
            n.N.post(
              "milestones/update/" + this.milestoneId,
              n.N.toNetworkCase(e)
            )
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  o.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                o.UI.markCompleted(this.$submitButton),
                  r.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        a(l, "forms", [{ name: "milestone", fields: ["startedAt"] }]),
          a(l, "targets", ["submitButton"]),
          a(l, "actions", ["doSubmit"]);
      },
      35451: (e, t, s) => {
        "use strict";
        s.d(t, { G: () => g, q: () => p });
        var i = s(47914),
          o = s(50609),
          n = s(96622),
          r = s(13814),
          a = s(14589),
          l = s(7042),
          d = s(11802),
          h = s(27181),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class p extends o.V {
          constructor(e = p.Add, t = null, s = null, o = null, r = !1, a = !1) {
            super("repositories.cases.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.SplitDialogWidth,
              resizable: !0,
              responsive: !0,
            }),
              u(this, "classes", { hidden: "default-hidden" }),
              u(this, "selectors", {
                fieldControlSteps: ".field-control-steps",
                fieldHidden: ".field--hidden",
                caseStepEditor: ".case-step-editor",
              }),
              u(this, "doShortcutAddStep", (e) => {
                let t = null,
                  s = $(document.activeElement).closest(
                    this.selectors.caseStepEditor
                  );
                if (
                  (s.length > 0 && (t = n.UI.getCaseStepEditorController(s)),
                  !t)
                )
                  for (let e of this.component.children)
                    if (
                      "caseStepEditor" == e.name &&
                      !$(e.element)
                        .closest(this.selectors.fieldControlSteps)
                        .is(this.selectors.fieldHidden)
                    ) {
                      t = e.instance;
                      break;
                    }
                t && t.addAndFocusNewStep();
              }),
              u(this, "doTemplateIdChange", (e) => {
                let t = !1,
                  s = this.fieldMappings[e.value] || [];
                this.fields.updateVisibility((e) => {
                  let i = s.includes(e.name);
                  return (
                    e.settings.is_compact || (t = t || i), s.includes(e.name)
                  );
                }),
                  this.$wideCustomFieldSection.toggleClass(
                    this.classes.hidden,
                    !t
                  );
              }),
              (this.mode = e),
              (this.projectId = t),
              (this.folderId = s),
              (this.caseId = o),
              (this.showRepositoryWarning = r),
              (this.addAnotherCase = a);
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.fieldMappings = this.params.fieldMappings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.updatedAt = this.params.updatedAt),
              (this.fields = new h.rN(this.fieldSettings, this.$dialog)),
              this.showRepositoryWarning &&
                this.$repositoryWarning.removeClass(this.classes.hidden),
              c.Z.requestChild(this.component, "templateId", {
                events: { change: this.doTemplateIdChange },
              }),
              c.Z.requestChild(this.component, "dialogManageAttachments", {
                events: {
                  refreshui: (e) => {
                    this.refreshUi();
                  },
                  initform: (e) => {
                    l.l.hideValidationErrors(this.formViews);
                  },
                  error: (e) => {
                    l.l.handleFormError(e.error, this.formViews),
                      this.refreshPositionIfNeeded();
                  },
                },
              }),
              c.Z.requestChild(this.component, "issues"),
              c.Z.requestChild(this.component, "caseStepEditor"),
              this.shortcuts.register(d.N.E, this.doShortcutAddStep, {
                control: !0,
              }),
              this.mode == g.Add &&
                this.addAnotherCase &&
                n.UI.setCheckbox(this.$addAnotherCase, !0);
          }
          loaded() {
            this.fields.loaded();
          }
          unload() {}
          prepare() {
            return this.fields.prepare();
          }
          getAddAnotherCase() {
            return n.UI.getCheckbox(this.$addAnotherCase);
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            n.UI.loading(this.$submitButton, () => {
              let t = Promise.resolve(!0);
              if (
                this.components.dialogManageAttachments &&
                this.components.dialogManageAttachments.isEditing()
              ) {
                let e =
                  this.components.dialogManageAttachments.confirmActiveEditing();
                e && (t = e);
              }
              return t.then((t) => {
                if (!t) return;
                l.l.hideValidationErrors(this.formViews);
                let s = {
                  folderId: this.folderId,
                  name: n.UI.getText(this.$name),
                  configurations: n.UI.getDropdownInts(this.$configurations),
                  templateId: n.UI.getDropdownIntOrNull(this.$templateId),
                  stateId: n.UI.getDropdownIntOrNull(this.$stateId),
                  estimate: n.UI.getText(this.$estimate),
                  tags: n.UI.getDropdown(this.$tags),
                  attachments:
                    this.components.dialogManageAttachments.getAttachments(),
                  issues: this.components.issues.getIssues(),
                };
                _.assign(
                  s,
                  this.fields.getValues(
                    (e) =>
                      (this.fieldMappings[s.templateId] || []).includes(
                        e.name
                      ) &&
                      (!e.settings.is_restricted || this.canAddEditRestricted)
                  )
                ),
                  this.mode == g.Edit &&
                    ((s.updatedAt = this.updatedAt), (s.forceUpdate = e));
                let i =
                  this.mode == g.Add
                    ? "repositories/create_case/" + this.projectId
                    : "repositories/update_case/" + this.caseId;
                return r.N.post(i, r.N.toNetworkCase(s))
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    a.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        l.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  );
              });
            });
          }
        }
        u(p, "forms", [
          {
            name: "case",
            fields: [
              "name",
              "configurations",
              "templateId",
              "stateId",
              "estimate",
              "issues",
              "tags",
            ],
          },
        ]),
          u(p, "targets", [
            "submitButton",
            "wideCustomFieldSection",
            "repositoryWarning",
            "addAnotherCase",
          ]),
          u(p, "actions", ["doSubmit"]);
      },
      28456: (e, t, s) => {
        "use strict";
        s.d(t, { _: () => v });
        var i = s(15612),
          o = s(47914),
          n = s(50609),
          r = s(43689),
          a = s(96622),
          l = s(13814),
          d = s(7042),
          h = s(69555),
          c = s(16087),
          u = s(55885),
          g = s(67694),
          p = s(24850),
          m = s(26734),
          f = s(5270);
        function C(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class b extends n.V {
          constructor(e, t) {
            super("repositories.cases.select_import_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 850,
              height: 800,
              minHeight: 700,
              resizable: !0,
            }),
              C(this, "classes", {
                statusesPlaceholder:
                  "repos-select-cases-import-dialog__statuses--placeholder",
              }),
              C(this, "selectors", { row: "tr" }),
              C(this, "doRunsRemoved", (e) => {
                this.deactivateRun();
              }),
              C(this, "doRunsAdded", (e) => {
                this.refreshTables(), this.deactivateRun();
                let t = e.getResponsiveContentColumns();
                for (let e of t) this.updateResponsiveRunsContent(e);
              }),
              C(this, "doFilter", (e) => {
                const t = $(e.button);
                a.UI.popupVisible(t) ||
                  (this.components.searchBar.setFilterLoading(!0),
                  l.N.post(
                    "runs/render_filter/" + this.projectId,
                    l.N.toNetworkCase(this.filter)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new p.y();
                      (s.onSubmit = (e) =>
                        l.N.post(
                          "runs/validate_filter/" + this.projectId,
                          l.N.toNetworkCase(e.filter)
                        ).then((e) => {
                          this.filter = e.data;
                          let t = _.keys(this.filter.conditions).length;
                          return this.refreshFragments([
                            "runs",
                            { withPagination: !1 },
                          ]).then(() => {
                            this.components.searchBar.setFilterCount(t);
                          });
                        })),
                        s.show(t, h.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        f.Z.handleError(e);
                    }));
              }),
              C(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                a.UI.popupVisible(t) && a.UI.getVisiblePopup(t).hide(),
                  (this.filter.conditions = {}),
                  a.UI.loading(t, () =>
                    this.refreshFragments([
                      "runs",
                      { withPagination: !1 },
                    ]).then(() => {
                      this.components.searchBar.setFilterCount(0);
                    })
                  );
              }),
              C(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              C(this, "doSearch", () => {
                this.refreshSearch();
              }),
              C(this, "doStatusesSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  a.UI.setRadio(this.$includeSelected, !0);
              }),
              C(this, "doRunsResizeContent", (e) => {
                this.updateResponsiveRunsContent(e);
              }),
              C(this, "doRunsStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["runs", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              C(this, "doRunsActionClick", (e) => {
                "activate" === e.actionName &&
                  this.activateRun(e.target, e.id, e.$field, e.$row);
              }),
              C(this, "doSelectSubmitMenuClick", (e) => {
                e.target.hide();
                let t = i.g.FiltersSelectionSet;
                "add" == e.actionName
                  ? (t = i.g.FiltersSelectionAdd)
                  : "remove" == e.actionName &&
                    (t = i.g.FiltersSelectionRemove),
                  this.submit(t);
              }),
              C(this, "renderRuns", (e = {}) => {
                _.defaults(e, { state: null, withPagination: !0 });
                let t = e.state ? e.state : this.components.runs.getState();
                return (
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  l.N.post(
                    "repositories/render_select_cases_import_table/" +
                      this.projectId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              C(this, "afterRenderRuns", () => {
                this.refreshForms();
              }),
              C(this, "renderStatuses", (e = {}) =>
                l.N.post(
                  "repositories/render_select_cases_import_statuses/" + e.runId
                )
              ),
              C(this, "afterRenderStatuses", () => {
                this.refreshForms();
              }),
              (this.projectId = e),
              (this.runId = null),
              (this.cases = t);
          }
          load() {
            (this.filter = o.X.EmptyFilter),
              f.Z.requestChild(this.component, "runs", {
                onAdded: this.doRunsAdded,
                onRemoved: this.doRunsRemoved,
                events: {
                  resizecontent: this.doRunsResizeContent,
                  statechange: this.doRunsStateChange,
                  actionclick: this.doRunsActionClick,
                },
              }),
              f.Z.requestChild(this.component, "statuses", {
                events: { selectionchange: this.doStatusesSelectionChange },
              }),
              f.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                },
              }),
              this.fragments.register("runs", this.renderRuns, {
                completedCallback: this.afterRenderRuns,
              }),
              this.fragments.register("statuses", this.renderStatuses, {
                completedCallback: this.afterRenderStatuses,
              });
          }
          unload() {}
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments(["runs", { withPagination: !1 }]).then(
                () => {
                  this.components.searchBar.setInputLoading(!1);
                }
              );
          }
          updateResponsiveRunsContent(e) {
            "runs:tags" == e.name &&
              m.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.tags;
                return t ? JSON.parse(t) : [];
              });
          }
          activateRun(e, t, s, i) {
            e.loading(
              "actionfield",
              s,
              () => (
                e.markActivatedRow(i),
                this.refreshFragments(["statuses", { runId: t }]).then(() => {
                  (this.runId = t),
                    a.UI.setButtonEnabled(this.$submitButton),
                    a.UI.setButtonEnabled(this.$selectSubmitButton),
                    this.$statusesContainer.removeClass(
                      this.classes.statusesPlaceholder
                    );
                })
              )
            );
          }
          deactivateRun() {
            (this.runId = null),
              this.$statusesContainer.addClass(
                this.classes.statusesPlaceholder
              ),
              a.UI.setButtonDisabled(this.$submitButton),
              a.UI.setButtonDisabled(this.$selectSubmitButton);
          }
          doRunsShowStatsPopup(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.row).data("id");
            a.UI.popupVisible(t) ||
              a.UI.loading(t, () =>
                l.N.post("runs/render_stats/" + s)
                  .then((e) => {
                    new g._().show(t, h.Fz.BottomLeft, e.data);
                  })
                  .catch((e) => {
                    f.Z.handleError(e);
                  })
              );
          }
          doSelectSubmit() {
            if (a.UI.popupVisible(this.$selectSubmitButton)) return;
            let e = [];
            e.push({
              type: "action",
              name: "set",
              title: r.Z.lang("repositories.select_cases_set_selection"),
              callback: this.doSelectSubmitMenuClick,
            }),
              e.push({
                type: "action",
                name: "add",
                title: r.Z.lang("repositories.select_cases_add_selection"),
                callback: this.doSelectSubmitMenuClick,
              }),
              e.push({
                type: "action",
                name: "remove",
                title: r.Z.lang("repositories.select_cases_remove_selection"),
                callback: this.doSelectSubmitMenuClick,
              }),
              new c.x(e).show(this.$selectSubmitButton, h.Fz.TopRight);
          }
          doSubmit() {
            this.submit(i.g.FiltersSelectionSet);
          }
          submit(e) {
            a.UI.loading(this.$submitButton, () => {
              d.l.hideValidationErrors(this.formViews);
              let t = {
                filterType: e,
                selected: this.cases,
                statuses: a.UI.getRadio(this.$includeAll)
                  ? []
                  : this.components.statuses.getSelectedIds(),
              };
              return l.N.post(
                "repositories/filter_select_cases_for_run/" + this.runId,
                l.N.toNetworkCase(t)
              )
                .then((e) => {
                  this.triggerSuccess(e.data);
                })
                .catch((e) => {
                  d.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        C(b, "forms", [{ name: "selection", fields: [] }]),
          C(b, "targets", [
            "submitButton",
            "selectSubmitButton",
            "statusesContainer",
            "includeAll",
            "includeSelected",
          ]),
          C(b, "actions", [
            "doSubmit",
            "doSelectSubmit",
            "doRunsShowStatsPopup",
          ]);
        var I = s(132);
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class v extends n.V {
          constructor(e) {
            super("repositories.cases.select_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 1050,
              height: 700,
              resizable: !0,
              responsive: !0,
            }),
              w(this, "classes", {
                hidden: "default-hidden",
                filterError: "repos-select-cases-dialog__panes__filter--error",
              }),
              w(this, "doFilterMenuClick", (e) => {
                e.target.hide();
                let t = i.g.FiltersSelectionSet;
                "add" == e.actionName
                  ? (t = i.g.FiltersSelectionAdd)
                  : "remove" == e.actionName &&
                    (t = i.g.FiltersSelectionRemove),
                  a.UI.loading(this.$setSelectionButton, () =>
                    this.filterCases(t)
                  );
              }),
              w(this, "doFoldersNodeClick", (e) => {
                this.components.folders.nodeLoading(e.$node, () =>
                  this.selectFolder(e.$node, e.id).catch((e) => {
                    f.Z.handleError(e);
                  })
                );
              }),
              w(this, "doFoldersSelectionChange", (e) => {
                e.checked
                  ? this.components.folders.nodeLoading(e.$node, () =>
                      l.N.post(
                        "repositories/filter_select_cases_for_folder/" + e.id
                      )
                        .then((t) => {
                          (this.cases[e.id] = t.data.cases),
                            this.groupId == e.id &&
                              (this.components.cases.setSelectedIds(
                                this.components.cases.getAllIds()
                              ),
                              this.updateGroupCaseCount()),
                            this.updateTotalCaseCount(),
                            this.updateFolderCaseCount(e.$node);
                        })
                        .catch((e) => {
                          f.Z.handleError(e);
                        })
                    )
                  : ((this.cases[e.id] = []),
                    this.groupId == e.id &&
                      (this.updateGroupCaseCount(),
                      this.components.cases.setSelectedIds([])),
                    this.updateTotalCaseCount(),
                    this.updateFolderCaseCount(e.$node));
              }),
              w(this, "doCasesSelectionChange", (e) => {
                this.cases || (this.cases = {}),
                  this.cases[this.groupId] || (this.cases[this.groupId] = []),
                  (this.cases[this.groupId] = _.union(
                    this.cases[this.groupId],
                    this.components.cases.getSelectedIds()
                  )),
                  (this.cases[this.groupId] = _.difference(
                    this.cases[this.groupId],
                    this.components.cases.getUnselectedIds()
                  ));
                let t = this.cases[this.groupId].length,
                  s = this.caseTotals[this.groupId] || 0,
                  i = this.components.folders.getActivatedNode();
                this.setFolderCheckbox(i, t, s),
                  this.updateGroupCaseCount(),
                  this.updateTotalCaseCount();
              }),
              w(this, "doCasesStateChange", (e) =>
                e.target.loading(e.loading, e.column, () =>
                  this.refreshFragments(["cases", { state: e.state }])
                )
              ),
              w(this, "doFilterSelectFolders", (e) => {
                let t = { selected: e.ids };
                return l.N.post(
                  "repositories/render_select_folders/" + this.projectId,
                  l.N.toNetworkCase(t)
                ).then((t) => {
                  const s = new u._();
                  (s.onSuccess = (t) => {
                    let s = { selected: t };
                    return l.N.post(
                      "repositories/render_case_filter_folders/" +
                        this.projectId,
                      l.N.toNetworkCase(s)
                    ).then((t) => {
                      e.target.setFolderFilterContent(e.name, t.data);
                    });
                  }),
                    s.show(t.data);
                });
              }),
              w(this, "renderGroup", (e = {}) => {
                let t = this.groupId;
                e.groupId && (t = e.groupId);
                let s = { selected: this.cases[t] || [] };
                return l.N.post(
                  "repositories/render_select_cases_group/" + t,
                  l.N.toNetworkCase(s)
                );
              }),
              w(this, "afterRenderGroup", () => {
                this.refreshForms(), this.updateGroupCaseCount();
              }),
              w(this, "renderCases", (e = {}) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = {};
                return (
                  e.state
                    ? (t = e.state)
                    : this.components.cases &&
                      (t = this.components.cases.getState()),
                  _.defaults(t, this.pageState),
                  e.withPagination || delete t.paginationCurrent,
                  (t.selected = this.cases[this.groupId] || []),
                  l.N.post(
                    "repositories/render_select_cases_group_cases/" +
                      this.groupId,
                    l.N.toNetworkCase(t)
                  )
                );
              }),
              (this.projectId = e);
          }
          load() {
            (this.groupId = this.params.groupId),
              (this.cases = this.params.cases),
              this.cases || (this.cases = {}),
              (this.caseTotals = this.params.caseTotals),
              (this.filter = this.params.filter),
              null === this.filter && (this.filter = o.X.EmptyFilter),
              (this.hasGroup = this.params.hasGroup),
              (this.hasFolders = this.params.hasFolders),
              f.Z.requestChild(this.component, "folders", {
                events: {
                  nodeclick: this.doFoldersNodeClick,
                  selectionchange: this.doFoldersSelectionChange,
                },
              }),
              f.Z.requestChild(this.component, "cases", {
                onAdded: (e, t) => {
                  this.refreshTables();
                },
                events: {
                  statechange: this.doCasesStateChange,
                  selectionchange: this.doCasesSelectionChange,
                },
              }),
              f.Z.requestChild(this.component, "filter", {
                events: { selectfolders: this.doFilterSelectFolders },
              }),
              this.fragments.register("group", this.renderGroup, {
                completedCallback: this.afterRenderGroup,
              }),
              this.fragments.register("cases", this.renderCases),
              this.updateGroupCaseCount(),
              this.updateTotalCaseCount(),
              (this.lastFilter = _.cloneDeep(this.filter));
          }
          prepare() {
            if (this.hasFolders)
              return new Promise((e, t) => {
                f.Z.waitComponentLoaded("folders", () => {
                  this.updateFolderCheckboxes(),
                    this.updateFolderCaseCounts(),
                    e();
                });
              });
          }
          unload() {}
          doSetSelection() {
            a.UI.loading(this.$setSelectionButton, () =>
              this.filterCases(i.g.FiltersSelectionSet)
            );
          }
          updateFolderCaseCount(e) {
            let t = e.data("id"),
              s = this.cases[t],
              i = `(${s ? s.length : 0}/${this.caseTotals[t] || 0})`;
            this.components.folders.updateNodeSecondaryText(e, i);
          }
          updateFolderCaseCounts() {
            this.components.folders &&
              this.components.folders.getNodes().each((e, t) => {
                this.updateFolderCaseCount($(t));
              });
          }
          updateFolderCheckbox(e) {
            let t = e.data("id"),
              s = this.cases[t],
              i = s ? s.length : 0,
              o = this.caseTotals[t] || 0;
            this.setFolderCheckbox(e, i, o);
          }
          updateFolderCheckboxes() {
            this.components.folders &&
              this.components.folders.getNodes().each((e, t) => {
                this.updateFolderCheckbox($(t));
              });
          }
          setFolderCheckbox(e, t, s) {
            0 == t
              ? this.components.folders.setNodeUnselected(e)
              : t == s
              ? this.components.folders.setNodeSelected(e)
              : this.components.folders.setNodeIndeterminate(e);
          }
          filterCases(e) {
            let t = {
              selected: this.getSelectedCases(),
              filter: this.getFilter(),
              filterType: e,
            };
            return (
              this.hideFilterValidationErrors(),
              this.$filterSuccess.addClass(this.classes.hidden),
              l.N.post(
                "repositories/filter_select_cases/" + this.projectId,
                l.N.toNetworkCase(t)
              )
                .then((t) => {
                  this.lastFilter = this.getFilter();
                  let s = _.reduce(this.cases, (e, t) => e + t.length, 0);
                  Array.isArray(t.data.cases)
                    ? (this.cases = {})
                    : (this.cases = t.data.cases),
                    (this.filter = t.data.filter),
                    this.updateTotalCaseCount(),
                    this.updateFolderCaseCounts(),
                    this.updateFolderCheckboxes(),
                    this.updateGroupCaseCount(),
                    this.components.cases &&
                      this.components.cases.setSelectedIds(
                        this.cases[this.groupId] || []
                      );
                  let o,
                    n,
                    a = _.reduce(t.data.cases, (e, t) => e + t.length, 0);
                  e == i.g.FiltersSelectionSet
                    ? ((n = a),
                      (o = r.Z.lang(
                        1 == n
                          ? "repositories.select_cases_success_set_single"
                          : "repositories.select_cases_success_set_multi",
                        { count: n }
                      )))
                    : e == i.g.FiltersSelectionAdd
                    ? ((n = a - s),
                      (o = r.Z.lang(
                        1 == n
                          ? "repositories.select_cases_success_add_single"
                          : "repositories.select_cases_success_add_multi",
                        { count: n }
                      )))
                    : e == i.g.FiltersSelectionRemove &&
                      ((n = s - a),
                      (o = r.Z.lang(
                        1 == n
                          ? "repositories.select_cases_success_remove_single"
                          : "repositories.select_cases_success_remove_multi",
                        { count: n }
                      ))),
                    this.$filterSuccessMessage.html(o),
                    this.$filterSuccess.removeClass(this.classes.hidden);
                })
                .catch((e) => {
                  d.l.handleCustomFormError(e, (e, t) => {
                    this.showFilterValidationErrors(t);
                  });
                })
            );
          }
          hideFilterValidationErrors() {
            this.$filterContainer.removeClass(this.classes.filterError);
          }
          showFilterValidationErrors(e) {
            this.$filterContainer.addClass(this.classes.filterError),
              d.l.showValidationBlockErrors(this.$filterValidationErrors, e);
          }
          doResetFilter() {
            (this.filter = o.X.EmptyFilter),
              a.UI.setRadio(this.$modeAnd, !0),
              this.components.filter.resetConditions(),
              this.hideFilterValidationErrors(),
              this.$filterSuccess.addClass(this.classes.hidden);
          }
          doShowFilterMenu() {
            if (a.UI.popupVisible(this.$filterMenuButton)) return;
            let e = [];
            e.push({
              type: "action",
              name: "set",
              title: r.Z.lang("repositories.select_cases_set_selection"),
              callback: this.doFilterMenuClick,
            }),
              e.push({
                type: "action",
                name: "add",
                title: r.Z.lang("repositories.select_cases_add_selection"),
                callback: this.doFilterMenuClick,
              }),
              e.push({
                type: "action",
                name: "remove",
                title: r.Z.lang("repositories.select_cases_remove_selection"),
                callback: this.doFilterMenuClick,
              }),
              new c.x(e).show(this.$filterMenuButton, h.Fz.BottomRight);
          }
          getFilter() {
            return {
              conditions: this.components.filter.getConditions(),
              mode: a.UI.getRadio(this.$modeAnd)
                ? i.g.FiltersAll
                : i.g.FiltersAny,
            };
          }
          updateTotalCaseCount() {
            let e = _.reduce(this.cases, (e, t) => e + t.length, 0),
              t = _.reduce(this.caseTotals, (e, t) => e + t, 0);
            this.$totalCaseCount.text(
              r.Z.lang("repositories.select_cases_total_selected", {
                selected: e,
                total: t,
              })
            );
          }
          selectFolder(e, t) {
            let s = this.components.folders.getActivatedNode();
            this.components.folders.markActivatedNode(e);
            let i = this.groupId;
            return (
              (this.groupId = t),
              this.refreshFragmentsWithCustomErrorHandling(["group"])
                .then((e) => {})
                .catch((e) => {
                  throw (
                    ((this.groupId = i),
                    this.components.groups.markActivatedNode(s),
                    e)
                  );
                })
            );
          }
          updateGroupCaseCount() {
            let e = this.cases[this.groupId],
              t = `(${e ? e.length : 0}/${this.caseTotals[this.groupId] || 0})`;
            if ((this.$groupCaseCount.text(t), this.components.folders)) {
              let e = this.components.folders.getActivatedNode();
              this.components.folders.updateNodeSecondaryText(e, t);
            }
          }
          getSelectedCases() {
            return _.reduce(this.cases, (e, t) => e.concat(...t), []);
          }
          doImportRun() {
            a.UI.loading(this.$importRunButton, () =>
              l.N.post(
                "repositories/render_select_cases_import/" + this.projectId
              )
                .then((e) => {
                  const t = new b(this.projectId, this.getSelectedCases());
                  (t.onSuccess = (e) => {
                    Array.isArray(e.cases)
                      ? (this.cases = {})
                      : (this.cases = e.cases),
                      this.updateTotalCaseCount(),
                      this.updateFolderCaseCounts(),
                      this.updateFolderCheckboxes(),
                      this.updateGroupCaseCount(),
                      this.components.cases &&
                        this.components.cases.setSelectedIds(
                          this.cases[this.groupId] || []
                        );
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  f.Z.handleError(e);
                })
            );
          }
          submit() {
            a.UI.loading(this.$submitButton, () =>
              this.triggerSuccess({
                cases: this.getSelectedCases(),
                filter: this.filter,
              })
            );
          }
          doSubmit() {
            if (
              _.isEqual(this.lastFilter, this.getFilter()) ||
              a.UI.popupVisible(this.$submitButton)
            )
              this.submit();
            else {
              const e = new I.l(
                r.Z.lang("repositories.select_cases_filter_confirmation")
              );
              (e.onSuccess = () => {
                this.submit();
              }),
                e.show(this.$submitButton, h.Fz.TopCenter);
            }
          }
        }
        w(v, "forms", [{ name: "selection", fields: [] }]),
          w(v, "targets", [
            "submitButton",
            "groupCaseCount",
            "setSelectionButton",
            "modeAnd",
            "modeOr",
            "totalCaseCount",
            "filterMenuButton",
            "importRunButton",
            "filterValidationErrors",
            "filterContainer",
            "filterSuccessMessage",
            "filterSuccess",
          ]),
          w(v, "actions", [
            "doSubmit",
            "doSetSelection",
            "doResetFilter",
            "doShowFilterMenu",
            "doImportRun",
          ]);
      },
      77741: (e, t, s) => {
        "use strict";
        s.d(t, { G: () => d, q: () => h });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class h extends i.V {
          constructor(e = h.Add, t = null, s = null, i = null, o = !1) {
            super("repositories.folders.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 770,
            }),
              l(this, "classes", { hidden: "default-hidden" }),
              (this.mode = e),
              (this.projectId = t),
              (this.folderId = s),
              (this.parentFolderId = i),
              (this.showRepositoryWarning = o);
          }
          load() {
            this.showRepositoryWarning &&
              this.$repositoryWarning.removeClass(this.classes.hidden);
          }
          prepare() {
            return new Promise((e, t) => {
              a.Z.requestChild(this.component, "docs", {
                onAdded: () => {
                  this.components.docs.loadEditor().then(() => {
                    e();
                  });
                },
              });
            });
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = {
                name: o.UI.getText(this.$name),
                docs: this.components.docs.getData(),
              };
              this.parentFolderId && (e.parentId = this.parentFolderId);
              let t =
                this.mode == d.Add
                  ? "repositories/create_folder/" + this.projectId
                  : "repositories/update_folder/" + this.folderId;
              return n.N.post(t, n.N.toNetworkCase(e))
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  r.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        l(h, "forms", [{ name: "folder", fields: ["name", "docs"] }]),
          l(h, "targets", ["submitButton", "repositoryWarning"]),
          l(h, "actions", ["doSubmit"]);
      },
      55885: (e, t, s) => {
        "use strict";
        s.d(t, { _: () => l });
        var i = s(50609),
          o = s(96622),
          n = s(47914),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.V {
          constructor() {
            super("repositories.folders.select_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: n.X.BodyMinWidth,
            });
          }
          load() {
            r.Z.requestChild(this.component, "folders");
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () =>
              this.triggerSuccess(
                this.components.folders
                  ? this.components.folders.getSelectedIds()
                  : []
              )
            );
          }
        }
        a(l, "forms", [{ name: "folder", fields: ["folders"] }]),
          a(l, "targets", ["submitButton"]),
          a(l, "actions", ["doSubmit"]);
      },
      73739: (e, t, s) => {
        "use strict";
        s.d(t, { G: () => d, P: () => h });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(47914),
          a = s(7042);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class h extends i.V {
          constructor(e, t, s) {
            super("resources.add_edit_link_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: r.X.BodyMinWidth,
            }),
              (this.mode = e),
              (this.entity = t),
              this.mode == d.Add ? (this.objectId = s) : (this.linkId = s);
          }
          load() {}
          doSubmit() {
            o.UI.markLoading(this.$submitButton),
              a.l.hideValidationErrors(this.formViews);
            let e = {
                name: o.UI.getText(this.$name),
                url: o.UI.getText(this.$url),
                note: o.UI.getText(this.$note),
              },
              t =
                this.mode == d.Add
                  ? this.entity + "/create_link/" + this.objectId
                  : this.entity + "/update_link/" + this.linkId;
            n.N.post(t, e)
              .then((e) =>
                this.triggerSuccess(e.data).then(() => {
                  o.UI.markCompleted(this.$submitButton);
                })
              )
              .catch((e) => {
                o.UI.markCompleted(this.$submitButton),
                  a.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
          }
        }
        l(h, "forms", [{ name: "link", fields: ["name", "url", "note"] }]),
          l(h, "targets", ["submitButton"]),
          l(h, "actions", ["doSubmit"]);
      },
      3461: (e, t, s) => {
        "use strict";
        s.d(t, { G: () => m, q: () => f });
        var i = s(47914),
          o = s(15612),
          n = s(50609),
          r = s(96622),
          a = s(13814),
          l = s(43689),
          d = s(14589),
          h = s(7042),
          c = s(75360),
          u = s(28456),
          g = s(5270);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
          static get Copy() {
            return 5;
          }
        }
        class f extends n.V {
          constructor(e = f.Add, t = null, s = null, o = null, n = !1) {
            super("runs.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.SplitDialogWidth,
            }),
              p(this, "classes", { hidden: "default-hidden" }),
              p(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              p(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              p(this, "doConfigChange", () => {
                let e = r.UI.getDropdownIntOrNull(this.$configId);
                r.UI.toggleLinkActionEnabled(this.$applyConfigLink, !!e);
              }),
              (this.mode = e),
              (this.projectId = t),
              (this.runId = s),
              (this.showDocsInitially = n),
              o &&
                g.Z.waitComponentConnected("milestoneId", () => {
                  r.UI.setDropdown(this.$milestoneId, o);
                });
          }
          load() {
            (this.updatedAt = this.params.updatedAt),
              (this.cases = this.params.cases),
              (this.filter = this.params.filter),
              (this.initialIncludeAll = this.params.includeAll),
              (this.initialCases = _.clone(this.params.cases)),
              g.Z.requestChild(this.component, "milestoneId", {
                events: { actionclick: this.doMilestoneActionClick },
              }),
              g.Z.requestChild(this.component, "configId", {
                events: { change: this.doConfigChange },
              }),
              g.Z.requestChild(this.component, "tabs", {
                onAdded: () => {
                  this.showDocsInitially && this.components.tabs.showTab(1);
                },
                events: { tabchange: this.doTabChanged },
              }),
              g.Z.requestChild(this.component, "issues"),
              this.updateCaseCount();
          }
          unload() {}
          prepare() {
            return new Promise((e, t) => {
              g.Z.requestChild(this.component, "docs", {
                onAdded: () => {
                  this.components.docs.loadEditor().then(() => {
                    this.showDocsInitially &&
                      setTimeout(() => {
                        this.components.docs.focus();
                      }, 1),
                      e();
                  });
                },
              });
            });
          }
          updateCaseCount() {
            let e;
            (e =
              0 == this.cases.length
                ? l.Z.lang("runs.cases_include_cases_none")
                : 1 == this.cases.length
                ? l.Z.lang("runs.cases_include_cases_single")
                : l.Z.lang("runs.cases_include_cases_multi", {
                    count: this.cases.length,
                  })),
              this.$selectedCasesCount.text(e);
          }
          doAddMilestone() {
            this.addMilestone(this.$addMilestoneIcon);
          }
          addMilestone(e) {
            r.UI.loading(e, () =>
              a.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new c.q(c.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    a.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        g.Z.waitComponentConnected("milestoneId", () => {
                          r.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                })
            );
          }
          doSelectCases() {
            r.UI.loading(this.$casesSelection, () => {
              let e = { filter: this.filter, selected: this.cases };
              return a.N.post(
                "repositories/render_select_cases/" + this.projectId,
                a.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new u._(this.projectId);
                  (t.onSuccess = (e) => {
                    (this.cases = e.cases),
                      (this.filter = e.filter),
                      this.updateCaseCount(),
                      r.UI.setRadio(this.$includeSelected, !0);
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  g.Z.handleError(e);
                });
            });
          }
          doApplyConfig() {
            let e = r.UI.getDropdownIntOrNull(this.$configId);
            e &&
              r.UI.loading(this.$applyConfigLink, () => {
                let t,
                  s = i.X.EmptyFilter;
                return (
                  (s.conditions["repository_cases:configs"] = { values: [e] }),
                  (t = r.UI.getRadio(this.$includeAll)
                    ? {
                        selected: [],
                        filter: s,
                        filterType: o.g.FiltersSelectionSet,
                      }
                    : {
                        selected: this.cases,
                        filter: s,
                        filterType: o.g.FiltersSelectionIntersect,
                      }),
                  a.N.post(
                    "repositories/filter_select_cases/" + this.projectId,
                    a.N.toNetworkCase(t)
                  ).then((t) => {
                    let s;
                    (s = Array.isArray(t.data.cases)
                      ? []
                      : _.reduce(t.data.cases, (e, t) => e.concat(...t), [])),
                      (this.cases = s),
                      this.updateCaseCount(),
                      r.UI.setRadio(this.$includeSelected, !0),
                      this.filter || (this.filter = i.X.EmptyFilter),
                      this.filter.conditions["repository_cases:configs"] ||
                        (this.filter.conditions["repository_cases:configs"] = {
                          values: [],
                        }),
                      this.filter.conditions[
                        "repository_cases:configs"
                      ].values.push(e);
                  })
                );
              });
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            r.UI.loading(this.$submitButton, () => {
              h.l.hideValidationErrors(this.formViews);
              let t = {
                name: r.UI.getText(this.$name),
                configId: r.UI.getDropdownIntOrNull(this.$configId),
                milestoneId: r.UI.getDropdownIntOrNull(this.$milestoneId),
                stateId: r.UI.getDropdownIntOrNull(this.$stateId),
                tags: r.UI.getDropdown(this.$tags),
                docs: this.components.docs.getData(),
                includeAll: r.UI.getRadio(this.$includeAll),
                cases: this.cases,
                issues: this.components.issues.getIssues(),
              };
              this.mode == m.Edit &&
                ((t.updatedAt = this.updatedAt), (t.forceUpdate = e));
              let s =
                this.mode == m.Edit
                  ? "runs/update/" + this.runId
                  : "runs/create/" + this.projectId;
              return a.N.post(s, a.N.toNetworkCase(t))
                .then((e) => {
                  let s = this.initialIncludeAll != t.includeAll;
                  s ||
                    this.initialIncludeAll ||
                    (s = !_.isEqual(this.initialCases, this.cases));
                  let i = e.data;
                  return (i.selectionChanged = s), this.triggerSuccess(i);
                })
                .catch((e) =>
                  d.s.handle(
                    e,
                    () => {
                      this.submit(!0);
                    },
                    () => {
                      h.l.handleTabbedFormError(
                        e,
                        this.formViews,
                        this.components.tabs
                      ),
                        this.refreshPositionIfNeeded();
                    }
                  )
                );
            });
          }
        }
        p(f, "forms", [
          {
            name: "run",
            fields: [
              "name",
              "configId",
              "milestoneId",
              "includeAll",
              "includeSelected",
              "stateId",
              "tags",
              "issues",
            ],
          },
        ]),
          p(f, "targets", [
            "submitButton",
            "addMilestoneIcon",
            "selectedCasesCount",
            "casesSelection",
            "applyConfigLink",
          ]),
          p(f, "actions", [
            "doSubmit",
            "doAddMilestone",
            "doSelectCases",
            "doApplyConfig",
          ]);
      },
      22143: (e, t, s) => {
        "use strict";
        s.d(t, { Y: () => y });
        var i = s(50609),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(7042),
          l = s(69555),
          d = s(16087),
          h = s(132),
          c = s(75360),
          u = s(28456),
          g = s(47914);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m extends i.V {
          constructor(e) {
            super("runs.import_text_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: g.X.BodyMinWidth,
            }),
              (this.projectId = e);
          }
          cleanupNames() {
            let e = n.UI.getText(this.$names);
            (e = o.Z.removeWhitespaceFromTextList(e)),
              n.UI.setText(this.$names, e);
          }
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews), this.cleanupNames();
              let e = { names: o.Z.splitTextList(n.UI.getText(this.$names)) };
              return r.N.post(
                "runs/render_create_many_runs_from_text/" + this.projectId,
                r.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        p(m, "forms", [{ name: "import", fields: ["names"] }]),
          p(m, "targets", ["submitButton"]),
          p(m, "actions", ["doSubmit"]);
        var f = s(26734),
          C = s(24850),
          b = s(15331),
          I = s(5270);
        function w(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class v extends i.V {
          constructor(e) {
            super("runs.import_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 850,
              height: 750,
              minHeight: 650,
              resizable: !0,
            }),
              w(this, "doPreviousActionClick", (e) => {
                switch (e.actionName) {
                  case "select":
                  case "selectByButton":
                    this.selectRun(e);
                }
              }),
              w(this, "doSelectedActionClick", (e) => {
                switch (e.actionName) {
                  case "remove":
                  case "removeByButton":
                    this.removeRun(e);
                }
              }),
              w(this, "doFilter", (e) => {
                const t = $(e.button);
                n.UI.popupVisible(t) ||
                  (this.components.searchBar.setFilterLoading(!0),
                  r.N.post(
                    "runs/render_filter/" + this.projectId,
                    r.N.toNetworkCase(this.filter)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new C.y();
                      (s.onSubmit = (e) =>
                        r.N.post(
                          "runs/validate_filter/" + this.projectId,
                          r.N.toNetworkCase(e.filter)
                        ).then((e) => {
                          this.filter = e.data;
                          let t = _.keys(this.filter.conditions).length;
                          return this.refreshFragments([
                            "previousRuns",
                            { withPagination: !1 },
                          ]).then(() => {
                            this.components.searchBar.setFilterCount(t);
                          });
                        })),
                        s.show(t, l.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        I.Z.handleError(e);
                    }));
              }),
              w(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                n.UI.popupVisible(t) && n.UI.getVisiblePopup(t).hide(),
                  (this.filter.conditions = {}),
                  n.UI.loading(t, () =>
                    this.refreshFragments([
                      "previousRuns",
                      { withPagination: !1 },
                    ]).then(() => {
                      this.components.searchBar.setFilterCount(0);
                    })
                  );
              }),
              w(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              w(this, "doSearch", () => {
                this.refreshSearch();
              }),
              w(this, "doPreviousStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments([
                    "previousRuns",
                    { state: e.state },
                  ]).then(() => {
                    e.target.setLoading(e.loading, !1, e.column);
                  });
              }),
              w(this, "doResizeContent", (e) => {
                this.updateResponsiveRunsContent(e);
              }),
              w(this, "renderPreviousRuns", (e = {}) => {
                _.defaults(e, {
                  state: null,
                  withPagination: !0,
                  extraExcludes: [],
                });
                let t = e.state
                  ? e.state
                  : this.components.previousRuns.getState();
                return (
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  (t.excludes = this.components.selectedRuns.getRowIds(
                    this.components.selectedRuns.getRows()
                  )),
                  t.excludes.push(...e.extraExcludes),
                  r.N.post(
                    "runs/render_import_table/" + this.projectId,
                    r.N.toNetworkCase(t)
                  )
                );
              }),
              (this.projectId = e);
          }
          load() {
            (this.filter = g.X.EmptyFilter),
              (this.statuses = null),
              I.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                },
              }),
              I.Z.requestChild(this.component, "previousRuns", {
                onAdded: (e) => {
                  this.refreshTables();
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveRunsContent(e);
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doPreviousStateChange,
                  actionclick: this.doPreviousActionClick,
                },
              }),
              I.Z.requestChild(this.component, "selectedRuns", {
                onAdded: () => {
                  this.components.selectedRuns.refreshSize(
                    this.$dialog.outerWidth()
                  );
                },
                events: {
                  resizecontent: this.doResizeContent,
                  actionclick: this.doSelectedActionClick,
                },
              }),
              this.fragments.register("previousRuns", this.renderPreviousRuns);
          }
          doStatusFilter() {
            n.UI.popupVisible(this.$statusFilterIconLabel) ||
              n.UI.loading(this.$statusFilterIcon, () => {
                let e = {};
                return (
                  this.statuses && (e.selected = this.statuses),
                  r.N.post(
                    "runs/render_import_status_filter/" + this.projectId,
                    r.N.toNetworkCase(e)
                  )
                    .then((e) => {
                      const t = new b.d();
                      (t.onSubmit = (e) => {
                        e.condition.values && e.condition.values.length > 0
                          ? ((this.statuses = e.condition.values),
                            n.UI.setSelectActionCount(
                              this.$statusFilterIcon,
                              e.condition.values.length
                            ))
                          : ((this.statuses = null),
                            n.UI.setSelectActionCount(
                              this.$statusFilterIcon,
                              0
                            ));
                      }),
                        t.show(
                          this.$statusFilterIconLabel,
                          l.Fz.BottomLeft,
                          e.data
                        );
                    })
                    .catch((e) => {
                      I.Z.handleError(e);
                    })
                );
              });
          }
          doCancelStatusFilter() {
            (this.statuses = null),
              n.UI.setSelectActionCount(this.$statusFilterIcon, 0);
          }
          removeRun(e) {
            let t = e.$row.data("id"),
              s = this.components.previousRuns.getRowById(t);
            if (s.length > 0) s.show();
            else {
              let t = e.$row.clone();
              n.UI.clearInitializedTags(t),
                this.components.previousRuns.toggleEmptyRow(!1),
                this.components.previousRuns.insertRows(t, !0),
                this.components.previousRuns.refreshSize(
                  this.$dialog.outerWidth(),
                  !0
                ),
                this.refreshUi(),
                n.UI.scrollToBottom(this.$previousBox);
            }
            (() => {
              this.components.selectedRuns.removeRows(e.$row),
                e.$row.remove(),
                this.components.selectedRuns.toggleEmptyRow(
                  0 == this.components.selectedRuns.getVisibleRowCount()
                );
            })();
          }
          selectRun(e) {
            let t = e.$row.clone(),
              s = () => {
                n.UI.clearInitializedTags(t),
                  e.$row.hide(),
                  this.components.selectedRuns.toggleEmptyRow(!1),
                  this.components.selectedRuns.insertRows(t, !0),
                  this.components.selectedRuns.refreshSize(
                    this.$dialog.outerWidth(),
                    !0
                  ),
                  this.refreshUi(),
                  n.UI.scrollToBottom(this.$selectedBox);
              };
            1 == this.components.previousRuns.getVisibleRowCount()
              ? ("selectByButton" == e.actionName
                  ? n.UI.markLoading(e.$action)
                  : e.target.setLoading("actionfield", !0, e.$field),
                this.refreshFragments([
                  "previousRuns",
                  { extraExcludes: [e.$row.data("id")] },
                ]).then(() => {
                  s(),
                    "selectByButton" == e.actionName
                      ? n.UI.markCompleted(e.$action)
                      : e.target.setLoading("actionfield", !1, e.$field);
                }))
              : s();
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments([
                "previousRuns",
                { withPagination: !1 },
              ]).then(() => {
                this.components.searchBar.setInputLoading(!1);
              });
          }
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let e = {
                ids: this.components.selectedRuns.getRowIds(
                  this.components.selectedRuns.getRows()
                ),
              };
              return (
                this.statuses && (e.statuses = this.statuses),
                r.N.post(
                  "runs/render_create_many_runs/" + this.projectId,
                  r.N.toNetworkCase(e)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) => {
                    a.l.handleFormError(e, this.formViews),
                      this.refreshPositionIfNeeded();
                  })
              );
            });
          }
          updateResponsiveRunsContent(e) {
            "runs:tags" == e.name &&
              f.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.tags;
                return t ? JSON.parse(t) : [];
              });
          }
        }
        w(v, "forms", [{ name: "import", fields: [] }]),
          w(v, "targets", [
            "submitButton",
            "selectedBox",
            "previousBox",
            "statusFilterIcon",
            "statusFilterIconLabel",
          ]),
          w(v, "actions", [
            "doSubmit",
            "doCancelStatusFilter",
            "doStatusFilter",
          ]);
        var S = s(15612);
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class k extends i.V {
          constructor(e, t, s, i) {
            super("runs.add_many_config_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 760,
            }),
              x(this, "selectors", {
                casesSelect: ".runs-add-many-config-cases-select",
              }),
              x(this, "classes", {
                casesSelectPlaceholder:
                  "runs-add-many-config-cases-select--placeholder",
              }),
              x(this, "doTableActionClick", (e) => {
                if ("selectcases" == e.actionName) {
                  if (n.UI.popupVisible(e.$field)) return;
                  const t = [];
                  t.push({
                    type: "action",
                    name: "run",
                    title: o.Z.lang("runs.add_many_select_same_as_run"),
                    callback: this.doSelectCasesClick,
                  }),
                    t.push({ type: "divider" }),
                    t.push({
                      type: "action",
                      name: "all",
                      title: o.Z.lang("runs.add_many_select_include_all"),
                      callback: this.doSelectCasesClick,
                    }),
                    t.push({
                      type: "action",
                      name: "select",
                      title: o.Z.lang("runs.add_many_select_include_selected"),
                      callback: this.doSelectCasesClick,
                    }),
                    t.push({ type: "divider" }),
                    t.push({
                      type: "action",
                      name: "config",
                      title: o.Z.lang("runs.add_many_select_config"),
                      callback: this.doSelectCasesClick,
                    }),
                    new d.x(t, {
                      context: {
                        table: e.target,
                        id: e.id,
                        $row: e.$row,
                        $field: e.$field,
                      },
                    }).show(e.$field, l.Fz.BottomLeft);
                }
              }),
              x(this, "doSelectCasesClick", (e) => {
                e.target.hide();
                let t = e.context.$row.data("selection"),
                  s = $(this.selectors.casesSelect, e.context.$field);
                switch (e.actionName) {
                  case "run":
                    (t.includeAll = null),
                      (t.cases = []),
                      e.context.$row.data("selection", t),
                      e.context.table.setMenuLabel(
                        e.context.id,
                        "cases",
                        $(e.actionItem).text()
                      ),
                      s.addClass(this.classes.casesSelectPlaceholder);
                    break;
                  case "all":
                    (t.includeAll = !0),
                      (t.cases = []),
                      e.context.$row.data("selection", t),
                      e.context.table.setMenuLabel(
                        e.context.id,
                        "cases",
                        $(e.actionItem).text()
                      ),
                      s.removeClass(this.classes.casesSelectPlaceholder);
                    break;
                  case "select":
                    e.context.table.loading("field", e.context.$field, () => {
                      let i = { filter: this.filter, selected: t.cases };
                      return r.N.post(
                        "repositories/render_select_cases/" + this.projectId,
                        r.N.toNetworkCase(i)
                      )
                        .then((i) => {
                          const n = new u._(this.projectId);
                          (n.onSuccess = (i) => {
                            (t.includeAll = !1),
                              (t.cases = i.cases),
                              e.context.$row.data("selection", t),
                              (this.filter = i.filter),
                              s.removeClass(
                                this.classes.casesSelectPlaceholder
                              ),
                              e.context.table.setMenuLabel(
                                e.context.id,
                                "cases",
                                o.Z.lang(
                                  "runs.add_many_include_cases_selected",
                                  { count: i.cases.length }
                                )
                              );
                          }),
                            n.show(i.data);
                        })
                        .catch((e) => {
                          I.Z.handleError(e);
                        });
                    });
                    break;
                  case "config":
                    e.context.table.loading("field", e.context.$field, () => {
                      let i,
                        n = g.X.EmptyFilter;
                      return (
                        (n.conditions["repository_cases:configs"] = {
                          values: [e.context.id],
                        }),
                        (i =
                          null === t.includeAll
                            ? this.runIncludeAll
                              ? {
                                  selected: [],
                                  filter: n,
                                  filterType: S.g.FiltersSelectionSet,
                                }
                              : {
                                  selected: this.runCases,
                                  filter: n,
                                  filterType: S.g.FiltersSelectionIntersect,
                                }
                            : !0 === t.includeAll
                            ? {
                                selected: [],
                                filter: n,
                                filterType: S.g.FiltersSelectionSet,
                              }
                            : {
                                selected: t.cases,
                                filter: n,
                                filterType: S.g.FiltersSelectionIntersect,
                              }),
                        r.N.post(
                          "repositories/filter_select_cases/" + this.projectId,
                          r.N.toNetworkCase(i)
                        )
                          .then((i) => {
                            let n;
                            (n = Array.isArray(i.data.cases)
                              ? []
                              : _.reduce(
                                  i.data.cases,
                                  (e, t) => e.concat(...t),
                                  []
                                )),
                              (t.includeAll = !1),
                              (t.cases = n),
                              e.context.$row.data("selection", t),
                              s.removeClass(
                                this.classes.casesSelectPlaceholder
                              ),
                              e.context.table.setMenuLabel(
                                e.context.id,
                                "cases",
                                o.Z.lang(
                                  "runs.add_many_include_cases_selected",
                                  { count: n.length }
                                )
                              );
                          })
                          .catch((e) => {
                            I.Z.handleError(e);
                          })
                      );
                    });
                }
              }),
              (this.runIncludeAll = t),
              (this.projectId = e),
              (this.runCases = s),
              (this.filter = i);
          }
          load() {
            I.Z.requestChild(this.component, "configurations", {
              events: { actionclick: this.doTableActionClick },
            });
          }
          doSubmit() {
            this.components.configurations
              ? n.UI.loading(this.$submitButton, () => {
                  a.l.hideValidationErrors(this.formViews);
                  let e = this.components.configurations.getSelectedRows(),
                    t = [];
                  return (
                    e.each((e, s) => {
                      let i = $(s),
                        o = i.data("selection");
                      t.push({
                        id: i.data("id"),
                        includeAll: o.includeAll,
                        cases: o.cases,
                      });
                    }),
                    this.triggerSuccessCustomErrors(t).catch((e) => {
                      a.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    })
                  );
                })
              : this.hide();
          }
        }
        function T(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        x(k, "forms", [{ name: "configurations", fields: [] }]),
          x(k, "targets", ["submitButton"]),
          x(k, "actions", ["doSubmit"]);
        class y extends i.V {
          constructor(e, t = null) {
            super("runs.add_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 800,
              minHeight: 650,
              resizable: !0,
              responsive: !0,
            }),
              T(this, "selectors", {
                run: ".runs-add-many-runs__run",
                runExtraFields:
                  ".runs-add-many-runs__run__controls__extra__fields",
                runExtraFieldsHideButton:
                  ".runs-add-many-runs__run__controls__extra__hide .ui.button",
                runExtraFieldsShowButton:
                  ".runs-add-many-runs__run__controls__extra__show .ui.button",
                runConfigCounter:
                  ".runs-add-many-runs__run__controls__configs__counter",
                runConfigList:
                  ".runs-add-many-runs__run__controls__configs__list",
                runConfigListTable:
                  ".runs-add-many-runs__run__controls__configs__list .data-table",
                runCaseSelectionSelectAction:
                  ".runs-add-many-runs__run__controls__builtin__case-selection .select-action",
                field: ".field",
              }),
              T(this, "classes", {
                hidden: "default-hidden",
                error: "error",
                runEditingExtra: "runs-add-many-runs__run--editing-extra",
              }),
              T(this, "doRunsScroll", (e) => {
                n.UI.dropdownHideInContext(this.$runsBox);
              }),
              T(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              T(this, "doImportText", (e) => {
                e.target.hide(),
                  n.UI.loading(this.$importRunsButton, () =>
                    r.N.post("runs/render_import_text/" + this.projectId)
                      .then((e) => {
                        const t = new m(this.projectId);
                        (t.onSuccess = (e) => {
                          this.addRuns(e);
                        }),
                          t.show(e.data);
                      })
                      .catch((e) => {
                        I.Z.handleError(e);
                      })
                  );
              }),
              T(this, "doImportPrevious", (e) => {
                e.target.hide(),
                  n.UI.loading(this.$importRunsButton, () =>
                    r.N.post("runs/render_import/" + this.projectId)
                      .then((e) => {
                        const t = new v(this.projectId);
                        (t.onSuccess = (e) => {
                          this.addRuns(e);
                        }),
                          t.show(e.data);
                      })
                      .catch((e) => {
                        I.Z.handleError(e);
                      })
                  );
              }),
              T(this, "doSelecteCasesMenuClick", (e) => {
                if ((e.target.hide(), "all" == e.actionName)) {
                  let t = this.runSelection[e.context.id];
                  (t.includeAll = !0),
                    (t.cases = []),
                    n.UI.setSelectActionText(
                      e.context.$selectAction,
                      o.Z.lang("runs.add_many_include_all")
                    );
                } else
                  "select" == e.actionName &&
                    n.UI.loading(e.context.$selectAction, () => {
                      let t = this.runSelection[e.context.id],
                        s = { filter: t.filter, selected: t.cases };
                      return r.N.post(
                        "repositories/render_select_cases/" + this.projectId,
                        r.N.toNetworkCase(s)
                      )
                        .then((s) => {
                          const i = new u._(this.projectId);
                          (i.onSuccess = (s) => {
                            (t.includeAll = !1),
                              (t.cases = s.cases),
                              (t.filter = s.filter),
                              n.UI.setSelectActionText(
                                e.context.$selectAction,
                                o.Z.lang(
                                  "runs.add_many_include_cases_selected",
                                  { count: s.cases.length }
                                )
                              );
                          }),
                            i.show(s.data);
                        })
                        .catch((e) => {
                          I.Z.handleError(e);
                        });
                    });
              }),
              (this.projectId = e),
              t &&
                I.Z.waitComponentConnected("milestoneId", () => {
                  n.UI.setDropdown(this.$milestoneId, t);
                }),
              (this.isEditingExtraFields = !1),
              (this.$editingExtraFieldsRun = null);
          }
          load() {
            (this.runConfigs = {}),
              (this.runDocs = {}),
              (this.runSelection = {}),
              this.initializeRuns($(this.selectors.run, this.$runsBox), !1),
              this.$runsBox.on("scroll", this.doRunsScroll),
              I.Z.requestChild(this.component, "milestoneId", {
                onAdded: () => {
                  this.components.milestoneId.setDefaultText(
                    o.Z.lang("runs.add_many_milestone_default_text")
                  );
                },
                events: { actionclick: this.doMilestoneActionClick },
              }),
              I.Z.requestChild(this.component, "docs");
          }
          unload() {
            this.$runsBox.off("scroll", this.doRunsScroll),
              this.uninitializeRuns($(this.selectors.runs, this.$runsBox));
          }
          addMilestone(e) {
            n.UI.loading(e, () =>
              r.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new c.q(c.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    r.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        I.Z.waitComponentConnected("milestoneId", () => {
                          n.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  I.Z.handleError(e);
                })
            );
          }
          doDuplicateRun(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.run);
            n.UI.loading(t, () => {
              let e = Promise.resolve();
              return (
                this.isEditingExtraFields &&
                  s.is(this.$editingExtraFieldsRun) &&
                  this.submitEditingExtraField(),
                e
                  .then(() =>
                    r.N.post(
                      "runs/render_create_many_run/" + this.projectId
                    ).then((e) => {
                      let t = this.insertRun(e.data, s),
                        i = this.getRunFields(t),
                        r = this.getRunFields(s);
                      n.UI.setText(i.$name, n.UI.getText(r.$name)),
                        I.Z.waitComponentConnected("stateId", () => {
                          n.UI.setDropdown(
                            i.$stateId,
                            n.UI.getDropdown(r.$stateId)
                          );
                        }),
                        I.Z.waitComponentConnected("tags", () => {
                          n.UI.setDropdownItems(
                            i.$tags,
                            n.UI.getDropdownItems(r.$tags)
                          ),
                            n.UI.setDropdown(
                              i.$tags,
                              n.UI.getDropdown(r.$tags)
                            );
                        });
                      let a = s.data("id"),
                        l = t.data("id");
                      this.runSelection[l] = _.clone(this.runSelection[a]);
                      let d = $(this.selectors.runCaseSelectionSelectAction, t);
                      this.runSelection[l].includeAll
                        ? n.UI.setSelectActionText(
                            d,
                            o.Z.lang("runs.add_many_include_all")
                          )
                        : n.UI.setSelectActionText(
                            d,
                            o.Z.lang("runs.add_many_include_cases_selected", {
                              count: this.runSelection[l].cases.length,
                            })
                          ),
                        (this.runDocs[l] = _.clone(this.runDocs[a]));
                      let h = this.runConfigs[a];
                      if (((this.runConfigs[l] = _.clone(h)), h.length > 0)) {
                        let e = $(this.selectors.runConfigList, s),
                          i = $(this.selectors.runConfigList, t);
                        i.html(e.html()), i.removeClass(this.classes.hidden);
                        let o = $(this.selectors.runConfigCounter, s);
                        $(this.selectors.runConfigCounter, t).html(o.html());
                      }
                      t.is(":last-child") && n.UI.scrollToBottom(this.$runsBox),
                        this.refreshRunUi(),
                        n.UI.focusText(i.$name);
                    })
                  )
                  .catch((e) => {
                    this.handleFormError(e), this.refreshPositionIfNeeded();
                  })
              );
            });
          }
          doAddRun() {
            n.UI.loading(this.$addRunButton, () =>
              r.N.post("runs/render_create_many_run/" + this.projectId)
                .then((e) => {
                  this.addRuns(e.data);
                })
                .catch((e) => {
                  I.Z.handleError(e);
                })
            );
          }
          addRuns(e) {
            let t = $(e);
            this.$runsBox.append(t),
              n.UI.scrollToBottom(this.$runsBox),
              this.initializeRuns(t),
              this.refreshRunUi();
            let s = t.eq(0);
            n.UI.focusText(n.UI.getTarget("name", s));
          }
          insertRun(e, t) {
            let s = $(e);
            return t.after(s), this.initializeRuns(s), s;
          }
          removeRun(e) {
            this.uninitializeRuns(e), e.remove();
          }
          refreshRunUi() {
            this.refreshUi(), this.rebindAll();
          }
          initializeRuns(e) {
            setTimeout(() => {
              this.refreshDropdowns();
            }, 1),
              e.each((e, t) => {
                let s = $(t),
                  i = s.data("id");
                if (!i) return;
                this.runConfigs[i] = [];
                let o = s.data("selection");
                (o.includeAll = !!o.includeAll), (this.runSelection[i] = o);
                let n = $(this.selectors.runConfigListTable, s);
                n.length > 0 && (this.runConfigs[i] = n.data("params").configs);
              });
          }
          uninitializeRuns(e) {
            e.each((e, t) => {
              let s = $(t).data("id");
              delete this.runConfigs[s], delete this.runSelection[s];
            });
          }
          doDeleteRun(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            const s = new h.l(o.Z.lang("runs.add_many_remove_run"));
            (s.onSuccess = () => {
              let e = t.closest(this.selectors.run);
              this.isEditingExtraFields &&
                e.is(this.$editingExtraFieldsRun) &&
                this.cancelEditingExtraField(),
                this.removeRun(e);
            }),
              s.show(t, l.Fz.BottomRight);
          }
          doImportRuns(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "previous",
              title: o.Z.lang("runs.import_previous_runs"),
              callback: this.doImportPrevious,
            }),
              s.push({
                type: "action",
                name: "list",
                title: o.Z.lang("runs.import_from_list"),
                callback: this.doImportText,
              }),
              new d.x(s).show(t, l.Fz.BottomLeft);
          }
          doSelectConfig(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.run),
              i = s.data("id"),
              a = this.runConfigs[i];
            n.UI.loading(t, () => {
              let e = { configurations: this.configsToNetworkCase(a) };
              return r.N.post(
                "runs/render_create_many_select_configurations/" +
                  this.projectId,
                r.N.toNetworkCase(e)
              )
                .then((e) => {
                  let t = this.runSelection[i];
                  const n = new k(
                    this.projectId,
                    t.includeAll,
                    t.cases,
                    t.filter
                  );
                  (n.onSuccess = (e) => {
                    let t = e;
                    this.runConfigs[i] = t;
                    let n = $(this.selectors.runConfigCounter, s),
                      a = $(this.selectors.runConfigList, s),
                      l = { configurations: this.configsToNetworkCase(t) };
                    return r.N.postReplace(
                      "runs/render_create_many_configurations/" +
                        this.projectId,
                      a,
                      r.N.toNetworkCase(l)
                    ).then(() => {
                      e.length > 0
                        ? n.text(
                            o.Z.lang("runs.add_many_configurations_count", {
                              count: e.length,
                            })
                          )
                        : n.text(""),
                        a.toggleClass(this.classes.hidden, 0 == e.length);
                    });
                  }),
                    n.show(e.data);
                })
                .catch((e) => {
                  I.Z.handleError(e);
                });
            });
          }
          doShowFields(e) {
            let t = $(e.currentTarget);
            n.UI.loading(t, () => {
              this.submitEditingExtraField();
              let e = t.closest(this.selectors.run),
                s = $(this.selectors.runExtraFields, e),
                i = e.data("id"),
                o = this.runDocs[i];
              this.hideValidationErrors();
              let n = { docs: o };
              return r.N.postReplace(
                "runs/render_create_many_run_docs/" + this.projectId,
                s,
                r.N.toNetworkCase(n)
              )
                .then(
                  () => (
                    this.refreshUi(),
                    new Promise((t, s) => {
                      I.Z.waitComponentLoaded("docs", () => {
                        this.components.docs.loadEditor().then(() => {
                          e.addClass(this.classes.runEditingExtra),
                            (this.isEditingExtraFields = !0),
                            (this.$editingExtraFieldsRun = e),
                            t();
                        });
                      });
                    })
                  )
                )
                .catch((e) => {
                  this.handleFormError(e), this.refreshPositionIfNeeded();
                });
            });
          }
          submitEditingExtraField() {
            if (!this.isEditingExtraFields) return;
            let e = this.$editingExtraFieldsRun,
              t = $(this.selectors.runExtraFields, e),
              s = e.data("id");
            this.hideValidationErrors(),
              (this.runDocs[s] = this.components.docs.getData()),
              e.removeClass(this.classes.runEditingExtra),
              t.empty(),
              (this.isEditingExtraFields = !1),
              (this.$editingExtraFieldsRun = null);
          }
          cancelEditingExtraField() {
            if (!this.isEditingExtraFields) return;
            let e = this.$editingExtraFieldsRun,
              t = $(this.selectors.runExtraFields, e);
            e.removeClass(this.classes.runEditingExtra),
              t.empty(),
              (this.isEditingExtraFields = !1),
              (this.$editingExtraFieldsRun = null);
          }
          doHideFields(e) {
            this.submitEditingExtraField();
          }
          handleFormError(e) {
            a.l.handleCustomFormError(e, (e, t) => {
              let s = this.getRuns();
              this.$form.addClass(this.classes.error),
                a.l.showValidationBlockErrors(this.$validationErrors, t);
              for (let t in e) {
                let e = t.match(/runs\.(\d+)\.(.+)/);
                if (e) {
                  let t = parseInt(e[1], 10),
                    i = s.eq(t),
                    n = e[2];
                  $(`[data-target~=${o.Z.camelcaserize(n)}]`, i)
                    .closest(this.selectors.field)
                    .addClass(this.classes.error);
                } else
                  $(`[data-target~=${o.Z.camelcaserize(t)}]`, this.$form)
                    .closest(this.selectors.field)
                    .addClass(this.classes.error);
              }
            });
          }
          hideValidationErrors() {
            a.l.hideValidationErrors(this.formViews);
            let e = this.getRuns();
            $(this.selectors.runExtraFieldsShowButton, e).removeClass(
              this.classes.error
            );
          }
          getRuns() {
            return $(this.selectors.run, this.$runsBox);
          }
          getRunFields(e) {
            return {
              $name: n.UI.getTarget("name", e),
              $stateId: n.UI.getTarget("stateId", e),
              $tags: n.UI.getTarget("tags", e),
            };
          }
          doSelectCases(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            let s = t.closest(this.selectors.run),
              i = s.data("id");
            const r = [];
            r.push({
              type: "action",
              name: "all",
              title: o.Z.lang("runs.add_many_select_include_all"),
              callback: this.doSelecteCasesMenuClick,
            }),
              r.push({
                type: "action",
                name: "select",
                title: o.Z.lang("runs.add_many_select_include_selected"),
                callback: this.doSelecteCasesMenuClick,
              }),
              new d.x(r, {
                context: {
                  $run: s,
                  id: i,
                  $selectAction: n.UI.getClosestSelectAction(t),
                },
              }).show(t, l.Fz.BottomLeft);
          }
          getRunValues(e) {
            return {
              name: n.UI.getText(e.$name),
              state_id: n.UI.getDropdownIntOrNull(e.$stateId),
              tags: n.UI.getDropdown(e.$tags),
            };
          }
          configsToNetworkCase(e) {
            return e.map((e) => ({
              id: e.id,
              include_all: e.includeAll,
              cases: e.cases,
            }));
          }
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              this.submitEditingExtraField(), this.hideValidationErrors();
              let e = {
                milestoneId: n.UI.getDropdownIntOrNull(this.$milestoneId),
                tags: n.UI.getDropdown(this.$tags),
                runs: [],
              };
              return (
                this.getRuns().each((t, s) => {
                  let i = $(s),
                    o = i.data("id"),
                    n = this.getRunFields(i),
                    r = {};
                  _.assign(r, this.getRunValues(n)),
                    (r.configurations = this.configsToNetworkCase(
                      this.runConfigs[o]
                    )),
                    (r.include_all = this.runSelection[o].includeAll),
                    (r.cases = this.runSelection[o].cases),
                    this.runDocs[o] && (r.docs = this.runDocs[o]),
                    e.runs.push(r);
                }),
                r.N.post(
                  "runs/create_many/" + this.projectId,
                  r.N.toNetworkCase(e)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) => {
                    this.handleFormError(e), this.refreshPositionIfNeeded();
                  })
              );
            });
          }
        }
        T(y, "forms", [{ name: "form", fields: ["milestoneId", "tags"] }]),
          T(y, "targets", [
            "submitButton",
            "runsBox",
            "addRunButton",
            "importRunsButton",
            "validationErrors",
          ]),
          T(y, "actions", [
            "doSubmit",
            "doAddRun",
            "doImportRuns",
            "doDuplicateRun",
            "doDeleteRun",
            "doSelectConfig",
            "doShowFields",
            "doHideFields",
            "doSelectCases",
          ]);
      },
      84182: (e, t, s) => {
        "use strict";
        s.d(t, { y: () => c });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(43689),
          l = s(28456),
          d = s(5270);
        function h(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class c extends i.V {
          constructor(e, t) {
            super("runs.assign_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 540,
            }),
              (this.projectId = t),
              (this.runId = e);
          }
          load() {
            (this.cases = []), (this.filter = null), this.updateCaseCount();
          }
          unload() {}
          updateCaseCount() {
            let e;
            (e =
              0 == this.cases.length
                ? a.Z.lang("runs.cases_include_cases_none")
                : 1 == this.cases.length
                ? a.Z.lang("runs.cases_include_cases_single")
                : a.Z.lang("runs.cases_include_cases_multi", {
                    count: this.cases.length,
                  })),
              this.$selectedCasesCount.text(e);
          }
          doSelectCases() {
            o.UI.loading(this.$casesSelection, () => {
              let e = { filter: this.filter, selected: this.cases };
              return n.N.post(
                "repositories/render_select_cases/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new l._(this.projectId);
                  (t.onSuccess = (e) => {
                    (this.cases = e.cases),
                      (this.filter = e.filter),
                      this.updateCaseCount(),
                      o.UI.setRadio(this.$includeSelected, !0);
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  d.Z.handleError(e);
                });
            });
          }
          doUnassign() {
            this.submit(this.$unassignButton, !0, null);
          }
          doSubmit() {
            this.submit(
              this.$submitButton,
              !1,
              o.UI.getDropdownIntOrNull(this.$assigneeId)
            );
          }
          submit(e, t, s) {
            o.UI.loading(e, () => {
              let e = {
                includeAll: o.UI.getRadio(this.$includeAll),
                cases: this.cases,
              };
              return (
                t ? (e.unassigned = !0) : (e.assigneeId = s),
                n.N.post("runs/assign/" + this.runId, n.N.toNetworkCase(e))
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) => {
                    r.l.handleFormError(e, this.formViews);
                  })
              );
            });
          }
        }
        h(c, "forms", [
          {
            name: "assignment",
            fields: ["assigneeId", "includeAll", "includeSelected"],
          },
        ]),
          h(c, "targets", [
            "submitButton",
            "unassignButton",
            "selectedCasesCount",
            "casesSelection",
          ]),
          h(c, "actions", ["doSubmit", "doUnassign", "doSelectCases"]);
      },
      38426: (e, t, s) => {
        "use strict";
        s.d(t, { M: () => d });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.V {
          constructor(e, t) {
            super("runs.assign_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              l(this, "doUsersCancelSearch", (e) => {
                this.refreshSearch();
              }),
              l(this, "doUsersSearch", () => {
                this.refreshSearch();
              }),
              l(this, "doUsersStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["users", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              l(this, "doUsersSelectionChange", (e) => {
                let t = this.components.users.getSelectedIds(),
                  s = this.components.users.getUnselectedIds();
                (this.users = _.difference(this.users, s)),
                  (this.users = _.union(this.users, t));
              }),
              l(this, "renderUsers", (e) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = e.state ? e.state : this.components.users.getState();
                return (
                  (t.selected = this.users),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.usersSearchBar.getHasSearched() &&
                    (t.search = this.components.usersSearchBar.getSearchTerm()),
                  n.N.post(
                    "runs/render_assign_many_users/" + this.projectId,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              (this.runIds = e),
              (this.projectId = t),
              (this.users = []);
          }
          load() {
            a.Z.requestChild(this.component, "usersSearchBar", {
              events: {
                search: this.doUsersSearch,
                cancelsearch: this.doUsersCancelSearch,
              },
            }),
              a.Z.requestChild(this.component, "users", {
                events: {
                  selectionchange: this.doUsersSelectionChange,
                  statechange: this.doUsersStateChange,
                },
              }),
              a.Z.requestChild(this.component, "groups"),
              this.fragments.register("users", this.renderUsers);
          }
          unload() {}
          refreshSearch() {
            this.components.usersSearchBar.setInputLoading(!0),
              this.refreshFragments(["users", { withPagination: !1 }]).then(
                () => {
                  this.components.usersSearchBar.setInputLoading(!1);
                }
              );
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = {
                ids: this.runIds,
                users: this.users,
                groups: this.components.groups.getSelectedIds(),
                strategy: o.UI.getDropdownIntOrNull(this.$strategy),
                reassign: 1 == o.UI.getDropdownIntOrNull(this.$reassign),
              };
              return n.N.post(
                "runs/assign_many/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  r.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        l(d, "forms", [
          {
            name: "assignment",
            fields: ["users", "groups", "strategy", "reassign"],
          },
        ]),
          l(d, "targets", ["submitButton"]),
          l(d, "actions", ["doSubmit"]);
      },
      61861: (e, t, s) => {
        "use strict";
        s.d(t, { y: () => p });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(47914),
          l = s(14589),
          d = s(43689),
          h = s(75360),
          c = s(28456),
          u = s(5270);
        function g(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class p extends i.V {
          constructor(e, t) {
            super("runs.edit_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: a.X.SplitDialogWidth,
              resizable: !1,
            }),
              g(this, "selectors", {
                input: "input",
                dropdown: ".dropdown",
                fieldSelection: ".field-selection",
                fieldSelectionField: ".field-selection__field",
                fieldSelectionCheckbox: ".field-selection__checkbox .checkbox",
                fieldLabel: ".field > label",
              }),
              g(this, "classes", {
                fieldSelectionEditing: "field-selection--editing",
                fieldSelectionRestricted: "field-selection--restricted",
                hidden: "default-hidden",
              }),
              g(this, "doTabChanged", (e) => {
                this.refreshPositionIfNeeded();
              }),
              g(this, "doFieldSelectionCheckboxChange", (e) => {
                this.fieldSelectionChange(
                  e.closest(this.selectors.fieldSelection),
                  e
                );
              }),
              g(this, "doFieldSelectionLabelClick", (e) => {
                let t = $(e.currentTarget).closest(
                  this.selectors.fieldSelection
                );
                if (t.hasClass(this.classes.fieldSelectionRestricted)) return;
                let s = $(this.selectors.fieldSelectionCheckbox, t);
                o.UI.setCheckbox(s, !o.UI.getCheckbox(s)),
                  this.fieldSelectionChange(t, s);
              }),
              g(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              (this.runIds = e),
              (this.projectId = t);
          }
          load() {
            (this.templateId = this.params.templateId),
              (this.updates = this.params.updates),
              (this.cases = []),
              (this.filter = null),
              (this.$fieldSelections = $(
                this.selectors.fieldSelection,
                this.$dialog
              )),
              (this.$fieldSelectionLabels = $(
                this.selectors.fieldLabel,
                this.$ieldSelections
              )),
              (this.$fieldSelectionCheckboxes = $(
                this.selectors.fieldSelectionCheckbox,
                this.$fieldSelections
              )),
              this.$fieldSelectionLabels.on(
                "click",
                this.doFieldSelectionLabelClick
              ),
              o.UI.onCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              ),
              u.Z.requestChild(this.component, "milestoneId", {
                events: { actionclick: this.doMilestoneActionClick },
              }),
              u.Z.requestChild(this.component, "tabs", {
                events: { tabchange: this.doTabChanged },
              }),
              u.Z.requestChild(this.component, "issues"),
              this.updateCaseCount();
          }
          unload() {
            this.$fieldSelectionLabels.off(
              "click",
              this.doFieldSelectionLabelClick
            ),
              o.UI.offCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              );
          }
          prepare() {
            let e = new Promise((e, t) => {
                u.Z.requestChild(this.component, "docs", {
                  onAdded: () => {
                    this.components.docs.loadEditor().then(() => {
                      e();
                    });
                  },
                });
              }),
              t = new Promise((e, t) => {
                u.Z.requestChild(this.component, "placeholderDocs", {
                  onAdded: () => {
                    this.components.placeholderDocs.loadEditor().then(() => {
                      e();
                    });
                  },
                });
              });
            return Promise.all([e, t]);
          }
          updateCaseCount() {
            let e;
            (e =
              0 == this.cases.length
                ? d.Z.lang("runs.cases_include_cases_none")
                : 1 == this.cases.length
                ? d.Z.lang("runs.cases_include_cases_single")
                : d.Z.lang("runs.cases_include_cases_multi", {
                    count: this.cases.length,
                  })),
              this.$selectedCasesCount.text(e);
          }
          fieldSelectionChange(e, t) {
            let s = o.UI.getCheckbox(t);
            e.toggleClass(this.classes.fieldSelectionEditing, s),
              o.UI.dropdownRefreshSizes(e);
            let i = $(this.selectors.fieldSelectionField, e),
              n = i.data("field");
            setTimeout(() => {
              "name" == n
                ? o.UI.focusText($(this.selectors.input, i).first())
                : o.UI.focusDropdown($(this.selectors.dropdown, i).first());
            }, 0);
          }
          doAddMilestone(e) {
            e.stopPropagation(), this.addMilestone(this.$addMilestoneIcon);
          }
          addMilestone(e) {
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new h.q(h.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    n.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        u.Z.waitComponentConnected("milestoneId", () => {
                          o.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  u.Z.handleError(e);
                })
            );
          }
          doSelectCases() {
            o.UI.loading(this.$casesSelection, () => {
              let e = { filter: this.filter, selected: this.cases };
              return n.N.post(
                "repositories/render_select_cases/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new c._(this.projectId);
                  (t.onSuccess = (e) => {
                    (this.cases = e.cases),
                      (this.filter = e.filter),
                      this.updateCaseCount(),
                      o.UI.setRadio(this.$includeSelected, !0);
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  u.Z.handleError(e);
                });
            });
          }
          doSubmit() {
            this.submit();
          }
          isFieldSelectionEnabled(e) {
            let t = e.closest(this.selectors.fieldSelection),
              s = $(this.selectors.fieldSelectionCheckbox, t);
            return o.UI.getCheckbox(s);
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let t = { ids: this.runIds };
              return (
                this.isFieldSelectionEnabled(this.$name) &&
                  (t.name = o.UI.getText(this.$name)),
                this.isFieldSelectionEnabled(this.$configId) &&
                  (t.configId = o.UI.getDropdownIntOrNull(this.$configId)),
                this.isFieldSelectionEnabled(this.$milestoneId) &&
                  (t.milestoneId = o.UI.getDropdownIntOrNull(
                    this.$milestoneId
                  )),
                this.isFieldSelectionEnabled(this.$stateId) &&
                  (t.stateId = o.UI.getDropdownIntOrNull(this.$stateId)),
                this.isFieldSelectionEnabled(this.$tags) &&
                  (t.tags = o.UI.getDropdown(this.$tags)),
                this.isFieldSelectionEnabled(this.$issues) &&
                  (t.issues = this.components.issues.getIssues()),
                this.isFieldSelectionEnabled(this.components.docs.$element) &&
                  (t.docs = this.components.docs.getData()),
                o.UI.getRadio(this.$includeDontChange) ||
                  ((t.includeAll = o.UI.getRadio(this.$includeAll)),
                  (t.cases = this.cases)),
                (t.updates = this.updates),
                (t.forceUpdate = e),
                n.N.post(
                  "runs/update_many/" + this.projectId,
                  n.N.toNetworkCase(t)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    l.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        r.l.handleTabbedFormError(
                          e,
                          this.formViews,
                          this.components.tabs
                        ),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  )
              );
            });
          }
        }
        g(p, "forms", [
          {
            name: "run",
            fields: [
              "name",
              "configId",
              "milestoneId",
              "includeDontChange",
              "includeAll",
              "includeSelected",
              "stateId",
              "tags",
              "issues",
            ],
          },
        ]),
          g(p, "targets", [
            "submitButton",
            "addMilestoneIcon",
            "selectedCasesCount",
            "casesSelection",
          ]),
          g(p, "actions", ["doSubmit", "doAddMilestone", "doSelectCases"]);
      },
      4989: (e, t, s) => {
        "use strict";
        s.d(t, { Z: () => d });
        var i = s(47914),
          o = s(50609),
          n = s(96622),
          r = s(7042),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends o.V {
          constructor() {
            super("runs.select_statuses_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.BodyMinWidth,
            }),
              l(this, "doStatusesSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  n.UI.setRadio(this.$includeSelected, !0);
              });
          }
          load() {
            a.Z.requestChild(this.component, "statuses", {
              events: { selectionchange: this.doStatusesSelectionChange },
            });
          }
          unload() {}
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = this.components.statuses.getSelectedIds();
              return this.triggerSuccessCustomErrors(e).catch((e) => {
                r.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
            });
          }
        }
        l(d, "forms", [
          {
            name: "selection",
            fields: ["includeAll", "includeSelected", "statuses"],
          },
        ]),
          l(d, "targets", ["submitButton"]),
          l(d, "actions", ["doSubmit"]);
      },
      710: (e, t, s) => {
        "use strict";
        s.d(t, { A: () => d });
        var i = s(47914),
          o = s(50609),
          n = s(96622),
          r = s(7042),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends o.V {
          constructor() {
            super("runs.select_statuses_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.BodyMinWidth,
            }),
              l(this, "doStatusesSelectionChange", (e) => {
                e.target.getSelectedRows().length > 0 &&
                  n.UI.setRadio(this.$includeSelected, !0);
              });
          }
          load() {
            a.Z.requestChild(this.component, "statuses", {
              events: { selectionchange: this.doStatusesSelectionChange },
            });
          }
          unload() {}
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = this.components.statuses.getSelectedIds();
              return this.triggerSuccessCustomErrors(e).catch((e) => {
                r.l.handleFormError(e, this.formViews),
                  this.refreshPositionIfNeeded();
              });
            });
          }
        }
        l(d, "forms", [
          {
            name: "selection",
            fields: ["includeAll", "includeSelected", "statuses"],
          },
        ]),
          l(d, "targets", ["submitButton"]),
          l(d, "actions", ["doSubmit"]);
      },
      86715: (e, t, s) => {
        "use strict";
        s.d(t, { G: () => g, q: () => p });
        var i = s(47914),
          o = s(50609),
          n = s(96622),
          r = s(13814),
          a = s(14589),
          l = s(7042),
          d = s(27181),
          h = s(75360),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g {
          static get Add() {
            return 1;
          }
          static get Edit() {
            return 2;
          }
        }
        class p extends o.V {
          constructor(e = p.Add, t = null, s = null, o = null) {
            super("sessions.add_edit_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: i.X.SplitDialogWidth,
              resizable: !0,
            }),
              u(this, "classes", { hidden: "default-hidden" }),
              u(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : r.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              u(this, "doTemplateIdChange", (e) => {
                let t = !1,
                  s = this.fieldMappings[e.value] || [];
                this.fields.updateVisibility((e) => {
                  let i = s.includes(e.name);
                  return (
                    e.settings.is_compact || (t = t || i), s.includes(e.name)
                  );
                }),
                  this.$wideCustomFieldSection.toggleClass(
                    this.classes.hidden,
                    !t
                  );
              }),
              u(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              (this.mode = e),
              (this.projectId = t),
              (this.sessionId = s),
              o &&
                c.Z.waitComponentConnected("milestoneId", () => {
                  n.UI.setDropdown(this.$milestoneId, o);
                });
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.fieldMappings = this.params.fieldMappings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.updatedAt = this.params.updatedAt),
              (this.fields = new d.rN(this.fieldSettings, this.$dialog)),
              c.Z.requestChild(this.component, "milestoneId", {
                events: { actionclick: this.doMilestoneActionClick },
              }),
              c.Z.requestChild(this.component, "templateId", {
                events: { change: this.doTemplateIdChange },
              }),
              (this.assineeIdtItems = null),
              c.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              }),
              c.Z.requestChild(this.component, "dialogManageAttachments", {
                events: {
                  refreshui: (e) => {
                    this.refreshUi();
                  },
                  initform: (e) => {
                    l.l.hideValidationErrors(this.formViews);
                  },
                  error: (e) => {
                    l.l.handleFormError(e.error, this.formViews),
                      this.refreshPositionIfNeeded();
                  },
                },
              }),
              c.Z.requestChild(this.component, "issues");
          }
          unload() {}
          prepare() {
            return this.fields.prepare();
          }
          doAddMilestone() {
            this.addMilestone(this.$addMilestoneIcon);
          }
          addMilestone(e) {
            n.UI.loading(e, () =>
              r.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new h.q(h.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    r.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        c.Z.waitComponentConnected("milestoneId", () => {
                          n.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  c.Z.handleError(e);
                })
            );
          }
          doSubmit() {
            this.submit();
          }
          submit(e = !1) {
            n.UI.loading(this.$submitButton, () => {
              let t = Promise.resolve(!0);
              if (
                this.components.dialogManageAttachments &&
                this.components.dialogManageAttachments.isEditing()
              ) {
                let e =
                  this.components.dialogManageAttachments.confirmActiveEditing();
                e && (t = e);
              }
              return t.then((t) => {
                if (!t) return;
                l.l.hideValidationErrors(this.formViews);
                let s = {
                  name: n.UI.getText(this.$name),
                  configId: n.UI.getDropdownIntOrNull(this.$configId),
                  milestoneId: n.UI.getDropdownIntOrNull(this.$milestoneId),
                  templateId: n.UI.getDropdownIntOrNull(this.$templateId),
                  stateId: n.UI.getDropdownIntOrNull(this.$stateId),
                  assigneeId: n.UI.getDropdownIntOrNull(this.$assigneeId),
                  estimate: n.UI.getText(this.$estimate),
                  tags: n.UI.getDropdown(this.$tags),
                  attachments:
                    this.components.dialogManageAttachments.getAttachments(),
                  issues: this.components.issues.getIssues(),
                };
                _.assign(
                  s,
                  this.fields.getValues(
                    (e) =>
                      (this.fieldMappings[s.templateId] || []).includes(
                        e.name
                      ) &&
                      (!e.settings.is_restricted || this.canAddEditRestricted)
                  )
                ),
                  this.mode == g.Edit &&
                    ((s.updatedAt = this.updatedAt), (s.forceUpdate = e));
                let i =
                  this.mode == g.Add
                    ? "sessions/create/" + this.projectId
                    : "sessions/update/" + this.sessionId;
                return r.N.post(i, r.N.toNetworkCase(s))
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    a.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        l.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  );
              });
            });
          }
        }
        u(p, "forms", [
          {
            name: "session",
            fields: [
              "name",
              "configId",
              "milestoneId",
              "templateId",
              "assigneeId",
              "estimate",
              "stateId",
              "tags",
              "issues",
            ],
          },
        ]),
          u(p, "targets", [
            "submitButton",
            "addMilestoneIcon",
            "wideCustomFieldSection",
          ]),
          u(p, "actions", ["doSubmit", "doAddMilestone"]);
      },
      80345: (e, t, s) => {
        "use strict";
        s.d(t, { Y: () => k });
        var i = s(50609),
          o = s(43689),
          n = s(96622),
          r = s(13814),
          a = s(7042),
          l = s(27181),
          d = s(69555),
          h = s(16087),
          c = s(132),
          u = s(75360),
          g = s(47914);
        function p(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class m extends i.V {
          constructor(e) {
            super("sessions.import_text_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: g.X.BodyMinWidth,
            }),
              (this.projectId = e);
          }
          cleanupNames() {
            let e = n.UI.getText(this.$names);
            (e = o.Z.removeWhitespaceFromTextList(e)),
              n.UI.setText(this.$names, e);
          }
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews), this.cleanupNames();
              let e = { names: o.Z.splitTextList(n.UI.getText(this.$names)) };
              return r.N.post(
                "sessions/render_create_many_sessions_from_text/" +
                  this.projectId,
                r.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        p(m, "forms", [{ name: "import", fields: ["names"] }]),
          p(m, "targets", ["submitButton"]),
          p(m, "actions", ["doSubmit"]);
        var f = s(26734),
          C = s(24850),
          b = s(5270);
        function I(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class w extends i.V {
          constructor(e) {
            super("sessions.import_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 850,
              height: 750,
              minHeight: 650,
              resizable: !0,
            }),
              I(this, "doPreviousActionClick", (e) => {
                switch (e.actionName) {
                  case "select":
                  case "selectByButton":
                    this.selectSession(e);
                }
              }),
              I(this, "doSelectedActionClick", (e) => {
                switch (e.actionName) {
                  case "remove":
                  case "removeByButton":
                    this.removeSession(e);
                }
              }),
              I(this, "doFilter", (e) => {
                const t = $(e.button);
                n.UI.popupVisible(t) ||
                  (this.components.searchBar.setFilterLoading(!0),
                  r.N.post(
                    "sessions/render_filter/" + this.projectId,
                    r.N.toNetworkCase(this.filter)
                  )
                    .then((e) => {
                      this.components.searchBar.setFilterLoading(!1);
                      const s = new C.y();
                      (s.onSubmit = (e) =>
                        r.N.post(
                          "sessions/validate_filter/" + this.projectId,
                          r.N.toNetworkCase(e.filter)
                        ).then((e) => {
                          this.filter = e.data;
                          let t = _.keys(this.filter.conditions).length;
                          return this.refreshFragments([
                            "previousSessions",
                            { withPagination: !1 },
                          ]).then(() => {
                            this.components.searchBar.setFilterCount(t);
                          });
                        })),
                        s.show(t, d.Fz.BottomRight, e.data);
                    })
                    .catch((e) => {
                      this.components.searchBar.setFilterLoading(!1),
                        b.Z.handleError(e);
                    }));
              }),
              I(this, "doCancelFilter", (e) => {
                const t = $(e.button);
                n.UI.popupVisible(t) && n.UI.getVisiblePopup(t).hide(),
                  (this.filter.conditions = {}),
                  n.UI.loading(t, () =>
                    this.refreshFragments([
                      "previousSessions",
                      { withPagination: !1 },
                    ]).then(() => {
                      this.components.searchBar.setFilterCount(0);
                    })
                  );
              }),
              I(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              I(this, "doSearch", () => {
                this.refreshSearch();
              }),
              I(this, "doPreviousStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments([
                    "previousSessions",
                    { state: e.state },
                  ]).then(() => {
                    e.target.setLoading(e.loading, !1, e.column);
                  });
              }),
              I(this, "doResizeContent", (e) => {
                this.updateResponsiveSessionsContent(e);
              }),
              I(this, "renderPreviousSessions", (e = {}) => {
                _.defaults(e, {
                  state: null,
                  withPagination: !0,
                  extraExcludes: [],
                });
                let t = e.state
                  ? e.state
                  : this.components.previousSessions.getState();
                return (
                  e.withPagination || delete t.paginationCurrent,
                  this.components.searchBar.getHasSearched() &&
                    (t.search = this.components.searchBar.getSearchTerm()),
                  _.keys(this.filter.conditions).length > 0 &&
                    (t.filter = this.filter),
                  (t.excludes = this.components.selectedSessions.getRowIds(
                    this.components.selectedSessions.getRows()
                  )),
                  t.excludes.push(...e.extraExcludes),
                  r.N.post(
                    "sessions/render_import_table/" + this.projectId,
                    r.N.toNetworkCase(t)
                  )
                );
              }),
              (this.projectId = e);
          }
          load() {
            (this.filter = g.X.EmptyFilter),
              b.Z.requestChild(this.component, "searchBar", {
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  filter: this.doFilter,
                  cancelfilter: this.doCancelFilter,
                },
              }),
              b.Z.requestChild(this.component, "previousSessions", {
                onAdded: (e) => {
                  this.refreshTables();
                  let t = e.getResponsiveContentColumns();
                  for (let e of t) this.updateResponsiveSessionsContent(e);
                },
                events: {
                  resizecontent: this.doResizeContent,
                  statechange: this.doPreviousStateChange,
                  actionclick: this.doPreviousActionClick,
                },
              }),
              b.Z.requestChild(this.component, "selectedSessions", {
                onAdded: () => {
                  this.components.selectedSessions.refreshSize(
                    this.$dialog.outerWidth()
                  );
                },
                events: {
                  resizecontent: this.doResizeContent,
                  actionclick: this.doSelectedActionClick,
                },
              }),
              this.fragments.register(
                "previousSessions",
                this.renderPreviousSessions
              );
          }
          removeSession(e) {
            let t = e.$row.data("id"),
              s = this.components.previousSessions.getRowById(t);
            if (s.length > 0) s.show();
            else {
              let t = e.$row.clone();
              n.UI.clearInitializedTags(t),
                this.components.previousSessions.toggleEmptyRow(!1),
                this.components.previousSessions.insertRows(t, !0),
                this.components.previousSessions.refreshSize(
                  this.$dialog.outerWidth(),
                  !0
                ),
                this.refreshUi(),
                n.UI.scrollToBottom(this.$previousBox);
            }
            (() => {
              this.components.selectedSessions.removeRows(e.$row),
                e.$row.remove(),
                this.components.selectedSessions.toggleEmptyRow(
                  0 == this.components.selectedSessions.getVisibleRowCount()
                );
            })();
          }
          selectSession(e) {
            let t = e.$row.clone(),
              s = () => {
                n.UI.clearInitializedTags(t),
                  e.$row.hide(),
                  this.components.selectedSessions.toggleEmptyRow(!1),
                  this.components.selectedSessions.insertRows(t, !0),
                  this.components.selectedSessions.refreshSize(
                    this.$dialog.outerWidth(),
                    !0
                  ),
                  this.refreshUi(),
                  n.UI.scrollToBottom(this.$selectedBox);
              };
            1 == this.components.previousSessions.getVisibleRowCount()
              ? ("selectByButton" == e.actionName
                  ? n.UI.markLoading(e.$action)
                  : e.target.setLoading("actionfield", !0, e.$field),
                this.refreshFragments([
                  "previousSessions",
                  { extraExcludes: [e.$row.data("id")] },
                ]).then(() => {
                  s(),
                    "selectByButton" == e.actionName
                      ? n.UI.markCompleted(e.$action)
                      : e.target.setLoading("actionfield", !1, e.$field);
                }))
              : s();
          }
          refreshSearch() {
            this.components.searchBar.setInputLoading(!0),
              this.refreshFragments([
                "previousSessions",
                { withPagination: !1 },
              ]).then(() => {
                this.components.searchBar.setInputLoading(!1);
              });
          }
          doSubmit() {
            n.UI.loading(this.$submitButton, () => {
              a.l.hideValidationErrors(this.formViews);
              let e = {
                ids: this.components.selectedSessions.getRowIds(
                  this.components.selectedSessions.getRows()
                ),
              };
              return r.N.post(
                "sessions/render_create_many_sessions/" + this.projectId,
                r.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  a.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
          updateResponsiveSessionsContent(e) {
            "sessions:tags" == e.name &&
              f.A.displayResponsiveTagLists(e.$fields, e.width, (e) => {
                let t = e.dataset.tags;
                return t ? JSON.parse(t) : [];
              });
          }
        }
        function v(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        I(w, "forms", [{ name: "import", fields: [] }]),
          I(w, "targets", ["submitButton", "selectedBox", "previousBox"]),
          I(w, "actions", ["doSubmit"]);
        class S extends i.V {
          constructor(e) {
            super("sessions.add_many_config_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 760,
            }),
              v(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : r.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              (this.projectId = e);
          }
          load() {
            b.Z.requestChild(this.component, "configurations"),
              (this.assineeIdtItems = null),
              b.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              });
          }
          doSubmit() {
            this.components.configurations
              ? n.UI.loading(this.$submitButton, () => {
                  a.l.hideValidationErrors(this.formViews);
                  let e = this.components.configurations.getSelectedRows(),
                    t = [];
                  return (
                    e.each((e, s) => {
                      let i = $(s);
                      t.push({
                        id: i.data("id"),
                        assignee_id: n.UI.getDropdownIntOrNull(
                          n.UI.getTarget("assigneeId", i)
                        ),
                      });
                    }),
                    this.triggerSuccessCustomErrors(t).catch((e) => {
                      a.l.handleFormError(e, this.formViews),
                        this.refreshPositionIfNeeded();
                    })
                  );
                })
              : this.hide();
          }
        }
        function x(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        v(S, "forms", [{ name: "configurations", fields: [] }]),
          v(S, "targets", ["submitButton"]),
          v(S, "actions", ["doSubmit"]);
        class k extends i.V {
          constructor(e, t = null) {
            super("sessions.add_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 800,
              minHeight: 650,
              resizable: !0,
              responsive: !0,
            }),
              x(this, "selectors", {
                session: ".sessions-add-many-sessions__session",
                sessionCustomFields:
                  ".sessions-add-many-sessions__session__controls__custom__fields",
                sessionCustomFieldsHideButton:
                  ".sessions-add-many-sessions__session__controls__custom__hide .ui.button",
                sessionCustomFieldsShowButton:
                  ".sessions-add-many-sessions__session__controls__custom__show .ui.button",
                sessionCustomFieldsCompact:
                  ".sessions-add-many-sessions__session__controls__custom__fields__compact",
                sessionCustomFieldsWide:
                  ".sessions-add-many-sessions__session__controls__custom__fields__wide",
                sessionCustomFieldsEmpty:
                  ".sessions-add-many-sessions__session__controls__custom__fields__empty",
                sessionConfigCounter:
                  ".sessions-add-many-sessions__session__controls__configs__counter",
                sessionConfigList:
                  ".sessions-add-many-sessions__session__controls__configs__list",
                sessionConfigListTable:
                  ".sessions-add-many-sessions__session__controls__configs__list .data-table",
                field: ".field",
              }),
              x(this, "classes", {
                hidden: "default-hidden",
                error: "error",
                sessionEditingCustom:
                  "sessions-add-many-sessions__session--editing-custom",
              }),
              x(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : r.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              x(this, "doSessionsScroll", (e) => {
                n.UI.dropdownHideInContext(this.$sessionsBox);
              }),
              x(this, "doSessionTemplateIdChange", (e) => {
                let t = e.target.$element.closest(this.selectors.session);
                if (
                  !this.isEditingCustomFields ||
                  !t.is(this.$editingCustomFieldsSession)
                )
                  return;
                let s = !1,
                  i = !1,
                  o = this.fieldMappings[e.value] || [];
                this.editingCustomFieldsManager.updateVisibility((e) => {
                  let t = o.includes(e.name);
                  return (
                    e.settings.is_compact ? (i = i || t) : (s = s || t),
                    o.includes(e.name)
                  );
                });
                let n = $(this.selectors.sessionCustomFieldsWide, t),
                  r = $(this.selectors.sessionCustomFieldsCompact, t),
                  a = $(this.selectors.sessionCustomFieldsEmpty, t);
                n.toggleClass(this.classes.hidden, !s),
                  r.toggleClass(this.classes.hidden, !i),
                  a.toggleClass(this.classes.hidden, i || s),
                  this.refreshDropdowns();
              }),
              x(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              x(this, "doImportText", (e) => {
                e.target.hide(),
                  n.UI.loading(this.$importSessionsButton, () =>
                    r.N.post("sessions/render_import_text/" + this.projectId)
                      .then((e) => {
                        const t = new m(this.projectId);
                        (t.onSuccess = (e) => {
                          this.addSessions(e);
                        }),
                          t.show(e.data);
                      })
                      .catch((e) => {
                        b.Z.handleError(e);
                      })
                  );
              }),
              x(this, "doImportPrevious", (e) => {
                e.target.hide(),
                  n.UI.loading(this.$importSessionsButton, () =>
                    r.N.post("sessions/render_import/" + this.projectId)
                      .then((e) => {
                        const t = new w(this.projectId);
                        (t.onSuccess = (e) => {
                          this.addSessions(e);
                        }),
                          t.show(e.data);
                      })
                      .catch((e) => {
                        b.Z.handleError(e);
                      })
                  );
              }),
              (this.projectId = e),
              t &&
                b.Z.waitComponentConnected("milestoneId", () => {
                  n.UI.setDropdown(this.$milestoneId, t);
                }),
              (this.isEditingCustomFields = !1),
              (this.$editingCustomFieldsSession = null),
              (this.editingCustomFieldsManager = null);
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.fieldMappings = this.params.fieldMappings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.sessionConfigs = {}),
              (this.sessionCustomFields = {}),
              this.initializeSessions(
                $(this.selectors.session, this.$sessionsBox),
                !1
              ),
              this.$sessionsBox.on("scroll", this.doSessionsScroll),
              b.Z.requestChild(this.component, "templateId", {
                events: { change: this.doSessionTemplateIdChange },
              }),
              b.Z.requestChild(this.component, "milestoneId", {
                onAdded: () => {
                  this.components.milestoneId.setDefaultText(
                    o.Z.lang("sessions.add_many_milestone_default_text")
                  );
                },
                events: { actionclick: this.doMilestoneActionClick },
              }),
              (this.assineeIdtItems = null),
              b.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              });
          }
          unload() {
            this.$sessionsBox.off("scroll", this.doSessionsScroll),
              this.uninitializeSessions(
                $(this.selectors.session, this.$sessionsBox)
              );
          }
          addMilestone(e) {
            n.UI.loading(e, () =>
              r.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new u.q(u.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    r.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        b.Z.waitComponentConnected("milestoneId", () => {
                          n.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  b.Z.handleError(e);
                })
            );
          }
          getSessionFields(e) {
            return {
              $name: n.UI.getTarget("name", e),
              $templateId: n.UI.getTarget("templateId", e),
              $stateId: n.UI.getTarget("stateId", e),
              $assigneeId: n.UI.getTarget("assigneeId", e),
              $estimate: n.UI.getTarget("estimate", e),
              $tags: n.UI.getTarget("tags", e),
            };
          }
          doDuplicateSession(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.session);
            n.UI.loading(t, () => {
              let e = Promise.resolve();
              return (
                this.isEditingCustomFields &&
                  s.is(this.$editingCustomFieldsSession) &&
                  (e = this.submitEditingCustomField()),
                e
                  .then(() =>
                    r.N.post(
                      "sessions/render_create_many_session/" + this.projectId
                    ).then((e) => {
                      let t = this.insertSession(e.data, s),
                        i = this.getSessionFields(t),
                        o = this.getSessionFields(s);
                      n.UI.setText(i.$name, n.UI.getText(o.$name)),
                        n.UI.setText(i.$estimate, n.UI.getText(o.$estimate)),
                        b.Z.waitComponentConnected("assigneeId", () => {
                          n.UI.setDropdownItemsContent(
                            i.$assigneeId,
                            n.UI.getDropdownItemsContent(o.$assigneeId)
                          ),
                            n.UI.setDropdown(
                              i.$assigneeId,
                              n.UI.getDropdown(o.$assigneeId)
                            );
                        }),
                        b.Z.waitComponentConnected("templateId", () => {
                          n.UI.setDropdown(
                            i.$templateId,
                            n.UI.getDropdown(o.$templateId)
                          );
                        }),
                        b.Z.waitComponentConnected("stateId", () => {
                          n.UI.setDropdown(
                            i.$stateId,
                            n.UI.getDropdown(o.$stateId)
                          );
                        }),
                        b.Z.waitComponentConnected("tags", () => {
                          n.UI.setDropdownItems(
                            i.$tags,
                            n.UI.getDropdownItems(o.$tags)
                          ),
                            n.UI.setDropdown(
                              i.$tags,
                              n.UI.getDropdown(o.$tags)
                            );
                        });
                      let r = s.data("id"),
                        a = t.data("id"),
                        l = this.sessionConfigs[r];
                      if (
                        ((this.sessionConfigs[a] = _.clone(l)), l.length > 0)
                      ) {
                        let e = $(this.selectors.sessionConfigList, s),
                          i = $(this.selectors.sessionConfigList, t);
                        i.html(e.html()), i.removeClass(this.classes.hidden);
                        let o = $(this.selectors.sessionConfigCounter, s);
                        $(this.selectors.sessionConfigCounter, t).html(
                          o.html()
                        );
                      }
                      (this.sessionCustomFields[a] = _.clone(
                        this.sessionCustomFields[r]
                      )),
                        t.is(":last-child") &&
                          n.UI.scrollToBottom(this.$sessionsBox),
                        this.refreshSessionUi(),
                        n.UI.focusText(i.$name);
                    })
                  )
                  .catch((e) => {
                    this.handleFormError(e), this.refreshPositionIfNeeded();
                  })
              );
            });
          }
          doAddSession() {
            n.UI.loading(this.$addSessionButton, () =>
              r.N.post("sessions/render_create_many_session/" + this.projectId)
                .then((e) => {
                  this.addSessions(e.data);
                })
                .catch((e) => {
                  b.Z.handleError(e);
                })
            );
          }
          addSessions(e) {
            let t = $(e);
            this.$sessionsBox.append(t),
              n.UI.scrollToBottom(this.$sessionsBox),
              this.initializeSessions(t),
              this.refreshSessionUi();
            let s = t.eq(0);
            n.UI.focusText(n.UI.getTarget("name", s));
          }
          insertSession(e, t) {
            let s = $(e);
            return t.after(s), this.initializeSessions(s), s;
          }
          removeSession(e) {
            this.uninitializeSessions(e), e.remove();
          }
          refreshSessionUi() {
            this.refreshUi(), this.rebindAll();
          }
          initializeSessions(e, t = !0) {
            setTimeout(() => {
              this.refreshDropdowns();
            }, 1),
              e.each((e, t) => {
                let s = $(t),
                  i = s.data("id");
                if (!i) return;
                (this.sessionCustomFields[i] = s.data("customFields")),
                  (this.sessionConfigs[i] = []);
                let o = $(this.selectors.sessionConfigListTable, s);
                o.length > 0 &&
                  (this.sessionConfigs[i] = o.data("params").configs);
              });
          }
          uninitializeSessions(e) {
            e.each((e, t) => {
              let s = $(t).data("id");
              delete this.sessionCustomFields[s], delete this.sessionConfigs[s];
            });
          }
          doDeleteSession(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            const s = new c.l(o.Z.lang("sessions.add_many_remove_session"));
            (s.onSuccess = () => {
              let e = t.closest(this.selectors.session);
              this.isEditingCustomFields &&
                e.is(this.$editingCustomFieldsSession) &&
                this.cancelEditingCustomField(),
                this.removeSession(e);
            }),
              s.show(t, d.Fz.BottomRight);
          }
          doImportSessions(e) {
            let t = $(e.currentTarget);
            if (n.UI.popupVisible(t)) return;
            const s = [];
            s.push({
              type: "action",
              name: "previous",
              title: o.Z.lang("sessions.import_previous_sessions"),
              callback: this.doImportPrevious,
            }),
              s.push({
                type: "action",
                name: "list",
                title: o.Z.lang("sessions.import_from_list"),
                callback: this.doImportText,
              }),
              new h.x(s).show(t, d.Fz.BottomLeft);
          }
          doSelectConfig(e) {
            let t = $(e.currentTarget),
              s = t.closest(this.selectors.session),
              i = s.data("id"),
              a = this.sessionConfigs[i];
            n.UI.loading(t, () => {
              let e = { configurations: a };
              return r.N.post(
                "sessions/render_create_many_select_configurations/" +
                  this.projectId,
                r.N.toNetworkCase(e)
              )
                .then((e) => {
                  const t = new S(this.projectId);
                  (t.onSuccess = (e) => {
                    let t = e;
                    this.sessionConfigs[i] = t;
                    let n = $(this.selectors.sessionConfigCounter, s),
                      a = $(this.selectors.sessionConfigList, s),
                      l = { configurations: t };
                    return r.N.postReplace(
                      "sessions/render_create_many_configurations/" +
                        this.projectId,
                      a,
                      r.N.toNetworkCase(l)
                    ).then(() => {
                      e.length > 0
                        ? n.text(
                            o.Z.lang("sessions.add_many_configurations_count", {
                              count: e.length,
                            })
                          )
                        : n.text(""),
                        a.toggleClass(this.classes.hidden, 0 == e.length);
                    });
                  }),
                    t.show(e.data);
                })
                .catch((e) => {
                  b.Z.handleError(e);
                });
            });
          }
          doShowFields(e) {
            let t = $(e.currentTarget);
            n.UI.loading(t, () =>
              this.submitEditingCustomField()
                .then(() => {
                  let e = t.closest(this.selectors.session),
                    s = $(this.selectors.sessionCustomFields, e),
                    i = e.data("id"),
                    o = this.sessionCustomFields[i];
                  this.hideValidationErrors();
                  let a = this.getSessionFields(e),
                    d = {
                      template_id: n.UI.getDropdownIntOrNull(a.$templateId),
                    };
                  return (
                    _.assign(d, o),
                    r.N.postReplace(
                      "sessions/render_create_many_session_fields/" +
                        this.projectId,
                      s,
                      r.N.toNetworkCase(d)
                    ).then(
                      () => (
                        this.refreshUi(),
                        (this.editingCustomFieldsManager = new l.rN(
                          this.fieldSettings,
                          e
                        )),
                        this.editingCustomFieldsManager.prepare().then(() => {
                          e.addClass(this.classes.sessionEditingCustom),
                            (this.isEditingCustomFields = !0),
                            (this.$editingCustomFieldsSession = e);
                        })
                      )
                    )
                  );
                })
                .catch((e) => {
                  this.handleFormError(e), this.refreshPositionIfNeeded();
                })
            );
          }
          submitEditingCustomField() {
            if (!this.isEditingCustomFields) return Promise.resolve();
            let e = this.$editingCustomFieldsSession,
              t = $(this.selectors.sessionCustomFields, e),
              s = e.data("id");
            this.hideValidationErrors();
            let i = this.getSessionFields(e),
              o = { template_id: n.UI.getDropdownIntOrNull(i.$templateId) },
              a = this.editingCustomFieldsManager.getValues(
                (e) =>
                  (this.fieldMappings[o.template_id] || []).includes(e.name) &&
                  (!e.settings.is_restricted || this.canAddEditRestricted)
              );
            return (
              _.assign(o, a),
              r.N.post(
                "sessions/validate_create_many_session_fields/" +
                  this.projectId,
                r.N.toNetworkCase(o)
              ).then((i) => {
                e.removeClass(this.classes.sessionEditingCustom),
                  t.empty(),
                  (this.sessionCustomFields[s] = a),
                  (this.isEditingCustomFields = !1),
                  (this.$editingCustomFieldsSession = null),
                  (this.editingCustomFieldsManager = null);
              })
            );
          }
          cancelEditingCustomField() {
            if (!this.isEditingCustomFields) return;
            let e = this.$editingCustomFieldsSession,
              t = $(this.selectors.sessionCustomFields, e);
            e.removeClass(this.classes.sessionEditingCustom),
              t.empty(),
              (this.isEditingCustomFields = !1),
              (this.$editingCustomFieldsSession = null),
              (this.editingCustomFieldsManager = null);
          }
          doHideFields(e) {
            let t = $(e.currentTarget);
            n.UI.loading(t, () =>
              this.submitEditingCustomField().catch((e) => {
                this.handleFormError(e), this.refreshPositionIfNeeded();
              })
            );
          }
          handleFormError(e) {
            a.l.handleCustomFormError(e, (e, t) => {
              let s = this.getSessions();
              this.$form.addClass(this.classes.error),
                a.l.showValidationBlockErrors(this.$validationErrors, t);
              for (let t in e) {
                let e = t.match(/sessions\.(\d+)\.(.+)/);
                if (e) {
                  let t = parseInt(e[1], 10),
                    i = s.eq(t),
                    n = e[2];
                  n.match(/custom_.+/)
                    ? $(
                        this.selectors.sessionCustomFieldsShowButton,
                        i
                      ).addClass(this.classes.error)
                    : $(`[data-target~=${o.Z.camelcaserize(n)}]`, i)
                        .closest(this.selectors.field)
                        .addClass(this.classes.error);
                } else
                  t.match(/custom_.+/)
                    ? this.isEditingCustomFields &&
                      $(
                        `[data-target~=${o.Z.camelcaserize(t)}]`,
                        this.$editingCustomFieldsSession
                      )
                        .closest(this.selectors.field)
                        .addClass(this.classes.error)
                    : $(`[data-target~=${o.Z.camelcaserize(t)}]`, this.$form)
                        .closest(this.selectors.field)
                        .addClass(this.classes.error);
              }
            });
          }
          hideValidationErrors() {
            a.l.hideValidationErrors(this.formViews);
            let e = this.getSessions();
            $(this.selectors.sessionCustomFieldsShowButton, e).removeClass(
              this.classes.error
            );
          }
          getSessions() {
            return $(this.selectors.session, this.$sessionsBox);
          }
          getSessionValues(e) {
            return {
              name: n.UI.getText(e.$name),
              template_id: n.UI.getDropdownIntOrNull(e.$templateId),
              state_id: n.UI.getDropdownIntOrNull(e.$stateId),
              assignee_id: n.UI.getDropdownIntOrNull(e.$assigneeId),
              estimate: n.UI.getText(e.$estimate),
              tags: n.UI.getDropdown(e.$tags),
            };
          }
          doSubmit() {
            n.UI.loading(this.$submitButton, () =>
              this.submitEditingCustomField()
                .then(() => {
                  this.hideValidationErrors();
                  let e = {
                    milestoneId: n.UI.getDropdownIntOrNull(this.$milestoneId),
                    tags: n.UI.getDropdown(this.$tags),
                    sessions: [],
                  };
                  return (
                    this.getSessions().each((t, s) => {
                      let i = $(s),
                        o = i.data("id"),
                        n = this.getSessionFields(i),
                        r = {};
                      _.assign(r, this.sessionCustomFields[o]),
                        _.assign(r, this.getSessionValues(n)),
                        (r.configurations = this.sessionConfigs[o]),
                        e.sessions.push(r);
                    }),
                    r.N.post(
                      "sessions/create_many/" + this.projectId,
                      r.N.toNetworkCase(e)
                    ).then((e) => this.triggerSuccess(e.data))
                  );
                })
                .catch((e) => {
                  this.handleFormError(e), this.refreshPositionIfNeeded();
                })
            );
          }
        }
        x(k, "forms", [{ name: "form", fields: ["milestoneId", "tags"] }]),
          x(k, "targets", [
            "submitButton",
            "addSessionButton",
            "sessionsBox",
            "importSessionsButton",
            "validationErrors",
          ]),
          x(k, "actions", [
            "doSubmit",
            "doAddSession",
            "doDuplicateSession",
            "doDeleteSession",
            "doImportSessions",
            "doSelectConfig",
            "doShowFields",
            "doHideFields",
          ]);
      },
      51549: (e, t, s) => {
        "use strict";
        s.d(t, { M: () => d });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.V {
          constructor(e, t) {
            super("sessions.assign_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: 700,
            }),
              l(this, "doUsersCancelSearch", (e) => {
                this.refreshSearch();
              }),
              l(this, "doUsersSearch", () => {
                this.refreshSearch();
              }),
              l(this, "doUsersStateChange", (e) => {
                e.target.setLoading(e.loading, !0, e.column),
                  this.refreshFragments(["users", { state: e.state }]).then(
                    () => {
                      e.target.setLoading(e.loading, !1, e.column);
                    }
                  );
              }),
              l(this, "doUsersSelectionChange", (e) => {
                let t = this.components.users.getSelectedIds(),
                  s = this.components.users.getUnselectedIds();
                (this.users = _.difference(this.users, s)),
                  (this.users = _.union(this.users, t));
              }),
              l(this, "renderUsers", (e) => {
                _.defaults(e, { withPagination: !0, state: null });
                let t = e.state ? e.state : this.components.users.getState();
                return (
                  (t.selected = this.users),
                  e.withPagination || delete t.paginationCurrent,
                  this.components.usersSearchBar.getHasSearched() &&
                    (t.search = this.components.usersSearchBar.getSearchTerm()),
                  n.N.post(
                    "sessions/render_assign_many_users/" + this.projectId,
                    n.N.toNetworkCase(t)
                  )
                );
              }),
              (this.sessionIds = e),
              (this.projectId = t),
              (this.users = []);
          }
          load() {
            a.Z.requestChild(this.component, "usersSearchBar", {
              events: {
                search: this.doUsersSearch,
                cancelsearch: this.doUsersCancelSearch,
              },
            }),
              a.Z.requestChild(this.component, "users", {
                events: {
                  selectionchange: this.doUsersSelectionChange,
                  statechange: this.doUsersStateChange,
                },
              }),
              a.Z.requestChild(this.component, "groups"),
              this.fragments.register("users", this.renderUsers);
          }
          unload() {}
          refreshSearch() {
            this.components.usersSearchBar.setInputLoading(!0),
              this.refreshFragments(["users", { withPagination: !1 }]).then(
                () => {
                  this.components.usersSearchBar.setInputLoading(!1);
                }
              );
          }
          doSubmit() {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let e = {
                ids: this.sessionIds,
                users: this.users,
                groups: this.components.groups.getSelectedIds(),
                strategy: o.UI.getDropdownIntOrNull(this.$strategy),
                reassign: 1 == o.UI.getDropdownIntOrNull(this.$reassign),
              };
              return n.N.post(
                "sessions/assign_many/" + this.projectId,
                n.N.toNetworkCase(e)
              )
                .then((e) => this.triggerSuccess(e.data))
                .catch((e) => {
                  r.l.handleFormError(e, this.formViews),
                    this.refreshPositionIfNeeded();
                });
            });
          }
        }
        l(d, "forms", [
          {
            name: "assignment",
            fields: ["users", "groups", "strategy", "reassign"],
          },
        ]),
          l(d, "targets", ["submitButton"]),
          l(d, "actions", ["doSubmit"]);
      },
      3638: (e, t, s) => {
        "use strict";
        s.d(t, { y: () => g });
        var i = s(50609),
          o = s(96622),
          n = s(13814),
          r = s(7042),
          a = s(47914),
          l = s(14589),
          d = s(27181),
          h = s(75360),
          c = s(5270);
        function u(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class g extends i.V {
          constructor(e, t) {
            super("sessions.edit_many_dialog", {
              onSubmitForm: () => this.doSubmit(),
              width: a.X.SplitDialogWidth,
              resizable: !0,
            }),
              u(this, "selectors", {
                input: "input",
                dropdown: ".dropdown",
                fieldSelection: ".field-selection",
                fieldSelectionField: ".field-selection__field",
                fieldSelectionCheckbox: ".field-selection__checkbox .checkbox",
                fieldLabel: ".field > label",
              }),
              u(this, "classes", {
                fieldSelectionEditing: "field-selection--editing",
                fieldSelectionRestricted: "field-selection--restricted",
                hidden: "default-hidden",
              }),
              u(this, "doAssigneeIdGetItems", (e) =>
                this.assineeIdtItems
                  ? Promise.resolve(this.assineeIdtItems)
                  : n.N.post(
                      "users/render_dropdown_items/" + this.projectId
                    ).then(
                      (e) => (
                        (this.assineeIdtItems = e.data), this.assineeIdtItems
                      )
                    )
              ),
              u(this, "doTemplateIdChange", (e) => {
                let t = !1,
                  s = this.fieldMappings[e.value] || [];
                this.fields.updateVisibility((e) => {
                  let i = s.includes(e.name);
                  return (
                    e.settings.is_compact || (t = t || i), s.includes(e.name)
                  );
                }),
                  this.$wideCustomFieldSection.toggleClass(
                    this.classes.hidden,
                    !t
                  );
              }),
              u(this, "doFieldSelectionCheckboxChange", (e) => {
                this.fieldSelectionChange(
                  e.closest(this.selectors.fieldSelection),
                  e
                );
              }),
              u(this, "doFieldSelectionLabelClick", (e) => {
                let t = $(e.currentTarget).closest(
                  this.selectors.fieldSelection
                );
                if (t.hasClass(this.classes.fieldSelectionRestricted)) return;
                let s = $(this.selectors.fieldSelectionCheckbox, t);
                o.UI.setCheckbox(s, !o.UI.getCheckbox(s)),
                  this.fieldSelectionChange(t, s);
              }),
              u(this, "doMilestoneActionClick", (e) => {
                "add" == e.actionName && this.addMilestone(e.target.$element);
              }),
              (this.sessionIds = e),
              (this.projectId = t);
          }
          load() {
            (this.fieldSettings = this.params.fieldSettings),
              (this.fieldMappings = this.params.fieldMappings),
              (this.canAddEditRestricted = this.params.canAddEditRestricted),
              (this.templateId = this.params.templateId),
              (this.updates = this.params.updates),
              (this.fields = new d.rN(this.fieldSettings, this.$dialog)),
              (this.$fieldSelections = $(
                this.selectors.fieldSelection,
                this.$dialog
              )),
              (this.$fieldSelectionLabels = $(
                this.selectors.fieldLabel,
                this.$ieldSelections
              )),
              (this.$fieldSelectionCheckboxes = $(
                this.selectors.fieldSelectionCheckbox,
                this.$fieldSelections
              )),
              this.$fieldSelectionLabels.on(
                "click",
                this.doFieldSelectionLabelClick
              ),
              o.UI.onCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              ),
              c.Z.requestChild(this.component, "milestoneId", {
                events: { actionclick: this.doMilestoneActionClick },
              }),
              c.Z.requestChild(this.component, "templateId", {
                events: { change: this.doTemplateIdChange },
              }),
              (this.assineeIdtItems = null),
              c.Z.requestChild(this.component, "assigneeId", {
                events: { getitems: this.doAssigneeIdGetItems },
              }),
              c.Z.requestChild(this.component, "issues");
          }
          unload() {
            this.$fieldSelectionLabels.off(
              "click",
              this.doFieldSelectionLabelClick
            ),
              o.UI.offCheckboxChange(
                this.$fieldSelectionCheckboxes,
                this.doFieldSelectionCheckboxChange
              );
          }
          prepare() {
            return this.fields.prepare();
          }
          fieldSelectionChange(e, t) {
            let s = o.UI.getCheckbox(t);
            e.toggleClass(this.classes.fieldSelectionEditing, s),
              o.UI.dropdownRefreshSizes(e);
            let i = $(this.selectors.fieldSelectionField, e),
              n = i.data("customField"),
              r = i.data("field");
            setTimeout(() => {
              if (n) {
                let e = this.fields.getField(n);
                e && e.control.focus();
              } else
                "name" == r || "estimate" == r
                  ? o.UI.focusText($(this.selectors.input, i).first())
                  : o.UI.focusDropdown($(this.selectors.dropdown, i).first());
            }, 0);
          }
          doAddMilestone(e) {
            e.stopPropagation(), this.addMilestone(this.$addMilestoneIcon);
          }
          addMilestone(e) {
            o.UI.loading(e, () =>
              n.N.post("milestones/render_create/" + this.projectId)
                .then((e) => {
                  const t = new h.q(h.G.Add, this.projectId);
                  (t.onSuccess = (e) =>
                    n.N.post(
                      "milestones/render_select_control/" + this.projectId
                    ).then((t) => {
                      let s = $(t.data);
                      this.$milestoneId.replaceWith(s),
                        c.Z.waitComponentConnected("milestoneId", () => {
                          o.UI.setDropdown(this.$milestoneId, e.id);
                        }),
                        this.refreshForms();
                    })),
                    t.show(e.data);
                })
                .catch((e) => {
                  c.Z.handleError(e);
                })
            );
          }
          doSubmit() {
            this.submit();
          }
          isFieldSelectionEnabled(e) {
            let t = e.closest(this.selectors.fieldSelection),
              s = $(this.selectors.fieldSelectionCheckbox, t);
            return o.UI.getCheckbox(s);
          }
          submit(e = !1) {
            o.UI.loading(this.$submitButton, () => {
              r.l.hideValidationErrors(this.formViews);
              let t = { ids: this.sessionIds };
              this.isFieldSelectionEnabled(this.$name) &&
                (t.name = o.UI.getText(this.$name)),
                this.isFieldSelectionEnabled(this.$configId) &&
                  (t.configId = o.UI.getDropdownIntOrNull(this.$configId)),
                this.isFieldSelectionEnabled(this.$milestoneId) &&
                  (t.milestoneId = o.UI.getDropdownIntOrNull(
                    this.$milestoneId
                  )),
                this.isFieldSelectionEnabled(this.$templateId) &&
                  (t.templateId = o.UI.getDropdownIntOrNull(this.$templateId)),
                this.isFieldSelectionEnabled(this.$stateId) &&
                  (t.stateId = o.UI.getDropdownIntOrNull(this.$stateId)),
                this.isFieldSelectionEnabled(this.$assigneeId) &&
                  (t.assigneeId = o.UI.getDropdownIntOrNull(this.$assigneeId)),
                this.isFieldSelectionEnabled(this.$estimate) &&
                  (t.estimate = o.UI.getText(this.$estimate)),
                this.isFieldSelectionEnabled(this.$issues) &&
                  (t.issues = this.components.issues.getIssues()),
                this.isFieldSelectionEnabled(this.$tags) &&
                  (t.tags = o.UI.getDropdown(this.$tags));
              let s = t.templateId || this.templateId;
              return (
                s &&
                  _.assign(
                    t,
                    this.fields.getValues(
                      (e) =>
                        !!this.isFieldSelectionEnabled(e.$field) &&
                        (this.fieldMappings[s] || []).includes(e.name) &&
                        (!e.settings.is_restricted || this.canAddEditRestricted)
                    )
                  ),
                (t.updates = this.updates),
                (t.forceUpdate = e),
                n.N.post(
                  "sessions/update_many/" + this.projectId,
                  n.N.toNetworkCase(t)
                )
                  .then((e) => this.triggerSuccess(e.data))
                  .catch((e) =>
                    l.s.handle(
                      e,
                      () => {
                        this.submit(!0);
                      },
                      () => {
                        r.l.handleFormError(e, this.formViews),
                          this.refreshPositionIfNeeded();
                      }
                    )
                  )
              );
            });
          }
        }
        u(g, "forms", [
          {
            name: "session",
            fields: [
              "name",
              "configId",
              "milestoneId",
              "templateId",
              "stateId",
              "assigneeId",
              "estimate",
              "tags",
              "issues",
            ],
          },
        ]),
          u(g, "targets", [
            "submitButton",
            "addMilestoneIcon",
            "wideCustomFieldSection",
          ]),
          u(g, "actions", ["doSubmit", "doAddMilestone"]);
      },
      19339: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(96622),
          n = s(27181);
        class r extends n.JO {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = { checkbox: ".checkbox" }),
              (t = "selectors") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          load() {
            this.$checkbox = $(this.selectors.checkbox, this.$element).first();
          }
          getValue() {
            return o.UI.getCheckbox(this.$checkbox);
          }
        }
        (0, n.Ek)(i.g.FieldTypeCheckbox, r);
      },
      45291: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(96622),
          n = s(27181);
        class r extends n.JO {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = { input: "input" }),
              (t = "selectors") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          load() {
            this.$input = $(this.selectors.input, this.$element).first();
          }
          getValue() {
            return o.UI.getText(this.$input);
          }
          focus() {
            o.UI.focusText(this.$input);
          }
        }
        (0, n.Ek)(i.g.FieldTypeDate, r);
      },
      17327: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(27181),
          n = s(5270);
        class r extends o.JO {
          load() {
            n.Z.requestChild(this.component, "dropdown");
          }
          getValue() {
            let e = this.components.dropdown.getValue();
            return e ? parseInt(e, 10) : null;
          }
          focus() {
            this.components.dropdown.focus();
          }
        }
        (0, o.Ek)(i.g.FieldTypeDropdown, r);
      },
      11637: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(96622),
          n = s(27181);
        class r extends n.JO {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = { input: "input" }),
              (t = "selectors") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          load() {
            this.$input = $(this.selectors.input, this.$element).first();
          }
          getValue() {
            return o.UI.getTextFloatOrNullOrError(this.$input);
          }
          focus() {
            o.UI.focusText(this.$input);
          }
        }
        (0, n.Ek)(i.g.FieldTypeFloat, r);
      },
      69646: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(96622),
          n = s(27181);
        class r extends n.JO {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = { input: "input" }),
              (t = "selectors") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          load() {
            this.$input = $(this.selectors.input, this.$element).first();
          }
          getValue() {
            return o.UI.getTextIntOrNullOrError(this.$input);
          }
          focus() {
            o.UI.focusText(this.$input);
          }
        }
        (0, n.Ek)(i.g.FieldTypeInteger, r);
      },
      35970: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(27181),
          n = s(5270);
        class r extends o.JO {
          load() {
            n.Z.requestChild(this.component, "dropdown");
          }
          getValue() {
            return this.components.dropdown
              .getValue()
              .map((e) => parseInt(e, 10));
          }
          focus() {
            this.components.dropdown.focus();
          }
        }
        (0, o.Ek)(i.g.FieldTypeMultiselect, r);
      },
      97299: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(27181),
          n = s(5270);
        class r extends o.JO {
          load() {
            n.Z.requestChild(this.component, "caseStepEditor"),
              n.Z.requestChild(this.component, "resultStepEditor");
          }
          getValue() {
            let e =
              this.components.caseStepEditor ||
              this.components.resultStepEditor;
            return e ? e.getSteps() : null;
          }
          loaded() {
            setTimeout(() => {
              let e =
                this.components.caseStepEditor ||
                this.components.resultStepEditor;
              e && e.loadInitialSteps();
            }, 50);
          }
        }
        (0, o.Ek)(i.g.FieldTypesSteps, r);
      },
      21454: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(96622),
          n = s(27181);
        class r extends n.JO {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = { input: "input" }),
              (t = "selectors") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          load() {
            this.$input = $(this.selectors.input, this.$element).first();
          }
          getValue() {
            let e = o.UI.getText(this.$input).trim();
            return "" === e ? null : e;
          }
          focus() {
            o.UI.focusText(this.$input);
          }
        }
        (0, n.Ek)(i.g.FieldTypeString, r);
      },
      80770: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(27181),
          n = s(5270);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends o.JO {
          constructor(...e) {
            super(...e),
              r(this, "doPlaceholderEditorResize", (e) => {
                this.components.editor.setHeight(e.height);
              }),
              r(this, "doEditorResize", (e) => {
                this.components.placeholderEditor &&
                  this.components.placeholderEditor.setHeight(e.height);
              });
          }
          prepare() {
            let e = [];
            return (
              e.push(
                new Promise((e, t) => {
                  n.Z.requestChild(this.component, "editor", {
                    onAdded: () => {
                      this.components.editor.loadEditor().then(() => {
                        e();
                      });
                    },
                    events: { resize: this.doEditorResize },
                  });
                })
              ),
              this.hasFieldSelection &&
                e.push(
                  new Promise((e, t) => {
                    n.Z.requestChild(this.component, "placeholderEditor", {
                      onAdded: () => {
                        this.components.placeholderEditor
                          .loadEditor()
                          .then(() => {
                            e();
                          });
                      },
                      events: { resize: this.doPlaceholderEditorResize },
                    });
                  })
                ),
              Promise.all(e)
            );
          }
          getValue() {
            return this.components.editor.getData();
          }
          focus() {
            this.components.editor.focus();
          }
        }
        (0, o.Ek)(i.g.FieldTypeText, a);
      },
      85853: (e, t, s) => {
        "use strict";
        s.r(t);
        var i = s(15612),
          o = s(96622),
          n = s(27181);
        class r extends n.JO {
          constructor(...e) {
            var t, s;
            super(...e),
              (s = { input: "input" }),
              (t = "selectors") in this
                ? Object.defineProperty(this, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (this[t] = s);
          }
          load() {
            this.$input = $(this.selectors.input, this.$element).first();
          }
          getValue() {
            return o.UI.getText(this.$input);
          }
          focus() {
            o.UI.focusText(this.$input);
          }
        }
        (0, n.Ek)(i.g.FieldTypeUrl, r);
      },
      37914: (e, t, s) => {
        "use strict";
        s.d(t, { pH: () => o, RL: () => n, Jb: () => r, L0: () => a });
        var i = s(89701);
        const o = Object.freeze({ Top: 1, Split: 2, Concat: 3, List: 4 }),
          n = Object.freeze({ Required: 1 });
        class r extends Error {}
        class a {
          constructor(e) {
            (this.csvParseSync = e), this.clear();
          }
          clear() {
            (this.header = []),
              (this.rows = []),
              (this.columnCount = 0),
              (this.hasHeader = !1);
          }
          loadFromArray(e, t = {}) {
            if (!Array.isArray(e))
              throw new Error("CSV load value must be of type array.");
            (t = { hasHeader: !1, ...t }),
              this.clear(),
              (this.hasHeader = t.hasHeader),
              (this.rows = e);
            for (let t of e)
              this.columnCount = Math.max(this.columnCount, t.length);
          }
          getColumns() {
            let e = [];
            this.hasHeader && (e = this.rows.length > 0 ? this.rows[0] : []);
            let t = [];
            for (let s = 0; s < this.columnCount; s++)
              t.push(e[s] ? e[s] : `Column ${s + 1}`);
            return t;
          }
          getValues(e, t) {
            let s = [];
            for (let i = this.hasHeader ? 1 : 0; i < this.rows.length; i++) {
              let o = this.rows[i][e];
              if (o) {
                let e = o.split(",").map((e) => e.trim());
                for (let i of e)
                  if (-1 === s.indexOf(i) && (s.push(i), s.length >= t)) break;
              }
            }
            return (
              s.sort((e, t) => e.toLowerCase().localeCompare(t.toLowerCase())),
              t ? s.slice(0, t) : s
            );
          }
          getRecordsSingle(e) {
            const t = this.hasHeader ? 1 : 0;
            let s;
            return e && (s = this.hasHeader ? e + 1 : e), this.rows.slice(t, s);
          }
          getRecordsMulti(e, t) {
            const s = this.hasHeader ? 1 : 0;
            if (this.rows.length <= s) return [];
            let i,
              o = [],
              n = [];
            for (let r = s; r < this.rows.length; r++) {
              let s = this.rows[r],
                a = s[e];
              if (
                a &&
                a != i &&
                (i && (o.push(n), (n = [])), (i = a), o.length >= t)
              )
                break;
              for (let e = 0; e < this.columnCount; e++) {
                let t = s[e];
                t || (t = null),
                  Array.isArray(n[e]) || (n[e] = []),
                  n[e].push(t);
              }
            }
            return o.length >= t || o.push(n), o;
          }
          splitUniqueValues(e) {
            let t = [];
            for (let s of e) {
              if (!s) continue;
              let e = s.split(",").map((e) => e.trim());
              for (let s of e) -1 === t.indexOf(s) && t.push(s);
            }
            return t;
          }
          normalizeRecords(e, t, s) {
            let i = [],
              o = 0;
            for (let a of e) {
              let e = {};
              for (let i of t) {
                let t = s(i, a[i.index]);
                if (
                  i.validators &&
                  Array.isArray(i.validators) &&
                  i.validators.includes(n.Required) &&
                  !t
                )
                  throw new r(
                    `Record ${o + 1}, Column ${
                      i.index + 1
                    }: The Name is required for every record, but the value is empty.`
                  );
                e[`c${i.index}`] = t;
              }
              i.push(e), o++;
            }
            return i;
          }
          getNormalizedRecordsSingle(e, t) {
            let s = this.getRecordsSingle(t);
            return this.normalizeRecords(s, e, (e, t) => {
              let s;
              switch (e.type) {
                case o.Top:
                  s = t || null;
                  break;
                case o.Split:
                  s = this.splitUniqueValues(t ? [t] : []);
                  break;
                case o.Concat:
                  s = t || null;
                  break;
                case o.List:
                  s = t ? [t] : [];
              }
              return s;
            });
          }
          getNormalizedRecordsMulti(e, t, s) {
            let i = this.getRecordsMulti(t, s);
            return this.normalizeRecords(i, e, (e, t) => {
              let s;
              switch (e.type) {
                case o.Top:
                  s = t.length > 0 ? t[0] : null;
                  break;
                case o.Split:
                  s = this.splitUniqueValues(t || []);
                  break;
                case o.Concat:
                  (s = t || []),
                    (s = s.length > 0 ? s.join("\n").trim() : ""),
                    s || (s = null);
                  break;
                case o.List:
                  s = t || [];
              }
              return s;
            });
          }
          loadFromString(e, t = {}) {
            if ("string" != typeof e)
              throw new Error("CSV load value must be of type string.");
            t = { delimiter: ",", offset: 1, ...t };
            const s = new i.T(this.csvParseSync),
              o = { delimiter: t.delimiter, offset: t.offset };
            this.loadFromArray(s.parseFromString(e, o), t);
          }
          loadFromBinary(e, t = {}) {
            t = { delimiter: ",", encoding: "utf-8", offset: 1, ...t };
            const s = new i.T(this.csvParseSync),
              o = {
                delimiter: t.delimiter,
                encoding: t.encoding,
                offset: t.offset,
              };
            this.loadFromArray(s.parseFromBinary(e, o), t);
          }
        }
      },
      89701: (e, t, s) => {
        "use strict";
        s.d(t, { T: () => i });
        class i {
          constructor(e) {
            this.csvParseSync = e;
          }
          parseFromString(e, t = {}) {
            if ("string" != typeof e)
              throw new Error("CSV parse value must be of type string.");
            const s = {
              delimiter: (t = { delimiter: ",", offset: 1, ...t }).delimiter,
              from_line: t.offset,
              relax_column_count: !0,
              skip_empty_lines: !0,
              trim: !0,
            };
            return this.csvParseSync(e, s);
          }
          parseFromBinary(e, t = {}) {
            t = { delimiter: ",", encoding: "utf-8", offset: 1, ...t };
            const s = new TextDecoder(t.encoding).decode(e);
            return this.parseFromString(s, t);
          }
        }
      },
      42722: (e, t, s) => {
        "use strict";
        s.d(t, { j: () => n });
        var i = s(69555);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n extends i.GI {
          constructor() {
            super("attachments.screenshot_popup"),
              o(this, "classes", { hidden: "default-hidden" });
          }
          prepare() {
            let e = class {
              static detect() {
                return { os: this.getOs() };
              }
              static getOs() {
                let e = null,
                  t = window.navigator.userAgent,
                  s = window.navigator.platform;
                return (
                  -1 !==
                  ["Macintosh", "MacIntel", "MacPPC", "Mac68K"].indexOf(s)
                    ? (e = "mac")
                    : -1 !== ["iPhone", "iPad", "iPod"].indexOf(s)
                    ? (e = "ios")
                    : -1 !== ["Win32", "Win64", "Windows", "WinCE"].indexOf(s)
                    ? (e = "windows")
                    : /Android/.test(t)
                    ? (e = "android")
                    : !e && /Linux/.test(s) && (e = "linux"),
                  e
                );
              }
            }.detect();
            "mac" == e.os
              ? this.$mac.removeClass(this.classes.hidden)
              : "windows" == e.os
              ? this.$windows.removeClass(this.classes.hidden)
              : this.$generic.removeClass(this.classes.hidden);
          }
        }
        o(n, "targets", ["windows", "mac", "generic"]);
      },
      5960: (e, t, s) => {
        "use strict";
        s.d(t, { o: () => o });
        var i = s(69555);
        class o extends i.GI {
          constructor() {
            super("automation.sources.case_popup");
          }
        }
      },
      44286: (e, t, s) => {
        "use strict";
        s.d(t, { L: () => n });
        var i = s(69555);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n extends i.GI {
          constructor() {
            super("common.color_popup"),
              o(this, "selectors", { item: "li" }),
              o(this, "doItemClick", (e) => {
                let t = $(e.currentTarget).data("color");
                this.triggerSuccess(t.toString());
              });
          }
          load() {
            (this.$items = $(this.selectors.item, this.$popup)),
              this.$items.on("click", this.doItemClick);
          }
          unload() {
            this.$items.off("click", this.doItemClick);
          }
        }
      },
      21077: (e, t, s) => {
        "use strict";
        s.d(t, { D: () => l });
        var i = s(69555),
          o = s(96622),
          n = s(7042),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.GI {
          constructor(e = !1, t = null) {
            super("common.column_popup"),
              a(this, "selectors", { checkbox: ".checkbox", row: "tr" }),
              a(this, "classes", {
                selectedEmpty: "column-popup__columns__selected--empty",
                unselectedEmpty: "column-popup__columns__unselected--empty",
                actionsExternal: "column-popup__actions--external",
              }),
              a(this, "doSelectedWidthChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.row)
                    .data("column"),
                  s = this.components.unselectedColumns
                    .getRows()
                    .filter(`[data-column="${t}"]`),
                  i = o.UI.getTarget("width", s);
                o.UI.setDropdown(i, e.value);
              }),
              a(this, "doUnselectedWidthChange", (e) => {
                let t = e.target.$element
                    .closest(this.selectors.row)
                    .data("column"),
                  s = this.components.selectedColumns
                    .getRows()
                    .filter(`[data-column="${t}"]`),
                  i = o.UI.getTarget("width", s);
                o.UI.setDropdown(i, e.value);
              }),
              a(this, "doSelectedColumnsSelectionChange", (e) => {
                e.target.getUnselectedRows().each((e, t) => {
                  let s = $(t);
                  this.components.selectedColumns.hideRows(s);
                  let i = this.components.unselectedColumns
                    .getRows()
                    .filter(`[data-column~="${s.data("column")}"]`);
                  o.UI.setCheckbox($(this.selectors.checkbox, i), !1),
                    this.components.unselectedColumns.showRows(i),
                    this.components.selectedColumns.refreshSelection(),
                    this.components.unselectedColumns.refreshSelection();
                }),
                  this.updatePlaceholders();
              }),
              a(this, "doUnselectedColumnsSelectionChange", (e) => {
                e.target.getSelectedRows().each((e, t) => {
                  let s = $(t);
                  if (this.components.unselectedColumns.getIsRowHidden(s))
                    return;
                  this.components.unselectedColumns.hideRows(s);
                  let i = this.components.selectedColumns
                    .getRows()
                    .filter(`[data-column~="${s.data("column")}"]`);
                  o.UI.setCheckbox($(this.selectors.checkbox, i), !0),
                    this.components.selectedColumns.moveRowAfterLastVisible(i),
                    this.components.selectedColumns.showRows(i),
                    this.components.selectedColumns.refreshSelection(),
                    this.components.unselectedColumns.refreshSelection();
                }),
                  this.updatePlaceholders();
              }),
              (this.onSubmit = null),
              (this.hasExternalAction = e),
              (this.externalActionLabel = t);
          }
          load() {
            r.Z.requestChild(this.component, "selectedColumns", {
              onAdded: () => {
                this.updatePlaceholders();
              },
              events: {
                selectionchange: this.doSelectedColumnsSelectionChange,
              },
            }),
              r.Z.requestChild(this.component, "unselectedColumns", {
                onAdded: () => {
                  this.updatePlaceholders();
                },
                events: {
                  selectionchange: this.doUnselectedColumnsSelectionChange,
                },
              }),
              r.Z.requestChild(this.component, "selectedWidth", {
                events: { change: this.doSelectedWidthChange },
              }),
              r.Z.requestChild(this.component, "unselectedWidth", {
                events: { change: this.doUnselectedWidthChange },
              }),
              this.hasExternalAction &&
                (this.$actions.addClass(this.classes.actionsExternal),
                o.UI.setLinkActionText(
                  this.$externalActionLink,
                  this.externalActionLabel
                ));
          }
          unload() {}
          doExternalAction() {
            this.events.trigger("externalaction", { target: this });
          }
          doApply() {
            let e = this.components.selectedColumns.getRows(),
              t = {};
            e.each((e, s) => {
              let i = $(s);
              if (!this.components.selectedColumns.getIsRowHidden(i)) {
                let e = i.data("width"),
                  s = o.UI.getTarget("width", i);
                s.length > 0 && (e = o.UI.getDropdownIntOrNull(s)),
                  (t[i.data("column")] = { width: e });
              }
            }),
              this.triggerSubmit(this.$applyButton, t);
          }
          updatePlaceholders() {
            if (this.components.selectedColumns) {
              let e = this.components.selectedColumns
                .getRows()
                .toArray()
                .reduce(
                  (e, t) =>
                    e || !this.components.selectedColumns.getIsRowHidden($(t)),
                  !1
                );
              this.$selectedColumns.toggleClass(this.classes.selectedEmpty, !e);
            }
            if (this.components.unselectedColumns) {
              let e = this.components.unselectedColumns
                .getRows()
                .toArray()
                .reduce(
                  (e, t) =>
                    e ||
                    !this.components.unselectedColumns.getIsRowHidden($(t)),
                  !1
                );
              this.$unselectedColumns.toggleClass(
                this.classes.unselectedEmpty,
                !e
              );
            }
          }
          triggerSubmit(e, t) {
            var s;
            return (
              o.UI.markLoading(e),
              n.l.hideValidationErrors(this.formViews),
              this.onSubmit && (s = this.onSubmit(t)),
              s || (s = Promise.resolve()),
              s
                .then(() => {
                  this.hide();
                })
                .catch((t) => {
                  o.UI.markCompleted(e), n.l.handleFormError(t, this.formViews);
                })
            );
          }
        }
        a(l, "targets", [
          "applyButton",
          "selectedColumns",
          "unselectedColumns",
          "externalActionLink",
          "actions",
        ]),
          a(l, "actions", ["doApply", "doExternalAction"]),
          a(l, "forms", [{ name: "columns", fields: [] }]);
      },
      132: (e, t, s) => {
        "use strict";
        s.d(t, { l: () => n });
        var i = s(69555);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n extends i.GI {
          constructor(e, t = null) {
            super("common.confirmation_popup"), (this.messageHtml = e);
          }
          prepare() {
            this.$message.html(this.messageHtml);
          }
          doConfirm() {
            this.triggerSuccess();
          }
        }
        o(n, "targets", ["message"]), o(n, "actions", ["doConfirm"]);
      },
      16087: (e, t, s) => {
        "use strict";
        s.d(t, { x: () => a });
        var i = s(69555),
          o = s(43689),
          n = s(96622);
        function r(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class a extends i.GI {
          constructor(e, t = {}) {
            super("common.context_menu", t),
              r(this, "templates", {
                itemContentText:
                  '<div class="popup__menu__item__text">$(title)</div>',
                itemContentIcon:
                  '<div class="popup__menu__item__icon"><i class="$(icon)"></i></div>',
                itemContentShortcut:
                  '<div class="popup__menu__item__shortcut"><div class="popup__menu__item__shortcut__content">$(shortcut)</div>',
                entryDivider:
                  '<div class="popup__menu__divider $(classes)"></div>',
                entryHeader:
                  '<div class="popup__menu__header $(classes)">$(title)</div>',
                entryLinkStart:
                  '<a data-offset="popup-item" class="popup__menu__link-item $(classes)" href="$(url)">',
                entryLinkEnd: "</a>",
                entryActionStart:
                  '<div tabindex="0" data-offset="popup-item" class="popup__menu__action-item $(classes)" data-action="$(name)" data-value="$(value)">',
                entryActionEnd: "</div>",
              }),
              r(this, "classes", {
                itemDisabled: "popup__menu__item--disabled",
                itemActive: "popup__menu__item--active",
                tooltip: "tooltip",
              }),
              r(this, "selectors", { menu: ".popup__menu" }),
              r(this, "doActionClick", (e) => {
                let t = $(e.actionItem).data("callback");
                t && t(e);
              }),
              (this.menuEntries = e),
              0 == this.menuEntries.length &&
                this.menuEntries.push({
                  type: "action",
                  name: "none",
                  title: o.Z.lang("common.context_menu_no_actions"),
                  enabled: !1,
                });
          }
          load() {
            const e = $(this.selectors.menu, this.$popup);
            for (let t of this.menuEntries) {
              let s,
                i,
                n = "",
                r = [],
                a = !0;
              switch (
                ("enabled" in t &&
                  !t.enabled &&
                  (r.push(this.classes.itemDisabled), (a = !1)),
                "active" in t &&
                  t.active &&
                  (r.push(this.classes.itemActive), (a = !1)),
                "classes" in t && r.push(...t.classes),
                ("link" != t.type && "action" != t.type) ||
                  (t.icon &&
                    (n += o.Z.template(this.templates.itemContentIcon, {
                      icon: t.icon,
                    })),
                  t.title &&
                    (n += o.Z.template(this.templates.itemContentText, {
                      title: t.title,
                    })),
                  t.shortcut &&
                    (n += o.Z.template(this.templates.itemContentShortcut, {
                      shortcut: t.shortcut,
                    }))),
                t.type)
              ) {
                case "header":
                  (s = { title: t.title, classes: r.join(" ") }),
                    e.append(o.Z.template(this.templates.entryHeader, s));
                  break;
                case "link":
                  (s = { url: t.url, classes: r.join(" ") }),
                    (i =
                      o.Z.template(this.templates.entryLinkStart, s) +
                      n +
                      o.Z.template(this.templates.entryLinkEnd, s)),
                    e.append(i);
                  break;
                case "action": {
                  (s = {
                    content: n,
                    name: "name" in t ? t.name : "",
                    value: "value" in t ? t.value : "",
                    classes: r.join(" "),
                  }),
                    (i =
                      o.Z.template(this.templates.entryActionStart, s) +
                      n +
                      o.Z.template(this.templates.entryActionEnd, s));
                  let l = $(i);
                  "tooltip" in t &&
                    t.tooltip &&
                    (l.addClass(this.classes.tooltip),
                    l.attr("data-content", t.tooltip)),
                    a && l.data("callback", t.callback),
                    e.append(l);
                  break;
                }
                case "divider":
                  (s = { classes: r.join(" ") }),
                    e.append(o.Z.template(this.templates.entryDivider, s));
              }
            }
            n.UI.initialize(this.$popup),
              this.events.on("actionclick", this.doActionClick);
          }
          unload() {
            this.events.off("actionclick", this.doActionClick);
          }
        }
      },
      18792: (e, t, s) => {
        "use strict";
        s.d(t, { N: () => a });
        var i,
          o,
          n,
          r = s(69555);
        class a extends r.GI {
          constructor(e) {
            super("common.info_popup"), (this.info = e);
          }
          load() {
            this.$title.text(this.info.title),
              this.$id.text(this.info.id),
              this.$idCopy.text(this.info.id),
              this.$link.text(this.info.link),
              this.$linkCopy.text(this.info.url),
              this.$link.attr("href", this.info.url);
          }
        }
        (n = ["title", "id", "idCopy", "link", "linkCopy"]),
          (o = "targets") in (i = a)
            ? Object.defineProperty(i, o, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (i[o] = n);
      },
      18341: (e, t, s) => {
        "use strict";
        s.d(t, { P: () => l });
        var i = s(69555),
          o = s(43689),
          n = s(11802),
          r = s(5270);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.GI {
          constructor() {
            super("common.selection_menu"),
              a(this, "selectors", {
                searchGroup: ".selection-menu__search-group",
                searchGroupEmpty: ".selection-menu__search-group__empty",
                actionItem: ".popup__menu__action-item",
                actionItemVisible: ".popup__menu__action-item:visible",
                actionItemFocus: ".popup__menu__action-item:focus",
                popupMenu: ".popup__menu",
              }),
              a(this, "doSearch", (e) => {
                this.refreshSearch();
              }),
              a(this, "doCancelSearch", () => {
                this.refreshSearch();
              }),
              a(this, "doActionClick", (e) => {
                this.triggerSuccess({ target: this, value: e.actionValue });
              }),
              a(this, "doUpArrowSearch", () => {
                $(this.selectors.actionItemVisible, this.$popup).last().focus();
              }),
              a(this, "doDownArrowSearch", () => {
                $(this.selectors.actionItemVisible, this.$popup)
                  .first()
                  .focus();
              });
          }
          load() {
            this.events.on("actionclick", this.doActionClick),
              r.Z.requestChild(this.component, "selectionSearch", {
                onAdded: () => {
                  this.components.selectionSearch.focus(),
                    this.$border.scrollTop(0);
                },
                events: {
                  search: this.doSearch,
                  cancelsearch: this.doCancelSearch,
                  keyuparrow: this.doUpArrowSearch,
                  keydownarrow: this.doDownArrowSearch,
                },
              }),
              this.refreshSearch();
          }
          unload() {
            this.events.off("actionclick", this.doActionClick);
          }
          refreshSearch() {
            let e = this.components.selectionSearch
              ? this.components.selectionSearch.getSearchTerm()
              : null;
            $(this.selectors.searchGroup, this.$popup).each((t, s) => {
              let i = $(s),
                n = $(this.selectors.searchGroupEmpty, i),
                r = $(this.selectors.actionItem, i),
                a = !1;
              r.each((t, s) => {
                let i = $(s),
                  n = i.data("search-text"),
                  r = !e || o.Z.fuzzySearch(n, e);
                i.toggle(r), (a = a || r);
              }),
                n.toggle(!a);
            });
          }
          keyDown(e) {
            if (e.which == n.N.UpArrow || e.which == n.N.DownArrow) {
              let t = e.which == n.N.UpArrow,
                s = $(this.selectors.actionItemFocus, this.$popup);
              if (s.length > 0) {
                e.preventDefault();
                let i = $(this.selectors.actionItemVisible, this.$popup),
                  o = i.index(s);
                t
                  ? o <= 0
                    ? i.last().focus()
                    : i.eq(o - 1).focus()
                  : o >= i.length - 1
                  ? i.first().focus()
                  : i.eq(o + 1).focus();
              }
            }
          }
        }
      },
      67694: (e, t, s) => {
        "use strict";
        s.d(t, { _: () => n });
        var i = s(69555);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n extends i.GI {
          constructor(e = !1) {
            super("common.stats_popup"),
              o(this, "classes", { hidden: "default-hidden" }),
              o(this, "selectors", { link: ".metric-stats-popup__link" }),
              (this.displayLink = e);
          }
          load() {
            this.displayLink &&
              $(this.selectors.link, this.$popup).removeClass(
                this.classes.hidden
              );
          }
        }
      },
      48995: (e, t, s) => {
        "use strict";
        s.d(t, { Y: () => n, u: () => r });
        var i = s(69555);
        function o(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class n {
          static get Positive() {
            return 1;
          }
          static get Negative() {
            return 2;
          }
          static get Warning() {
            return 3;
          }
          static get Info() {
            return 4;
          }
          static get Closed() {
            return 5;
          }
          static get Archived() {
            return 6;
          }
        }
        class r extends i.GI {
          constructor(e, t, s, i = {}) {
            super("common.status_popup", { width: i.compact ? 230 : 350 }),
              o(this, "defaults", { compact: !1 }),
              o(this, "classes", { compact: "status-popup--compact" }),
              (this.statusSettings = {}),
              _.defaults(this.statusSettings, i, this.defaults),
              (this.type = e),
              (this.title = t),
              (this.messageHtml = s);
          }
          load() {
            switch (
              (this.$titleIconPositive.hide(),
              this.$titleIconNegative.hide(),
              this.$titleIconWarning.hide(),
              this.$titleIconInfo.hide(),
              this.$titleIconClosed.hide(),
              this.$titleIconArchived.hide(),
              this.type)
            ) {
              case n.Positive:
                this.$titleIconPositive.show();
                break;
              case n.Negative:
                this.$titleIconNegative.show();
                break;
              case n.Warning:
                this.$titleIconWarning.show();
                break;
              case n.Info:
                this.$titleIconInfo.show();
                break;
              case n.Closed:
                this.$titleIconClosed.show();
                break;
              case n.Archived:
                this.$titleIconArchived.show();
            }
            this.$title.text(this.title),
              this.$message.html(this.messageHtml),
              this.$popup.toggleClass(
                this.classes.compact,
                this.statusSettings.compact
              );
          }
        }
        o(r, "targets", [
          "title",
          "titleIconPositive",
          "titleIconNegative",
          "titleIconWarning",
          "titleIconInfo",
          "titleIconClosed",
          "message",
          "titleIconArchived",
        ]);
      },
      57407: (e, t, s) => {
        "use strict";
        s.d(t, { z: () => r });
        var i = s(69555),
          o = s(43689);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.GI {
          constructor(e, t = {}) {
            super("common.tooltip_popup", t),
              n(this, "templates", {
                title: '<div class="popup__tooltip__title">$(title)</div>',
                content:
                  '<div class="popup__tooltip__content">$(content)</div>',
                contentWithShortcut:
                  '<div class="popup__tooltip__content">$(content)<div class="popup__tooltip__content__shortcut">$(shortcut)</div></div>',
              }),
              n(this, "selectors", {
                contentContainer: ".tooltip-content",
                tooltip: ".popup__tooltip",
              }),
              n(this, "classes", {
                popupInverted: "popup--inverted",
                popupTop: "popup--top",
                tooltipExtended: "popup__tooltip--extended",
                tooltipProduct: "popup__tooltip--product",
              }),
              (this.variant = e);
          }
          load() {
            let e = !1;
            if (
              ((this.$tooltip = $(this.selectors.tooltip, this.$popup)),
              (this.$attachElement.data("inverted") ||
                "inverted" == this.variant) &&
                this.$popup.addClass(this.classes.popupInverted),
              this.$attachElement.data("top") &&
                this.$popup.addClass(this.classes.popupTop),
              this.$attachElement.data("extended") &&
                this.$tooltip.addClass(this.classes.tooltipExtended),
              this.$attachElement.data("product") &&
                this.$tooltip.addClass(this.classes.tooltipProduct),
              this.$attachElement.data("inline"))
            ) {
              let t = this.$attachElement.next(this.selectors.contentContainer);
              this.$container.html(t.html()), (e = !0);
            } else {
              let t = this.$attachElement.attr("data-title"),
                s = this.$attachElement.attr("data-content"),
                i = this.$attachElement.attr("data-shortcut");
              t &&
                t.trim &&
                t.trim() &&
                (this.$container.append(
                  o.Z.template(this.templates.title, { title: t })
                ),
                (e = !0)),
                s &&
                  s.trim &&
                  s.trim() &&
                  (i
                    ? this.$container.append(
                        o.Z.template(this.templates.contentWithShortcut, {
                          content: s,
                          shortcut: i,
                        })
                      )
                    : this.$container.append(
                        o.Z.template(this.templates.content, { content: s })
                      ),
                  (e = !0));
            }
            let t = this.$attachElement.data("width");
            if ((t && this.$container.css("max-width", `${t}px`), !e))
              return !1;
            let s = this.$attachElement.data("condition");
            if (s) {
              let e = s.split(":");
              if (
                e.length >= 1 &&
                "class" === e[0] &&
                e.length >= 2 &&
                !this.$attachElement.hasClass(e[1].trim())
              )
                return !1;
            }
            let n = this.$attachElement.data("position");
            if (n)
              switch (n) {
                case "top-right":
                  this.position = i.Fz.TopRight;
                  break;
                case "top-center":
                  this.position = i.Fz.TopCenter;
                  break;
                case "top-left":
                  this.position = i.Fz.TopLeft;
                  break;
                case "bottom-right":
                  this.position = i.Fz.BottomRight;
                  break;
                case "bottom-center":
                  this.position = i.Fz.BottomCenter;
                  break;
                case "bottom-left":
                  this.position = i.Fz.BottomLeft;
                  break;
                case "right-top":
                  this.position = i.Fz.RightTop;
                  break;
                case "right-center":
                  this.position = i.Fz.RightCenter;
                  break;
                case "left-top":
                  this.position = i.Fz.LeftTop;
                  break;
                case "left-center":
                  this.position = i.Fz.LeftCenter;
              }
          }
        }
        n(r, "targets", ["container"]);
      },
      24850: (e, t, s) => {
        "use strict";
        s.d(t, { y: () => d });
        var i = s(69555),
          o = s(96622),
          n = s(7042),
          r = s(15612),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.GI {
          constructor(e = !1, t = null) {
            super("common.filter_popup"),
              l(this, "classes", {
                actionsExternal: "filter-popup__actions--external",
              }),
              l(this, "doFilterBoxScroll", (e) => {
                o.UI.dropdownHideInContext(this.$filterBox);
              }),
              (this.onSubmit = null),
              (this.hasExternalAction = e),
              (this.externalActionLabel = t);
          }
          load() {
            this.$filterBox.on("scroll", this.doFilterBoxScroll),
              a.Z.requestChild(this.component, "filter", {
                events: {
                  selectfolders: (e) => this.events.trigger("selectfolders", e),
                },
              }),
              this.hasExternalAction &&
                (this.$actions.addClass(this.classes.actionsExternal),
                o.UI.setLinkActionText(
                  this.$externalActionLink,
                  this.externalActionLabel
                ));
          }
          unload() {
            this.$filterBox.off("scroll", this.doFilterBoxScroll);
          }
          doReset() {
            this.triggerSubmit(this.$resetButton, {
              filter: { conditions: [], mode: r.g.FiltersAll },
              labels: [],
            });
          }
          doExternalAction() {
            this.events.trigger("externalaction", { target: this });
          }
          doApply() {
            this.triggerSubmit(this.$applyButton, {
              filter: {
                conditions: this.components.filter.getConditions(),
                mode: o.UI.getRadio(this.$modeAnd)
                  ? r.g.FiltersAll
                  : r.g.FiltersAny,
              },
              labels: this.components.filter.getLabels(),
            });
          }
          triggerSubmit(e, t) {
            var s;
            return (
              o.UI.markLoading(e),
              n.l.hideValidationErrors(this.formViews),
              this.onSubmit && (s = this.onSubmit(t)),
              s || (s = Promise.resolve()),
              s
                .then(() => {
                  this.hide();
                })
                .catch((t) => {
                  o.UI.markCompleted(e),
                    n.l.handleFormError(t, this.formViews),
                    this.$filterBox.scrollTop(0);
                })
            );
          }
        }
        l(d, "targets", [
          "resetButton",
          "applyButton",
          "modeAnd",
          "filterBox",
          "externalActionLink",
          "actions",
        ]),
          l(d, "actions", ["doReset", "doApply", "doExternalAction"]),
          l(d, "forms", [{ name: "filter", fields: [] }]);
      },
      15331: (e, t, s) => {
        "use strict";
        s.d(t, { d: () => d });
        var i = s(69555),
          o = s(96622),
          n = s(7042),
          r = s(15612),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d extends i.GI {
          constructor() {
            super("common.filter_popup"),
              l(this, "doListActionClick", (e) => {
                "select" === e.actionName && this.doSelectListItem(e);
              }),
              l(this, "doListToggleChangeClick", (e) => {
                o.UI.setButtonEnabled(this.$applyButton),
                  this.events.trigger("change", {
                    target: this,
                    condition: this.getCondition(),
                    labels: this.getLabels(),
                  });
              }),
              (this.onSubmit = null);
          }
          load() {
            (this.type = this.$condition.data("type")),
              ("list" != this.type && "sectionList" != this.type) ||
                o.UI.setButtonDisabled(this.$applyButton),
              a.Z.requestChild(this.component, "list", {
                events: {
                  actionclick: this.doListActionClick,
                  togglechange: this.doListToggleChangeClick,
                },
              });
          }
          doReset() {
            this.triggerSubmit(this.$resetButton, {
              condition: {},
              labels: [],
            });
          }
          doSelectListItem(e) {
            let t = e.$row.data("id"),
              s = e.$row.data("label"),
              i = parseInt(this.$condition.data("format"), 10);
            i || (i = r.g.FiltersFormatInt),
              i == r.g.FiltersFormatInt && (t = parseInt(t, 10)),
              this.triggerSubmit(this.$applyButton, {
                condition: { values: [t] },
                labels: [s],
              });
          }
          doApply() {
            this.triggerSubmit(this.$applyButton, {
              condition: this.getCondition(),
              labels: this.getLabels(),
            });
          }
          triggerSubmit(e, t) {
            var s;
            return (
              o.UI.markLoading(e),
              n.l.hideValidationErrors(this.formViews),
              (this.success = !0),
              this.onSubmit && (s = this.onSubmit(t)),
              s || (s = Promise.resolve()),
              s
                .then(() => {
                  this.hide();
                })
                .catch((t) => {
                  o.UI.markCompleted(e), n.l.handleFormError(t, this.formViews);
                })
            );
          }
          getCondition() {
            let e = null;
            switch (this.type) {
              case "list":
                e = this.getListCondition();
                break;
              case "sectionList":
                e = this.getSectionListCondition();
            }
            return e;
          }
          getListCondition() {
            let e = a.Z.findComponent(this.$condition, "list"),
              t = e.getRows(),
              s = [];
            t.each((t, i) => {
              let n = $(i),
                r = e.getToggleForRow(n, "isSelected");
              o.UI.getCheckbox(r) && s.push(n.data("id"));
            });
            let i = parseInt(this.$condition.data("format"), 10);
            return (
              i || (i = r.g.FiltersFormatInt),
              i == r.g.FiltersFormatInt && (s = s.map((e) => parseInt(e, 10))),
              { values: s }
            );
          }
          getMultiListCondition(e) {
            let t = a.Z.findComponents(this.$condition, "list"),
              s = [];
            t.forEach((e) => {
              e.getRows().each((t, i) => {
                let n = $(i),
                  r = e.getToggleForRow(n, "isSelected");
                o.UI.getCheckbox(r) && s.push(n.data("id"));
              });
            });
            let i = parseInt(this.$condition.data("format"), 10);
            return (
              i || (i = r.g.FiltersFormatInt),
              i == r.g.FiltersFormatInt && (s = s.map((e) => parseInt(e, 10))),
              { values: s }
            );
          }
          getSectionListCondition() {
            return this.getMultiListCondition();
          }
          getLabels() {
            let e = null;
            switch (this.type) {
              case "list":
                e = this.getListLabels();
                break;
              case "sectionList":
                e = this.getSectionListLabels();
            }
            return e;
          }
          getListLabels() {
            let e = a.Z.findComponent(this.$condition, "list"),
              t = e.getRows(),
              s = [];
            return (
              t.each((t, i) => {
                let n = $(i),
                  r = e.getToggleForRow(n, "isSelected");
                o.UI.getCheckbox(r) && s.push(n.data("label").trim());
              }),
              s
            );
          }
          getMultiListLabels() {
            let e = a.Z.findComponents(this.$condition, "list"),
              t = [];
            for (let s of e)
              s.getRows().each((e, i) => {
                let n = $(i),
                  r = s.getToggleForRow(n, "isSelected");
                o.UI.getCheckbox(r) && t.push(n.data("label").trim());
              });
            return t;
          }
          getSectionListLabels() {
            return this.getMultiListLabels();
          }
        }
        l(d, "targets", ["resetButton", "applyButton", "condition"]),
          l(d, "actions", ["doReset", "doApply"]),
          l(d, "forms", [{ name: "filter", fields: [] }]);
      },
      50922: (e, t, s) => {
        "use strict";
        s.d(t, { m: () => o });
        var i = s(69555);
        class o extends i.GI {
          constructor() {
            super("milestones.hierarchy_popup");
          }
        }
      },
      51070: (e, t, s) => {
        "use strict";
        s.d(t, { r: () => o });
        var i = s(69555);
        class o extends i.GI {
          constructor() {
            super("sessions.transition_popup");
          }
        }
      },
      26734: (e, t, s) => {
        "use strict";
        s.d(t, { A: () => r });
        var i = s(8338),
          o = s(43689);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.T {
          static displayResponsiveTagLists(e, t, s) {
            e.each((e, i) => {
              let o = s(i),
                n = this.renderResponsiveList(
                  t,
                  o,
                  this.widths.spaceBetween,
                  (e) => this.getTagWidth(e),
                  (e) => this.renderTag(e),
                  (e) => this.getMoreWidth(e),
                  (e) => this.renderMore(e),
                  (e) => this.renderTotal(e)
                );
              i.innerHTML = n;
            });
          }
          static renderTag(e) {
            return o.Z.template(this.templates.tag, { name: e });
          }
          static getTagWidth(e) {
            return (
              this.widths.iconWidth +
              this.widths.padding +
              this.measureText(e, i.z.Default)
            );
          }
          static renderMore(e) {
            return o.Z.template(this.templates.more, { count: e });
          }
          static getMoreWidth(e) {
            return (
              this.widths.iconWidth +
              this.widths.padding +
              this.measureText(e.toString(), i.z.Default)
            );
          }
          static renderTotal(e) {
            return 1 == e
              ? o.Z.template(this.templates.totalSingle, {
                  text: o.Z.lang("tags.tags_single", { count: e }),
                })
              : o.Z.template(this.templates.totalMulti, {
                  text: o.Z.lang("tags.tags_multi", { count: e }),
                });
          }
        }
        n(r, "templates", {
          tag: '<div class="tag"><i class="far fa-tag icon-tag fa-fw"></i>$(name)</div>',
          more: '<div class="tag tag--plus"><i class="far fa-plus icon-plus fa-fw"></i>$(count)</div>',
          totalSingle: '<div class="tag tag--total">$(text)</div>',
          totalMulti: '<div class="tag tag--total">$(text)</div>',
        }),
          n(r, "widths", { spaceBetween: 6, iconWidth: 20, padding: 16 });
      },
      87762: (e, t, s) => {
        "use strict";
        s.d(t, { m: () => r });
        var i = s(8338),
          o = s(43689);
        function n(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class r extends i.T {
          static displayResponsiveValueLists(e, t, s) {
            e.each((e, i) => {
              let o = s(i),
                n = this.renderResponsiveList(
                  t,
                  o,
                  this.widths.spaceBetween,
                  (e) => this.getValueWidth(e),
                  (e) => this.renderValue(e),
                  (e) => this.getMoreWidth(e),
                  (e) => this.renderMore(e),
                  (e) => this.renderTotal(e)
                );
              i.innerHTML = n;
            });
          }
          static renderValue(e) {
            return e.icon && e.color
              ? o.Z.template(this.templates.valueColoredIconText, {
                  name: e.name,
                  icon: e.icon,
                  color: e.color,
                })
              : e.icon
              ? o.Z.template(this.templates.valueIconText, {
                  name: e.name,
                  icon: e.icon,
                })
              : o.Z.template(this.templates.valueText, { name: e.name });
          }
          static getValueWidth(e) {
            return (
              (e.icon ? this.widths.iconWidth : 0) +
              this.widths.padding +
              this.measureText(e.name, i.z.Default)
            );
          }
          static renderMore(e) {
            return o.Z.template(this.templates.more, { count: e });
          }
          static getMoreWidth(e) {
            return (
              this.widths.plusIconWidth +
              this.widths.padding +
              this.measureText(e.toString(), i.z.Default)
            );
          }
          static renderTotal(e) {
            return 1 == e
              ? o.Z.template(this.templates.totalSingle, {
                  text: o.Z.lang("values.values_single", { count: e }),
                })
              : o.Z.template(this.templates.totalMulti, {
                  text: o.Z.lang("values.values_multi", { count: e }),
                });
          }
        }
        n(r, "templates", {
          valueText: '<div class="value-tag">$(name)</div>',
          valueIconText:
            '<div class="value-tag"><i class="far fa-fw fa-$(icon)"></i>$(name)</div>',
          valueColoredIconText:
            '<div class="value-tag"><span style="color: #$(color)"><i class="far fa-fw fa-$(icon)"></i></span>$(name)</div>',
          more: '<div class="value-tag value-tag--plus"><i class="far fa-plus icon-plus fa-fw"></i>$(count)</div>',
          totalSingle: '<div class="value-tag value-tag--total">$(text)</div>',
          totalMulti: '<div class="value-tag value-tag--total">$(text)</div>',
        }),
          n(r, "widths", {
            spaceBetween: 6,
            plusIconWidth: 20,
            iconWidth: 24,
            padding: 16,
          });
      },
      7045: (e, t, s) => {
        "use strict";
        s.d(t, { A: () => l });
        var i = s(8338),
          o = s(43689),
          n = s(13814),
          r = s(11478);
        function a(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class l extends i.T {
          static displayResponsiveTagLists(e, t, s) {
            e.each((e, i) => {
              let o = s(i),
                n = this.renderResponsiveList(
                  t,
                  o,
                  this.widths.spaceBetween,
                  (e) => this.getTagWidth(e),
                  (e) => this.renderTag(e),
                  (e) => this.getMoreWidth(e),
                  (e) => this.renderMore(e),
                  (e) => this.renderTotal(e)
                );
              (n =
                this.templates.issueListStart +
                n +
                this.templates.issueListEnd),
                (i.innerHTML = n);
            });
          }
          static renderTag(e) {
            let t;
            e.can_link && e.is_active
              ? ((t = document.createElement("a")),
                t.setAttribute("href", n.N.url("issues/redirect/" + e.id)),
                t.setAttribute("target", "_blank"),
                t.setAttribute("data-turbolinks", "false"),
                t.setAttribute("rel", "noopener"))
              : (t = document.createElement("div")),
              t.setAttribute("dusk", "issueTag"),
              t.setAttribute("data-id", e.id),
              t.setAttribute("data-issue-type", e.type),
              t.classList.add("issue-tag"),
              e.is_active ||
                (t.classList.add("tooltip"),
                t.setAttribute(
                  "data-content",
                  o.Z.lang("issues.target_disabled_tooltip")
                )),
              e.can_lookup &&
                e.is_active &&
                t.classList.add("issue-tag--can-lookup"),
              e.can_link &&
                e.is_active &&
                t.classList.add("issue-tag--can-link");
            let s = document.createElement("div");
            s.classList.add("issue-tag__tag");
            let i = document.createElement("div");
            i.classList.add("issue-tag__image");
            let a = document.createElement("img");
            a.setAttribute(
              "src",
              n.N.assetUrl(r.d.getThirdpartyMarkByIssueTargetType(e.type))
            );
            let l = document.createElement("div");
            l.classList.add("issue-tag__text"), (l.textContent = e.display_id);
            let d = document.createElement("div");
            d.classList.add("issue-tag__spacer");
            let h = document.createElement("div");
            return (
              h.classList.add("issue-tag__lookup"),
              h.classList.add("mobile"),
              h.classList.add("hidden"),
              h.setAttribute("dusk", "issueTagLookupIcon"),
              h.setAttribute(
                "data-action",
                "click->components--issue-list#doLookupIssue"
              ),
              (h.innerHTML = this.templates.issueTagLookupIcon),
              i.appendChild(a),
              s.appendChild(i),
              s.appendChild(l),
              t.appendChild(s),
              t.appendChild(d),
              e.can_lookup && e.is_active && t.appendChild(h),
              t.outerHTML
            );
          }
          static getTagWidth(e) {
            return (
              this.widths.imageWidth +
              this.widths.padding +
              this.measureText(e.display_id, i.z.Default)
            );
          }
          static renderMore(e) {
            return o.Z.template(this.templates.more, { count: e });
          }
          static getMoreWidth(e) {
            return (
              this.widths.iconWidth +
              this.widths.padding +
              this.measureText(e.toString(), i.z.Default)
            );
          }
          static renderTotal(e) {
            return 1 == e
              ? o.Z.template(this.templates.totalSingle, {
                  text: o.Z.lang("tags.tags_single", { count: e }),
                })
              : o.Z.template(this.templates.totalMulti, {
                  text: o.Z.lang("tags.tags_multi", { count: e }),
                });
          }
        }
        a(l, "templates", {
          issueListStart:
            '<div class="issue-list" data-controller="components--issue-list"><div class="issue-table-tag-list">',
          issueListEnd: "</div></div>",
          issueTagLookupIcon: '<i class="fas fa-caret-down icon-dropdown"></i>',
          more: '<div class="tag tag--plus"><i class="far fa-plus icon-plus fa-fw"></i>$(count)</div>',
          totalSingle: '<div class="tag tag--total">$(text)</div>',
          totalMulti: '<div class="tag tag--total">$(text)</div>',
        }),
          a(l, "widths", {
            spaceBetween: 6,
            iconWidth: 20,
            imageWidth: 20,
            padding: 16,
          });
      },
      80714: (e, t, s) => {
        "use strict";
        s.d(t, { SJ: () => d, UL: () => h, Dv: () => c, FX: () => g });
        var i = s(58771),
          o = s(43689),
          n = s(69555),
          r = s(22153),
          a = s(5270);
        function l(e, t, s) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: s,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = s),
            e
          );
        }
        class d {
          static get Choice() {
            return 1;
          }
          static get Move() {
            return 2;
          }
          static get Copy() {
            return 3;
          }
        }
        class h {
          static get List() {
            return 1;
          }
          static get Tree() {
            return 2;
          }
        }
        class c {
          static get Before() {
            return 1;
          }
          static get After() {
            return 2;
          }
          static get Append() {
            return 3;
          }
        }
        class u {
          static get Before() {
            return 1;
          }
          static get After() {
            return 2;
          }
          static get Hover() {
            return 3;
          }
          static get AfterBetween() {
            return 4;
          }
        }
        class g {
          constructor() {
            l(this, "selectors", {
              listDragHandles:
                "td.table__field__action--moveable [data-action],\n            td.table__field__avatar-text--moveable .avatar",
              treeDragHandles:
                ".tree__node--moveable > .tree__node__entry .avatar",
              tableRow: "tr",
              tableRowWithoutHeader: "tr:not('.table__header')",
              treeNodeEntryContent: ".tree__node__entry__content",
              treeNode: ".tree__node",
              treeNodeEntry: ".tree__node__entry",
              treeNodeSubs: ".tree__node__subs",
              treeNodeContent: ".tree__node__entry__content",
              treeNodeExpandedExpandable:
                ".tree__node--expanded.tree__node--expandable",
              treeFirstChildNode:
                "> .tree__node__subs > .tree__node:first-child",
              lastChild: ":last-child",
            }),
              l(this, "classes", {
                bodyMoving: "mix-body--moving",
                rowDragging: "table__row--is-dragging",
                nodeDragging: "tree__node--is-dragging",
                labelVisible: "mix-mover-label--visible",
                labelCopying: "mix-mover-label--copying",
                labelMoving: "mix-mover-label--moving",
                listDropbarVisible: "mix-mover-list-drop-bar--visible",
                treeDropbarVisible: "mix-mover-tree-drop-bar--visible",
                treeNodeDraggingOver: "tree__node--dragging-over",
              }),
              l(this, "templates", {
                listLabel:
                  '<div class="mix-mover-label" dusk="moverListLabel">\n                <div class="mix-mover-label__selection">\n                    <div class="mix-mover-label__selection__grip">\n                        <i class="far fa-ellipsis-v"></i>\n                    </div>\n                    <div class="mix-mover-label__selection__content">\n                        <div class="avatar avatar--entity avatar--small-table">\n                            <div class="avatar__text">\n                                <div class="avatar__text__identifier">\n                                    <i class="far fa-$(icon) avatar__text__identifier--icon"></i>\n                                </div>\n                            </div>\n                        </div>\n                        $(content)\n                    </div>\n                    <div class="mix-mover-label__selection__copy">\n                        <i class="far fa-arrow-alt-up"></i>\n                        $(copy)\n                    </div>\n                    <div class="mix-mover-label__selection__move">\n                        <i class="far fa-angle-up"></i>\n                        $(move)\n                    </div>\n                </div>\n            </div>',
                listLabelIconSingle: "file",
                listLabelIconMulti: "copy",
                listDropBar:
                  '<div class="mix-mover-list-drop-bar">\n                <div class="mix-mover-list-drop-bar__pointer">\n                    <i class="far fa-angle-right"></i>\n                </div>\n            </div>',
                treeLabel:
                  '<div class="mix-mover-label" dusk="moverTreeLabel">\n                <div class="mix-mover-label__selection">\n                    <div class="mix-mover-label__selection__grip">\n                        <i class="far fa-ellipsis-v"></i>\n                    </div>\n                    <div class="mix-mover-label__selection__content">\n                        <div class="avatar avatar--raw  avatar--small-tree">\n                            <div class="avatar__text avatar__text--folder">\n                                <div class="avatar__text__identifier">\n                                    <i class="fas fa-folder icon-tree-folder avatar__text__identifier--icon"></i>\n                                </div>\n                            </div>\n                        </div>\n                        $(content)\n                    </div>\n                    <div class="mix-mover-label__selection__copy">\n                        <i class="far fa-arrow-alt-up"></i>\n                        $(copy)\n                    </div>\n                    <div class="mix-mover-label__selection__move">\n                        <i class="far fa-angle-up"></i>\n                        $(move)\n                    </div>\n                </div>\n            </div>',
                treeDropBar:
                  '<div class="mix-mover-tree-drop-bar">\n                <div class="mix-mover-tree-drop-bar__pointer">\n                    <i class="far fa-angle-right"></i>\n                </div>\n            </div>',
              }),
              l(this, "doListMouseDown", (e) => {
                1 == e.which && this.listDragStart(e, !0);
              }),
              l(this, "doListTouchStart", (e) => {
                this.listDragStart(e, !1);
              }),
              l(this, "doTreeMouseDown", (e) => {
                1 == e.which && this.treeDragStart(e, !0);
              }),
              l(this, "doTreeTouchStart", (e) => {
                this.treeDragStart(e, !1);
              }),
              (this.events = new i.U()),
              (this.$window = $(window)),
              (this.list = null),
              (this.tree = null),
              (this.mix = null);
          }
          setMix(e) {
            this.mix = e;
          }
          setList(e) {
            this.list &&
              (this.list.$element.on("mousedown", this.doListMouseDown),
              this.list.$element.on("touchstart", this.doListTouchStart)),
              (this.list = null),
              e &&
                ((this.list = e),
                this.list.$element.on("mousedown", this.doListMouseDown),
                this.list.$element.on("touchstart", this.doListTouchStart));
          }
          setTree(e) {
            this.tree &&
              (this.tree.$element.on("mousedown", this.doTreeMouseDown),
              this.tree.$element.on("touchstart", this.doTreeTouchStart)),
              (this.tree = null),
              e &&
                ((this.tree = e),
                this.tree.$element.on("mousedown", this.doTreeMouseDown),
                this.tree.$element.on("touchstart", this.doTreeTouchStart));
          }
          listDragStart(e, t) {
            let s = $(e.target);
            if (0 == s.closest(this.selectors.listDragHandles).length) return;
            t && e.preventDefault(), n.GI.hideAllPopups();
            let i,
              l = s.closest(this.selectors.tableRow);
            i = this.list.isRowSelected(l) ? this.list.getSelectedRows() : l;
            let u = $("body");
            u.addClass(this.classes.bodyMoving),
              i.addClass(this.classes.rowDragging);
            let g = o.Z.getEventPagePos(e),
              p = g.x,
              m = g.y,
              f = i.length,
              C =
                1 == f
                  ? i.data("name")
                  : o.Z.lang("mix.mover_label_cases_selected", { count: f }),
              b =
                1 == f
                  ? this.templates.listLabelIconSingle
                  : this.templates.listLabelIconMulti,
              I = $(
                o.Z.template(this.templates.listLabel, {
                  content: C,
                  icon: b,
                  copy: o.Z.lang("mix.mover_label_copy"),
                  move: o.Z.lang("mix.mover_label_move"),
                })
              );
            u.append(I);
            let w = this.mix.components.listContent.getBody(),
              v = this.mix.components.treeContent.getBody(),
              _ = $(this.templates.listDropBar);
            w.append(_);
            let S,
              x,
              k,
              T,
              y,
              E = new r.l(w.get(0), !0, !1),
              N = new r.l(v.get(0), !0, !0),
              U = document.documentElement.clientWidth,
              F = document.documentElement.clientHeight,
              A = null,
              P = () => {
                (S = I.outerWidth()),
                  (x = I.outerHeight()),
                  (k = Math.floor(x / 2)),
                  (T = U - S),
                  (y = F - x);
              },
              R = (e, t) => {
                let s = e,
                  i = t - k,
                  o = Math.max(0, Math.min(T, s)),
                  n = Math.max(0, Math.min(y, i));
                I.css({ left: `${o}px`, top: `${n}px` }), (p = e), (m = t);
              },
              M = (e) => {
                I.removeClass(this.classes.labelCopying),
                  I.removeClass(this.classes.labelMoving),
                  e.isCommandPressed || e.isControlPressed
                    ? I.addClass(this.classes.labelMoving)
                    : e.isShiftPressed && I.addClass(this.classes.labelCopying);
              },
              B = (e) => {
                if (e.target == h.List) {
                  _.addClass(this.classes.listDropbarVisible);
                  let t =
                    e.$element.position().top +
                    this.list.$element.position().top +
                    w.scrollTop();
                  e.position == c.Before
                    ? (t -= 2)
                    : (t += e.$element.height());
                  let s = w.scrollLeft() + 20,
                    i = w[0].clientWidth - 40;
                  _.css({ top: `${t}px`, left: `${s}px`, width: `${i}px` });
                } else
                  e.target == h.Tree &&
                    e.position == c.Append &&
                    e.$element
                      .closest(this.selectors.treeNode)
                      .addClass(this.classes.treeNodeDraggingOver);
              },
              D = (e) => {
                e.target == h.List
                  ? _.removeClass(this.classes.listDropbarVisible)
                  : e.target == h.Tree &&
                    e.position == c.Append &&
                    e.$element
                      .closest(this.selectors.treeNode)
                      .removeClass(this.classes.treeNodeDraggingOver);
              },
              L = (e) => {
                let t = o.Z.getEventPagePos(e);
                R(t.x, t.y);
                let s = null,
                  i = document.elementFromPoint(t.x, t.y),
                  n = $(i);
                if (o.Z.isSelfOrParentNode(i, this.list.element)) {
                  let e = n.closest(this.selectors.tableRowWithoutHeader);
                  if (0 == e.length) {
                    let s = document.elementFromPoint(t.x, t.y - 2),
                      i = $(s);
                    o.Z.isSelfOrParentNode(s, this.list.element) &&
                      (e = i.closest(this.selectors.tableRowWithoutHeader));
                  }
                  if (0 != e.length) {
                    let i = e.offset(),
                      o = e.height(),
                      n = i.top + Math.floor(o / 2);
                    s =
                      t.y < n
                        ? { target: h.List, $element: e, position: c.Before }
                        : { target: h.List, $element: e, position: c.After };
                  }
                } else if (o.Z.isSelfOrParentNode(i, this.tree.element)) {
                  let e = n.closest(this.selectors.treeNodeEntryContent);
                  if (0 == e.length) {
                    let s = document.elementFromPoint(t.x, t.y - 2),
                      i = $(s);
                    o.Z.isSelfOrParentNode(s, this.tree.element) &&
                      (e = i.closest(this.selectors.treeNodeEntryContent));
                  }
                  0 != e.length &&
                    (s = { target: h.Tree, $element: e, position: c.Append });
                }
                A && s
                  ? (A.target == s.target &&
                      A.position == s.position &&
                      A.$element[0] == s.$element[0]) ||
                    (D(A), B(s))
                  : (A && D(A), s && B(s)),
                  (A = s);
              },
              Z = (e) => {
                e.preventDefault();
              },
              j = (e) => {
                M(e.keys), P(), R(p, m);
              },
              z = (e) => {
                e.preventDefault();
              },
              V = (e) => {
                if (
                  (this.$window.off("mouseup", V),
                  this.$window.off("touchend", V),
                  this.$window.off("touchcancel", V),
                  this.$window.off("mousemove", L),
                  this.$window.off("touchmove", L),
                  this.$window.off("contextmenu", Z),
                  window.removeEventListener("touchmove", z, { passive: !1 }),
                  a.Z.events.off("modifierkeychange", j),
                  E.stop(),
                  N.stop(),
                  u.removeClass(this.classes.bodyMoving),
                  i.removeClass(this.classes.rowDragging),
                  I.remove(),
                  _.remove(),
                  A)
                ) {
                  D(A);
                  let e = d.Choice;
                  a.Z.keys.isControlPressed || a.Z.keys.isCommandPressed
                    ? (e = d.Move)
                    : a.Z.keys.isShiftPressed && (e = d.Copy);
                  let t =
                    A.target == h.Tree
                      ? A.$element.closest(this.selectors.treeNode)
                      : A.$element;
                  this.events.trigger("listdrop", {
                    target: this,
                    $dragRows: i,
                    $dropElement: t,
                    dropTarget: A.target,
                    dropPosition: A.position,
                    dropAction: e,
                    cursorX: p,
                    cursorY: m,
                  });
                }
              };
            M(a.Z.keys),
              P(),
              R(g.x, g.y),
              I.addClass(this.classes.labelVisible),
              this.$window.on("mouseup", V),
              this.$window.on("touchend", V),
              this.$window.on("touchcancel", V),
              this.$window.on("mousemove", L),
              this.$window.on("touchmove", L),
              this.$window.on("contextmenu", Z),
              window.addEventListener("touchmove", z, { passive: !1 }),
              a.Z.events.on("modifierkeychange", j),
              E.start(),
              N.start();
          }
          treeDragStart(e, t) {
            let s = $(e.target);
            if (0 == s.closest(this.selectors.treeDragHandles).length) return;
            t && e.preventDefault(), n.GI.hideAllPopups();
            let i = s.closest(this.selectors.treeNode),
              l = $("body");
            l.addClass(this.classes.bodyMoving),
              i.addClass(this.classes.nodeDragging);
            let g = o.Z.getEventPagePos(e),
              p = g.x,
              m = g.y,
              f = i.data("name"),
              C = $(
                o.Z.template(this.templates.treeLabel, {
                  content: f,
                  copy: o.Z.lang("mix.mover_label_copy"),
                  move: o.Z.lang("mix.mover_label_move"),
                })
              );
            l.append(C);
            let b = this.mix.components.listContent.getBody(),
              I = this.mix.components.treeContent.getBody(),
              w = $(this.templates.treeDropBar);
            I.append(w);
            let v,
              _,
              S,
              x,
              k,
              T = new r.l(b.get(0), !0, !1),
              y = new r.l(I.get(0), !0, !0),
              E = document.documentElement.clientWidth,
              N = document.documentElement.clientHeight,
              U = null,
              F = () => {
                (v = C.outerWidth()),
                  (_ = C.outerHeight()),
                  (S = Math.floor(_ / 2)),
                  (x = E - v),
                  (k = N - _);
              },
              A = (e, t) => {
                let s = e,
                  i = t - S,
                  o = Math.max(0, Math.min(x, s)),
                  n = Math.max(0, Math.min(k, i));
                C.css({ left: `${o}px`, top: `${n}px` }), (p = e), (m = t);
              },
              P = (e) => {
                C.removeClass(this.classes.labelCopying),
                  C.removeClass(this.classes.labelMoving),
                  e.isCommandPressed || e.isControlPressed
                    ? C.addClass(this.classes.labelMoving)
                    : e.isShiftPressed && C.addClass(this.classes.labelCopying);
              },
              R = (e, t) =>
                t == u.Before
                  ? { $node: e, position: c.Before }
                  : t == u.After
                  ? e.is(this.selectors.treeNodeExpandedExpandable)
                    ? {
                        $node: $(this.selectors.treeFirstChildNode, e),
                        position: c.Before,
                      }
                    : { $node: e, position: c.After }
                  : t == u.Hover
                  ? { $node: e, position: c.Append }
                  : t == u.AfterBetween
                  ? e.is(this.selectors.lastChild) &&
                    e.parent().is(this.selectors.treeNodeSubs) &&
                    !e.is(this.selectors.treeNodeExpandedExpandable)
                    ? {
                        $node: e.parents(this.selectors.treeNode).first(),
                        position: c.After,
                      }
                    : R(e, u.After)
                  : void 0,
              M = (e) => {
                if (e.target != h.Tree) return;
                let t = e.$element.closest(this.selectors.treeNode),
                  s = R(t, e.hoverPosition);
                if (s.position == c.Append)
                  s.$node.addClass(this.classes.treeNodeDraggingOver);
                else {
                  let e,
                    t = s.$node
                      .children(this.selectors.treeNodeEntry)
                      .find(this.selectors.treeNodeContent),
                    i = t.offset(),
                    o = I.offset(),
                    n = i.left - o.left + I.scrollLeft(),
                    r = t.width();
                  s.position == c.After
                    ? ((e =
                        i.top - o.top + s.$node.height() - 2 + I.scrollTop()),
                      w.css({ top: `${e}px`, left: `${n}px`, width: `${r}px` }),
                      w.addClass(this.classes.treeDropbarVisible))
                    : s.position == c.Before &&
                      ((e = i.top - o.top - 2 + I.scrollTop()),
                      w.css({ top: `${e}px`, left: `${n}px`, width: `${r}px` }),
                      w.addClass(this.classes.treeDropbarVisible));
                }
              },
              B = (e) => {
                if (e.target != h.Tree) return;
                let t = e.$element.closest(this.selectors.treeNode),
                  s = R(t, e.hoverPosition);
                s.position == c.Append
                  ? s.$node.removeClass(this.classes.treeNodeDraggingOver)
                  : w.removeClass(this.classes.treeDropbarVisible);
              },
              D = (e) => {
                let t = o.Z.getEventPagePos(e);
                A(t.x, t.y);
                let s = null,
                  i = document.elementFromPoint(t.x, t.y),
                  n = $(i);
                if (o.Z.isSelfOrParentNode(i, this.tree.element)) {
                  let e = !1,
                    i = n.closest(this.selectors.treeNodeEntryContent);
                  if (0 == i.length) {
                    let s = document.elementFromPoint(t.x, t.y - 2),
                      n = $(s);
                    o.Z.isSelfOrParentNode(s, this.tree.element) &&
                      ((i = n.closest(this.selectors.treeNodeEntryContent)),
                      (e = i.length > 0));
                  }
                  if (0 != i.length)
                    if (e)
                      s = {
                        target: h.Tree,
                        $element: i,
                        hoverPosition: u.AfterBetween,
                      };
                    else {
                      let e = i.offset(),
                        o = i.height(),
                        n = Math.floor(o / 4),
                        r = e.top + n,
                        a = e.top + o - n;
                      s =
                        t.y < r
                          ? {
                              target: h.Tree,
                              $element: i,
                              hoverPosition: u.Before,
                            }
                          : t.y > a
                          ? {
                              target: h.Tree,
                              $element: i,
                              hoverPosition: u.After,
                            }
                          : {
                              target: h.Tree,
                              $element: i,
                              hoverPosition: u.Hover,
                            };
                    }
                }
                U && s
                  ? (U.target == s.target &&
                      U.hoverPosition == s.hoverPosition &&
                      U.$element[0] == s.$element[0]) ||
                    (B(U), M(s))
                  : (U && B(U), s && M(s)),
                  (U = s);
              },
              L = (e) => {
                e.preventDefault();
              },
              Z = (e) => {
                P(e.keys), F(), A(p, m);
              },
              j = (e) => {
                e.preventDefault();
              },
              z = (e) => {
                if (
                  (this.$window.off("mouseup", z),
                  this.$window.off("touchend", z),
                  this.$window.off("touchcancel", z),
                  this.$window.off("mousemove", D),
                  this.$window.off("touchmove", D),
                  this.$window.off("contextmenu", L),
                  window.removeEventListener("touchmove", j, { passive: !1 }),
                  a.Z.events.off("modifierkeychange", Z),
                  T.stop(),
                  y.stop(),
                  l.removeClass(this.classes.bodyMoving),
                  i.removeClass(this.classes.nodeDragging),
                  C.remove(),
                  w.remove(),
                  U)
                ) {
                  B(U);
                  let e = d.Choice;
                  a.Z.keys.isControlPressed || a.Z.keys.isCommandPressed
                    ? (e = d.Move)
                    : a.Z.keys.isShiftPressed && (e = d.Copy);
                  let t = U.$element.closest(this.selectors.treeNode),
                    s = R(t, U.hoverPosition);
                  this.events.trigger("treedrop", {
                    target: this,
                    $dragNode: i,
                    $dropNode: s.$node,
                    dropPosition: s.position,
                    dropAction: e,
                    cursorX: p,
                    cursorY: m,
                  });
                }
              };
            P(a.Z.keys),
              F(),
              A(g.x, g.y),
              C.addClass(this.classes.labelVisible),
              this.$window.on("mouseup", z),
              this.$window.on("touchend", z),
              this.$window.on("touchcancel", z),
              this.$window.on("mousemove", D),
              this.$window.on("touchmove", D),
              this.$window.on("contextmenu", L),
              window.addEventListener("touchmove", j, { passive: !1 }),
              a.Z.events.on("modifierkeychange", Z),
              T.start(),
              y.start();
          }
        }
      },
      19968: (e, t, s) => {
        "use strict";
        s.d(t, { C: () => n });
        var i = s(58771),
          o = s(47914);
        class n {
          constructor() {
            (this.upDownTimer = null),
              (this.list = null),
              (this.tree = null),
              (this.events = new i.U());
          }
          setList(e) {
            this.list = e;
          }
          setTree(e) {
            this.tree = e;
          }
          triggerActivateItem(e) {
            return Promise.all(
              this.events.trigger("activateitem", {
                target: this,
                $row: e,
                id: e.data("id"),
              })
            );
          }
          triggerClearItem() {
            return Promise.all(
              this.events.trigger("clearitem", { target: this })
            );
          }
          next() {
            let e = () => {
                if (!this.list) return this.triggerClearItem();
                let e,
                  t = this.list.getActivatedRow();
                return (
                  (e =
                    t.length > 0
                      ? this.list.getNextRow(t)
                      : this.list.getRows().first()),
                  e.length > 0
                    ? this.triggerActivateItem(e)
                    : this.triggerClearItem()
                );
              },
              t = () => {
                if (!this.list) return this.triggerClearItem();
                let e = this.list.getRows().first();
                return e.length > 0
                  ? this.triggerActivateItem(e)
                  : this.triggerClearItem();
              },
              s = !!this.list,
              i = !!this.tree,
              o = !1,
              n = !1,
              r = !1,
              a = s && this.list.getRowCount() > 0;
            if (i) {
              let e = this.tree.getActivatedNode();
              e.length > 0 && (o = this.tree.getIsLastNode(e));
            }
            if (s) {
              n =
                this.list.getPaginationCurrent() ==
                this.list.getPaginationTotal();
              let e = this.list.getActivatedRow();
              e.length > 0 && (r = 0 == this.list.getNextRow(e).length);
            }
            return o && n && r
              ? Promise.resolve(!1)
              : !s || !a || (n && r)
              ? Promise.all(
                  this.events.trigger("nextgroup", { target: this })
                ).then(
                  () =>
                    new Promise((e, s) => {
                      setTimeout(() => {
                        t().then(e).catch(s);
                      }, 1);
                    })
                )
              : !n && r
              ? Promise.all(
                  this.events.trigger("nextpage", { target: this })
                ).then(
                  () =>
                    new Promise((t, s) => {
                      setTimeout(() => {
                        e().then(t).catch(s);
                      }, 1);
                    })
                )
              : e();
          }
          previous() {
            let e = () => {
                if (!this.list) return this.triggerClearItem();
                let e = this.list.getRows().last();
                return e.length > 0
                  ? this.triggerActivateItem(e)
                  : this.triggerClearItem();
              },
              t = !!this.list,
              s = !!this.tree,
              i = !1,
              o = !1,
              n = !1,
              r = t && this.list.getRowCount() > 0;
            if (s) {
              let e = this.tree.getActivatedNode();
              e.length > 0 && (i = this.tree.getIsFirstNode(e));
            }
            if (t) {
              o = 1 == this.list.getPaginationCurrent();
              let e = this.list.getActivatedRow();
              e.length > 0 && (n = 0 == this.list.getPreviousRow(e).length);
            }
            return i && o && n
              ? Promise.resolve(!1)
              : !t || !r || (o && n)
              ? Promise.all(
                  this.events.trigger("previousgroup", { target: this })
                ).then(
                  () =>
                    new Promise((t, s) => {
                      setTimeout(() => {
                        e().then(t).catch(s);
                      }, 1);
                    })
                )
              : !o && n
              ? Promise.all(
                  this.events.trigger("previouspage", { target: this })
                ).then(
                  () =>
                    new Promise((t, s) => {
                      setTimeout(() => {
                        e().then(t).catch(s);
                      }, 1);
                    })
                )
              : (() => {
                  if (!this.list) return this.triggerClearItem();
                  let e,
                    t = this.list.getActivatedRow();
                  return (
                    (e =
                      t.length > 0
                        ? this.list.getPreviousRow(t)
                        : this.list.getRows().first()),
                    e.length > 0
                      ? this.triggerActivateItem(e)
                      : this.triggerClearItem()
                  );
                })();
          }
          up() {
            if (!this.list) return;
            let e,
              t = this.list.getActivatedRow();
            (e =
              t.length > 0
                ? this.list.getPreviousRow(t)
                : this.list.getRows().first()),
              e.length > 0 &&
                (this.list.setActivatedRow(e),
                clearTimeout(this.upDownTimer),
                (this.upDownTimer = setTimeout(() => {
                  this.events.trigger("activateitem", {
                    target: this,
                    $row: e,
                    id: e.data("id"),
                  }),
                    (this.upDownTimer = null);
                }, o.X.NavigatorActivateDelay)));
          }
          down() {
            if (!this.list) return;
            let e,
              t = this.list.getActivatedRow();
            (e =
              t.length > 0
                ? this.list.getNextRow(t)
                : this.list.getRows().first()),
              e.length > 0 &&
                (this.list.setActivatedRow(e),
                clearTimeout(this.upDownTimer),
                (this.upDownTimer = setTimeout(() => {
                  this.events.trigger("activateitem", {
                    target: this,
                    $row: e,
                    id: e.data("id"),
                  }),
                    (this.upDownTimer = null);
                }, o.X.NavigatorActivateDelay)));
          }
        }
      },
      67827: () => {
        !(function (e, t, s, i) {
          (e.isFunction =
            e.isFunction ||
            function (e) {
              return "function" == typeof e && "number" != typeof e.nodeType;
            }),
            (e.site = e.fn.site =
              function (o) {
                var n,
                  r,
                  a = new Date().getTime(),
                  l = [],
                  d = arguments[0],
                  h = "string" == typeof d,
                  c = [].slice.call(arguments, 1),
                  u = e.isPlainObject(o)
                    ? e.extend(!0, {}, e.site.settings, o)
                    : e.extend({}, e.site.settings),
                  g = u.namespace,
                  p = u.error,
                  m = "module-" + g,
                  f = e(s),
                  C = f,
                  b = this,
                  I = C.data(m);
                return (
                  (n = {
                    initialize: function () {
                      n.instantiate();
                    },
                    instantiate: function () {
                      n.verbose("Storing instance of site", n),
                        (I = n),
                        C.data(m, n);
                    },
                    normalize: function () {
                      n.fix.console(), n.fix.requestAnimationFrame();
                    },
                    fix: {
                      console: function () {
                        n.debug("Normalizing window.console"),
                          (console !== i && console.log !== i) ||
                            (n.verbose(
                              "Console not available, normalizing events"
                            ),
                            n.disable.console()),
                          (void 0 !== console.group &&
                            void 0 !== console.groupEnd &&
                            void 0 !== console.groupCollapsed) ||
                            (n.verbose(
                              "Console group not available, normalizing events"
                            ),
                            (t.console.group = function () {}),
                            (t.console.groupEnd = function () {}),
                            (t.console.groupCollapsed = function () {})),
                          void 0 === console.markTimeline &&
                            (n.verbose(
                              "Mark timeline not available, normalizing events"
                            ),
                            (t.console.markTimeline = function () {}));
                      },
                      consoleClear: function () {
                        n.debug("Disabling programmatic console clearing"),
                          (t.console.clear = function () {});
                      },
                      requestAnimationFrame: function () {
                        n.debug("Normalizing requestAnimationFrame"),
                          t.requestAnimationFrame === i &&
                            (n.debug(
                              "RequestAnimationFrame not available, normalizing event"
                            ),
                            (t.requestAnimationFrame =
                              t.requestAnimationFrame ||
                              t.mozRequestAnimationFrame ||
                              t.webkitRequestAnimationFrame ||
                              t.msRequestAnimationFrame ||
                              function (e) {
                                setTimeout(e, 0);
                              }));
                      },
                    },
                    moduleExists: function (t) {
                      return e.fn[t] !== i && e.fn[t].settings !== i;
                    },
                    enabled: {
                      modules: function (t) {
                        var s = [];
                        return (
                          (t = t || u.modules),
                          e.each(t, function (e, t) {
                            n.moduleExists(t) && s.push(t);
                          }),
                          s
                        );
                      },
                    },
                    disabled: {
                      modules: function (t) {
                        var s = [];
                        return (
                          (t = t || u.modules),
                          e.each(t, function (e, t) {
                            n.moduleExists(t) || s.push(t);
                          }),
                          s
                        );
                      },
                    },
                    change: {
                      setting: function (t, s, o, r) {
                        (o =
                          "string" == typeof o
                            ? "all" === o
                              ? u.modules
                              : [o]
                            : o || u.modules),
                          (r = r === i || r),
                          e.each(o, function (i, o) {
                            var a,
                              l =
                                !n.moduleExists(o) ||
                                e.fn[o].settings.namespace ||
                                !1;
                            n.moduleExists(o) &&
                              (n.verbose("Changing default setting", t, s, o),
                              (e.fn[o].settings[t] = s),
                              r &&
                                l &&
                                (a = e(":data(module-" + l + ")")).length > 0 &&
                                (n.verbose("Modifying existing settings", a),
                                a[o]("setting", t, s)));
                          });
                      },
                      settings: function (t, s, o) {
                        (s = "string" == typeof s ? [s] : s || u.modules),
                          (o = o === i || o),
                          e.each(s, function (s, i) {
                            var r;
                            n.moduleExists(i) &&
                              (n.verbose("Changing default setting", t, i),
                              e.extend(!0, e.fn[i].settings, t),
                              o &&
                                g &&
                                (r = e(":data(module-" + g + ")")).length > 0 &&
                                (n.verbose("Modifying existing settings", r),
                                r[i]("setting", t)));
                          });
                      },
                    },
                    enable: {
                      console: function () {
                        n.console(!0);
                      },
                      debug: function (e, t) {
                        (e = e || u.modules),
                          n.debug("Enabling debug for modules", e),
                          n.change.setting("debug", !0, e, t);
                      },
                      verbose: function (e, t) {
                        (e = e || u.modules),
                          n.debug("Enabling verbose debug for modules", e),
                          n.change.setting("verbose", !0, e, t);
                      },
                    },
                    disable: {
                      console: function () {
                        n.console(!1);
                      },
                      debug: function (e, t) {
                        (e = e || u.modules),
                          n.debug("Disabling debug for modules", e),
                          n.change.setting("debug", !1, e, t);
                      },
                      verbose: function (e, t) {
                        (e = e || u.modules),
                          n.debug("Disabling verbose debug for modules", e),
                          n.change.setting("verbose", !1, e, t);
                      },
                    },
                    console: function (e) {
                      if (e) {
                        if (I.cache.console === i)
                          return void n.error(p.console);
                        n.debug("Restoring console function"),
                          (t.console = I.cache.console);
                      } else
                        n.debug("Disabling console function"),
                          (I.cache.console = t.console),
                          (t.console = {
                            clear: function () {},
                            error: function () {},
                            group: function () {},
                            groupCollapsed: function () {},
                            groupEnd: function () {},
                            info: function () {},
                            log: function () {},
                            markTimeline: function () {},
                            warn: function () {},
                          });
                    },
                    destroy: function () {
                      n.verbose("Destroying previous site for", C),
                        C.removeData(m);
                    },
                    cache: {},
                    setting: function (t, s) {
                      if (e.isPlainObject(t)) e.extend(!0, u, t);
                      else {
                        if (s === i) return u[t];
                        u[t] = s;
                      }
                    },
                    internal: function (t, s) {
                      if (e.isPlainObject(t)) e.extend(!0, n, t);
                      else {
                        if (s === i) return n[t];
                        n[t] = s;
                      }
                    },
                    debug: function () {
                      u.debug &&
                        (u.performance
                          ? n.performance.log(arguments)
                          : ((n.debug = Function.prototype.bind.call(
                              console.info,
                              console,
                              u.name + ":"
                            )),
                            n.debug.apply(console, arguments)));
                    },
                    verbose: function () {
                      u.verbose &&
                        u.debug &&
                        (u.performance
                          ? n.performance.log(arguments)
                          : ((n.verbose = Function.prototype.bind.call(
                              console.info,
                              console,
                              u.name + ":"
                            )),
                            n.verbose.apply(console, arguments)));
                    },
                    error: function () {
                      (n.error = Function.prototype.bind.call(
                        console.error,
                        console,
                        u.name + ":"
                      )),
                        n.error.apply(console, arguments);
                    },
                    performance: {
                      log: function (e) {
                        var t, s;
                        u.performance &&
                          ((s = (t = new Date().getTime()) - (a || t)),
                          (a = t),
                          l.push({
                            Element: b,
                            Name: e[0],
                            Arguments: [].slice.call(e, 1) || "",
                            "Execution Time": s,
                          })),
                          clearTimeout(n.performance.timer),
                          (n.performance.timer = setTimeout(
                            n.performance.display,
                            500
                          ));
                      },
                      display: function () {
                        var t = u.name + ":",
                          s = 0;
                        (a = !1),
                          clearTimeout(n.performance.timer),
                          e.each(l, function (e, t) {
                            s += t["Execution Time"];
                          }),
                          (t += " " + s + "ms"),
                          (console.group !== i || console.table !== i) &&
                            l.length > 0 &&
                            (console.groupCollapsed(t),
                            console.table
                              ? console.table(l)
                              : e.each(l, function (e, t) {
                                  console.log(
                                    t.Name + ": " + t["Execution Time"] + "ms"
                                  );
                                }),
                            console.groupEnd()),
                          (l = []);
                      },
                    },
                    invoke: function (t, s, o) {
                      var a,
                        l,
                        d,
                        h = I;
                      return (
                        (s = s || c),
                        (o = b || o),
                        "string" == typeof t &&
                          h !== i &&
                          ((t = t.split(/[\. ]/)),
                          (a = t.length - 1),
                          e.each(t, function (s, o) {
                            var r =
                              s != a
                                ? o +
                                  t[s + 1].charAt(0).toUpperCase() +
                                  t[s + 1].slice(1)
                                : t;
                            if (e.isPlainObject(h[r]) && s != a) h = h[r];
                            else {
                              if (h[r] !== i) return (l = h[r]), !1;
                              if (!e.isPlainObject(h[o]) || s == a)
                                return h[o] !== i
                                  ? ((l = h[o]), !1)
                                  : (n.error(p.method, t), !1);
                              h = h[o];
                            }
                          })),
                        e.isFunction(l)
                          ? (d = l.apply(o, s))
                          : l !== i && (d = l),
                        Array.isArray(r)
                          ? r.push(d)
                          : r !== i
                          ? (r = [r, d])
                          : d !== i && (r = d),
                        l
                      );
                    },
                  }),
                  h
                    ? (I === i && n.initialize(), n.invoke(d))
                    : (I !== i && n.destroy(), n.initialize()),
                  r !== i ? r : this
                );
              }),
            (e.site.settings = {
              name: "Site",
              namespace: "site",
              error: {
                console:
                  "Console cannot be restored, most likely it was overwritten outside of module",
                method: "The method you called is not defined.",
              },
              debug: !1,
              verbose: !1,
              performance: !0,
              modules: [
                "accordion",
                "api",
                "calendar",
                "checkbox",
                "dimmer",
                "dropdown",
                "embed",
                "form",
                "modal",
                "nag",
                "popup",
                "slider",
                "rating",
                "shape",
                "sidebar",
                "state",
                "sticky",
                "tab",
                "toast",
                "transition",
                "visibility",
                "visit",
              ],
              siteNamespace: "site",
              namespaceStub: {
                cache: {},
                config: {},
                sections: {},
                section: {},
                utilities: {},
              },
            }),
            e.extend(e.expr[":"], {
              data: e.expr.createPseudo
                ? e.expr.createPseudo(function (t) {
                    return function (s) {
                      return !!e.data(s, t);
                    };
                  })
                : function (t, s, i) {
                    return !!e.data(t, i[3]);
                  },
            });
        })(jQuery, window, document),
          (function (e, t, s, i) {
            "use strict";
            (e.isFunction =
              e.isFunction ||
              function (e) {
                return "function" == typeof e && "number" != typeof e.nodeType;
              }),
              (t =
                void 0 !== t && t.Math == Math
                  ? t
                  : "undefined" != typeof self && self.Math == Math
                  ? self
                  : Function("return this")()),
              (e.fn.form = function (o) {
                var n,
                  r = e(this),
                  a = r.selector || "",
                  l = new Date().getTime(),
                  d = [],
                  h = arguments[0],
                  c = arguments[1],
                  u = "string" == typeof h,
                  g = [].slice.call(arguments, 1);
                return (
                  r.each(function () {
                    var p,
                      m,
                      f,
                      C,
                      b,
                      I,
                      w,
                      v,
                      $,
                      _,
                      S,
                      x,
                      k,
                      T,
                      y,
                      E,
                      N = e(this),
                      U = this,
                      F = [],
                      A = !1,
                      P = !1,
                      R = !1,
                      M = ["clean", "clean"];
                    (E = {
                      initialize: function () {
                        E.get.settings(),
                          u
                            ? (y === i && E.instantiate(), E.invoke(h))
                            : (y !== i && (y.invoke("destroy"), E.refresh()),
                              E.verbose("Initializing form validation", N, b),
                              E.bindEvents(),
                              E.set.defaults(),
                              b.autoCheckRequired && E.set.autoCheck(),
                              E.instantiate());
                      },
                      instantiate: function () {
                        E.verbose("Storing instance of module", E),
                          (y = E),
                          N.data(k, E);
                      },
                      destroy: function () {
                        E.verbose("Destroying previous module", y),
                          E.removeEvents(),
                          N.removeData(k);
                      },
                      refresh: function () {
                        E.verbose("Refreshing selector cache"),
                          (p = N.find(v.field)),
                          (m = N.find(v.group)),
                          (f = N.find(v.message)),
                          N.find(v.prompt),
                          (C = N.find(v.submit)),
                          N.find(v.clear),
                          N.find(v.reset);
                      },
                      submit: function () {
                        E.verbose("Submitting form", N), (P = !0), N.submit();
                      },
                      attachEvents: function (t, s) {
                        (s = s || "submit"),
                          e(t).on("click" + T, function (e) {
                            E[s](), e.preventDefault();
                          });
                      },
                      bindEvents: function () {
                        E.verbose("Attaching form events"),
                          N.on("submit" + T, E.validate.form)
                            .on("blur" + T, v.field, E.event.field.blur)
                            .on("click" + T, v.submit, E.submit)
                            .on("click" + T, v.reset, E.reset)
                            .on("click" + T, v.clear, E.clear),
                          b.keyboardShortcuts &&
                            N.on("keydown" + T, v.field, E.event.field.keydown),
                          p.each(function (t, s) {
                            var i = e(s),
                              o = i.prop("type"),
                              n = E.get.changeEvent(o, i);
                            i.on(n + T, E.event.field.change);
                          }),
                          b.preventLeaving &&
                            e(t).on("beforeunload" + T, E.event.beforeUnload),
                          p.on("change click keyup keydown blur", function (e) {
                            E.determine.isDirty();
                          }),
                          N.on("dirty" + T, function (e) {
                            b.onDirty.call();
                          }),
                          N.on("clean" + T, function (e) {
                            b.onClean.call();
                          });
                      },
                      clear: function () {
                        p.each(function (t, s) {
                          var i = e(s),
                            o = i.parent(),
                            n = i.closest(m),
                            r = n.find(v.prompt),
                            a = i.closest(v.uiCalendar),
                            l = i.data(w.defaultValue) || "",
                            d = o.is(v.uiCheckbox),
                            h =
                              o.is(v.uiDropdown) &&
                              E.can.useElement("dropdown"),
                            c = a.length > 0 && E.can.useElement("calendar");
                          n.hasClass($.error) &&
                            (E.verbose("Resetting error on field", n),
                            n.removeClass($.error),
                            r.remove()),
                            h
                              ? (E.verbose("Resetting dropdown value", o, l),
                                o.dropdown("clear", !0))
                              : d
                              ? i.prop("checked", !1)
                              : c
                              ? a.calendar("clear")
                              : (E.verbose("Resetting field value", i, l),
                                i.val(""));
                        }),
                          E.remove.states();
                      },
                      reset: function () {
                        p.each(function (t, s) {
                          var o = e(s),
                            n = o.parent(),
                            r = o.closest(m),
                            a = o.closest(v.uiCalendar),
                            l = r.find(v.prompt),
                            d = o.data(w.defaultValue),
                            h = n.is(v.uiCheckbox),
                            c =
                              n.is(v.uiDropdown) &&
                              E.can.useElement("dropdown"),
                            u = a.length > 0 && E.can.useElement("calendar"),
                            g = r.hasClass($.error);
                          d !== i &&
                            (g &&
                              (E.verbose("Resetting error on field", r),
                              r.removeClass($.error),
                              l.remove()),
                            c
                              ? (E.verbose("Resetting dropdown value", n, d),
                                n.dropdown("restore defaults", !0))
                              : h
                              ? (E.verbose("Resetting checkbox value", n, d),
                                o.prop("checked", d))
                              : u
                              ? a.calendar("set date", d)
                              : (E.verbose("Resetting field value", o, d),
                                o.val(d)));
                        }),
                          E.remove.states();
                      },
                      determine: {
                        isValid: function () {
                          var t = !0;
                          return (
                            e.each(I, function (e, s) {
                              E.validate.field(s, e, !0) || (t = !1);
                            }),
                            t
                          );
                        },
                        isDirty: function (t) {
                          var s = !1;
                          p.each(function (t, i) {
                            var o,
                              n = e(i);
                            (o =
                              n.filter(v.checkbox).length > 0
                                ? E.is.checkboxDirty(n)
                                : E.is.fieldDirty(n)),
                              n.data(b.metadata.isDirty, o),
                              (s |= o);
                          }),
                            s ? E.set.dirty() : E.set.clean();
                        },
                      },
                      is: {
                        bracketedRule: function (e) {
                          return e.type && e.type.match(b.regExp.bracket);
                        },
                        shorthandRules: function (e) {
                          return "string" == typeof e || Array.isArray(e);
                        },
                        empty: function (e) {
                          return (
                            !e ||
                            0 === e.length ||
                            (e.is(v.checkbox)
                              ? !e.is(":checked")
                              : E.is.blank(e))
                          );
                        },
                        blank: function (e) {
                          return "" === String(e.val()).trim();
                        },
                        valid: function (t, s) {
                          var i = !0;
                          return t
                            ? (E.verbose("Checking if field is valid", t),
                              E.validate.field(I[t], t, !!s))
                            : (E.verbose("Checking if form is valid"),
                              e.each(I, function (e, t) {
                                E.is.valid(e, s) || (i = !1);
                              }),
                              i);
                        },
                        dirty: function () {
                          return R;
                        },
                        clean: function () {
                          return !R;
                        },
                        fieldDirty: function (e) {
                          var t = e.data(w.defaultValue);
                          null == t
                            ? (t = "")
                            : Array.isArray(t) && (t = t.toString());
                          var s = e.val();
                          null == s
                            ? (s = "")
                            : Array.isArray(s) && (s = s.toString());
                          var i = /^(true|false)$/i;
                          return i.test(t) && i.test(s)
                            ? !new RegExp("^" + t + "$", "i").test(s)
                            : s !== t;
                        },
                        checkboxDirty: function (e) {
                          return e.data(w.defaultValue) !== e.is(":checked");
                        },
                        justDirty: function () {
                          return "dirty" === M[0];
                        },
                        justClean: function () {
                          return "clean" === M[0];
                        },
                      },
                      removeEvents: function () {
                        N.off(T), p.off(T), C.off(T), p.off(T);
                      },
                      event: {
                        field: {
                          keydown: function (t) {
                            var s = e(this),
                              i = t.which,
                              o = s.is(v.input),
                              n = s.is(v.checkbox),
                              r = s.closest(v.uiDropdown).length > 0;
                            27 == i &&
                              (E.verbose("Escape key pressed blurring field"),
                              s[0].blur()),
                              t.ctrlKey ||
                                13 != i ||
                                !o ||
                                r ||
                                n ||
                                (A ||
                                  (s.one("keyup" + T, E.event.field.keyup),
                                  E.submit(),
                                  E.debug(
                                    "Enter pressed on input submitting form"
                                  )),
                                (A = !0));
                          },
                          keyup: function () {
                            A = !1;
                          },
                          blur: function (t) {
                            var s = e(this),
                              i = s.closest(m),
                              o = E.get.validation(s);
                            o &&
                              ("blur" == b.on ||
                                (i.hasClass($.error) && b.revalidate)) &&
                              (E.debug("Revalidating field", s, o),
                              E.validate.field(o),
                              b.inline || E.validate.form(!1, !0));
                          },
                          change: function (t) {
                            var s = e(this),
                              i = s.closest(m),
                              o = E.get.validation(s);
                            o &&
                              ("change" == b.on ||
                                (i.hasClass($.error) && b.revalidate)) &&
                              (clearTimeout(E.timer),
                              (E.timer = setTimeout(function () {
                                E.debug("Revalidating field", s, o),
                                  E.validate.field(o),
                                  b.inline || E.validate.form(!1, !0);
                              }, b.delay)));
                          },
                        },
                        beforeUnload: function (e) {
                          if (E.is.dirty() && !P)
                            return (
                              (e = e || t.event) &&
                                (e.returnValue = b.text.leavingMessage),
                              b.text.leavingMessage
                            );
                        },
                      },
                      get: {
                        ancillaryValue: function (e) {
                          return (
                            !(
                              !e.type ||
                              (!e.value && !E.is.bracketedRule(e))
                            ) &&
                            (e.value !== i
                              ? e.value
                              : e.type.match(b.regExp.bracket)[1] + "")
                          );
                        },
                        ruleName: function (e) {
                          return E.is.bracketedRule(e)
                            ? e.type.replace(
                                e.type.match(b.regExp.bracket)[0],
                                ""
                              )
                            : e.type;
                        },
                        changeEvent: function (e, t) {
                          return "checkbox" == e ||
                            "radio" == e ||
                            "hidden" == e ||
                            t.is("select")
                            ? "change"
                            : E.get.inputEvent();
                        },
                        inputEvent: function () {
                          return s.createElement("input").oninput !== i
                            ? "input"
                            : s.createElement("input").onpropertychange !== i
                            ? "propertychange"
                            : "keyup";
                        },
                        fieldsFromShorthand: function (t) {
                          var s = {};
                          return (
                            e.each(t, function (t, i) {
                              Array.isArray(i) || "object" != typeof i
                                ? ("string" == typeof i && (i = [i]),
                                  (s[t] = { rules: [] }),
                                  e.each(i, function (e, i) {
                                    s[t].rules.push({ type: i });
                                  }))
                                : (s[t] = i);
                            }),
                            s
                          );
                        },
                        prompt: function (t, s) {
                          var i,
                            o,
                            n,
                            r = E.get.ruleName(t),
                            a = E.get.ancillaryValue(t),
                            l = E.get.field(s.identifier),
                            d = l.val(),
                            h = e.isFunction(t.prompt)
                              ? t.prompt(d)
                              : t.prompt ||
                                b.prompt[r] ||
                                b.text.unspecifiedRule,
                            c = -1 !== h.search("{value}"),
                            u = -1 !== h.search("{name}");
                          return (
                            a &&
                              a.indexOf("..") >= 0 &&
                              ((n = a.split("..", 2)),
                              t.prompt ||
                                (h += (
                                  "" === n[0]
                                    ? b.prompt.maxValue.replace(
                                        /\{ruleValue\}/g,
                                        "{max}"
                                      )
                                    : "" === n[1]
                                    ? b.prompt.minValue.replace(
                                        /\{ruleValue\}/g,
                                        "{min}"
                                      )
                                    : b.prompt.range
                                ).replace(/\{name\}/g, " " + b.text.and)),
                              (h = (h = h.replace(/\{min\}/g, n[0])).replace(
                                /\{max\}/g,
                                n[1]
                              ))),
                            c && (h = h.replace(/\{value\}/g, l.val())),
                            u &&
                              ((o =
                                1 ==
                                (i = l.closest(v.group).find("label").eq(0))
                                  .length
                                  ? i.text()
                                  : l.prop("placeholder") ||
                                    b.text.unspecifiedField),
                              (h = h.replace(/\{name\}/g, o))),
                            (h = (h = h.replace(
                              /\{identifier\}/g,
                              s.identifier
                            )).replace(/\{ruleValue\}/g, a)),
                            t.prompt ||
                              E.verbose(
                                "Using default validation prompt for type",
                                h,
                                r
                              ),
                            h
                          );
                        },
                        settings: function () {
                          if (e.isPlainObject(o)) {
                            var t = Object.keys(o);
                            t.length > 0 &&
                            o[t[0]].identifier !== i &&
                            o[t[0]].rules !== i
                              ? ((b = e.extend(!0, {}, e.fn.form.settings, c)),
                                (I = e.extend(
                                  {},
                                  e.fn.form.settings.defaults,
                                  o
                                )),
                                E.error(b.error.oldSyntax, U),
                                E.verbose(
                                  "Extending settings from legacy parameters",
                                  I,
                                  b
                                ))
                              : (o.fields &&
                                  (o.fields = E.get.fieldsFromShorthand(
                                    o.fields
                                  )),
                                (b = e.extend(!0, {}, e.fn.form.settings, o)),
                                (I = e.extend(
                                  {},
                                  e.fn.form.settings.defaults,
                                  b.fields
                                )),
                                E.verbose("Extending settings", I, b));
                          } else
                            (b = e.fn.form.settings),
                              (I = e.fn.form.settings.defaults),
                              E.verbose("Using default form validation", I, b);
                          (x = b.namespace),
                            (w = b.metadata),
                            (v = b.selector),
                            ($ = b.className),
                            (_ = b.regExp),
                            (S = b.error),
                            (k = "module-" + x),
                            (T = "." + x),
                            ((y = N.data(k)) || E).refresh();
                        },
                        field: function (t) {
                          var s;
                          return (
                            E.verbose("Finding field with identifier", t),
                            (t = E.escape.string(t)),
                            (s = p.filter("#" + t)).length > 0 ||
                            (s = p.filter('[name="' + t + '"]')).length > 0 ||
                            (s = p.filter('[name="' + t + '[]"]')).length > 0 ||
                            (s = p.filter(
                              "[data-" + w.validate + '="' + t + '"]'
                            )).length > 0
                              ? s
                              : e("<input/>")
                          );
                        },
                        fields: function (t) {
                          var s = e();
                          return (
                            e.each(t, function (e, t) {
                              s = s.add(E.get.field(t));
                            }),
                            s
                          );
                        },
                        validation: function (t) {
                          var s, i;
                          return (
                            !!I &&
                            (e.each(I, function (o, n) {
                              (i = n.identifier || o),
                                e.each(E.get.field(i), function (e, o) {
                                  if (o == t[0])
                                    return (n.identifier = i), (s = n), !1;
                                });
                            }),
                            s || !1)
                          );
                        },
                        value: function (e) {
                          var t = [];
                          return t.push(e), E.get.values.call(U, t)[e];
                        },
                        values: function (t) {
                          var s = Array.isArray(t) ? E.get.fields(t) : p,
                            o = {};
                          return (
                            s.each(function (t, s) {
                              var n = e(s),
                                r = n.closest(v.uiCalendar),
                                a = n.prop("name"),
                                l = n.val(),
                                d = n.is(v.checkbox),
                                h = n.is(v.radio),
                                c = -1 !== a.indexOf("[]"),
                                u =
                                  r.length > 0 && E.can.useElement("calendar"),
                                g = !!d && n.is(":checked");
                              if (a)
                                if (c)
                                  (a = a.replace("[]", "")),
                                    o[a] || (o[a] = []),
                                    d
                                      ? g
                                        ? o[a].push(l || !0)
                                        : o[a].push(!1)
                                      : o[a].push(l);
                                else if (h)
                                  (o[a] !== i && !1 !== o[a]) ||
                                    (o[a] = !!g && (l || !0));
                                else if (d) o[a] = !!g && (l || !0);
                                else if (u) {
                                  var p = r.calendar("get date");
                                  if (null !== p) {
                                    if ("date" == b.dateHandling) o[a] = p;
                                    else if ("input" == b.dateHandling)
                                      o[a] = r.calendar("get input date");
                                    else if ("formatter" == b.dateHandling) {
                                      var m = r.calendar("setting", "type");
                                      switch (m) {
                                        case "date":
                                          o[a] = b.formatter.date(p);
                                          break;
                                        case "datetime":
                                          o[a] = b.formatter.datetime(p);
                                          break;
                                        case "time":
                                          o[a] = b.formatter.time(p);
                                          break;
                                        case "month":
                                          o[a] = b.formatter.month(p);
                                          break;
                                        case "year":
                                          o[a] = b.formatter.year(p);
                                          break;
                                        default:
                                          E.debug("Wrong calendar mode", r, m),
                                            (o[a] = "");
                                      }
                                    }
                                  } else o[a] = "";
                                } else o[a] = l;
                            }),
                            o
                          );
                        },
                        dirtyFields: function () {
                          return p.filter(function (t, s) {
                            return e(s).data(w.isDirty);
                          });
                        },
                      },
                      has: {
                        field: function (e) {
                          return (
                            E.verbose(
                              "Checking for existence of a field with identifier",
                              e
                            ),
                            "string" != typeof (e = E.escape.string(e)) &&
                              E.error(S.identifier, e),
                            p.filter("#" + e).length > 0 ||
                              p.filter('[name="' + e + '"]').length > 0 ||
                              p.filter("[data-" + w.validate + '="' + e + '"]')
                                .length > 0
                          );
                        },
                      },
                      can: {
                        useElement: function (t) {
                          return (
                            e.fn[t] !== i ||
                            (E.error(S.noElement.replace("{element}", t)), !1)
                          );
                        },
                      },
                      escape: {
                        string: function (e) {
                          return (e = String(e)).replace(_.escape, "\\$&");
                        },
                      },
                      add: {
                        rule: function (e, t) {
                          E.add.field(e, t);
                        },
                        field: function (t, s) {
                          (I[t] !== i && I[t].rules !== i) ||
                            (I[t] = { rules: [] });
                          var o = { rules: [] };
                          E.is.shorthandRules(s)
                            ? ((s = Array.isArray(s) ? s : [s]),
                              e.each(s, function (e, t) {
                                o.rules.push({ type: t });
                              }))
                            : (o.rules = s.rules),
                            e.each(o.rules, function (s, i) {
                              0 ==
                                e.grep(I[t].rules, function (e) {
                                  return e.type == i.type;
                                }).length && I[t].rules.push(i);
                            }),
                            E.debug("Adding rules", o.rules, I);
                        },
                        fields: function (t) {
                          I = e.extend({}, I, E.get.fieldsFromShorthand(t));
                        },
                        prompt: function (e, t, s) {
                          var i = E.get.field(e).closest(m),
                            o = i.children(v.prompt),
                            n = 0 !== o.length;
                          (t = "string" == typeof t ? [t] : t),
                            E.verbose("Adding field error state", e),
                            s || i.addClass($.error),
                            b.inline &&
                              (n ||
                                (o = b.templates.prompt(t, $.label)).appendTo(
                                  i
                                ),
                              o.html(t[0]),
                              n
                                ? E.verbose(
                                    "Inline errors are disabled, no inline error added",
                                    e
                                  )
                                : b.transition &&
                                  E.can.useElement("transition") &&
                                  N.transition("is supported")
                                ? (E.verbose(
                                    "Displaying error with css transition",
                                    b.transition
                                  ),
                                  o.transition(
                                    b.transition + " in",
                                    b.duration
                                  ))
                                : (E.verbose(
                                    "Displaying error with fallback javascript animation"
                                  ),
                                  o.fadeIn(b.duration)));
                        },
                        errors: function (e) {
                          E.debug("Adding form error messages", e),
                            E.set.error(),
                            f.html(b.templates.error(e));
                        },
                      },
                      remove: {
                        errors: function () {
                          E.debug("Removing form error messages"), f.empty();
                        },
                        states: function () {
                          N.removeClass($.error).removeClass($.success),
                            b.inline || E.remove.errors(),
                            E.determine.isDirty();
                        },
                        rule: function (t, s) {
                          var o = Array.isArray(s) ? s : [s];
                          if (I[t] !== i && Array.isArray(I[t].rules))
                            return s === i
                              ? (E.debug("Removed all rules"),
                                void (I[t].rules = []))
                              : void e.each(I[t].rules, function (e, s) {
                                  s &&
                                    -1 !== o.indexOf(s.type) &&
                                    (E.debug("Removed rule", s.type),
                                    I[t].rules.splice(e, 1));
                                });
                        },
                        field: function (t) {
                          var s = Array.isArray(t) ? t : [t];
                          e.each(s, function (e, t) {
                            E.remove.rule(t);
                          });
                        },
                        rules: function (t, s) {
                          Array.isArray(t)
                            ? e.each(t, function (e, t) {
                                E.remove.rule(t, s);
                              })
                            : E.remove.rule(t, s);
                        },
                        fields: function (e) {
                          E.remove.field(e);
                        },
                        prompt: function (e) {
                          var t = E.get.field(e).closest(m),
                            s = t.children(v.prompt);
                          t.removeClass($.error),
                            b.inline &&
                              s.is(":visible") &&
                              (E.verbose("Removing prompt for field", e),
                              b.transition &&
                              E.can.useElement("transition") &&
                              N.transition("is supported")
                                ? s.transition(
                                    b.transition + " out",
                                    b.duration,
                                    function () {
                                      s.remove();
                                    }
                                  )
                                : s.fadeOut(b.duration, function () {
                                    s.remove();
                                  }));
                        },
                      },
                      set: {
                        success: function () {
                          N.removeClass($.error).addClass($.success);
                        },
                        defaults: function () {
                          p.each(function (t, s) {
                            var i = e(s),
                              o = i.parent(),
                              n = i.filter(v.checkbox).length > 0,
                              r =
                                o.is(v.uiDropdown) &&
                                E.can.useElement("dropdown"),
                              a = i.closest(v.uiCalendar),
                              l = a.length > 0 && E.can.useElement("calendar"),
                              d = n ? i.is(":checked") : i.val();
                            r
                              ? o.dropdown("save defaults")
                              : l && a.calendar("refresh"),
                              i.data(w.defaultValue, d),
                              i.data(w.isDirty, !1);
                          });
                        },
                        error: function () {
                          N.removeClass($.success).addClass($.error);
                        },
                        value: function (e, t) {
                          var s = {};
                          return (s[e] = t), E.set.values.call(U, s);
                        },
                        values: function (t) {
                          e.isEmptyObject(t) ||
                            e.each(t, function (t, s) {
                              var i,
                                o = E.get.field(t),
                                n = o.parent(),
                                r = o.closest(v.uiCalendar),
                                a = Array.isArray(s),
                                l =
                                  n.is(v.uiCheckbox) &&
                                  E.can.useElement("checkbox"),
                                d =
                                  n.is(v.uiDropdown) &&
                                  E.can.useElement("dropdown"),
                                h = o.is(v.radio) && l,
                                c =
                                  r.length > 0 && E.can.useElement("calendar");
                              o.length > 0 &&
                                (a && l
                                  ? (E.verbose("Selecting multiple", s, o),
                                    n.checkbox("uncheck"),
                                    e.each(s, function (e, t) {
                                      (i = o.filter('[value="' + t + '"]')),
                                        (n = i.parent()),
                                        i.length > 0 && n.checkbox("check");
                                    }))
                                  : h
                                  ? (E.verbose("Selecting radio value", s, o),
                                    o
                                      .filter('[value="' + s + '"]')
                                      .parent(v.uiCheckbox)
                                      .checkbox("check"))
                                  : l
                                  ? (E.verbose("Setting checkbox value", s, n),
                                    !0 === s || 1 === s
                                      ? n.checkbox("check")
                                      : n.checkbox("uncheck"))
                                  : d
                                  ? (E.verbose("Setting dropdown value", s, n),
                                    n.dropdown("set selected", s))
                                  : c
                                  ? r.calendar("set date", s)
                                  : (E.verbose("Setting field value", s, o),
                                    o.val(s)));
                            });
                        },
                        dirty: function () {
                          E.verbose("Setting state dirty"),
                            (R = !0),
                            (M[0] = M[1]),
                            (M[1] = "dirty"),
                            E.is.justClean() && N.trigger("dirty");
                        },
                        clean: function () {
                          E.verbose("Setting state clean"),
                            (R = !1),
                            (M[0] = M[1]),
                            (M[1] = "clean"),
                            E.is.justDirty() && N.trigger("clean");
                        },
                        asClean: function () {
                          E.set.defaults(), E.set.clean();
                        },
                        asDirty: function () {
                          E.set.defaults(), E.set.dirty();
                        },
                        autoCheck: function () {
                          E.debug("Enabling auto check on required fields"),
                            p.each(function (t, s) {
                              var o = e(s),
                                n = e(s).closest(m),
                                r = o.filter(v.checkbox).length > 0,
                                a =
                                  o.prop("required") ||
                                  n.hasClass($.required) ||
                                  n.parent().hasClass($.required),
                                l =
                                  o.is(":disabled") ||
                                  n.hasClass($.disabled) ||
                                  n.parent().hasClass($.disabled),
                                d = E.get.validation(o),
                                h =
                                  !!d &&
                                  0 !==
                                    e.grep(d.rules, function (e) {
                                      return "empty" == e.type;
                                    }),
                                c =
                                  d.identifier ||
                                  o.attr("id") ||
                                  o.attr("name") ||
                                  o.data(w.validate);
                              !a ||
                                l ||
                                h ||
                                c === i ||
                                (r
                                  ? (E.verbose(
                                      "Adding 'checked' rule on field",
                                      c
                                    ),
                                    E.add.rule(c, "checked"))
                                  : (E.verbose(
                                      "Adding 'empty' rule on field",
                                      c
                                    ),
                                    E.add.rule(c, "empty")));
                            });
                        },
                        optional: function (t, s) {
                          (s = !1 !== s),
                            e.each(I, function (e, i) {
                              (t != e && t != i.identifier) || (i.optional = s);
                            });
                        },
                      },
                      validate: {
                        form: function (t, s) {
                          var o = E.get.values();
                          if (A) return !1;
                          if (((F = []), E.determine.isValid())) {
                            if (
                              (E.debug(
                                "Form has no validation errors, submitting"
                              ),
                              E.set.success(),
                              b.inline || E.remove.errors(),
                              !0 !== s)
                            )
                              return b.onSuccess.call(U, t, o);
                          } else {
                            if (
                              (E.debug("Form has errors"),
                              (P = !1),
                              E.set.error(),
                              b.inline || E.add.errors(F),
                              t &&
                                N.data("moduleApi") !== i &&
                                t.stopImmediatePropagation(),
                              b.errorFocus)
                            ) {
                              var n,
                                r = !0;
                              "string" == typeof b.errorFocus
                                ? (r = (n = e(b.errorFocus)).is(
                                    "[tabindex]"
                                  )) || n.attr("tabindex", -1)
                                : (n = m
                                    .filter("." + $.error)
                                    .first()
                                    .find(v.field)),
                                n.focus(),
                                r || n.removeAttr("tabindex");
                            }
                            if (!0 !== s) return b.onFailure.call(U, F, o);
                          }
                        },
                        field: function (t, s, o) {
                          (o = o === i || o),
                            "string" == typeof t &&
                              (E.verbose("Validating field", t),
                              (s = t),
                              (t = I[t]));
                          var n = t.identifier || s,
                            r = E.get.field(n),
                            a = !!t.depends && E.get.field(t.depends),
                            l = !0,
                            d = [];
                          return (
                            t.identifier ||
                              (E.debug("Using field name as identifier", n),
                              (t.identifier = n)),
                            r.filter(":not(:disabled)").length
                              ? t.optional && E.is.blank(r)
                                ? E.debug(
                                    "Field is optional and blank. Skipping",
                                    n
                                  )
                                : t.depends && E.is.empty(a)
                                ? E.debug(
                                    "Field depends on another value that is not present or empty. Skipping",
                                    a
                                  )
                                : t.rules !== i &&
                                  (o && r.closest(m).removeClass($.error),
                                  e.each(t.rules, function (s, i) {
                                    if (E.has.field(n)) {
                                      var r = E.validate.rule(t, i, !0) || [];
                                      r.length > 0 &&
                                        (E.debug("Field is invalid", n, i.type),
                                        d.push(E.get.prompt(i, t)),
                                        (l = !1),
                                        o && e(r).closest(m).addClass($.error));
                                    }
                                  }))
                              : E.debug("Field is disabled. Skipping", n),
                            l
                              ? (o &&
                                  (E.remove.prompt(n, d), b.onValid.call(r)),
                                !0)
                              : (o &&
                                  ((F = F.concat(d)),
                                  E.add.prompt(n, d, !0),
                                  b.onInvalid.call(r, d)),
                                !1)
                          );
                        },
                        rule: function (t, s, o) {
                          var n = E.get.field(t.identifier),
                            r = E.get.ancillaryValue(s),
                            a = E.get.ruleName(s),
                            l = b.rules[a],
                            d = [],
                            h = n.is(v.checkbox),
                            c = function (t) {
                              var o = h
                                ? e(t).filter(":checked").val()
                                : e(t).val();
                              return (
                                (o =
                                  o === i || "" === o || null === o
                                    ? ""
                                    : (b.shouldTrim && !1 !== s.shouldTrim) ||
                                      s.shouldTrim
                                    ? String(o + "").trim()
                                    : String(o + "")),
                                l.call(t, o, r, N)
                              );
                            };
                          if (e.isFunction(l))
                            return (
                              h
                                ? c(n) || (d = n)
                                : e.each(n, function (e, t) {
                                    c(t) || d.push(t);
                                  }),
                              o ? d : !(d.length > 0)
                            );
                          E.error(S.noRule, a);
                        },
                      },
                      setting: function (t, s) {
                        if (e.isPlainObject(t)) e.extend(!0, b, t);
                        else {
                          if (s === i) return b[t];
                          b[t] = s;
                        }
                      },
                      internal: function (t, s) {
                        if (e.isPlainObject(t)) e.extend(!0, E, t);
                        else {
                          if (s === i) return E[t];
                          E[t] = s;
                        }
                      },
                      debug: function () {
                        !b.silent &&
                          b.debug &&
                          (b.performance
                            ? E.performance.log(arguments)
                            : ((E.debug = Function.prototype.bind.call(
                                console.info,
                                console,
                                b.name + ":"
                              )),
                              E.debug.apply(console, arguments)));
                      },
                      verbose: function () {
                        !b.silent &&
                          b.verbose &&
                          b.debug &&
                          (b.performance
                            ? E.performance.log(arguments)
                            : ((E.verbose = Function.prototype.bind.call(
                                console.info,
                                console,
                                b.name + ":"
                              )),
                              E.verbose.apply(console, arguments)));
                      },
                      error: function () {
                        b.silent ||
                          ((E.error = Function.prototype.bind.call(
                            console.error,
                            console,
                            b.name + ":"
                          )),
                          E.error.apply(console, arguments));
                      },
                      performance: {
                        log: function (e) {
                          var t, s;
                          b.performance &&
                            ((s = (t = new Date().getTime()) - (l || t)),
                            (l = t),
                            d.push({
                              Name: e[0],
                              Arguments: [].slice.call(e, 1) || "",
                              Element: U,
                              "Execution Time": s,
                            })),
                            clearTimeout(E.performance.timer),
                            (E.performance.timer = setTimeout(
                              E.performance.display,
                              500
                            ));
                        },
                        display: function () {
                          var t = b.name + ":",
                            s = 0;
                          (l = !1),
                            clearTimeout(E.performance.timer),
                            e.each(d, function (e, t) {
                              s += t["Execution Time"];
                            }),
                            (t += " " + s + "ms"),
                            a && (t += " '" + a + "'"),
                            r.length > 1 && (t += " (" + r.length + ")"),
                            (console.group !== i || console.table !== i) &&
                              d.length > 0 &&
                              (console.groupCollapsed(t),
                              console.table
                                ? console.table(d)
                                : e.each(d, function (e, t) {
                                    console.log(
                                      t.Name + ": " + t["Execution Time"] + "ms"
                                    );
                                  }),
                              console.groupEnd()),
                            (d = []);
                        },
                      },
                      invoke: function (t, s, o) {
                        var r,
                          a,
                          l,
                          d = y;
                        return (
                          (s = s || g),
                          (o = U || o),
                          "string" == typeof t &&
                            d !== i &&
                            ((t = t.split(/[\. ]/)),
                            (r = t.length - 1),
                            e.each(t, function (s, o) {
                              var n =
                                s != r
                                  ? o +
                                    t[s + 1].charAt(0).toUpperCase() +
                                    t[s + 1].slice(1)
                                  : t;
                              if (e.isPlainObject(d[n]) && s != r) d = d[n];
                              else {
                                if (d[n] !== i) return (a = d[n]), !1;
                                if (!e.isPlainObject(d[o]) || s == r)
                                  return d[o] !== i && ((a = d[o]), !1);
                                d = d[o];
                              }
                            })),
                          e.isFunction(a)
                            ? (l = a.apply(o, s))
                            : a !== i && (l = a),
                          Array.isArray(n)
                            ? n.push(l)
                            : n !== i
                            ? (n = [n, l])
                            : l !== i && (n = l),
                          a
                        );
                      },
                    }),
                      E.initialize();
                  }),
                  n !== i ? n : this
                );
              }),
              (e.fn.form.settings = {
                name: "Form",
                namespace: "form",
                debug: !1,
                verbose: !1,
                performance: !0,
                fields: !1,
                keyboardShortcuts: !0,
                on: "submit",
                inline: !1,
                delay: 200,
                revalidate: !0,
                shouldTrim: !0,
                transition: "scale",
                duration: 200,
                autoCheckRequired: !1,
                preventLeaving: !1,
                errorFocus: !1,
                dateHandling: "date",
                onValid: function () {},
                onInvalid: function () {},
                onSuccess: function () {
                  return !0;
                },
                onFailure: function () {
                  return !1;
                },
                onDirty: function () {},
                onClean: function () {},
                metadata: {
                  defaultValue: "default",
                  validate: "validate",
                  isDirty: "isDirty",
                },
                regExp: {
                  htmlID: /^[a-zA-Z][\w:.-]*$/g,
                  bracket: /\[(.*)\]/i,
                  decimal: /^\d+\.?\d*$/,
                  email:
                    /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,
                  escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|:,=@]/g,
                  flags: /^\/(.*)\/(.*)?/,
                  integer: /^\-?\d+$/,
                  number: /^\-?\d*(\.\d+)?$/,
                  url: /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/i,
                },
                text: {
                  and: "and",
                  unspecifiedRule: "Please enter a valid value",
                  unspecifiedField: "This field",
                  leavingMessage:
                    "There are unsaved changes on this page which will be discarded if you continue.",
                },
                prompt: {
                  range: "{name} must be in a range from {min} to {max}",
                  maxValue: "{name} must have a maximum value of {ruleValue}",
                  minValue: "{name} must have a minimum value of {ruleValue}",
                  empty: "{name} must have a value",
                  checked: "{name} must be checked",
                  email: "{name} must be a valid e-mail",
                  url: "{name} must be a valid url",
                  regExp: "{name} is not formatted correctly",
                  integer: "{name} must be an integer",
                  decimal: "{name} must be a decimal number",
                  number: "{name} must be set to a number",
                  is: '{name} must be "{ruleValue}"',
                  isExactly: '{name} must be exactly "{ruleValue}"',
                  not: '{name} cannot be set to "{ruleValue}"',
                  notExactly: '{name} cannot be set to exactly "{ruleValue}"',
                  contain: '{name} must contain "{ruleValue}"',
                  containExactly: '{name} must contain exactly "{ruleValue}"',
                  doesntContain: '{name} cannot contain  "{ruleValue}"',
                  doesntContainExactly:
                    '{name} cannot contain exactly "{ruleValue}"',
                  minLength: "{name} must be at least {ruleValue} characters",
                  length: "{name} must be at least {ruleValue} characters",
                  exactLength: "{name} must be exactly {ruleValue} characters",
                  maxLength:
                    "{name} cannot be longer than {ruleValue} characters",
                  match: "{name} must match {ruleValue} field",
                  different:
                    "{name} must have a different value than {ruleValue} field",
                  creditCard: "{name} must be a valid credit card number",
                  minCount: "{name} must have at least {ruleValue} choices",
                  exactCount: "{name} must have exactly {ruleValue} choices",
                  maxCount: "{name} must have {ruleValue} or less choices",
                },
                selector: {
                  checkbox: 'input[type="checkbox"], input[type="radio"]',
                  clear: ".clear",
                  field:
                    'input:not(.search):not([type="file"]), textarea, select',
                  group: ".field",
                  input: 'input:not([type="file"])',
                  message: ".error.message",
                  prompt: ".prompt.label",
                  radio: 'input[type="radio"]',
                  reset: '.reset:not([type="reset"])',
                  submit: '.submit:not([type="submit"])',
                  uiCheckbox: ".ui.checkbox",
                  uiDropdown: ".ui.dropdown",
                  uiCalendar: ".ui.calendar",
                },
                className: {
                  error: "error",
                  label: "ui basic red pointing prompt label",
                  pressed: "down",
                  success: "success",
                  required: "required",
                  disabled: "disabled",
                },
                error: {
                  identifier:
                    "You must specify a string identifier for each field",
                  method: "The method you called is not defined.",
                  noRule: "There is no rule matching the one you specified",
                  oldSyntax:
                    "Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.",
                  noElement: "This module requires ui {element}",
                },
                templates: {
                  error: function (t) {
                    var s = '<ul class="list">';
                    return (
                      e.each(t, function (e, t) {
                        s += "<li>" + t + "</li>";
                      }),
                      e((s += "</ul>"))
                    );
                  },
                  prompt: function (t, s) {
                    return e("<div/>").addClass(s).html(t[0]);
                  },
                },
                formatter: {
                  date: function (e) {
                    return Intl.DateTimeFormat("en-GB").format(e);
                  },
                  datetime: function (e) {
                    return Intl.DateTimeFormat("en-GB", {
                      year: "numeric",
                      month: "2-digit",
                      day: "2-digit",
                      hour: "2-digit",
                      minute: "2-digit",
                      second: "2-digit",
                    }).format(e);
                  },
                  time: function (e) {
                    return Intl.DateTimeFormat("en-GB", {
                      hour: "2-digit",
                      minute: "2-digit",
                      second: "2-digit",
                    }).format(e);
                  },
                  month: function (e) {
                    return Intl.DateTimeFormat("en-GB", {
                      month: "2-digit",
                      year: "numeric",
                    }).format(e);
                  },
                  year: function (e) {
                    return Intl.DateTimeFormat("en-GB", {
                      year: "numeric",
                    }).format(e);
                  },
                },
                rules: {
                  empty: function (e) {
                    return !(
                      e === i ||
                      "" === e ||
                      (Array.isArray(e) && 0 === e.length)
                    );
                  },
                  checked: function () {
                    return e(this).filter(":checked").length > 0;
                  },
                  email: function (t) {
                    return e.fn.form.settings.regExp.email.test(t);
                  },
                  url: function (t) {
                    return e.fn.form.settings.regExp.url.test(t);
                  },
                  regExp: function (t, s) {
                    if (s instanceof RegExp) return t.match(s);
                    var i,
                      o = s.match(e.fn.form.settings.regExp.flags);
                    return (
                      o &&
                        ((s = o.length >= 2 ? o[1] : s),
                        (i = o.length >= 3 ? o[2] : "")),
                      t.match(new RegExp(s, i))
                    );
                  },
                  minValue: function (t, s) {
                    return e.fn.form.settings.rules.range(
                      t,
                      s + "..",
                      "number"
                    );
                  },
                  maxValue: function (t, s) {
                    return e.fn.form.settings.rules.range(
                      t,
                      ".." + s,
                      "number"
                    );
                  },
                  integer: function (t, s) {
                    return e.fn.form.settings.rules.range(t, s, "integer");
                  },
                  range: function (t, s, o) {
                    var n, r, a;
                    return (
                      "string" == typeof o &&
                        (o = e.fn.form.settings.regExp[o]),
                      o instanceof RegExp ||
                        (o = e.fn.form.settings.regExp.integer),
                      s &&
                        -1 === ["", ".."].indexOf(s) &&
                        (-1 == s.indexOf("..")
                          ? o.test(s) && (n = r = s - 0)
                          : ((a = s.split("..", 2)),
                            o.test(a[0]) && (n = a[0] - 0),
                            o.test(a[1]) && (r = a[1] - 0))),
                      o.test(t) && (n === i || t >= n) && (r === i || t <= r)
                    );
                  },
                  decimal: function (t, s) {
                    return e.fn.form.settings.rules.range(t, s, "decimal");
                  },
                  number: function (t, s) {
                    return e.fn.form.settings.rules.range(t, s, "number");
                  },
                  is: function (e, t) {
                    return (
                      (t = "string" == typeof t ? t.toLowerCase() : t),
                      (e = "string" == typeof e ? e.toLowerCase() : e) == t
                    );
                  },
                  isExactly: function (e, t) {
                    return e == t;
                  },
                  not: function (e, t) {
                    return (
                      (e = "string" == typeof e ? e.toLowerCase() : e) !=
                      ("string" == typeof t ? t.toLowerCase() : t)
                    );
                  },
                  notExactly: function (e, t) {
                    return e != t;
                  },
                  contains: function (t, s) {
                    return (
                      (s = s.replace(e.fn.form.settings.regExp.escape, "\\$&")),
                      -1 !== t.search(new RegExp(s, "i"))
                    );
                  },
                  containsExactly: function (t, s) {
                    return (
                      (s = s.replace(e.fn.form.settings.regExp.escape, "\\$&")),
                      -1 !== t.search(new RegExp(s))
                    );
                  },
                  doesntContain: function (t, s) {
                    return (
                      (s = s.replace(e.fn.form.settings.regExp.escape, "\\$&")),
                      -1 === t.search(new RegExp(s, "i"))
                    );
                  },
                  doesntContainExactly: function (t, s) {
                    return (
                      (s = s.replace(e.fn.form.settings.regExp.escape, "\\$&")),
                      -1 === t.search(new RegExp(s))
                    );
                  },
                  minLength: function (e, t) {
                    return e !== i && e.length >= t;
                  },
                  length: function (e, t) {
                    return e !== i && e.length >= t;
                  },
                  exactLength: function (e, t) {
                    return e !== i && e.length == t;
                  },
                  maxLength: function (e, t) {
                    return e !== i && e.length <= t;
                  },
                  match: function (e, t, s) {
                    var o, n;
                    return (
                      (n = s.find('[data-validate="' + t + '"]')).length > 0 ||
                      (n = s.find("#" + t)).length > 0 ||
                      (n = s.find('[name="' + t + '"]')).length > 0
                        ? (o = n.val())
                        : (n = s.find('[name="' + t + '[]"]')).length > 0 &&
                          (o = n),
                      o !== i && e.toString() == o.toString()
                    );
                  },
                  different: function (e, t, s) {
                    var o, n;
                    return (
                      (n = s.find('[data-validate="' + t + '"]')).length > 0 ||
                      (n = s.find("#" + t)).length > 0 ||
                      (n = s.find('[name="' + t + '"]')).length > 0
                        ? (o = n.val())
                        : (n = s.find('[name="' + t + '[]"]')).length > 0 &&
                          (o = n),
                      o !== i && e.toString() !== o.toString()
                    );
                  },
                  creditCard: function (t, s) {
                    var i,
                      o,
                      n = {
                        visa: { pattern: /^4/, length: [16] },
                        amex: { pattern: /^3[47]/, length: [15] },
                        mastercard: { pattern: /^5[1-5]/, length: [16] },
                        discover: {
                          pattern:
                            /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,
                          length: [16],
                        },
                        unionPay: {
                          pattern: /^(62|88)/,
                          length: [16, 17, 18, 19],
                        },
                        jcb: { pattern: /^35(2[89]|[3-8][0-9])/, length: [16] },
                        maestro: {
                          pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
                          length: [12, 13, 14, 15, 16, 17, 18, 19],
                        },
                        dinersClub: { pattern: /^(30[0-5]|^36)/, length: [14] },
                        laser: {
                          pattern: /^(6304|670[69]|6771)/,
                          length: [16, 17, 18, 19],
                        },
                        visaElectron: {
                          pattern: /^(4026|417500|4508|4844|491(3|7))/,
                          length: [16],
                        },
                      },
                      r = {},
                      a = !1,
                      l = "string" == typeof s && s.split(",");
                    if ("string" == typeof t && 0 !== t.length) {
                      if (
                        ((t = t.replace(/[\s\-]/g, "")),
                        l &&
                          (e.each(l, function (s, i) {
                            (o = n[i]) &&
                              (r = {
                                length: -1 !== e.inArray(t.length, o.length),
                                pattern: -1 !== t.search(o.pattern),
                              }).length &&
                              r.pattern &&
                              (a = !0);
                          }),
                          !a))
                      )
                        return !1;
                      if (
                        (i = {
                          number: -1 !== e.inArray(t.length, n.unionPay.length),
                          pattern: -1 !== t.search(n.unionPay.pattern),
                        }).number &&
                        i.pattern
                      )
                        return !0;
                      for (
                        var d = t.length,
                          h = 0,
                          c = [
                            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
                            [0, 2, 4, 6, 8, 1, 3, 5, 7, 9],
                          ],
                          u = 0;
                        d--;

                      )
                        (u += c[h][parseInt(t.charAt(d), 10)]), (h ^= 1);
                      return u % 10 == 0 && u > 0;
                    }
                  },
                  minCount: function (e, t) {
                    return (
                      0 == t || (1 == t ? "" !== e : e.split(",").length >= t)
                    );
                  },
                  exactCount: function (e, t) {
                    return 0 == t
                      ? "" === e
                      : 1 == t
                      ? "" !== e && -1 === e.search(",")
                      : e.split(",").length == t;
                  },
                  maxCount: function (e, t) {
                    return (
                      0 != t &&
                      (1 == t ? -1 === e.search(",") : e.split(",").length <= t)
                    );
                  },
                },
              });
          })(jQuery, window, document),
          (function (e, t, s, i) {
            "use strict";
            (e.isFunction =
              e.isFunction ||
              function (e) {
                return "function" == typeof e && "number" != typeof e.nodeType;
              }),
              (t =
                void 0 !== t && t.Math == Math
                  ? t
                  : "undefined" != typeof self && self.Math == Math
                  ? self
                  : Function("return this")()),
              (e.fn.checkbox = function (o) {
                var n,
                  r = e(this),
                  a = r.selector || "",
                  l = new Date().getTime(),
                  d = [],
                  h = arguments[0],
                  c = "string" == typeof h,
                  u = [].slice.call(arguments, 1);
                return (
                  r.each(function () {
                    var r,
                      g,
                      p = e.extend(!0, {}, e.fn.checkbox.settings, o),
                      m = p.className,
                      f = p.namespace,
                      C = p.selector,
                      b = p.error,
                      I = "." + f,
                      w = "module-" + f,
                      v = e(this),
                      $ = e(this).children(C.label),
                      _ = e(this).children(C.input),
                      S = _[0],
                      x = !1,
                      k = !1,
                      T = v.data(w),
                      y = this;
                    (g = {
                      initialize: function () {
                        g.verbose("Initializing checkbox", p),
                          g.create.label(),
                          g.bind.events(),
                          g.set.tabbable(),
                          g.hide.input(),
                          g.observeChanges(),
                          g.instantiate(),
                          g.setup();
                      },
                      instantiate: function () {
                        g.verbose("Storing instance of module", g),
                          (T = g),
                          v.data(w, g);
                      },
                      destroy: function () {
                        g.verbose("Destroying module"),
                          g.unbind.events(),
                          g.show.input(),
                          v.removeData(w);
                      },
                      fix: {
                        reference: function () {
                          v.is(C.input) &&
                            (g.debug(
                              "Behavior called on <input> adjusting invoked element"
                            ),
                            (v = v.closest(C.checkbox)),
                            g.refresh());
                        },
                      },
                      setup: function () {
                        g.set.initialLoad(),
                          g.is.indeterminate()
                            ? (g.debug("Initial value is indeterminate"),
                              g.indeterminate())
                            : g.is.checked()
                            ? (g.debug("Initial value is checked"), g.check())
                            : (g.debug("Initial value is unchecked"),
                              g.uncheck()),
                          g.remove.initialLoad();
                      },
                      refresh: function () {
                        ($ = v.children(C.label)),
                          (_ = v.children(C.input)),
                          (S = _[0]);
                      },
                      hide: {
                        input: function () {
                          g.verbose(
                            "Modifying <input> z-index to be unselectable"
                          ),
                            _.addClass(m.hidden);
                        },
                      },
                      show: {
                        input: function () {
                          g.verbose(
                            "Modifying <input> z-index to be selectable"
                          ),
                            _.removeClass(m.hidden);
                        },
                      },
                      observeChanges: function () {
                        "MutationObserver" in t &&
                          ((r = new MutationObserver(function (e) {
                            g.debug(
                              "DOM tree modified, updating selector cache"
                            ),
                              g.refresh();
                          })).observe(y, { childList: !0, subtree: !0 }),
                          g.debug("Setting up mutation observer", r));
                      },
                      attachEvents: function (t, s) {
                        var i = e(t);
                        (s = e.isFunction(g[s]) ? g[s] : g.toggle),
                          i.length > 0
                            ? (g.debug(
                                "Attaching checkbox events to element",
                                t,
                                s
                              ),
                              i.on("click" + I, s))
                            : g.error(b.notFound);
                      },
                      preventDefaultOnInputTarget: function () {
                        "undefined" != typeof event &&
                          null !== event &&
                          e(event.target).is(C.input) &&
                          (g.verbose(
                            "Preventing default check action after manual check action"
                          ),
                          event.preventDefault());
                      },
                      event: {
                        change: function (e) {
                          g.should.ignoreCallbacks() || p.onChange.call(S);
                        },
                        click: function (t) {
                          var s = e(t.target);
                          s.is(C.input)
                            ? g.verbose(
                                "Using default check action on initialized checkbox"
                              )
                            : s.is(C.link)
                            ? g.debug(
                                "Clicking link inside checkbox, skipping toggle"
                              )
                            : (g.toggle(), _.focus(), t.preventDefault());
                        },
                        keydown: function (t) {
                          var s = t.which,
                            i = g.get.radios(),
                            o = i.index(v),
                            n = i.length,
                            r = !1;
                          if (
                            (37 == s || 38 == s
                              ? (r = (0 === o ? n : o) - 1)
                              : (39 != s && 40 != s) ||
                                (r = o === n - 1 ? 0 : o + 1),
                            !g.should.ignoreCallbacks() && !1 !== r)
                          ) {
                            if (!1 === p.beforeUnchecked.apply(S))
                              return (
                                g.verbose(
                                  "Option not allowed to be unchecked, cancelling key navigation"
                                ),
                                !1
                              );
                            if (
                              !1 ===
                              p.beforeChecked.apply(
                                e(i[r]).children(C.input)[0]
                              )
                            )
                              return (
                                g.verbose(
                                  "Next option should not allow check, cancelling key navigation"
                                ),
                                !1
                              );
                          }
                          27 == s
                            ? (g.verbose("Escape key pressed blurring field"),
                              _.blur(),
                              (k = !0))
                            : !t.ctrlKey &&
                              (32 == s || (13 == s && p.enableEnterKey))
                            ? (g.verbose(
                                "Enter/space key pressed, toggling checkbox"
                              ),
                              g.toggle(),
                              (k = !0))
                            : (k = !1);
                        },
                        keyup: function (e) {
                          k && e.preventDefault();
                        },
                      },
                      check: function () {
                        g.should.allowCheck() &&
                          (g.debug("Checking checkbox", _),
                          g.set.checked(),
                          g.should.ignoreCallbacks() ||
                            (p.onChecked.call(S), g.trigger.change()),
                          g.preventDefaultOnInputTarget());
                      },
                      uncheck: function () {
                        g.should.allowUncheck() &&
                          (g.debug("Unchecking checkbox"),
                          g.set.unchecked(),
                          g.should.ignoreCallbacks() ||
                            (p.onUnchecked.call(S), g.trigger.change()),
                          g.preventDefaultOnInputTarget());
                      },
                      indeterminate: function () {
                        g.should.allowIndeterminate()
                          ? g.debug("Checkbox is already indeterminate")
                          : (g.debug("Making checkbox indeterminate"),
                            g.set.indeterminate(),
                            g.should.ignoreCallbacks() ||
                              (p.onIndeterminate.call(S), g.trigger.change()));
                      },
                      determinate: function () {
                        g.should.allowDeterminate()
                          ? g.debug("Checkbox is already determinate")
                          : (g.debug("Making checkbox determinate"),
                            g.set.determinate(),
                            g.should.ignoreCallbacks() ||
                              (p.onDeterminate.call(S), g.trigger.change()));
                      },
                      enable: function () {
                        g.is.enabled()
                          ? g.debug("Checkbox is already enabled")
                          : (g.debug("Enabling checkbox"),
                            g.set.enabled(),
                            g.should.ignoreCallbacks() ||
                              (p.onEnable.call(S),
                              p.onEnabled.call(S),
                              g.trigger.change()));
                      },
                      disable: function () {
                        g.is.disabled()
                          ? g.debug("Checkbox is already disabled")
                          : (g.debug("Disabling checkbox"),
                            g.set.disabled(),
                            g.should.ignoreCallbacks() ||
                              (p.onDisable.call(S),
                              p.onDisabled.call(S),
                              g.trigger.change()));
                      },
                      get: {
                        radios: function () {
                          var t = g.get.name();
                          return e('input[name="' + t + '"]').closest(
                            C.checkbox
                          );
                        },
                        otherRadios: function () {
                          return g.get.radios().not(v);
                        },
                        name: function () {
                          return _.attr("name");
                        },
                      },
                      is: {
                        initialLoad: function () {
                          return x;
                        },
                        radio: function () {
                          return (
                            _.hasClass(m.radio) || "radio" == _.attr("type")
                          );
                        },
                        indeterminate: function () {
                          return (
                            _.prop("indeterminate") !== i &&
                            _.prop("indeterminate")
                          );
                        },
                        checked: function () {
                          return _.prop("checked") !== i && _.prop("checked");
                        },
                        disabled: function () {
                          return _.prop("disabled") !== i && _.prop("disabled");
                        },
                        enabled: function () {
                          return !g.is.disabled();
                        },
                        determinate: function () {
                          return !g.is.indeterminate();
                        },
                        unchecked: function () {
                          return !g.is.checked();
                        },
                      },
                      should: {
                        allowCheck: function () {
                          return g.is.determinate() &&
                            g.is.checked() &&
                            !g.is.initialLoad()
                            ? (g.debug(
                                "Should not allow check, checkbox is already checked"
                              ),
                              !1)
                            : !(
                                !g.should.ignoreCallbacks() &&
                                !1 === p.beforeChecked.apply(S) &&
                                (g.debug(
                                  "Should not allow check, beforeChecked cancelled"
                                ),
                                1)
                              );
                        },
                        allowUncheck: function () {
                          return g.is.determinate() &&
                            g.is.unchecked() &&
                            !g.is.initialLoad()
                            ? (g.debug(
                                "Should not allow uncheck, checkbox is already unchecked"
                              ),
                              !1)
                            : !(
                                !g.should.ignoreCallbacks() &&
                                !1 === p.beforeUnchecked.apply(S) &&
                                (g.debug(
                                  "Should not allow uncheck, beforeUnchecked cancelled"
                                ),
                                1)
                              );
                        },
                        allowIndeterminate: function () {
                          return g.is.indeterminate() && !g.is.initialLoad()
                            ? (g.debug(
                                "Should not allow indeterminate, checkbox is already indeterminate"
                              ),
                              !1)
                            : !(
                                !g.should.ignoreCallbacks() &&
                                !1 === p.beforeIndeterminate.apply(S) &&
                                (g.debug(
                                  "Should not allow indeterminate, beforeIndeterminate cancelled"
                                ),
                                1)
                              );
                        },
                        allowDeterminate: function () {
                          return g.is.determinate() && !g.is.initialLoad()
                            ? (g.debug(
                                "Should not allow determinate, checkbox is already determinate"
                              ),
                              !1)
                            : !(
                                !g.should.ignoreCallbacks() &&
                                !1 === p.beforeDeterminate.apply(S) &&
                                (g.debug(
                                  "Should not allow determinate, beforeDeterminate cancelled"
                                ),
                                1)
                              );
                        },
                        ignoreCallbacks: function () {
                          return x && !p.fireOnInit;
                        },
                      },
                      can: {
                        change: function () {
                          return !(
                            v.hasClass(m.disabled) ||
                            v.hasClass(m.readOnly) ||
                            _.prop("disabled") ||
                            _.prop("readonly")
                          );
                        },
                        uncheck: function () {
                          return "boolean" == typeof p.uncheckable
                            ? p.uncheckable
                            : !g.is.radio();
                        },
                      },
                      set: {
                        initialLoad: function () {
                          x = !0;
                        },
                        checked: function () {
                          g.verbose("Setting class to checked"),
                            v.removeClass(m.indeterminate).addClass(m.checked),
                            g.is.radio() && g.uncheckOthers(),
                            g.is.indeterminate() || !g.is.checked()
                              ? (g.verbose("Setting state to checked", S),
                                _.prop("indeterminate", !1).prop("checked", !0))
                              : g.debug(
                                  "Input is already checked, skipping input property change"
                                );
                        },
                        unchecked: function () {
                          g.verbose("Removing checked class"),
                            v
                              .removeClass(m.indeterminate)
                              .removeClass(m.checked),
                            g.is.indeterminate() || !g.is.unchecked()
                              ? (g.debug("Setting state to unchecked"),
                                _.prop("indeterminate", !1).prop("checked", !1))
                              : g.debug("Input is already unchecked");
                        },
                        indeterminate: function () {
                          g.verbose("Setting class to indeterminate"),
                            v.addClass(m.indeterminate),
                            g.is.indeterminate()
                              ? g.debug(
                                  "Input is already indeterminate, skipping input property change"
                                )
                              : (g.debug("Setting state to indeterminate"),
                                _.prop("indeterminate", !0));
                        },
                        determinate: function () {
                          g.verbose("Removing indeterminate class"),
                            v.removeClass(m.indeterminate),
                            g.is.determinate()
                              ? g.debug(
                                  "Input is already determinate, skipping input property change"
                                )
                              : (g.debug("Setting state to determinate"),
                                _.prop("indeterminate", !1));
                        },
                        disabled: function () {
                          g.verbose("Setting class to disabled"),
                            v.addClass(m.disabled),
                            g.is.disabled()
                              ? g.debug(
                                  "Input is already disabled, skipping input property change"
                                )
                              : (g.debug("Setting state to disabled"),
                                _.prop("disabled", "disabled"));
                        },
                        enabled: function () {
                          g.verbose("Removing disabled class"),
                            v.removeClass(m.disabled),
                            g.is.enabled()
                              ? g.debug(
                                  "Input is already enabled, skipping input property change"
                                )
                              : (g.debug("Setting state to enabled"),
                                _.prop("disabled", !1));
                        },
                        tabbable: function () {
                          g.verbose("Adding tabindex to checkbox"),
                            _.attr("tabindex") === i && _.attr("tabindex", 0);
                        },
                      },
                      remove: {
                        initialLoad: function () {
                          x = !1;
                        },
                      },
                      trigger: {
                        change: function () {
                          var e = _[0];
                          if (e) {
                            var t = s.createEvent("HTMLEvents");
                            g.verbose("Triggering native change event"),
                              t.initEvent("change", !0, !1),
                              e.dispatchEvent(t);
                          }
                        },
                      },
                      create: {
                        label: function () {
                          _.prevAll(C.label).length > 0
                            ? (_.prev(C.label).detach().insertAfter(_),
                              g.debug("Moving existing label", $))
                            : g.has.label() ||
                              (($ = e("<label>").insertAfter(_)),
                              g.debug("Creating label", $));
                        },
                      },
                      has: {
                        label: function () {
                          return $.length > 0;
                        },
                      },
                      bind: {
                        events: function () {
                          g.verbose("Attaching checkbox events"),
                            v
                              .on("click" + I, g.event.click)
                              .on("change" + I, g.event.change)
                              .on("keydown" + I, C.input, g.event.keydown)
                              .on("keyup" + I, C.input, g.event.keyup);
                        },
                      },
                      unbind: {
                        events: function () {
                          g.debug("Removing events"), v.off(I);
                        },
                      },
                      uncheckOthers: function () {
                        var e = g.get.otherRadios();
                        g.debug("Unchecking other radios", e),
                          e.removeClass(m.checked);
                      },
                      toggle: function () {
                        g.can.change()
                          ? g.is.indeterminate() || g.is.unchecked()
                            ? (g.debug("Currently unchecked"), g.check())
                            : g.is.checked() &&
                              g.can.uncheck() &&
                              (g.debug("Currently checked"), g.uncheck())
                          : g.is.radio() ||
                            g.debug(
                              "Checkbox is read-only or disabled, ignoring toggle"
                            );
                      },
                      setting: function (t, s) {
                        if (
                          (g.debug("Changing setting", t, s),
                          e.isPlainObject(t))
                        )
                          e.extend(!0, p, t);
                        else {
                          if (s === i) return p[t];
                          e.isPlainObject(p[t])
                            ? e.extend(!0, p[t], s)
                            : (p[t] = s);
                        }
                      },
                      internal: function (t, s) {
                        if (e.isPlainObject(t)) e.extend(!0, g, t);
                        else {
                          if (s === i) return g[t];
                          g[t] = s;
                        }
                      },
                      debug: function () {
                        !p.silent &&
                          p.debug &&
                          (p.performance
                            ? g.performance.log(arguments)
                            : ((g.debug = Function.prototype.bind.call(
                                console.info,
                                console,
                                p.name + ":"
                              )),
                              g.debug.apply(console, arguments)));
                      },
                      verbose: function () {
                        !p.silent &&
                          p.verbose &&
                          p.debug &&
                          (p.performance
                            ? g.performance.log(arguments)
                            : ((g.verbose = Function.prototype.bind.call(
                                console.info,
                                console,
                                p.name + ":"
                              )),
                              g.verbose.apply(console, arguments)));
                      },
                      error: function () {
                        p.silent ||
                          ((g.error = Function.prototype.bind.call(
                            console.error,
                            console,
                            p.name + ":"
                          )),
                          g.error.apply(console, arguments));
                      },
                      performance: {
                        log: function (e) {
                          var t, s;
                          p.performance &&
                            ((s = (t = new Date().getTime()) - (l || t)),
                            (l = t),
                            d.push({
                              Name: e[0],
                              Arguments: [].slice.call(e, 1) || "",
                              Element: y,
                              "Execution Time": s,
                            })),
                            clearTimeout(g.performance.timer),
                            (g.performance.timer = setTimeout(
                              g.performance.display,
                              500
                            ));
                        },
                        display: function () {
                          var t = p.name + ":",
                            s = 0;
                          (l = !1),
                            clearTimeout(g.performance.timer),
                            e.each(d, function (e, t) {
                              s += t["Execution Time"];
                            }),
                            (t += " " + s + "ms"),
                            a && (t += " '" + a + "'"),
                            (console.group !== i || console.table !== i) &&
                              d.length > 0 &&
                              (console.groupCollapsed(t),
                              console.table
                                ? console.table(d)
                                : e.each(d, function (e, t) {
                                    console.log(
                                      t.Name + ": " + t["Execution Time"] + "ms"
                                    );
                                  }),
                              console.groupEnd()),
                            (d = []);
                        },
                      },
                      invoke: function (t, s, o) {
                        var r,
                          a,
                          l,
                          d = T;
                        return (
                          (s = s || u),
                          (o = y || o),
                          "string" == typeof t &&
                            d !== i &&
                            ((t = t.split(/[\. ]/)),
                            (r = t.length - 1),
                            e.each(t, function (s, o) {
                              var n =
                                s != r
                                  ? o +
                                    t[s + 1].charAt(0).toUpperCase() +
                                    t[s + 1].slice(1)
                                  : t;
                              if (e.isPlainObject(d[n]) && s != r) d = d[n];
                              else {
                                if (d[n] !== i) return (a = d[n]), !1;
                                if (!e.isPlainObject(d[o]) || s == r)
                                  return d[o] !== i
                                    ? ((a = d[o]), !1)
                                    : (g.error(b.method, t), !1);
                                d = d[o];
                              }
                            })),
                          e.isFunction(a)
                            ? (l = a.apply(o, s))
                            : a !== i && (l = a),
                          Array.isArray(n)
                            ? n.push(l)
                            : n !== i
                            ? (n = [n, l])
                            : l !== i && (n = l),
                          a
                        );
                      },
                    }),
                      c
                        ? (T === i && g.initialize(), g.invoke(h))
                        : (T !== i && T.invoke("destroy"), g.initialize());
                  }),
                  n !== i ? n : this
                );
              }),
              (e.fn.checkbox.settings = {
                name: "Checkbox",
                namespace: "checkbox",
                silent: !1,
                debug: !1,
                verbose: !0,
                performance: !0,
                uncheckable: "auto",
                fireOnInit: !1,
                enableEnterKey: !0,
                onChange: function () {},
                beforeChecked: function () {},
                beforeUnchecked: function () {},
                beforeDeterminate: function () {},
                beforeIndeterminate: function () {},
                onChecked: function () {},
                onUnchecked: function () {},
                onDeterminate: function () {},
                onIndeterminate: function () {},
                onEnable: function () {},
                onDisable: function () {},
                onEnabled: function () {},
                onDisabled: function () {},
                className: {
                  checked: "checked",
                  indeterminate: "indeterminate",
                  disabled: "disabled",
                  hidden: "hidden",
                  radio: "radio",
                  readOnly: "read-only",
                },
                error: { method: "The method you called is not defined" },
                selector: {
                  checkbox: ".ui.checkbox",
                  label: "label, .box",
                  input: 'input[type="checkbox"], input[type="radio"]',
                  link: "a[href]",
                },
              });
          })(jQuery, window, document);
      },
      91290: (e, t, s) => {
        "use strict";
        s.d(t, { Z: () => a });
        var i = s(87537),
          o = s.n(i),
          n = s(23645),
          r = s.n(n)()(o());
        r.push([
          e.id,
          ':root{--ck-border-radius:4px;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:none;--ck-focus-disabled-outer-shadow:none;--ck-focus-error-outer-shadow:none;--ck-inner-shadow:none;--ck-font-face:"Lato","Helvetica Neue",Arial,Helvetica,sans-serif;--ck-icon-size:16px}.ck-button svg{opacity:.75!important}.ck-content pre,.ck-content pre code.code-block{background:#f7f8f9;border:none;font-size:13px;font-family:Roboto Mono,Lucida Console,Monaco,monospace;line-height:1.4}.ck-content code:not(.code-block){background:#f1f2f2;font-size:13px;font-family:Roboto Mono,Lucida Console,Monaco,monospace}.ck .ck-widget{transition:none}',
          "",
          {
            version: 3,
            sources: ["webpack://./resources/css/vendor/ckeditor/theme.css"],
            names: [],
            mappings:
              "AAAA,MACI,sBAAuB,CACvB,0CAA2C,CAC3C,4BAA6B,CAC7B,qCAAsC,CACtC,kCAAmC,CACnC,sBAAuB,CACvB,iEAAsE,CACtE,mBACJ,CAEA,eACI,qBACJ,CAEA,gDACI,kBAAmB,CACnB,WAAY,CACZ,cAAe,CACf,uDAA+D,CAC/D,eACJ,CAEA,kCACI,kBAAmB,CACnB,cAAe,CACf,uDACJ,CAEA,eACI,eACJ",
            sourcesContent: [
              ':root {\n    --ck-border-radius: 4px;\n    --ck-focus-outer-shadow-geometry: 0 0 0 3px;\n    --ck-focus-outer-shadow: none;\n    --ck-focus-disabled-outer-shadow: none;\n    --ck-focus-error-outer-shadow: none;\n    --ck-inner-shadow: none;\n    --ck-font-face: \'Lato\', \'Helvetica Neue\', Arial, Helvetica, sans-serif;\n    --ck-icon-size: calc(16px);\n}\n\n.ck-button svg {\n    opacity: 0.75 !important;\n}\n\n.ck-content pre, .ck-content pre code.code-block {\n    background: #f7f8f9;\n    border: none;\n    font-size: 13px;\n    font-family: "Roboto Mono", "Lucida Console", Monaco, monospace;\n    line-height: 1.4;\n}\n\n.ck-content code:not(.code-block) {\n    background: #f1f2f2;\n    font-size: 13px;\n    font-family: "Roboto Mono", "Lucida Console", Monaco, monospace;\n}\n\n.ck .ck-widget {\n    transition: none;\n}\n',
            ],
            sourceRoot: "",
          },
        ]);
        const a = r;
      },
      35095: (e, t, s) => {
        var i = {
          "./admin/auditing/index_controller.js": 59434,
          "./admin/auth/index_controller.js": 93078,
          "./admin/automation/index_controller.js": 57874,
          "./admin/backup/index_controller.js": 68683,
          "./admin/configurations/index_controller.js": 93072,
          "./admin/exports/index_controller.js": 11450,
          "./admin/fields/base.js": 66903,
          "./admin/fields/index_controller.js": 72318,
          "./admin/fields/sessions_controller.js": 85507,
          "./admin/groups/index_controller.js": 19170,
          "./admin/home/index_controller.js": 2905,
          "./admin/integrations/github/index_controller.js": 95654,
          "./admin/integrations/gitlab/index_controller.js": 77328,
          "./admin/integrations/index_controller.js": 77295,
          "./admin/integrations/issues/index_controller.js": 69694,
          "./admin/integrations/jira/index_controller.js": 18190,
          "./admin/milestones/index_controller.js": 2962,
          "./admin/projects/index_controller.js": 93223,
          "./admin/roles/index_controller.js": 33971,
          "./admin/settings/index_controller.js": 92738,
          "./admin/statuses/index_controller.js": 9e4,
          "./admin/subscription/index_controller.js": 79643,
          "./admin/users/index_controller.js": 4350,
          "./admin/workflows/base.js": 42456,
          "./admin/workflows/index_controller.js": 84140,
          "./admin/workflows/runs_controller.js": 14312,
          "./admin/workflows/sessions_controller.js": 70350,
          "./attachments/dialog_manage_controller.js": 50102,
          "./attachments/inline_gallery_controller.js": 48900,
          "./auth/complete_controller.js": 56026,
          "./auth/login2fa_controller.js": 75769,
          "./auth/login_controller.js": 62038,
          "./auth/reset_controller.js": 54340,
          "./automation/runs/index_controller.js": 77086,
          "./automation/runs/issues_controller.js": 6150,
          "./automation/runs/print_controller.js": 32050,
          "./automation/runs/results_controller.js": 47201,
          "./automation/runs/tests/comment_editor_controller.js": 78085,
          "./automation/runs/view_base.js": 57566,
          "./automation/runs/view_controller.js": 86954,
          "./automation/sources/index_controller.js": 85156,
          "./automation/sources/view_controller.js": 74491,
          "./behavior/carousel_controller.js": 22636,
          "./behavior/click_scroll_controller.js": 20503,
          "./behavior/copy_controller.js": 18162,
          "./behavior/float_input_controller.js": 1108,
          "./behavior/maxlength_counter_controller.js": 46486,
          "./behavior/number_input_controller.js": 78130,
          "./charts/highchart_controller.js": 22982,
          "./components/case_step_editor_controller.js": 41780,
          "./components/color_input_controller.js": 48507,
          "./components/dropdown_controller.js": 53484,
          "./components/editor_controller.js": 88800,
          "./components/embed_controller.js": 12703,
          "./components/filter_controller.js": 52476,
          "./components/folder_input_controller.js": 80828,
          "./components/grouper_controller.js": 12145,
          "./components/header_tabs_controller.js": 70981,
          "./components/icon_input_controller.js": 66586,
          "./components/inline_block_chart_controller.js": 39875,
          "./components/inline_tabs_controller.js": 96742,
          "./components/issue_input_controller.js": 42141,
          "./components/issue_list_controller.js": 17418,
          "./components/mix_content_controller.js": 69882,
          "./components/mix_controller.js": 73118,
          "./components/pager_controller.js": 20911,
          "./components/pagination_controller.js": 97603,
          "./components/password_input_controller.js": 56377,
          "./components/print_frame_controller.js": 5563,
          "./components/progress_controller.js": 5045,
          "./components/result_step_editor_controller.js": 92264,
          "./components/rich_text_controller.js": 17147,
          "./components/search_bar_controller.js": 50532,
          "./components/search_input_controller.js": 33395,
          "./components/select_controller.js": 49506,
          "./components/select_tabs_controller.js": 99892,
          "./components/steps_controller.js": 9967,
          "./components/table_controller.js": 11529,
          "./components/timer_input_controller.js": 18746,
          "./components/tree_controller.js": 56475,
          "./dev/charts_controller.js": 14826,
          "./dev/components_controller.js": 10037,
          "./dev/design_controller.js": 8443,
          "./dev/dialogs_controller.js": 93571,
          "./dev/dragdrop_controller.js": 90885,
          "./dev/editor_controller.js": 84167,
          "./dev/elements_controller.js": 72548,
          "./dev/errors_controller.js": 15917,
          "./dev/experiments_controller.js": 5935,
          "./dev/forms_controller.js": 4227,
          "./dev/header_controller.js": 32840,
          "./dev/integrations/github_controller.js": 8357,
          "./dev/integrations/gitlab_controller.js": 42221,
          "./dev/integrations/jira_cloud_controller.js": 92641,
          "./dev/integrations/slack_controller.js": 14397,
          "./dev/metrics_controller.js": 3279,
          "./dev/mix_content_controller.js": 83550,
          "./dev/mix_panes_controller.js": 63541,
          "./dev/popups_controller.js": 30408,
          "./dev/presence_controller.js": 73022,
          "./dev/print_controller.js": 69672,
          "./dev/repository_controller.js": 46205,
          "./dev/steps_controller.js": 17909,
          "./dev/tables_controller.js": 46146,
          "./dev/trees_controller.js": 4221,
          "./home/index_controller.js": 27031,
          "./interop/jira-connect/errors/default_controller.js": 6015,
          "./interop/jira-connect/issues/view_controller.js": 13287,
          "./layout/navbar_controller.js": 15538,
          "./layout/sidebar_controller.js": 68097,
          "./milestones/activity_controller.js": 76671,
          "./milestones/completed_controller.js": 4457,
          "./milestones/index_controller.js": 6924,
          "./milestones/issues_controller.js": 53640,
          "./milestones/status_controller.js": 29392,
          "./milestones/view_base.js": 10313,
          "./milestones/view_controller.js": 49579,
          "./projects/docs_controller.js": 99911,
          "./projects/index_controller.js": 91552,
          "./repositories/cases/comment_editor_controller.js": 55542,
          "./repositories/index_controller.js": 29930,
          "./repositories/print_controller.js": 83980,
          "./resources/panel_controller.js": 41885,
          "./runs/activity_controller.js": 86182,
          "./runs/closed_controller.js": 17632,
          "./runs/index_base.js": 50307,
          "./runs/index_controller.js": 92228,
          "./runs/issues_controller.js": 85890,
          "./runs/print_controller.js": 95933,
          "./runs/results/note_editor_controller.js": 77676,
          "./runs/status_controller.js": 98911,
          "./runs/view_base.js": 34740,
          "./runs/view_controller.js": 20267,
          "./sessions/closed_controller.js": 45606,
          "./sessions/index_base.js": 64386,
          "./sessions/index_controller.js": 80013,
          "./sessions/print_controller.js": 52858,
          "./sessions/result_editor_controller.js": 76950,
          "./sessions/view_controller.js": 90650,
          "./todos/index_controller.js": 47491,
          "./users/oauth/callback_controller.js": 15989,
          "./users/oauth/redirect_controller.js": 25218,
          "./users/profile/index_controller.js": 73174,
        };
        function o(e) {
          var t = n(e);
          return s(t);
        }
        function n(e) {
          if (!s.o(i, e)) {
            var t = new Error("Cannot find module '" + e + "'");
            throw ((t.code = "MODULE_NOT_FOUND"), t);
          }
          return i[e];
        }
        (o.keys = function () {
          return Object.keys(i);
        }),
          (o.resolve = n),
          (e.exports = o),
          (o.id = 35095);
      },
      85086: (e, t, s) => {
        var i = {
          "./checkbox.js": 19339,
          "./date.js": 45291,
          "./dropdown.js": 17327,
          "./float.js": 11637,
          "./integer.js": 69646,
          "./multiselect.js": 35970,
          "./steps.js": 97299,
          "./string.js": 21454,
          "./text.js": 80770,
          "./url.js": 85853,
        };
        function o(e) {
          var t = n(e);
          return s(t);
        }
        function n(e) {
          if (!s.o(i, e)) {
            var t = new Error("Cannot find module '" + e + "'");
            throw ((t.code = "MODULE_NOT_FOUND"), t);
          }
          return i[e];
        }
        (o.keys = function () {
          return Object.keys(i);
        }),
          (o.resolve = n),
          (e.exports = o),
          (o.id = 85086);
      },
    },
    n = {};
  function r(e) {
    var t = n[e];
    if (void 0 !== t) return t.exports;
    var s = (n[e] = { id: e, loaded: !1, exports: {} });
    return o[e].call(s.exports, s, s.exports, r), (s.loaded = !0), s.exports;
  }
  (r.m = o),
    (e = []),
    (r.O = (t, s, i, o) => {
      if (!s) {
        var n = 1 / 0;
        for (h = 0; h < e.length; h++) {
          for (var [s, i, o] = e[h], a = !0, l = 0; l < s.length; l++)
            (!1 & o || n >= o) && Object.keys(r.O).every((e) => r.O[e](s[l]))
              ? s.splice(l--, 1)
              : ((a = !1), o < n && (n = o));
          if (a) {
            e.splice(h--, 1);
            var d = i();
            void 0 !== d && (t = d);
          }
        }
        return t;
      }
      o = o || 0;
      for (var h = e.length; h > 0 && e[h - 1][2] > o; h--) e[h] = e[h - 1];
      e[h] = [s, i, o];
    }),
    (r.n = (e) => {
      var t = e && e.__esModule ? () => e.default : () => e;
      return r.d(t, { a: t }), t;
    }),
    (s = Object.getPrototypeOf
      ? (e) => Object.getPrototypeOf(e)
      : (e) => e.__proto__),
    (r.t = function (e, i) {
      if ((1 & i && (e = this(e)), 8 & i)) return e;
      if ("object" == typeof e && e) {
        if (4 & i && e.__esModule) return e;
        if (16 & i && "function" == typeof e.then) return e;
      }
      var o = Object.create(null);
      r.r(o);
      var n = {};
      t = t || [null, s({}), s([]), s(s)];
      for (var a = 2 & i && e; "object" == typeof a && !~t.indexOf(a); a = s(a))
        Object.getOwnPropertyNames(a).forEach((t) => (n[t] = () => e[t]));
      return (n.default = () => e), r.d(o, n), o;
    }),
    (r.d = (e, t) => {
      for (var s in t)
        r.o(t, s) &&
          !r.o(e, s) &&
          Object.defineProperty(e, s, { enumerable: !0, get: t[s] });
    }),
    (r.f = {}),
    (r.e = (e) =>
      Promise.all(Object.keys(r.f).reduce((t, s) => (r.f[s](e, t), t), []))),
    (r.u = (e) => ({ 262: "vendor-csv", 906: "vendor-xml" }[e] + ".js")),
    (r.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (e) {
        if ("object" == typeof window) return window;
      }
    })()),
    (r.hmd = (e) => (
      (e = Object.create(e)).children || (e.children = []),
      Object.defineProperty(e, "exports", {
        enumerable: !0,
        set: () => {
          throw new Error(
            "ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: " +
              e.id
          );
        },
      }),
      e
    )),
    (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (i = {}),
    (r.l = (e, t, s, o) => {
      if (i[e]) i[e].push(t);
      else {
        var n, a;
        if (void 0 !== s)
          for (
            var l = document.getElementsByTagName("script"), d = 0;
            d < l.length;
            d++
          ) {
            var h = l[d];
            if (h.getAttribute("src") == e) {
              n = h;
              break;
            }
          }
        n ||
          ((a = !0),
          ((n = document.createElement("script")).charset = "utf-8"),
          (n.timeout = 120),
          r.nc && n.setAttribute("nonce", r.nc),
          (n.src = e)),
          (i[e] = [t]);
        var c = (t, s) => {
            (n.onerror = n.onload = null), clearTimeout(u);
            var o = i[e];
            if (
              (delete i[e],
              n.parentNode && n.parentNode.removeChild(n),
              o && o.forEach((e) => e(s)),
              t)
            )
              return t(s);
          },
          u = setTimeout(
            c.bind(null, void 0, { type: "timeout", target: n }),
            12e4
          );
        (n.onerror = c.bind(null, n.onerror)),
          (n.onload = c.bind(null, n.onload)),
          a && document.head.appendChild(n);
      }
    }),
    (r.r = (e) => {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    }),
    (r.nmd = (e) => ((e.paths = []), e.children || (e.children = []), e)),
    (() => {
      var e;
      r.g.importScripts && (e = r.g.location + "");
      var t = r.g.document;
      if (!e && t && (t.currentScript && (e = t.currentScript.src), !e)) {
        var s = t.getElementsByTagName("script");
        s.length && (e = s[s.length - 1].src);
      }
      if (!e)
        throw new Error(
          "Automatic publicPath is not supported in this browser"
        );
      (e = e
        .replace(/#.*$/, "")
        .replace(/\?.*$/, "")
        .replace(/\/[^\/]+$/, "/")),
        (r.p = e);
    })(),
    (() => {
      var e = { 143: 0 };
      (r.f.j = (t, s) => {
        var i = r.o(e, t) ? e[t] : void 0;
        if (0 !== i)
          if (i) s.push(i[2]);
          else {
            var o = new Promise((s, o) => (i = e[t] = [s, o]));
            s.push((i[2] = o));
            var n = r.p + r.u(t),
              a = new Error();
            r.l(
              n,
              (s) => {
                if (r.o(e, t) && (0 !== (i = e[t]) && (e[t] = void 0), i)) {
                  var o = s && ("load" === s.type ? "missing" : s.type),
                    n = s && s.target && s.target.src;
                  (a.message =
                    "Loading chunk " + t + " failed.\n(" + o + ": " + n + ")"),
                    (a.name = "ChunkLoadError"),
                    (a.type = o),
                    (a.request = n),
                    i[1](a);
                }
              },
              "chunk-" + t,
              t
            );
          }
      }),
        (r.O.j = (t) => 0 === e[t]);
      var t = (t, s) => {
          var i,
            o,
            [n, a, l] = s,
            d = 0;
          if (n.some((t) => 0 !== e[t])) {
            for (i in a) r.o(a, i) && (r.m[i] = a[i]);
            if (l) var h = l(r);
          }
          for (t && t(s); d < n.length; d++)
            (o = n[d]), r.o(e, o) && e[o] && e[o][0](), (e[o] = 0);
          return r.O(h);
        },
        s = (self.webpackChunk = self.webpackChunk || []);
      s.forEach(t.bind(null, 0)), (s.push = t.bind(null, s.push.bind(s)));
    })();
  var a = r.O(void 0, [736], () => r(58649));
  a = r.O(a);
})();
//# sourceMappingURL=app.js.map
